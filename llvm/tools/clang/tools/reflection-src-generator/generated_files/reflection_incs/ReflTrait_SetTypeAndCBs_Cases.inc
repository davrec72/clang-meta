case RK_llvm__APInt: {
# define CLASSNAME (llvm::APInt)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_MAYBEPTR(1, CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::llvm__APInt;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( needsCleanup, Result, X->needsCleanup() )
    case currefl::Profile: {
      ASSERT_TRAIT_IS_REFLPROP(Profile)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::FoldingSetNodeID &), p0)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->Profile((class llvm::FoldingSetNodeID &)p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( isNegative, Result, X->isNegative() )
    case_REFLPROP_0ARGS( isNonNegative, Result, X->isNonNegative() )
    case_REFLPROP_0ARGS( isSignBitSet, Result, X->isSignBitSet() )
    case_REFLPROP_0ARGS( isSignBitClear, Result, X->isSignBitClear() )
    case_REFLPROP_0ARGS( isStrictlyPositive, Result, X->isStrictlyPositive() )
    case_REFLPROP_0ARGS( isAllOnesValue, Result, X->isAllOnesValue() )
    case_REFLPROP_0ARGS( isNullValue, Result, X->isNullValue() )
    case_REFLPROP_0ARGS( isOneValue, Result, X->isOneValue() )
    case_REFLPROP_0ARGS( isMaxValue, Result, X->isMaxValue() )
    case_REFLPROP_0ARGS( isMaxSignedValue, Result, X->isMaxSignedValue() )
    case_REFLPROP_0ARGS( isMinValue, Result, X->isMinValue() )
    case_REFLPROP_0ARGS( isMinSignedValue, Result, X->isMinSignedValue() )
    case currefl::isIntN: {
      ASSERT_TRAIT_IS_REFLPROP(isIntN)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isIntN(p0))
      };
      break;
    }
    case currefl::isSignedIntN: {
      ASSERT_TRAIT_IS_REFLPROP(isSignedIntN)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isSignedIntN(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( isPowerOf2, Result, X->isPowerOf2() )
    case_REFLPROP_0ARGS( isSignMask, Result, X->isSignMask() )
    case_REFLPROP_0ARGS( getBoolValue, Result, X->getBoolValue() )
    case currefl::getLimitedValue: {
      ASSERT_TRAIT_IS_REFLPROP(getLimitedValue)
      SET_PRIM_TYPE(unsigned long long)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Result, X->getLimitedValue())
        LOAD_VAL((unsigned long long), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getLimitedValue(p0))
      };
      break;
    }
    case currefl::isSplat: {
      ASSERT_TRAIT_IS_REFLPROP(isSplat)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isSplat(p0))
      };
      break;
    }
    case currefl::isMask: {
      ASSERT_TRAIT_IS_REFLPROP(isMask)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isMask(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( isMask1, Result, X->isMask() )
    case_REFLPROP_0ARGS( isShiftedMask, Result, X->isShiftedMask() )
    case currefl::isSameValue: {
      ASSERT_TRAIT_IS_REFLPROP(isSameValue)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class llvm::APInt &), p0)
        LOAD_VAL((const class llvm::APInt &), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isSameValue(p0, p1))
      };
      break;
    }
    case_REFLPROP_0ARGS( getRawData, Result, X->getRawData() )
    case_REFLPROP_0ARGS( operator_not, Result, X->operator!() )
    case currefl::urem: {
      ASSERT_TRAIT_IS_REFLPROP(urem)
      SET_PRIM_TYPE(unsigned long long)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((unsigned long long), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->urem(p0))
      };
      break;
    }
    case currefl::srem: {
      ASSERT_TRAIT_IS_REFLPROP(srem)
      SET_PRIM_TYPE(long long)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((long long), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->srem(p0))
      };
      break;
    }
    case currefl::udivrem: {
      ASSERT_TRAIT_IS_REFLPROP(udivrem)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class llvm::APInt &), p0)
        LOAD_VAL((const class llvm::APInt &), p1)
        LOAD_VAL((class llvm::APInt &), p2)
        LOAD_VAL((class llvm::APInt &), p3)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->udivrem((const class llvm::APInt &)p0, (const class llvm::APInt &)p1, (class llvm::APInt &)p2, (class llvm::APInt &)p3))
      };
      break;
    }
    case currefl::sdivrem: {
      ASSERT_TRAIT_IS_REFLPROP(sdivrem)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class llvm::APInt &), p0)
        LOAD_VAL((const class llvm::APInt &), p1)
        LOAD_VAL((class llvm::APInt &), p2)
        LOAD_VAL((class llvm::APInt &), p3)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->sdivrem((const class llvm::APInt &)p0, (const class llvm::APInt &)p1, (class llvm::APInt &)p2, (class llvm::APInt &)p3))
      };
      break;
    }
    case currefl::operator_sub: {
      ASSERT_TRAIT_IS_REFLPROP(operator_sub)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->operator[](p0))
      };
      break;
    }
    case currefl::operator_eq_eq: {
      ASSERT_TRAIT_IS_REFLPROP(operator_eq_eq)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class llvm::APInt &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->operator==(p0))
      };
      break;
    }
    case currefl::operator_eq_eq1: {
      ASSERT_TRAIT_IS_REFLPROP(operator_eq_eq1)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((unsigned long long), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->operator==(p0))
      };
      break;
    }
    case currefl::eq: {
      ASSERT_TRAIT_IS_REFLPROP(eq)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class llvm::APInt &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->eq(p0))
      };
      break;
    }
    case currefl::operator_not_eq: {
      ASSERT_TRAIT_IS_REFLPROP(operator_not_eq)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class llvm::APInt &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->operator!=(p0))
      };
      break;
    }
    case currefl::operator_not_eq1: {
      ASSERT_TRAIT_IS_REFLPROP(operator_not_eq1)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((unsigned long long), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->operator!=(p0))
      };
      break;
    }
    case currefl::ne: {
      ASSERT_TRAIT_IS_REFLPROP(ne)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class llvm::APInt &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->ne(p0))
      };
      break;
    }
    case currefl::ult: {
      ASSERT_TRAIT_IS_REFLPROP(ult)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class llvm::APInt &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->ult(p0))
      };
      break;
    }
    case currefl::ult1: {
      ASSERT_TRAIT_IS_REFLPROP(ult1)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((unsigned long long), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->ult(p0))
      };
      break;
    }
    case currefl::slt: {
      ASSERT_TRAIT_IS_REFLPROP(slt)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class llvm::APInt &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->slt(p0))
      };
      break;
    }
    case currefl::slt1: {
      ASSERT_TRAIT_IS_REFLPROP(slt1)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((long long), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->slt(p0))
      };
      break;
    }
    case currefl::ule: {
      ASSERT_TRAIT_IS_REFLPROP(ule)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class llvm::APInt &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->ule(p0))
      };
      break;
    }
    case currefl::ule1: {
      ASSERT_TRAIT_IS_REFLPROP(ule1)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((unsigned long long), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->ule(p0))
      };
      break;
    }
    case currefl::sle: {
      ASSERT_TRAIT_IS_REFLPROP(sle)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class llvm::APInt &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->sle(p0))
      };
      break;
    }
    case currefl::sle1: {
      ASSERT_TRAIT_IS_REFLPROP(sle1)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((unsigned long long), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->sle(p0))
      };
      break;
    }
    case currefl::ugt: {
      ASSERT_TRAIT_IS_REFLPROP(ugt)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class llvm::APInt &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->ugt(p0))
      };
      break;
    }
    case currefl::ugt1: {
      ASSERT_TRAIT_IS_REFLPROP(ugt1)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((unsigned long long), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->ugt(p0))
      };
      break;
    }
    case currefl::sgt: {
      ASSERT_TRAIT_IS_REFLPROP(sgt)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class llvm::APInt &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->sgt(p0))
      };
      break;
    }
    case currefl::sgt1: {
      ASSERT_TRAIT_IS_REFLPROP(sgt1)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((long long), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->sgt(p0))
      };
      break;
    }
    case currefl::uge: {
      ASSERT_TRAIT_IS_REFLPROP(uge)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class llvm::APInt &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->uge(p0))
      };
      break;
    }
    case currefl::uge1: {
      ASSERT_TRAIT_IS_REFLPROP(uge1)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((unsigned long long), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->uge(p0))
      };
      break;
    }
    case currefl::sge: {
      ASSERT_TRAIT_IS_REFLPROP(sge)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class llvm::APInt &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->sge(p0))
      };
      break;
    }
    case currefl::sge1: {
      ASSERT_TRAIT_IS_REFLPROP(sge1)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((long long), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->sge(p0))
      };
      break;
    }
    case currefl::intersects: {
      ASSERT_TRAIT_IS_REFLPROP(intersects)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class llvm::APInt &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->intersects(p0))
      };
      break;
    }
    case currefl::isSubsetOf: {
      ASSERT_TRAIT_IS_REFLPROP(isSubsetOf)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class llvm::APInt &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isSubsetOf(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getBitWidth, Result, X->getBitWidth() )
    case_REFLPROP_0ARGS( getNumWords, Result, X->getNumWords() )
    case currefl::getNumWords1: {
      ASSERT_TRAIT_IS_REFLPROP(getNumWords1)
      SET_PRIM_TYPE(unsigned int)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getNumWords(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getActiveBits, Result, X->getActiveBits() )
    case_REFLPROP_0ARGS( getActiveWords, Result, X->getActiveWords() )
    case_REFLPROP_0ARGS( getMinSignedBits, Result, X->getMinSignedBits() )
    case_REFLPROP_0ARGS( getZExtValue, Result, X->getZExtValue() )
    case_REFLPROP_0ARGS( getSExtValue, Result, X->getSExtValue() )
    case currefl::getBitsNeeded: {
      ASSERT_TRAIT_IS_REFLPROP(getBitsNeeded)
      SET_PRIM_TYPE(unsigned int)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const char *), p0)
        LOAD_VAL((unsigned char), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getBitsNeeded(p0, p1))
      };
      break;
    }
    case_REFLPROP_0ARGS( countLeadingZeros, Result, X->countLeadingZeros() )
    case_REFLPROP_0ARGS( countLeadingOnes, Result, X->countLeadingOnes() )
    case_REFLPROP_0ARGS( getNumSignBits, Result, X->getNumSignBits() )
    case_REFLPROP_0ARGS( countTrailingZeros, Result, X->countTrailingZeros() )
    case_REFLPROP_0ARGS( countTrailingOnes, Result, X->countTrailingOnes() )
    case_REFLPROP_0ARGS( countPopulation, Result, X->countPopulation() )
    case currefl::print: {
      ASSERT_TRAIT_IS_REFLPROP(print)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::raw_ostream &), p0)
        LOAD_VAL((bool), p1)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->print((class llvm::raw_ostream &)p0, (bool)p1))
      };
      break;
    }
    case currefl::toString: {
      ASSERT_TRAIT_IS_REFLPROP(toString)
      SET_PRIM_TYPE(const char *)
      SET_CALLBACK(Str) {
        LOAD_VAL_X(Str)
        LOAD_VAL((unsigned int), p0)
        LOAD_VAL((bool), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Str, X->toString(p0, p1))
      };
      break;
    }
    case currefl::roundToDouble: {
      ASSERT_TRAIT_IS_REFLPROP(roundToDouble)
      SET_PRIM_TYPE(double)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((bool), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->roundToDouble(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( roundToDouble1, Result, X->roundToDouble() )
    case_REFLPROP_0ARGS( signedRoundToDouble, Result, X->signedRoundToDouble() )
    case_REFLPROP_0ARGS( bitsToDouble, Result, X->bitsToDouble() )
    case_REFLPROP_0ARGS( bitsToFloat, Result, X->bitsToFloat() )
    case_REFLPROP_0ARGS( logBase2, Result, X->logBase2() )
    case_REFLPROP_0ARGS( ceilLogBase2, Result, X->ceilLogBase2() )
    case_REFLPROP_0ARGS( nearestLogBase2, Result, X->nearestLogBase2() )
    case_REFLPROP_0ARGS( exactLogBase2, Result, X->exactLogBase2() )
    case_REFLPROP_0ARGS( magic, Type, X->magic() )
    case currefl::magicu: {
      ASSERT_TRAIT_IS_REFLPROP(magicu)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Type, X->magicu())
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->magicu(p0))
      };
      break;
    }
    case currefl::tcSet: {
      ASSERT_TRAIT_IS_REFLPROP(tcSet)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((unsigned long long *), p0)
        LOAD_VAL((unsigned long long), p1)
        LOAD_VAL((unsigned int), p2)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->tcSet((llvm::APInt::WordType *)p0, (llvm::APInt::WordType)p1, (unsigned int)p2))
      };
      break;
    }
    case currefl::tcAssign: {
      ASSERT_TRAIT_IS_REFLPROP(tcAssign)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((unsigned long long *), p0)
        LOAD_VAL((const unsigned long long *), p1)
        LOAD_VAL((unsigned int), p2)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->tcAssign((llvm::APInt::WordType *)p0, (const llvm::APInt::WordType *)p1, (unsigned int)p2))
      };
      break;
    }
    case currefl::tcIsZero: {
      ASSERT_TRAIT_IS_REFLPROP(tcIsZero)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const unsigned long long *), p0)
        LOAD_VAL((unsigned int), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->tcIsZero(p0, p1))
      };
      break;
    }
    case currefl::tcExtractBit: {
      ASSERT_TRAIT_IS_REFLPROP(tcExtractBit)
      SET_PRIM_TYPE(int)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const unsigned long long *), p0)
        LOAD_VAL((unsigned int), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->tcExtractBit(p0, p1))
      };
      break;
    }
    case currefl::tcExtract: {
      ASSERT_TRAIT_IS_REFLPROP(tcExtract)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((unsigned long long *), p0)
        LOAD_VAL((unsigned int), p1)
        LOAD_VAL((const unsigned long long *), p2)
        LOAD_VAL((unsigned int), p3)
        LOAD_VAL((unsigned int), p4)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->tcExtract((llvm::APInt::WordType *)p0, (unsigned int)p1, (const llvm::APInt::WordType *)p2, (unsigned int)p3, (unsigned int)p4))
      };
      break;
    }
    case currefl::tcSetBit: {
      ASSERT_TRAIT_IS_REFLPROP(tcSetBit)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((unsigned long long *), p0)
        LOAD_VAL((unsigned int), p1)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->tcSetBit((llvm::APInt::WordType *)p0, (unsigned int)p1))
      };
      break;
    }
    case currefl::tcClearBit: {
      ASSERT_TRAIT_IS_REFLPROP(tcClearBit)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((unsigned long long *), p0)
        LOAD_VAL((unsigned int), p1)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->tcClearBit((llvm::APInt::WordType *)p0, (unsigned int)p1))
      };
      break;
    }
    case currefl::tcLSB: {
      ASSERT_TRAIT_IS_REFLPROP(tcLSB)
      SET_PRIM_TYPE(unsigned int)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const unsigned long long *), p0)
        LOAD_VAL((unsigned int), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->tcLSB(p0, p1))
      };
      break;
    }
    case currefl::tcMSB: {
      ASSERT_TRAIT_IS_REFLPROP(tcMSB)
      SET_PRIM_TYPE(unsigned int)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const unsigned long long *), p0)
        LOAD_VAL((unsigned int), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->tcMSB(p0, p1))
      };
      break;
    }
    case currefl::tcNegate: {
      ASSERT_TRAIT_IS_REFLPROP(tcNegate)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((unsigned long long *), p0)
        LOAD_VAL((unsigned int), p1)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->tcNegate((llvm::APInt::WordType *)p0, (unsigned int)p1))
      };
      break;
    }
    case currefl::tcAdd: {
      ASSERT_TRAIT_IS_REFLPROP(tcAdd)
      SET_PRIM_TYPE(unsigned long long)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((unsigned long long *), p0)
        LOAD_VAL((const unsigned long long *), p1)
        LOAD_VAL((unsigned long long), p2)
        LOAD_VAL((unsigned int), p3)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->tcAdd(p0, p1, p2, p3))
      };
      break;
    }
    case currefl::tcAddPart: {
      ASSERT_TRAIT_IS_REFLPROP(tcAddPart)
      SET_PRIM_TYPE(unsigned long long)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((unsigned long long *), p0)
        LOAD_VAL((unsigned long long), p1)
        LOAD_VAL((unsigned int), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->tcAddPart(p0, p1, p2))
      };
      break;
    }
    case currefl::tcSubtract: {
      ASSERT_TRAIT_IS_REFLPROP(tcSubtract)
      SET_PRIM_TYPE(unsigned long long)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((unsigned long long *), p0)
        LOAD_VAL((const unsigned long long *), p1)
        LOAD_VAL((unsigned long long), p2)
        LOAD_VAL((unsigned int), p3)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->tcSubtract(p0, p1, p2, p3))
      };
      break;
    }
    case currefl::tcSubtractPart: {
      ASSERT_TRAIT_IS_REFLPROP(tcSubtractPart)
      SET_PRIM_TYPE(unsigned long long)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((unsigned long long *), p0)
        LOAD_VAL((unsigned long long), p1)
        LOAD_VAL((unsigned int), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->tcSubtractPart(p0, p1, p2))
      };
      break;
    }
    case currefl::tcMultiplyPart: {
      ASSERT_TRAIT_IS_REFLPROP(tcMultiplyPart)
      SET_PRIM_TYPE(int)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((unsigned long long *), p0)
        LOAD_VAL((const unsigned long long *), p1)
        LOAD_VAL((unsigned long long), p2)
        LOAD_VAL((unsigned long long), p3)
        LOAD_VAL((unsigned int), p4)
        LOAD_VAL((unsigned int), p5)
        LOAD_VAL((bool), p6)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->tcMultiplyPart(p0, p1, p2, p3, p4, p5, p6))
      };
      break;
    }
    case currefl::tcMultiply: {
      ASSERT_TRAIT_IS_REFLPROP(tcMultiply)
      SET_PRIM_TYPE(int)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((unsigned long long *), p0)
        LOAD_VAL((const unsigned long long *), p1)
        LOAD_VAL((const unsigned long long *), p2)
        LOAD_VAL((unsigned int), p3)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->tcMultiply(p0, p1, p2, p3))
      };
      break;
    }
    case currefl::tcFullMultiply: {
      ASSERT_TRAIT_IS_REFLPROP(tcFullMultiply)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((unsigned long long *), p0)
        LOAD_VAL((const unsigned long long *), p1)
        LOAD_VAL((const unsigned long long *), p2)
        LOAD_VAL((unsigned int), p3)
        LOAD_VAL((unsigned int), p4)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->tcFullMultiply((llvm::APInt::WordType *)p0, (const llvm::APInt::WordType *)p1, (const llvm::APInt::WordType *)p2, (unsigned int)p3, (unsigned int)p4))
      };
      break;
    }
    case currefl::tcDivide: {
      ASSERT_TRAIT_IS_REFLPROP(tcDivide)
      SET_PRIM_TYPE(int)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((unsigned long long *), p0)
        LOAD_VAL((const unsigned long long *), p1)
        LOAD_VAL((unsigned long long *), p2)
        LOAD_VAL((unsigned long long *), p3)
        LOAD_VAL((unsigned int), p4)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->tcDivide(p0, p1, p2, p3, p4))
      };
      break;
    }
    case currefl::tcShiftLeft: {
      ASSERT_TRAIT_IS_REFLPROP(tcShiftLeft)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((unsigned long long *), p0)
        LOAD_VAL((unsigned int), p1)
        LOAD_VAL((unsigned int), p2)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->tcShiftLeft((llvm::APInt::WordType *)p0, (unsigned int)p1, (unsigned int)p2))
      };
      break;
    }
    case currefl::tcShiftRight: {
      ASSERT_TRAIT_IS_REFLPROP(tcShiftRight)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((unsigned long long *), p0)
        LOAD_VAL((unsigned int), p1)
        LOAD_VAL((unsigned int), p2)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->tcShiftRight((llvm::APInt::WordType *)p0, (unsigned int)p1, (unsigned int)p2))
      };
      break;
    }
    case currefl::tcAnd: {
      ASSERT_TRAIT_IS_REFLPROP(tcAnd)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((unsigned long long *), p0)
        LOAD_VAL((const unsigned long long *), p1)
        LOAD_VAL((unsigned int), p2)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->tcAnd((llvm::APInt::WordType *)p0, (const llvm::APInt::WordType *)p1, (unsigned int)p2))
      };
      break;
    }
    case currefl::tcOr: {
      ASSERT_TRAIT_IS_REFLPROP(tcOr)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((unsigned long long *), p0)
        LOAD_VAL((const unsigned long long *), p1)
        LOAD_VAL((unsigned int), p2)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->tcOr((llvm::APInt::WordType *)p0, (const llvm::APInt::WordType *)p1, (unsigned int)p2))
      };
      break;
    }
    case currefl::tcXor: {
      ASSERT_TRAIT_IS_REFLPROP(tcXor)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((unsigned long long *), p0)
        LOAD_VAL((const unsigned long long *), p1)
        LOAD_VAL((unsigned int), p2)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->tcXor((llvm::APInt::WordType *)p0, (const llvm::APInt::WordType *)p1, (unsigned int)p2))
      };
      break;
    }
    case currefl::tcComplement: {
      ASSERT_TRAIT_IS_REFLPROP(tcComplement)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((unsigned long long *), p0)
        LOAD_VAL((unsigned int), p1)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->tcComplement((llvm::APInt::WordType *)p0, (unsigned int)p1))
      };
      break;
    }
    case currefl::tcCompare: {
      ASSERT_TRAIT_IS_REFLPROP(tcCompare)
      SET_PRIM_TYPE(int)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const unsigned long long *), p0)
        LOAD_VAL((const unsigned long long *), p1)
        LOAD_VAL((unsigned int), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->tcCompare(p0, p1, p2))
      };
      break;
    }
    case currefl::tcIncrement: {
      ASSERT_TRAIT_IS_REFLPROP(tcIncrement)
      SET_PRIM_TYPE(unsigned long long)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((unsigned long long *), p0)
        LOAD_VAL((unsigned int), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->tcIncrement(p0, p1))
      };
      break;
    }
    case currefl::tcDecrement: {
      ASSERT_TRAIT_IS_REFLPROP(tcDecrement)
      SET_PRIM_TYPE(unsigned long long)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((unsigned long long *), p0)
        LOAD_VAL((unsigned int), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->tcDecrement(p0, p1))
      };
      break;
    }
    case currefl::tcSetLeastSignificantBits: {
      ASSERT_TRAIT_IS_REFLPROP(tcSetLeastSignificantBits)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((unsigned long long *), p0)
        LOAD_VAL((unsigned int), p1)
        LOAD_VAL((unsigned int), p2)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->tcSetLeastSignificantBits((llvm::APInt::WordType *)p0, (unsigned int)p1, (unsigned int)p2))
      };
      break;
    }
    case currefl::dump: {
      ASSERT_TRAIT_IS_REFLPROP(dump)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        ASSERT_NO_MORE  VOID_REFLECTION(X->dump())
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_llvm__APInt__ms: {
# define CLASSNAME (llvm::APInt::ms)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_NEVERPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::llvm__APInt__ms;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS(s, Result, X->s)
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_llvm__APInt__mu: {
# define CLASSNAME (llvm::APInt::mu)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_NEVERPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::llvm__APInt__mu;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS(a, Result, X->a)
    case_REFLPROP_0ARGS(s, Result, X->s)
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_llvm__APFloatBase: {
# define CLASSNAME (llvm::APFloatBase)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::llvm__APFloatBase;
  switch( (currefl::memnames)MemNum ) {
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_llvm__APFloat: {
# define CLASSNAME (llvm::APFloat)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::llvm__APFloat;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( needsCleanup, Result, X->needsCleanup() )
    case currefl::Profile: {
      ASSERT_TRAIT_IS_REFLPROP(Profile)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::FoldingSetNodeID &), p0)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->Profile((class llvm::FoldingSetNodeID &)p0))
      };
      break;
    }
    case currefl::convertToInteger: {
      ASSERT_TRAIT_IS_REFLPROP(convertToInteger)
      SET_PRIM_TYPE(enum llvm::APFloatBase::opStatus)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::APSInt &), p0)
        LOAD_VAL((enum llvm::APFloatBase::roundingMode), p1)
        LOAD_VAL((bool *), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->convertToInteger(p0, p1, p2))
      };
      break;
    }
    case_REFLPROP_0ARGS( convertToDouble, Result, X->convertToDouble() )
    case_REFLPROP_0ARGS( convertToFloat, Result, X->convertToFloat() )
    case currefl::compare: {
      ASSERT_TRAIT_IS_REFLPROP(compare)
      SET_PRIM_TYPE(enum llvm::APFloatBase::cmpResult)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class llvm::APFloat &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->compare(p0))
      };
      break;
    }
    case currefl::bitwiseIsEqual: {
      ASSERT_TRAIT_IS_REFLPROP(bitwiseIsEqual)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class llvm::APFloat &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->bitwiseIsEqual(p0))
      };
      break;
    }
    case currefl::isExactlyValue: {
      ASSERT_TRAIT_IS_REFLPROP(isExactlyValue)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((double), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isExactlyValue(p0))
      };
      break;
    }
    case currefl::convertToHexString: {
      ASSERT_TRAIT_IS_REFLPROP(convertToHexString)
      SET_PRIM_TYPE(unsigned int)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((char *), p0)
        LOAD_VAL((unsigned int), p1)
        LOAD_VAL((bool), p2)
        LOAD_VAL((enum llvm::APFloatBase::roundingMode), p3)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->convertToHexString(p0, p1, p2, p3))
      };
      break;
    }
    case_REFLPROP_0ARGS( isZero, Result, X->isZero() )
    case_REFLPROP_0ARGS( isInfinity, Result, X->isInfinity() )
    case_REFLPROP_0ARGS( isNaN, Result, X->isNaN() )
    case_REFLPROP_0ARGS( isNegative, Result, X->isNegative() )
    case_REFLPROP_0ARGS( isDenormal, Result, X->isDenormal() )
    case_REFLPROP_0ARGS( isSignaling, Result, X->isSignaling() )
    case_REFLPROP_0ARGS( isNormal, Result, X->isNormal() )
    case_REFLPROP_0ARGS( isFinite, Result, X->isFinite() )
    case_REFLPROP_0ARGS( getCategory, Result, X->getCategory() )
    case_REFLPROP_0ARGS( isNonZero, Result, X->isNonZero() )
    case_REFLPROP_0ARGS( isFiniteNonZero, Result, X->isFiniteNonZero() )
    case_REFLPROP_0ARGS( isPosZero, Result, X->isPosZero() )
    case_REFLPROP_0ARGS( isNegZero, Result, X->isNegZero() )
    case_REFLPROP_0ARGS( isSmallest, Result, X->isSmallest() )
    case_REFLPROP_0ARGS( isLargest, Result, X->isLargest() )
    case_REFLPROP_0ARGS( isInteger, Result, X->isInteger() )
    case currefl::print: {
      ASSERT_TRAIT_IS_REFLPROP(print)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::raw_ostream &), p0)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->print((class llvm::raw_ostream &)p0))
      };
      break;
    }
    case currefl::dump: {
      ASSERT_TRAIT_IS_REFLPROP(dump)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        ASSERT_NO_MORE  VOID_REFLECTION(X->dump())
      };
      break;
    }
    case currefl::getExactInverse: {
      ASSERT_TRAIT_IS_REFLPROP(getExactInverse)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::APFloat *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getExactInverse(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_llvm__APSInt: {
# define CLASSNAME (llvm::APSInt)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_MAYBEPTR(1, CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::llvm__APSInt;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( isSigned, Result, X->isSigned() )
    case_REFLPROP_0ARGS( isUnsigned, Result, X->isUnsigned() )
    case currefl::toString: {
      ASSERT_TRAIT_IS_REFLPROP(toString)
      SET_PRIM_TYPE(const char *)
      SET_CALLBACK(Str) {
        LOAD_VAL_X(Str)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Str, X->toString(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getExtValue, Result, X->getExtValue() )
    case currefl::trunc: {
      ASSERT_TRAIT_IS_REFLPROP(trunc)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->trunc(p0))
      };
      break;
    }
    case currefl::extend: {
      ASSERT_TRAIT_IS_REFLPROP(extend)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->extend(p0))
      };
      break;
    }
    case currefl::extOrTrunc: {
      ASSERT_TRAIT_IS_REFLPROP(extOrTrunc)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->extOrTrunc(p0))
      };
      break;
    }
    case currefl::operator_mod: {
      ASSERT_TRAIT_IS_REFLPROP(operator_mod)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class llvm::APSInt &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->operator%(p0))
      };
      break;
    }
    case currefl::operator_div: {
      ASSERT_TRAIT_IS_REFLPROP(operator_div)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class llvm::APSInt &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->operator/(p0))
      };
      break;
    }
    case currefl::operator_gr_gr: {
      ASSERT_TRAIT_IS_REFLPROP(operator_gr_gr)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->operator>>(p0))
      };
      break;
    }
    case currefl::operator_less: {
      ASSERT_TRAIT_IS_REFLPROP(operator_less)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class llvm::APSInt &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->operator<(p0))
      };
      break;
    }
    case currefl::operator_gr: {
      ASSERT_TRAIT_IS_REFLPROP(operator_gr)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class llvm::APSInt &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->operator>(p0))
      };
      break;
    }
    case currefl::operator_less_eq: {
      ASSERT_TRAIT_IS_REFLPROP(operator_less_eq)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class llvm::APSInt &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->operator<=(p0))
      };
      break;
    }
    case currefl::operator_gr_eq: {
      ASSERT_TRAIT_IS_REFLPROP(operator_gr_eq)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class llvm::APSInt &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->operator>=(p0))
      };
      break;
    }
    case currefl::operator_eq_eq: {
      ASSERT_TRAIT_IS_REFLPROP(operator_eq_eq)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class llvm::APSInt &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->operator==(p0))
      };
      break;
    }
    case currefl::operator_not_eq: {
      ASSERT_TRAIT_IS_REFLPROP(operator_not_eq)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class llvm::APSInt &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->operator!=(p0))
      };
      break;
    }
    case currefl::operator_eq_eq1: {
      ASSERT_TRAIT_IS_REFLPROP(operator_eq_eq1)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((long long), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->operator==(p0))
      };
      break;
    }
    case currefl::operator_not_eq1: {
      ASSERT_TRAIT_IS_REFLPROP(operator_not_eq1)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((long long), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->operator!=(p0))
      };
      break;
    }
    case currefl::operator_less_eq1: {
      ASSERT_TRAIT_IS_REFLPROP(operator_less_eq1)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((long long), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->operator<=(p0))
      };
      break;
    }
    case currefl::operator_gr_eq1: {
      ASSERT_TRAIT_IS_REFLPROP(operator_gr_eq1)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((long long), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->operator>=(p0))
      };
      break;
    }
    case currefl::operator_less1: {
      ASSERT_TRAIT_IS_REFLPROP(operator_less1)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((long long), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->operator<(p0))
      };
      break;
    }
    case currefl::operator_gr1: {
      ASSERT_TRAIT_IS_REFLPROP(operator_gr1)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((long long), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->operator>(p0))
      };
      break;
    }
    case currefl::operator_less_less: {
      ASSERT_TRAIT_IS_REFLPROP(operator_less_less)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->operator<<(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( operator_minus, Type, X->operator-() )
    case currefl::operator_and: {
      ASSERT_TRAIT_IS_REFLPROP(operator_and)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class llvm::APSInt &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->operator&(p0))
      };
      break;
    }
    case currefl::operator_or: {
      ASSERT_TRAIT_IS_REFLPROP(operator_or)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class llvm::APSInt &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->operator|(p0))
      };
      break;
    }
    case currefl::operator_exp: {
      ASSERT_TRAIT_IS_REFLPROP(operator_exp)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class llvm::APSInt &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->operator^(p0))
      };
      break;
    }
    case currefl::operator_star: {
      ASSERT_TRAIT_IS_REFLPROP(operator_star)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class llvm::APSInt &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->operator*(p0))
      };
      break;
    }
    case currefl::operator_plus: {
      ASSERT_TRAIT_IS_REFLPROP(operator_plus)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class llvm::APSInt &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->operator+(p0))
      };
      break;
    }
    case currefl::operator_minus1: {
      ASSERT_TRAIT_IS_REFLPROP(operator_minus1)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class llvm::APSInt &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->operator-(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( operator_tilde, Type, X->operator~() )
    case currefl::getMaxValue: {
      ASSERT_TRAIT_IS_REFLPROP(getMaxValue)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        LOAD_VAL((bool), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getMaxValue(p0, p1))
      };
      break;
    }
    case currefl::getMinValue: {
      ASSERT_TRAIT_IS_REFLPROP(getMinValue)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        LOAD_VAL((bool), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getMinValue(p0, p1))
      };
      break;
    }
    case currefl::isSameValue: {
      ASSERT_TRAIT_IS_REFLPROP(isSameValue)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class llvm::APSInt &), p0)
        LOAD_VAL((const class llvm::APSInt &), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isSameValue(p0, p1))
      };
      break;
    }
    case currefl::compareValues: {
      ASSERT_TRAIT_IS_REFLPROP(compareValues)
      SET_PRIM_TYPE(int)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class llvm::APSInt &), p0)
        LOAD_VAL((const class llvm::APSInt &), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->compareValues(p0, p1))
      };
      break;
    }
    case currefl::get: {
      ASSERT_TRAIT_IS_REFLPROP(get)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((long long), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->get(p0))
      };
      break;
    }
    case currefl::getUnsigned: {
      ASSERT_TRAIT_IS_REFLPROP(getUnsigned)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned long long), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getUnsigned(p0))
      };
      break;
    }
    case currefl::Profile: {
      ASSERT_TRAIT_IS_REFLPROP(Profile)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::FoldingSetNodeID &), p0)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->Profile((class llvm::FoldingSetNodeID &)p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__APValue: {
# define CLASSNAME (clang::APValue)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__APValue;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( needsCleanup, Result, X->needsCleanup() )
    case_REFLPROP_0ARGS( getKind, Result, X->getKind() )
    case_REFLPROP_0ARGS( isUninit, Result, X->isUninit() )
    case_REFLPROP_0ARGS( isInt, Result, X->isInt() )
    case_REFLPROP_0ARGS( isFloat, Result, X->isFloat() )
    case_REFLPROP_0ARGS( isComplexInt, Result, X->isComplexInt() )
    case_REFLPROP_0ARGS( isComplexFloat, Result, X->isComplexFloat() )
    case_REFLPROP_0ARGS( isLValue, Result, X->isLValue() )
    case_REFLPROP_0ARGS( isVector, Result, X->isVector() )
    case_REFLPROP_0ARGS( isArray, Result, X->isArray() )
    case_REFLPROP_0ARGS( isStruct, Result, X->isStruct() )
    case_REFLPROP_0ARGS( isUnion, Result, X->isUnion() )
    case_REFLPROP_0ARGS( isMemberPointer, Result, X->isMemberPointer() )
    case_REFLPROP_0ARGS( isAddrLabelDiff, Result, X->isAddrLabelDiff() )
    case currefl::dump: {
      ASSERT_TRAIT_IS_REFLPROP(dump)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        ASSERT_NO_MORE  VOID_REFLECTION(X->dump())
      };
      break;
    }
    case currefl::dump1: {
      ASSERT_TRAIT_IS_REFLPROP(dump1)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::raw_ostream &), p0)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->dump((class llvm::raw_ostream &)p0))
      };
      break;
    }
    case currefl::printPretty: {
      ASSERT_TRAIT_IS_REFLPROP(printPretty)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::raw_ostream &), p0)
        LOAD_VAL((class clang::ASTContext &), p1)
        LOAD_VAL((class clang::QualType), p2)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->printPretty((class llvm::raw_ostream &)p0, (class clang::ASTContext &)p1, (class clang::QualType)p2))
      };
      break;
    }
    case currefl::getAsString: {
      ASSERT_TRAIT_IS_REFLPROP(getAsString)
      SET_PRIM_TYPE(const char *)
      SET_CALLBACK(Str) {
        LOAD_VAL_X(Str)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((class clang::QualType), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Str, X->getAsString(p0, p1))
      };
      break;
    }
    case_REFLPROP_0ARGS( getInt, Type, X->getInt() )
    case_REFLPROP_0ARGS( getFloat, Type, X->getFloat() )
    case_REFLPROP_0ARGS( getComplexIntReal, Type, X->getComplexIntReal() )
    case_REFLPROP_0ARGS( getComplexIntImag, Type, X->getComplexIntImag() )
    case_REFLPROP_0ARGS( getComplexFloatReal, Type, X->getComplexFloatReal() )
    case_REFLPROP_0ARGS( getComplexFloatImag, Type, X->getComplexFloatImag() )
    case_REFLPROP_0ARGS( getLValueBase, Type, X->getLValueBase() )
    case_REFLPROP_0ARGS( getLValueOffset, Type, X->getLValueOffset() )
    case_REFLPROP_0ARGS( isLValueOnePastTheEnd, Result, X->isLValueOnePastTheEnd() )
    case_REFLPROP_0ARGS( hasLValuePath, Result, X->hasLValuePath() )
    case_REFLPROP_0ARGS( getLValueCallIndex, Result, X->getLValueCallIndex() )
    case_REFLPROP_0ARGS( getLValueVersion, Result, X->getLValueVersion() )
    case_REFLPROP_0ARGS( isNullPointer, Result, X->isNullPointer() )
    case currefl::getVectorElt: {
      ASSERT_TRAIT_IS_REFLPROP(getVectorElt)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getVectorElt(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getVectorLength, Result, X->getVectorLength() )
    case currefl::getArrayInitializedElt: {
      ASSERT_TRAIT_IS_REFLPROP(getArrayInitializedElt)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getArrayInitializedElt(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( hasArrayFiller, Result, X->hasArrayFiller() )
    case_REFLPROP_0ARGS( getArrayFiller, Type, X->getArrayFiller() )
    case_REFLPROP_0ARGS( getArrayInitializedElts, Result, X->getArrayInitializedElts() )
    case_REFLPROP_0ARGS( getArraySize, Result, X->getArraySize() )
    case_REFLPROP_0ARGS( getStructNumBases, Result, X->getStructNumBases() )
    case_REFLPROP_0ARGS( getStructNumFields, Result, X->getStructNumFields() )
    case currefl::getStructBase: {
      ASSERT_TRAIT_IS_REFLPROP(getStructBase)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getStructBase(p0))
      };
      break;
    }
    case currefl::getStructField: {
      ASSERT_TRAIT_IS_REFLPROP(getStructField)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getStructField(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getUnionField, Type, X->getUnionField() )
    case_REFLPROP_0ARGS( getUnionValue, Type, X->getUnionValue() )
    case_REFLPROP_0ARGS( getMemberPointerDecl, Type, X->getMemberPointerDecl() )
    case_REFLPROP_0ARGS( isMemberPointerToDerivedMember, Result, X->isMemberPointerToDerivedMember() )
    case currefl::getMemberPointerPath: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->getMemberPointerPath())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->getMemberPointerPath())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::getMemberPointerPath))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case_REFLPROP_0ARGS( getAddrLabelDiffLHS, Type, X->getAddrLabelDiffLHS() )
    case_REFLPROP_0ARGS( getAddrLabelDiffRHS, Type, X->getAddrLabelDiffRHS() )
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__APValue__LValueBase: {
# define CLASSNAME (clang::APValue::LValueBase)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_MAYBEPTR(1, CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__APValue__LValueBase;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getOpaqueValue, Result, X->getOpaqueValue() )
    case_REFLPROP_0ARGS( isNull, Result, X->isNull() )
    case_REFLPROP_0ARGS( operator_bool, Result, X->operator bool() )
    case_REFLPROP_0ARGS( getCallIndex, Result, X->getCallIndex() )
    case_REFLPROP_0ARGS( getVersion, Result, X->getVersion() )
    case currefl::operator_eq_eq: {
      ASSERT_TRAIT_IS_REFLPROP(operator_eq_eq)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::APValue::LValueBase &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->operator==(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__DiagnosticOptions: {
# define CLASSNAME (clang::DiagnosticOptions)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__DiagnosticOptions;
  switch( (currefl::memnames)MemNum ) {
    case currefl::Retain: {
      ASSERT_TRAIT_IS_REFLPROP(Retain)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        ASSERT_NO_MORE  VOID_REFLECTION(X->Retain())
      };
      break;
    }
    case currefl::Release: {
      ASSERT_TRAIT_IS_REFLPROP(Release)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        ASSERT_NO_MORE  VOID_REFLECTION(X->Release())
      };
      break;
    }
    case_REFLPROP_0ARGS(IgnoreWarnings, Result, X->IgnoreWarnings)
    case_REFLPROP_0ARGS(NoRewriteMacros, Result, X->NoRewriteMacros)
    case_REFLPROP_0ARGS(Pedantic, Result, X->Pedantic)
    case_REFLPROP_0ARGS(PedanticErrors, Result, X->PedanticErrors)
    case_REFLPROP_0ARGS(ShowColumn, Result, X->ShowColumn)
    case_REFLPROP_0ARGS(ShowLocation, Result, X->ShowLocation)
    case_REFLPROP_0ARGS(AbsolutePath, Result, X->AbsolutePath)
    case_REFLPROP_0ARGS(ShowCarets, Result, X->ShowCarets)
    case_REFLPROP_0ARGS(ShowFixits, Result, X->ShowFixits)
    case_REFLPROP_0ARGS(ShowSourceRanges, Result, X->ShowSourceRanges)
    case_REFLPROP_0ARGS(ShowParseableFixits, Result, X->ShowParseableFixits)
    case_REFLPROP_0ARGS(ShowPresumedLoc, Result, X->ShowPresumedLoc)
    case_REFLPROP_0ARGS(ShowOptionNames, Result, X->ShowOptionNames)
    case_REFLPROP_0ARGS(ShowNoteIncludeStack, Result, X->ShowNoteIncludeStack)
    case_REFLPROP_0ARGS(ShowCategories, Result, X->ShowCategories)
    case_REFLPROP_0ARGS(ShowColors, Result, X->ShowColors)
    case_REFLPROP_0ARGS(VerifyDiagnostics, Result, X->VerifyDiagnostics)
    case_REFLPROP_0ARGS(ElideType, Result, X->ElideType)
    case_REFLPROP_0ARGS(ShowTemplateTree, Result, X->ShowTemplateTree)
    case_REFLPROP_0ARGS(CLFallbackMode, Result, X->CLFallbackMode)
    case_REFLPROP_0ARGS(ErrorLimit, Result, X->ErrorLimit)
    case_REFLPROP_0ARGS(MacroBacktraceLimit, Result, X->MacroBacktraceLimit)
    case_REFLPROP_0ARGS(TemplateBacktraceLimit, Result, X->TemplateBacktraceLimit)
    case_REFLPROP_0ARGS(ConstexprBacktraceLimit, Result, X->ConstexprBacktraceLimit)
    case_REFLPROP_0ARGS(SpellCheckingLimit, Result, X->SpellCheckingLimit)
    case_REFLPROP_0ARGS(SnippetLineLimit, Result, X->SnippetLineLimit)
    case_REFLPROP_0ARGS(TabStop, Result, X->TabStop)
    case_REFLPROP_0ARGS(MessageLength, Result, X->MessageLength)
    case_REFLPROP_0ARGS( getFormat, Result, X->getFormat() )
    case_REFLPROP_0ARGS( getShowOverloads, Result, X->getShowOverloads() )
    case_REFLPROP_0ARGS( getVerifyIgnoreUnexpected, Result, X->getVerifyIgnoreUnexpected() )
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__FileID: {
# define CLASSNAME (clang::FileID)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_MAYBEPTR(1, CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__FileID;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( isValid, Result, X->isValid() )
    case_REFLPROP_0ARGS( isInvalid, Result, X->isInvalid() )
    case currefl::operator_eq_eq: {
      ASSERT_TRAIT_IS_REFLPROP(operator_eq_eq)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::FileID &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->operator==(p0))
      };
      break;
    }
    case currefl::operator_less: {
      ASSERT_TRAIT_IS_REFLPROP(operator_less)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::FileID &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->operator<(p0))
      };
      break;
    }
    case currefl::operator_less_eq: {
      ASSERT_TRAIT_IS_REFLPROP(operator_less_eq)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::FileID &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->operator<=(p0))
      };
      break;
    }
    case currefl::operator_not_eq: {
      ASSERT_TRAIT_IS_REFLPROP(operator_not_eq)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::FileID &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->operator!=(p0))
      };
      break;
    }
    case currefl::operator_gr: {
      ASSERT_TRAIT_IS_REFLPROP(operator_gr)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::FileID &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->operator>(p0))
      };
      break;
    }
    case currefl::operator_gr_eq: {
      ASSERT_TRAIT_IS_REFLPROP(operator_gr_eq)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::FileID &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->operator>=(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getSentinel, Type, X->getSentinel() )
    case_REFLPROP_0ARGS( getHashValue, Result, X->getHashValue() )
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__SourceLocation: {
# define CLASSNAME (clang::SourceLocation)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_MAYBEPTR(1, CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__SourceLocation;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( isFileID, Result, X->isFileID() )
    case_REFLPROP_0ARGS( isMacroID, Result, X->isMacroID() )
    case_REFLPROP_0ARGS( isValid, Result, X->isValid() )
    case_REFLPROP_0ARGS( isInvalid, Result, X->isInvalid() )
    case currefl::getLocWithOffset: {
      ASSERT_TRAIT_IS_REFLPROP(getLocWithOffset)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getLocWithOffset(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getRawEncoding, Result, X->getRawEncoding() )
    case currefl::getFromRawEncoding: {
      ASSERT_TRAIT_IS_REFLPROP(getFromRawEncoding)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getFromRawEncoding(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getPtrEncoding, Result, X->getPtrEncoding() )
    case currefl::getFromPtrEncoding: {
      ASSERT_TRAIT_IS_REFLPROP(getFromPtrEncoding)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const void *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getFromPtrEncoding(p0))
      };
      break;
    }
    case currefl::isPairOfFileLocations: {
      ASSERT_TRAIT_IS_REFLPROP(isPairOfFileLocations)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::SourceLocation), p0)
        LOAD_VAL((class clang::SourceLocation), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isPairOfFileLocations(p0, p1))
      };
      break;
    }
    case currefl::print: {
      ASSERT_TRAIT_IS_REFLPROP(print)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::raw_ostream &), p0)
        LOAD_VAL((const class clang::SourceManager &), p1)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->print((class llvm::raw_ostream &)p0, (const class clang::SourceManager &)p1))
      };
      break;
    }
    case currefl::printToString: {
      ASSERT_TRAIT_IS_REFLPROP(printToString)
      SET_PRIM_TYPE(const char *)
      SET_CALLBACK(Str) {
        LOAD_VAL_X(Str)
        LOAD_VAL((const class clang::SourceManager &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Str, X->printToString(p0))
      };
      break;
    }
    case currefl::dump: {
      ASSERT_TRAIT_IS_REFLPROP(dump)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::SourceManager &), p0)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->dump((const class clang::SourceManager &)p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__SourceRange: {
# define CLASSNAME (clang::SourceRange)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_MAYBEPTR(1, CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__SourceRange;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getBegin, Type, X->getBegin() )
    case_REFLPROP_0ARGS( getEnd, Type, X->getEnd() )
    case_REFLPROP_0ARGS( isValid, Result, X->isValid() )
    case_REFLPROP_0ARGS( isInvalid, Result, X->isInvalid() )
    case currefl::operator_eq_eq: {
      ASSERT_TRAIT_IS_REFLPROP(operator_eq_eq)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::SourceRange &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->operator==(p0))
      };
      break;
    }
    case currefl::operator_not_eq: {
      ASSERT_TRAIT_IS_REFLPROP(operator_not_eq)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::SourceRange &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->operator!=(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__CharSourceRange: {
# define CLASSNAME (clang::CharSourceRange)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_MAYBEPTR(1, CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__CharSourceRange;
  switch( (currefl::memnames)MemNum ) {
    case currefl::getTokenRange: {
      ASSERT_TRAIT_IS_REFLPROP(getTokenRange)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::SourceRange), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getTokenRange(p0))
      };
      break;
    }
    case currefl::getCharRange: {
      ASSERT_TRAIT_IS_REFLPROP(getCharRange)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::SourceRange), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getCharRange(p0))
      };
      break;
    }
    case currefl::getTokenRange1: {
      ASSERT_TRAIT_IS_REFLPROP(getTokenRange1)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::SourceLocation), p0)
        LOAD_VAL((class clang::SourceLocation), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getTokenRange(p0, p1))
      };
      break;
    }
    case currefl::getCharRange1: {
      ASSERT_TRAIT_IS_REFLPROP(getCharRange1)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::SourceLocation), p0)
        LOAD_VAL((class clang::SourceLocation), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getCharRange(p0, p1))
      };
      break;
    }
    case_REFLPROP_0ARGS( isTokenRange, Result, X->isTokenRange() )
    case_REFLPROP_0ARGS( isCharRange, Result, X->isCharRange() )
    case_REFLPROP_0ARGS( getBegin, Type, X->getBegin() )
    case_REFLPROP_0ARGS( getEnd, Type, X->getEnd() )
    case_REFLPROP_0ARGS( getAsRange, Type, X->getAsRange() )
    case_REFLPROP_0ARGS( isValid, Result, X->isValid() )
    case_REFLPROP_0ARGS( isInvalid, Result, X->isInvalid() )
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__PresumedLoc: {
# define CLASSNAME (clang::PresumedLoc)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_NEVERPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__PresumedLoc;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( isInvalid, Result, X->isInvalid() )
    case_REFLPROP_0ARGS( isValid, Result, X->isValid() )
    case_REFLPROP_0ARGS( getFilename, Str, X->getFilename() )
    case_REFLPROP_0ARGS( getLine, Result, X->getLine() )
    case_REFLPROP_0ARGS( getColumn, Result, X->getColumn() )
    case_REFLPROP_0ARGS( getIncludeLoc, Type, X->getIncludeLoc() )
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__FullSourceLoc: {
# define CLASSNAME (clang::FullSourceLoc)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_MAYBEPTR(1, CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__FullSourceLoc;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( hasManager, Result, X->hasManager() )
    case_REFLPROP_0ARGS( getManager, Type, X->getManager() )
    case_REFLPROP_0ARGS( getFileID, Type, X->getFileID() )
    case_REFLPROP_0ARGS( getExpansionLoc, Type, X->getExpansionLoc() )
    case_REFLPROP_0ARGS( getSpellingLoc, Type, X->getSpellingLoc() )
    case_REFLPROP_0ARGS( getFileLoc, Type, X->getFileLoc() )
    case currefl::getPresumedLoc: {
      ASSERT_TRAIT_IS_REFLPROP(getPresumedLoc)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Type, X->getPresumedLoc())
        LOAD_VAL((bool), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getPresumedLoc(p0))
      };
      break;
    }
    case currefl::isMacroArgExpansion: {
      ASSERT_TRAIT_IS_REFLPROP(isMacroArgExpansion)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Result, X->isMacroArgExpansion())
        LOAD_VAL((class clang::FullSourceLoc *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isMacroArgExpansion(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getImmediateMacroCallerLoc, Type, X->getImmediateMacroCallerLoc() )
    case_REFLPROP_0ARGS( getFileOffset, Result, X->getFileOffset() )
    case currefl::getExpansionLineNumber: {
      ASSERT_TRAIT_IS_REFLPROP(getExpansionLineNumber)
      SET_PRIM_TYPE(unsigned int)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Result, X->getExpansionLineNumber())
        LOAD_VAL((bool *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getExpansionLineNumber(p0))
      };
      break;
    }
    case currefl::getExpansionColumnNumber: {
      ASSERT_TRAIT_IS_REFLPROP(getExpansionColumnNumber)
      SET_PRIM_TYPE(unsigned int)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Result, X->getExpansionColumnNumber())
        LOAD_VAL((bool *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getExpansionColumnNumber(p0))
      };
      break;
    }
    case currefl::getSpellingLineNumber: {
      ASSERT_TRAIT_IS_REFLPROP(getSpellingLineNumber)
      SET_PRIM_TYPE(unsigned int)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Result, X->getSpellingLineNumber())
        LOAD_VAL((bool *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getSpellingLineNumber(p0))
      };
      break;
    }
    case currefl::getSpellingColumnNumber: {
      ASSERT_TRAIT_IS_REFLPROP(getSpellingColumnNumber)
      SET_PRIM_TYPE(unsigned int)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Result, X->getSpellingColumnNumber())
        LOAD_VAL((bool *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getSpellingColumnNumber(p0))
      };
      break;
    }
    case currefl::getCharacterData: {
      ASSERT_TRAIT_IS_REFLPROP(getCharacterData)
      SET_PRIM_TYPE(const char *)
      SET_CALLBACK(Str) {
        LOAD_VAL_X(Str)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Str, X->getCharacterData())
        LOAD_VAL((bool *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Str, X->getCharacterData(p0))
      };
      break;
    }
    case currefl::getLineNumber: {
      ASSERT_TRAIT_IS_REFLPROP(getLineNumber)
      SET_PRIM_TYPE(unsigned int)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Result, X->getLineNumber())
        LOAD_VAL((bool *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getLineNumber(p0))
      };
      break;
    }
    case currefl::getColumnNumber: {
      ASSERT_TRAIT_IS_REFLPROP(getColumnNumber)
      SET_PRIM_TYPE(unsigned int)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Result, X->getColumnNumber())
        LOAD_VAL((bool *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getColumnNumber(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getFileEntry, Type, X->getFileEntry() )
    case currefl::getBufferData: {
      ASSERT_TRAIT_IS_REFLPROP(getBufferData)
      SET_PRIM_TYPE(const char *)
      SET_CALLBACK(Str) {
        LOAD_VAL_X(Str)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Str, X->getBufferData())
        LOAD_VAL((bool *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Str, X->getBufferData(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( isInSystemHeader, Result, X->isInSystemHeader() )
    case currefl::isBeforeInTranslationUnitThan: {
      ASSERT_TRAIT_IS_REFLPROP(isBeforeInTranslationUnitThan)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::SourceLocation), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isBeforeInTranslationUnitThan(p0))
      };
      break;
    }
    case currefl::isBeforeInTranslationUnitThan1: {
      ASSERT_TRAIT_IS_REFLPROP(isBeforeInTranslationUnitThan1)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::FullSourceLoc), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isBeforeInTranslationUnitThan(p0))
      };
      break;
    }
    case currefl::dump: {
      ASSERT_TRAIT_IS_REFLPROP(dump)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        ASSERT_NO_MORE  VOID_REFLECTION(X->dump())
      };
      break;
    }
    case currefl::operator_eq_eq: {
      ASSERT_TRAIT_IS_REFLPROP(operator_eq_eq)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL((const class clang::FullSourceLoc &), p0 )
        LOAD_VAL((const class clang::FullSourceLoc &), p1 )
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, p0 == p1)
      };
      break;
    }
    case currefl::operator_not_eq: {
      ASSERT_TRAIT_IS_REFLPROP(operator_not_eq)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL((const class clang::FullSourceLoc &), p0 )
        LOAD_VAL((const class clang::FullSourceLoc &), p1 )
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, p0 != p1)
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_llvm__DebugEpochBase: {
# define CLASSNAME (llvm::DebugEpochBase)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::llvm__DebugEpochBase;
  switch( (currefl::memnames)MemNum ) {
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__FixItHint: {
# define CLASSNAME (clang::FixItHint)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_MAYBEPTR(1, CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__FixItHint;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS(RemoveRange, Type, X->RemoveRange)
    case_REFLPROP_0ARGS(InsertFromRange, Type, X->InsertFromRange)
    case_REFLPROP_0ARGS(BeforePreviousInsertions, Result, X->BeforePreviousInsertions)
    case_REFLPROP_0ARGS( isNull, Result, X->isNull() )
    case currefl::CreateInsertionFromRange: {
      ASSERT_TRAIT_IS_REFLPROP(CreateInsertionFromRange)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::SourceLocation), p0)
        LOAD_VAL((class clang::CharSourceRange), p1)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateInsertionFromRange(p0, p1))
        LOAD_VAL((bool), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateInsertionFromRange(p0, p1, p2))
      };
      break;
    }
    case currefl::CreateRemoval: {
      ASSERT_TRAIT_IS_REFLPROP(CreateRemoval)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::CharSourceRange), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateRemoval(p0))
      };
      break;
    }
    case currefl::CreateRemoval1: {
      ASSERT_TRAIT_IS_REFLPROP(CreateRemoval1)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::SourceRange), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateRemoval(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__DiagnosticsEngine: {
# define CLASSNAME (clang::DiagnosticsEngine)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__DiagnosticsEngine;
  switch( (currefl::memnames)MemNum ) {
    case currefl::Retain: {
      ASSERT_TRAIT_IS_REFLPROP(Retain)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        ASSERT_NO_MORE  VOID_REFLECTION(X->Retain())
      };
      break;
    }
    case currefl::Release: {
      ASSERT_TRAIT_IS_REFLPROP(Release)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        ASSERT_NO_MORE  VOID_REFLECTION(X->Release())
      };
      break;
    }
    case currefl::dump: {
      ASSERT_TRAIT_IS_REFLPROP(dump)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        ASSERT_NO_MORE  VOID_REFLECTION(X->dump())
      };
      break;
    }
    case currefl::dump1: {
      ASSERT_TRAIT_IS_REFLPROP(dump1)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const char *), p0)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->dump((class llvm::StringRef)p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getDiagnosticOptions, Type, X->getDiagnosticOptions() )
    case_REFLPROP_0ARGS( getClient, Type, X->getClient() )
    case_REFLPROP_0ARGS( ownsClient, Result, X->ownsClient() )
    case_REFLPROP_0ARGS( hasSourceManager, Result, X->hasSourceManager() )
    case_REFLPROP_0ARGS( getSourceManager, Type, X->getSourceManager() )
    case_REFLPROP_0ARGS( getTemplateBacktraceLimit, Result, X->getTemplateBacktraceLimit() )
    case_REFLPROP_0ARGS( getConstexprBacktraceLimit, Result, X->getConstexprBacktraceLimit() )
    case_REFLPROP_0ARGS( getIgnoreAllWarnings, Result, X->getIgnoreAllWarnings() )
    case_REFLPROP_0ARGS( getEnableAllWarnings, Result, X->getEnableAllWarnings() )
    case_REFLPROP_0ARGS( getWarningsAsErrors, Result, X->getWarningsAsErrors() )
    case_REFLPROP_0ARGS( getErrorsAsFatal, Result, X->getErrorsAsFatal() )
    case_REFLPROP_0ARGS( getSuppressSystemWarnings, Result, X->getSuppressSystemWarnings() )
    case_REFLPROP_0ARGS( getSuppressAllDiagnostics, Result, X->getSuppressAllDiagnostics() )
    case_REFLPROP_0ARGS( getShowOverloads, Result, X->getShowOverloads() )
    case_REFLPROP_0ARGS( isLastDiagnosticIgnored, Result, X->isLastDiagnosticIgnored() )
    case_REFLPROP_0ARGS( getExtensionHandlingBehavior, Result, X->getExtensionHandlingBehavior() )
    case_REFLPROP_0ARGS( hasErrorOccurred, Result, X->hasErrorOccurred() )
    case_REFLPROP_0ARGS( hasUncompilableErrorOccurred, Result, X->hasUncompilableErrorOccurred() )
    case_REFLPROP_0ARGS( hasFatalErrorOccurred, Result, X->hasFatalErrorOccurred() )
    case_REFLPROP_0ARGS( hasUnrecoverableErrorOccurred, Result, X->hasUnrecoverableErrorOccurred() )
    case_REFLPROP_0ARGS( getNumWarnings, Result, X->getNumWarnings() )
    case currefl::isIgnored: {
      ASSERT_TRAIT_IS_REFLPROP(isIgnored)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((unsigned int), p0)
        LOAD_VAL((class clang::SourceLocation), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isIgnored(p0, p1))
      };
      break;
    }
    case currefl::getDiagnosticLevel: {
      ASSERT_TRAIT_IS_REFLPROP(getDiagnosticLevel)
      SET_PRIM_TYPE(enum clang::DiagnosticsEngine::Level)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((unsigned int), p0)
        LOAD_VAL((class clang::SourceLocation), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getDiagnosticLevel(p0, p1))
      };
      break;
    }
    case_REFLPROP_0ARGS( isDiagnosticInFlight, Result, X->isDiagnosticInFlight() )
    case_REFLPROP_0ARGS( getFlagValue, Str, X->getFlagValue() )
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__DiagnosticBuilder: {
# define CLASSNAME (clang::DiagnosticBuilder)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__DiagnosticBuilder;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( setForceEmit, Type, X->setForceEmit() )
    case_REFLPROP_0ARGS( operator_bool, Result, X->operator bool() )
    case currefl::AddString: {
      ASSERT_TRAIT_IS_REFLPROP(AddString)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const char *), p0)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->AddString((class llvm::StringRef)p0))
      };
      break;
    }
    case currefl::AddTaggedVal: {
      ASSERT_TRAIT_IS_REFLPROP(AddTaggedVal)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((intptr_t), p0)
        LOAD_VAL((enum clang::DiagnosticsEngine::ArgumentKind), p1)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->AddTaggedVal((intptr_t)p0, (enum DiagnosticsEngine::ArgumentKind)p1))
      };
      break;
    }
    case currefl::AddSourceRange: {
      ASSERT_TRAIT_IS_REFLPROP(AddSourceRange)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::CharSourceRange &), p0)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->AddSourceRange((const class clang::CharSourceRange &)p0))
      };
      break;
    }
    case currefl::AddFixItHint: {
      ASSERT_TRAIT_IS_REFLPROP(AddFixItHint)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::FixItHint &), p0)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->AddFixItHint((const class clang::FixItHint &)p0))
      };
      break;
    }
    case currefl::addFlagValue: {
      ASSERT_TRAIT_IS_REFLPROP(addFlagValue)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const char *), p0)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->addFlagValue((class llvm::StringRef)p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__DiagnosticConsumer: {
# define CLASSNAME (clang::DiagnosticConsumer)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__DiagnosticConsumer;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getNumErrors, Result, X->getNumErrors() )
    case_REFLPROP_0ARGS( getNumWarnings, Result, X->getNumWarnings() )
    case_REFLPROP_0ARGS( IncludeInDiagnosticCounts, Result, X->IncludeInDiagnosticCounts() )
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__IdentifierInfo: {
# define CLASSNAME (clang::IdentifierInfo)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__IdentifierInfo;
  switch( (currefl::memnames)MemNum ) {
    case currefl::isStr: {
      ASSERT_TRAIT_IS_REFLPROP(isStr)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const char *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isStr(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getNameStart, Str, X->getNameStart() )
    case_REFLPROP_0ARGS( getLength, Result, X->getLength() )
    case_REFLPROP_0ARGS( getName, Str, X->getName() )
    case_REFLPROP_0ARGS( hasMacroDefinition, Result, X->hasMacroDefinition() )
    case_REFLPROP_0ARGS( hadMacroDefinition, Result, X->hadMacroDefinition() )
    case_REFLPROP_0ARGS( getTokenID, Result, X->getTokenID() )
    case_REFLPROP_0ARGS( hasRevertedTokenIDToIdentifier, Result, X->hasRevertedTokenIDToIdentifier() )
    case_REFLPROP_0ARGS( getPPKeywordID, Result, X->getPPKeywordID() )
    case_REFLPROP_0ARGS( getObjCKeywordID, Result, X->getObjCKeywordID() )
    case_REFLPROP_0ARGS( hasRevertedBuiltin, Result, X->hasRevertedBuiltin() )
    case_REFLPROP_0ARGS( getBuiltinID, Result, X->getBuiltinID() )
    case_REFLPROP_0ARGS( getObjCOrBuiltinID, Result, X->getObjCOrBuiltinID() )
    case_REFLPROP_0ARGS( isExtensionToken, Result, X->isExtensionToken() )
    case_REFLPROP_0ARGS( isFutureCompatKeyword, Result, X->isFutureCompatKeyword() )
    case_REFLPROP_0ARGS( isPoisoned, Result, X->isPoisoned() )
    case_REFLPROP_0ARGS( isCPlusPlusOperatorKeyword, Result, X->isCPlusPlusOperatorKeyword() )
    case currefl::isKeyword: {
      ASSERT_TRAIT_IS_REFLPROP(isKeyword)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::LangOptions &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isKeyword(p0))
      };
      break;
    }
    case currefl::isCPlusPlusKeyword: {
      ASSERT_TRAIT_IS_REFLPROP(isCPlusPlusKeyword)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::LangOptions &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isCPlusPlusKeyword(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( isHandleIdentifierCase, Result, X->isHandleIdentifierCase() )
    case_REFLPROP_0ARGS( isFromAST, Result, X->isFromAST() )
    case_REFLPROP_0ARGS( hasChangedSinceDeserialization, Result, X->hasChangedSinceDeserialization() )
    case_REFLPROP_0ARGS( hasFETokenInfoChangedSinceDeserialization, Result, X->hasFETokenInfoChangedSinceDeserialization() )
    case_REFLPROP_0ARGS( isOutOfDate, Result, X->isOutOfDate() )
    case_REFLPROP_0ARGS( isModulesImport, Result, X->isModulesImport() )
    case_REFLPROP_0ARGS( isEditorPlaceholder, Result, X->isEditorPlaceholder() )
    case currefl::operator_less: {
      ASSERT_TRAIT_IS_REFLPROP(operator_less)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::IdentifierInfo &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->operator<(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__IdentifierInfoLookup: {
# define CLASSNAME (clang::IdentifierInfoLookup)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__IdentifierInfoLookup;
  switch( (currefl::memnames)MemNum ) {
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__IdentifierTable: {
# define CLASSNAME (clang::IdentifierTable)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__IdentifierTable;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getExternalIdentifierLookup, Type, X->getExternalIdentifierLookup() )
    case_REFLPROP_0ARGS( size, Result, X->size() )
    case currefl::PrintStats: {
      ASSERT_TRAIT_IS_REFLPROP(PrintStats)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        ASSERT_NO_MORE  VOID_REFLECTION(X->PrintStats())
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__Selector: {
# define CLASSNAME (clang::Selector)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_MAYBEPTR(1, CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__Selector;
  switch( (currefl::memnames)MemNum ) {
    case currefl::operator_eq_eq: {
      ASSERT_TRAIT_IS_REFLPROP(operator_eq_eq)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::Selector), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->operator==(p0))
      };
      break;
    }
    case currefl::operator_not_eq: {
      ASSERT_TRAIT_IS_REFLPROP(operator_not_eq)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::Selector), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->operator!=(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getAsOpaquePtr, Result, X->getAsOpaquePtr() )
    case_REFLPROP_0ARGS( isNull, Result, X->isNull() )
    case_REFLPROP_0ARGS( isKeywordSelector, Result, X->isKeywordSelector() )
    case_REFLPROP_0ARGS( isUnarySelector, Result, X->isUnarySelector() )
    case_REFLPROP_0ARGS( getNumArgs, Result, X->getNumArgs() )
    case currefl::getIdentifierInfoForSlot: {
      ASSERT_TRAIT_IS_REFLPROP(getIdentifierInfoForSlot)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getIdentifierInfoForSlot(p0))
      };
      break;
    }
    case currefl::getNameForSlot: {
      ASSERT_TRAIT_IS_REFLPROP(getNameForSlot)
      SET_PRIM_TYPE(const char *)
      SET_CALLBACK(Str) {
        LOAD_VAL_X(Str)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Str, X->getNameForSlot(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getAsString, Str, X->getAsString() )
    case currefl::print: {
      ASSERT_TRAIT_IS_REFLPROP(print)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::raw_ostream &), p0)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->print((llvm::raw_ostream &)p0))
      };
      break;
    }
    case currefl::dump: {
      ASSERT_TRAIT_IS_REFLPROP(dump)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        ASSERT_NO_MORE  VOID_REFLECTION(X->dump())
      };
      break;
    }
    case_REFLPROP_0ARGS( getMethodFamily, Result, X->getMethodFamily() )
    case_REFLPROP_0ARGS( getStringFormatFamily, Result, X->getStringFormatFamily() )
    case_REFLPROP_0ARGS( getEmptyMarker, Type, X->getEmptyMarker() )
    case_REFLPROP_0ARGS( getTombstoneMarker, Type, X->getTombstoneMarker() )
    case currefl::getInstTypeMethodFamily: {
      ASSERT_TRAIT_IS_REFLPROP(getInstTypeMethodFamily)
      SET_PRIM_TYPE(enum clang::ObjCInstanceTypeFamily)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::Selector), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getInstTypeMethodFamily(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__SelectorTable: {
# define CLASSNAME (clang::SelectorTable)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__SelectorTable;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getTotalMemory, Result, X->getTotalMemory() )
    case currefl::constructSetterSelector: {
      ASSERT_TRAIT_IS_REFLPROP(constructSetterSelector)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::IdentifierTable &), p0)
        LOAD_VAL((class clang::SelectorTable &), p1)
        LOAD_VAL((const class clang::IdentifierInfo *), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->constructSetterSelector(p0, p1, p2))
      };
      break;
    }
    case currefl::getPropertyNameFromSetterSelector: {
      ASSERT_TRAIT_IS_REFLPROP(getPropertyNameFromSetterSelector)
      SET_PRIM_TYPE(const char *)
      SET_CALLBACK(Str) {
        LOAD_VAL_X(Str)
        LOAD_VAL((class clang::Selector), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Str, X->getPropertyNameFromSetterSelector(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__PartialDiagnostic: {
# define CLASSNAME (clang::PartialDiagnostic)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__PartialDiagnostic;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getDiagID, Result, X->getDiagID() )
    case currefl::AddTaggedVal: {
      ASSERT_TRAIT_IS_REFLPROP(AddTaggedVal)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((intptr_t), p0)
        LOAD_VAL((enum clang::DiagnosticsEngine::ArgumentKind), p1)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->AddTaggedVal((intptr_t)p0, (enum DiagnosticsEngine::ArgumentKind)p1))
      };
      break;
    }
    case currefl::AddString: {
      ASSERT_TRAIT_IS_REFLPROP(AddString)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const char *), p0)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->AddString((class llvm::StringRef)p0))
      };
      break;
    }
    case currefl::Emit: {
      ASSERT_TRAIT_IS_REFLPROP(Emit)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::DiagnosticBuilder &), p0)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->Emit((const class clang::DiagnosticBuilder &)p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( hasStorage, Result, X->hasStorage() )
    case_REFLPROP_0ARGS( getNumArgs, Result, X->getNumArgs() )
    case currefl::operator_less_less: {
      ASSERT_TRAIT_IS_REFLPROP(operator_less_less)
      SET_CALLBACK(Type) {
        LOAD_VAL((const class clang::PartialDiagnostic &), p0 )
        LOAD_VAL((unsigned int), p1 )
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, p0 << p1)
      };
      break;
    }
    case currefl::operator_less_less1: {
      ASSERT_TRAIT_IS_REFLPROP(operator_less_less1)
      SET_CALLBACK(Type) {
        LOAD_VAL((const class clang::PartialDiagnostic &), p0 )
        LOAD_VAL((int), p1 )
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, p0 << p1)
      };
      break;
    }
    case currefl::operator_less_less2: {
      ASSERT_TRAIT_IS_REFLPROP(operator_less_less2)
      SET_CALLBACK(Type) {
        LOAD_VAL((const class clang::PartialDiagnostic &), p0 )
        LOAD_VAL((const char *), p1 )
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, p0 << p1)
      };
      break;
    }
    case currefl::operator_less_less3: {
      ASSERT_TRAIT_IS_REFLPROP(operator_less_less3)
      SET_CALLBACK(Type) {
        LOAD_VAL((const class clang::PartialDiagnostic &), p0 )
        LOAD_VAL((const char *), p1 )
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, p0 << p1)
      };
      break;
    }
    case currefl::operator_less_less4: {
      ASSERT_TRAIT_IS_REFLPROP(operator_less_less4)
      SET_CALLBACK(Type) {
        LOAD_VAL((const class clang::PartialDiagnostic &), p0 )
        LOAD_VAL((const class clang::IdentifierInfo *), p1 )
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, p0 << p1)
      };
      break;
    }
    case currefl::operator_less_less5: {
      ASSERT_TRAIT_IS_REFLPROP(operator_less_less5)
      SET_CALLBACK(Type) {
        LOAD_VAL((const class clang::PartialDiagnostic &), p0 )
        LOAD_VAL((class clang::SourceRange), p1 )
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, p0 << p1)
      };
      break;
    }
    case currefl::operator_less_less6: {
      ASSERT_TRAIT_IS_REFLPROP(operator_less_less6)
      SET_CALLBACK(Type) {
        LOAD_VAL((const class clang::PartialDiagnostic &), p0 )
        LOAD_VAL((const class clang::CharSourceRange &), p1 )
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, p0 << p1)
      };
      break;
    }
    case currefl::operator_less_less7: {
      ASSERT_TRAIT_IS_REFLPROP(operator_less_less7)
      SET_CALLBACK(Type) {
        LOAD_VAL((const class clang::PartialDiagnostic &), p0 )
        LOAD_VAL((const class clang::FixItHint &), p1 )
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, p0 << p1)
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__DeclarationName: {
# define CLASSNAME (clang::DeclarationName)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_MAYBEPTR(1, CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__DeclarationName;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getUsingDirectiveName, Type, X->getUsingDirectiveName() )
    case_REFLPROP_0ARGS( operator_bool, Result, X->operator bool() )
    case_REFLPROP_0ARGS( isEmpty, Result, X->isEmpty() )
    case_REFLPROP_0ARGS( isIdentifier, Result, X->isIdentifier() )
    case_REFLPROP_0ARGS( isObjCZeroArgSelector, Result, X->isObjCZeroArgSelector() )
    case_REFLPROP_0ARGS( isObjCOneArgSelector, Result, X->isObjCOneArgSelector() )
    case_REFLPROP_0ARGS( getNameKind, Result, X->getNameKind() )
    case_REFLPROP_0ARGS( isDependentName, Result, X->isDependentName() )
    case_REFLPROP_0ARGS( getAsString, Str, X->getAsString() )
    case_REFLPROP_0ARGS( getAsIdentifierInfo, Type, X->getAsIdentifierInfo() )
    case_REFLPROP_0ARGS( getAsOpaqueInteger, Result, X->getAsOpaqueInteger() )
    case_REFLPROP_0ARGS( getAsOpaquePtr, Result, X->getAsOpaquePtr() )
    case currefl::getFromOpaquePtr: {
      ASSERT_TRAIT_IS_REFLPROP(getFromOpaquePtr)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((void *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getFromOpaquePtr(p0))
      };
      break;
    }
    case currefl::getFromOpaqueInteger: {
      ASSERT_TRAIT_IS_REFLPROP(getFromOpaqueInteger)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned long), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getFromOpaqueInteger(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getCXXNameType, Type, X->getCXXNameType() )
    case_REFLPROP_0ARGS( getCXXDeductionGuideTemplate, Type, X->getCXXDeductionGuideTemplate() )
    case_REFLPROP_0ARGS( getCXXOverloadedOperator, Result, X->getCXXOverloadedOperator() )
    case_REFLPROP_0ARGS( getCXXLiteralIdentifier, Type, X->getCXXLiteralIdentifier() )
    case currefl::getCXXIdExprArguments: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->getCXXIdExprArguments())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->getCXXIdExprArguments())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::getCXXIdExprArguments))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case_REFLPROP_0ARGS( getObjCSelector, Type, X->getObjCSelector() )
    case currefl::operator_eq_eq: {
      ASSERT_TRAIT_IS_REFLPROP(operator_eq_eq)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL((class clang::DeclarationName), p0 )
        LOAD_VAL((class clang::DeclarationName), p1 )
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, p0 == p1)
      };
      break;
    }
    case currefl::operator_not_eq: {
      ASSERT_TRAIT_IS_REFLPROP(operator_not_eq)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL((class clang::DeclarationName), p0 )
        LOAD_VAL((class clang::DeclarationName), p1 )
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, p0 != p1)
      };
      break;
    }
    case_REFLPROP_0ARGS( getEmptyMarker, Type, X->getEmptyMarker() )
    case_REFLPROP_0ARGS( getTombstoneMarker, Type, X->getTombstoneMarker() )
    case currefl::compare: {
      ASSERT_TRAIT_IS_REFLPROP(compare)
      SET_PRIM_TYPE(int)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::DeclarationName), p0)
        LOAD_VAL((class clang::DeclarationName), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->compare(p0, p1))
      };
      break;
    }
    case currefl::dump: {
      ASSERT_TRAIT_IS_REFLPROP(dump)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        ASSERT_NO_MORE  VOID_REFLECTION(X->dump())
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__DeclarationNameLoc: {
# define CLASSNAME (clang::DeclarationNameLoc)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__DeclarationNameLoc;
  switch( (currefl::memnames)MemNum ) {
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__DeclarationNameInfo: {
# define CLASSNAME (clang::DeclarationNameInfo)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_MAYBEPTR(1, CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__DeclarationNameInfo;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getName, Type, X->getName() )
    case_REFLPROP_0ARGS( getLoc, Type, X->getLoc() )
    case_REFLPROP_0ARGS( getInfo, Type, X->getInfo() )
    case_REFLPROP_0ARGS( getNamedTypeInfo, Type, X->getNamedTypeInfo() )
    case_REFLPROP_0ARGS( getCXXOperatorNameRange, Type, X->getCXXOperatorNameRange() )
    case_REFLPROP_0ARGS( getCXXLiteralOperatorNameLoc, Type, X->getCXXLiteralOperatorNameLoc() )
    case_REFLPROP_0ARGS( getCXXIdExprNameRange, Type, X->getCXXIdExprNameRange() )
    case_REFLPROP_0ARGS( isInstantiationDependent, Result, X->isInstantiationDependent() )
    case_REFLPROP_0ARGS( containsUnexpandedParameterPack, Result, X->containsUnexpandedParameterPack() )
    case_REFLPROP_0ARGS( getAsString, Str, X->getAsString() )
    case currefl::printName: {
      ASSERT_TRAIT_IS_REFLPROP(printName)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::raw_ostream &), p0)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->printName((class llvm::raw_ostream &)p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getSourceRange, Type, X->getSourceRange() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_llvm__raw_ostream: {
# define CLASSNAME (llvm::raw_ostream)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::llvm__raw_ostream;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( tell, Result, X->tell() )
    case_REFLPROP_0ARGS( GetBufferSize, Result, X->GetBufferSize() )
    case_REFLPROP_0ARGS( GetNumBytesInBuffer, Result, X->GetNumBytesInBuffer() )
    case_REFLPROP_0ARGS( is_displayed, Result, X->is_displayed() )
    case_REFLPROP_0ARGS( has_colors, Result, X->has_colors() )
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_llvm__VersionTuple: {
# define CLASSNAME (llvm::VersionTuple)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_MAYBEPTR(1, CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::llvm__VersionTuple;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( empty, Result, X->empty() )
    case_REFLPROP_0ARGS( getMajor, Result, X->getMajor() )
    case currefl::operator_eq_eq: {
      ASSERT_TRAIT_IS_REFLPROP(operator_eq_eq)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL((const class llvm::VersionTuple &), p0 )
        LOAD_VAL((const class llvm::VersionTuple &), p1 )
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, p0 == p1)
      };
      break;
    }
    case currefl::operator_not_eq: {
      ASSERT_TRAIT_IS_REFLPROP(operator_not_eq)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL((const class llvm::VersionTuple &), p0 )
        LOAD_VAL((const class llvm::VersionTuple &), p1 )
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, p0 != p1)
      };
      break;
    }
    case currefl::operator_less: {
      ASSERT_TRAIT_IS_REFLPROP(operator_less)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL((const class llvm::VersionTuple &), p0 )
        LOAD_VAL((const class llvm::VersionTuple &), p1 )
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, p0 < p1)
      };
      break;
    }
    case currefl::operator_gr: {
      ASSERT_TRAIT_IS_REFLPROP(operator_gr)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL((const class llvm::VersionTuple &), p0 )
        LOAD_VAL((const class llvm::VersionTuple &), p1 )
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, p0 > p1)
      };
      break;
    }
    case currefl::operator_less_eq: {
      ASSERT_TRAIT_IS_REFLPROP(operator_less_eq)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL((const class llvm::VersionTuple &), p0 )
        LOAD_VAL((const class llvm::VersionTuple &), p1 )
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, p0 <= p1)
      };
      break;
    }
    case currefl::operator_gr_eq: {
      ASSERT_TRAIT_IS_REFLPROP(operator_gr_eq)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL((const class llvm::VersionTuple &), p0 )
        LOAD_VAL((const class llvm::VersionTuple &), p1 )
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, p0 >= p1)
      };
      break;
    }
    case_REFLPROP_0ARGS( getAsString, Str, X->getAsString() )
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__Decl: {
# define CLASSNAME (clang::Decl)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__Decl;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getSourceRange, Type, X->getSourceRange() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case_REFLPROP_0ARGS( getLocation, Type, X->getLocation() )
    case_REFLPROP_0ARGS( getKind, Result, X->getKind() )
    case_REFLPROP_0ARGS( getDeclKindName, Str, X->getDeclKindName() )
    case_REFLPROP_0ARGS( getNextDeclInContext, Type, X->getNextDeclInContext() )
    case_REFLPROP_0ARGS( getDeclContext, Type, X->getDeclContext() )
    case_REFLPROP_0ARGS( getNonClosureContext, Type, X->getNonClosureContext() )
    case_REFLPROP_0ARGS( getTranslationUnitDecl, Type, X->getTranslationUnitDecl() )
    case_REFLPROP_0ARGS( isInAnonymousNamespace, Result, X->isInAnonymousNamespace() )
    case_REFLPROP_0ARGS( isInStdNamespace, Result, X->isInStdNamespace() )
    case_REFLPROP_0ARGS( getASTContext, Type, X->getASTContext() )
    case_REFLPROP_0ARGS( getAccess, Result, X->getAccess() )
    case_REFLPROP_0ARGS( getAccessUnsafe, Result, X->getAccessUnsafe() )
    case_REFLPROP_0ARGS( hasAttrs, Result, X->hasAttrs() )
    case currefl::attrs: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->attrs())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->attrs())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::attrs))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case_REFLPROP_0ARGS( getMaxAlignment, Result, X->getMaxAlignment() )
    case_REFLPROP_0ARGS( isInvalidDecl, Result, X->isInvalidDecl() )
    case_REFLPROP_0ARGS( isImplicit, Result, X->isImplicit() )
    case currefl::isUsed: {
      ASSERT_TRAIT_IS_REFLPROP(isUsed)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Result, X->isUsed())
        LOAD_VAL((bool), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isUsed(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( isReferenced, Result, X->isReferenced() )
    case_REFLPROP_0ARGS( isThisDeclarationReferenced, Result, X->isThisDeclarationReferenced() )
    case_REFLPROP_0ARGS( instantiationsWillNeedParsing, Result, X->instantiationsWillNeedParsing() )
    case_REFLPROP_0ARGS( isTopLevelDeclInObjCContainer, Result, X->isTopLevelDeclInObjCContainer() )
    case_REFLPROP_0ARGS( getExternalSourceSymbolAttr, Type, X->getExternalSourceSymbolAttr() )
    case_REFLPROP_0ARGS( isModulePrivate, Result, X->isModulePrivate() )
    case_REFLPROP_0ARGS( isExported, Result, X->isExported() )
    case_REFLPROP_0ARGS( hasDefiningAttr, Result, X->hasDefiningAttr() )
    case_REFLPROP_0ARGS( getDefiningAttr, Type, X->getDefiningAttr() )
    case_REFLPROP_0ARGS( getVersionIntroduced, Type, X->getVersionIntroduced() )
    case_REFLPROP_0ARGS( isWeakImported, Result, X->isWeakImported() )
    case_REFLPROP_0ARGS( isFromASTFile, Result, X->isFromASTFile() )
    case_REFLPROP_0ARGS( getGlobalID, Result, X->getGlobalID() )
    case_REFLPROP_0ARGS( getOwningModuleID, Result, X->getOwningModuleID() )
    case_REFLPROP_0ARGS( getImportedOwningModule, Type, X->getImportedOwningModule() )
    case_REFLPROP_0ARGS( getLocalOwningModule, Type, X->getLocalOwningModule() )
    case_REFLPROP_0ARGS( hasOwningModule, Result, X->hasOwningModule() )
    case_REFLPROP_0ARGS( getOwningModule, Type, X->getOwningModule() )
    case currefl::getOwningModuleForLinkage: {
      ASSERT_TRAIT_IS_REFLPROP(getOwningModuleForLinkage)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Type, X->getOwningModuleForLinkage())
        LOAD_VAL((bool), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getOwningModuleForLinkage(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( isHidden, Result, X->isHidden() )
    case_REFLPROP_0ARGS( getModuleOwnershipKind, Result, X->getModuleOwnershipKind() )
    case_REFLPROP_0ARGS( getIdentifierNamespace, Result, X->getIdentifierNamespace() )
    case currefl::isInIdentifierNamespace: {
      ASSERT_TRAIT_IS_REFLPROP(isInIdentifierNamespace)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isInIdentifierNamespace(p0))
      };
      break;
    }
    case currefl::getIdentifierNamespaceForKind: {
      ASSERT_TRAIT_IS_REFLPROP(getIdentifierNamespaceForKind)
      SET_PRIM_TYPE(unsigned int)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::Decl::Kind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getIdentifierNamespaceForKind(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( hasTagIdentifierNamespace, Result, X->hasTagIdentifierNamespace() )
    case currefl::isTagIdentifierNamespace: {
      ASSERT_TRAIT_IS_REFLPROP(isTagIdentifierNamespace)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isTagIdentifierNamespace(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getLexicalDeclContext, Type, X->getLexicalDeclContext() )
    case_REFLPROP_0ARGS( isOutOfLine, Result, X->isOutOfLine() )
    case_REFLPROP_0ARGS( isTemplated, Result, X->isTemplated() )
    case_REFLPROP_0ARGS( isDefinedOutsideFunctionOrMethod, Result, X->isDefinedOutsideFunctionOrMethod() )
    case_REFLPROP_0ARGS( isLexicallyWithinFunctionOrMethod, Result, X->isLexicallyWithinFunctionOrMethod() )
    case_REFLPROP_0ARGS( getParentFunctionOrMethod, Type, X->getParentFunctionOrMethod() )
    case_REFLPROP_0ARGS( getCanonicalDecl, Type, X->getCanonicalDecl() )
    case_REFLPROP_0ARGS( isCanonicalDecl, Result, X->isCanonicalDecl() )
    case currefl::redecls: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->redecls())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->redecls())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::redecls))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case_REFLPROP_0ARGS( getPreviousDecl, Type, X->getPreviousDecl() )
    case_REFLPROP_0ARGS( isFirstDecl, Result, X->isFirstDecl() )
    case_REFLPROP_0ARGS( getMostRecentDecl, Type, X->getMostRecentDecl() )
    case_REFLPROP_0ARGS( getBody, Type, X->getBody() )
    case_REFLPROP_0ARGS( hasBody, Result, X->hasBody() )
    case_REFLPROP_0ARGS( getBodyRBrace, Type, X->getBodyRBrace() )
    case currefl::add: {
      ASSERT_TRAIT_IS_REFLPROP(add)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::Decl::Kind), p0)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->add((enum clang::Decl::Kind)p0))
      };
      break;
    }
    case currefl::EnableStatistics: {
      ASSERT_TRAIT_IS_REFLPROP(EnableStatistics)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        ASSERT_NO_MORE  VOID_REFLECTION(X->EnableStatistics())
      };
      break;
    }
    case currefl::PrintStats: {
      ASSERT_TRAIT_IS_REFLPROP(PrintStats)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        ASSERT_NO_MORE  VOID_REFLECTION(X->PrintStats())
      };
      break;
    }
    case_REFLPROP_0ARGS( isTemplateParameter, Result, X->isTemplateParameter() )
    case_REFLPROP_0ARGS( isTemplateParameterPack, Result, X->isTemplateParameterPack() )
    case_REFLPROP_0ARGS( isParameterPack, Result, X->isParameterPack() )
    case_REFLPROP_0ARGS( isTemplateDecl, Result, X->isTemplateDecl() )
    case_REFLPROP_0ARGS( isFunctionOrFunctionTemplate, Result, X->isFunctionOrFunctionTemplate() )
    case_REFLPROP_0ARGS( getDescribedTemplate, Type, X->getDescribedTemplate() )
    case_REFLPROP_0ARGS( getAsFunction, Type, X->getAsFunction() )
    case_REFLPROP_0ARGS( getFriendObjectKind, Result, X->getFriendObjectKind() )
    case currefl::classofKind: {
      ASSERT_TRAIT_IS_REFLPROP(classofKind)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::Decl::Kind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classofKind(p0))
      };
      break;
    }
    case currefl::print: {
      ASSERT_TRAIT_IS_REFLPROP(print)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::raw_ostream &), p0)
        IF_NO_MORE  VOID_REFLECTION(X->print((class llvm::raw_ostream &)p0))
        LOAD_VAL((unsigned int), p1)
        IF_NO_MORE  VOID_REFLECTION(X->print((class llvm::raw_ostream &)p0, (unsigned int)p1))
        LOAD_VAL((bool), p2)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->print((class llvm::raw_ostream &)p0, (unsigned int)p1, (bool)p2))
      };
      break;
    }
    case currefl::print1: {
      ASSERT_TRAIT_IS_REFLPROP(print1)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::raw_ostream &), p0)
        LOAD_VAL((const struct clang::PrintingPolicy &), p1)
        IF_NO_MORE  VOID_REFLECTION(X->print((class llvm::raw_ostream &)p0, (const struct clang::PrintingPolicy &)p1))
        LOAD_VAL((unsigned int), p2)
        IF_NO_MORE  VOID_REFLECTION(X->print((class llvm::raw_ostream &)p0, (const struct clang::PrintingPolicy &)p1, (unsigned int)p2))
        LOAD_VAL((bool), p3)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->print((class llvm::raw_ostream &)p0, (const struct clang::PrintingPolicy &)p1, (unsigned int)p2, (bool)p3))
      };
      break;
    }
    case currefl::printGroup: {
      ASSERT_TRAIT_IS_REFLPROP(printGroup)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::Decl **), p0)
        LOAD_VAL((unsigned int), p1)
        LOAD_VAL((class llvm::raw_ostream &), p2)
        LOAD_VAL((const struct clang::PrintingPolicy &), p3)
        IF_NO_MORE  VOID_REFLECTION(X->printGroup((class clang::Decl **)p0, (unsigned int)p1, (class llvm::raw_ostream &)p2, (const struct clang::PrintingPolicy &)p3))
        LOAD_VAL((unsigned int), p4)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->printGroup((class clang::Decl **)p0, (unsigned int)p1, (class llvm::raw_ostream &)p2, (const struct clang::PrintingPolicy &)p3, (unsigned int)p4))
      };
      break;
    }
    case currefl::dump: {
      ASSERT_TRAIT_IS_REFLPROP(dump)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        ASSERT_NO_MORE  VOID_REFLECTION(X->dump())
      };
      break;
    }
    case currefl::dumpColor: {
      ASSERT_TRAIT_IS_REFLPROP(dumpColor)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        ASSERT_NO_MORE  VOID_REFLECTION(X->dumpColor())
      };
      break;
    }
    case currefl::dump1: {
      ASSERT_TRAIT_IS_REFLPROP(dump1)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::raw_ostream &), p0)
        IF_NO_MORE  VOID_REFLECTION(X->dump((class llvm::raw_ostream &)p0))
        LOAD_VAL((bool), p1)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->dump((class llvm::raw_ostream &)p0, (bool)p1))
      };
      break;
    }
    case currefl::getFunctionType: {
      ASSERT_TRAIT_IS_REFLPROP(getFunctionType)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Type, X->getFunctionType())
        LOAD_VAL((bool), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getFunctionType(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__DeclContextLookupResult: {
# define CLASSNAME (clang::DeclContextLookupResult)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_NEVERPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__DeclContextLookupResult;
  switch( (currefl::memnames)MemNum ) {
    case currefl::_this_: {
      switch (TraitKind) {
        case RTK_range_nth:
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE
            BUILD_REFLECTION_CALL_RANGE_NTH(Type, *X)
          };
          break;
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE
            BUILD_REFLECTION_CALL_RANGE_SIZE(*X)
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << "_this_"
                 << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case_REFLPROP_0ARGS( empty, Result, X->empty() )
    case_REFLPROP_0ARGS( data, Type, X->data() )
    case_REFLPROP_0ARGS( size, Result, X->size() )
    case_REFLPROP_0ARGS( front, Type, X->front() )
    case_REFLPROP_0ARGS( back, Type, X->back() )
    case currefl::operator_sub: {
      ASSERT_TRAIT_IS_REFLPROP(operator_sub)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned long), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->operator[](p0))
      };
      break;
    }
    case currefl::slice: {
      ASSERT_TRAIT_IS_REFLPROP(slice)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned long), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->slice(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__DeclContext: {
# define CLASSNAME (clang::DeclContext)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(Decl::castFromDeclContext(X))
  namespace currefl = refl::clang__DeclContext;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getDeclKind, Result, X->getDeclKind() )
    case_REFLPROP_0ARGS( getDeclKindName, Str, X->getDeclKindName() )
    case_REFLPROP_0ARGS( getParent, Type, X->getParent() )
    case_REFLPROP_0ARGS( getLexicalParent, Type, X->getLexicalParent() )
    case_REFLPROP_0ARGS( getLookupParent, Type, X->getLookupParent() )
    case_REFLPROP_0ARGS( getParentASTContext, Type, X->getParentASTContext() )
    case_REFLPROP_0ARGS( isClosure, Result, X->isClosure() )
    case_REFLPROP_0ARGS( isObjCContainer, Result, X->isObjCContainer() )
    case_REFLPROP_0ARGS( isFunctionOrMethod, Result, X->isFunctionOrMethod() )
    case_REFLPROP_0ARGS( isLookupContext, Result, X->isLookupContext() )
    case_REFLPROP_0ARGS( isFileContext, Result, X->isFileContext() )
    case_REFLPROP_0ARGS( isTranslationUnit, Result, X->isTranslationUnit() )
    case_REFLPROP_0ARGS( isRecord, Result, X->isRecord() )
    case_REFLPROP_0ARGS( isNamespace, Result, X->isNamespace() )
    case_REFLPROP_0ARGS( isStdNamespace, Result, X->isStdNamespace() )
    case_REFLPROP_0ARGS( isInlineNamespace, Result, X->isInlineNamespace() )
    case_REFLPROP_0ARGS( isDependentContext, Result, X->isDependentContext() )
    case_REFLPROP_0ARGS( isTransparentContext, Result, X->isTransparentContext() )
    case_REFLPROP_0ARGS( isExternCContext, Result, X->isExternCContext() )
    case_REFLPROP_0ARGS( getExternCContext, Type, X->getExternCContext() )
    case_REFLPROP_0ARGS( isExternCXXContext, Result, X->isExternCXXContext() )
    case currefl::Equals: {
      ASSERT_TRAIT_IS_REFLPROP(Equals)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::DeclContext *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->Equals(p0))
      };
      break;
    }
    case currefl::Encloses: {
      ASSERT_TRAIT_IS_REFLPROP(Encloses)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::DeclContext *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->Encloses(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getNonClosureAncestor, Type, X->getNonClosureAncestor() )
    case_REFLPROP_0ARGS( getPrimaryContext, Type, X->getPrimaryContext() )
    case_REFLPROP_0ARGS( getRedeclContext, Type, X->getRedeclContext() )
    case_REFLPROP_0ARGS( getEnclosingNamespaceContext, Type, X->getEnclosingNamespaceContext() )
    case_REFLPROP_0ARGS( getOuterLexicalRecordContext, Type, X->getOuterLexicalRecordContext() )
    case currefl::InEnclosingNamespaceSetOf: {
      ASSERT_TRAIT_IS_REFLPROP(InEnclosingNamespaceSetOf)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::DeclContext *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->InEnclosingNamespaceSetOf(p0))
      };
      break;
    }
    case currefl::decls: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->decls())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->decls())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::decls))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case_REFLPROP_0ARGS( decls_empty, Result, X->decls_empty() )
    case currefl::noload_decls: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->noload_decls())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->noload_decls())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::noload_decls))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case currefl::containsDecl: {
      ASSERT_TRAIT_IS_REFLPROP(containsDecl)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::Decl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->containsDecl(p0))
      };
      break;
    }
    case currefl::containsDeclAndLoad: {
      ASSERT_TRAIT_IS_REFLPROP(containsDeclAndLoad)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::Decl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->containsDeclAndLoad(p0))
      };
      break;
    }
    case currefl::lookup: {
      ASSERT_TRAIT_IS_REFLPROP(lookup)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::DeclarationName), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->lookup(p0))
      };
      break;
    }
    case currefl::lookups: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->lookups())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->lookups())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::lookups))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case currefl::ddiags: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->ddiags())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->ddiags())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::ddiags))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case_REFLPROP_0ARGS( getLookupPtr, Type, X->getLookupPtr() )
    case_REFLPROP_0ARGS( hasExternalLexicalStorage, Result, X->hasExternalLexicalStorage() )
    case_REFLPROP_0ARGS( hasExternalVisibleStorage, Result, X->hasExternalVisibleStorage() )
    case currefl::isDeclInLexicalTraversal: {
      ASSERT_TRAIT_IS_REFLPROP(isDeclInLexicalTraversal)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Decl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isDeclInLexicalTraversal(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( shouldUseQualifiedLookup, Result, X->shouldUseQualifiedLookup() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Decl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::classof1: {
      ASSERT_TRAIT_IS_REFLPROP(classof1)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::DeclContext *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::dumpDeclContext: {
      ASSERT_TRAIT_IS_REFLPROP(dumpDeclContext)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        ASSERT_NO_MORE  VOID_REFLECTION(X->dumpDeclContext())
      };
      break;
    }
    case currefl::dumpLookups: {
      ASSERT_TRAIT_IS_REFLPROP(dumpLookups)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        ASSERT_NO_MORE  VOID_REFLECTION(X->dumpLookups())
      };
      break;
    }
    case currefl::dumpLookups1: {
      ASSERT_TRAIT_IS_REFLPROP(dumpLookups1)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::raw_ostream &), p0)
        IF_NO_MORE  VOID_REFLECTION(X->dumpLookups((llvm::raw_ostream &)p0))
        LOAD_VAL((bool), p1)
        IF_NO_MORE  VOID_REFLECTION(X->dumpLookups((llvm::raw_ostream &)p0, (bool)p1))
        LOAD_VAL((bool), p2)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->dumpLookups((llvm::raw_ostream &)p0, (bool)p1, (bool)p2))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__CharUnits: {
# define CLASSNAME (clang::CharUnits)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_MAYBEPTR(1, CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__CharUnits;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( Zero, Type, X->Zero() )
    case_REFLPROP_0ARGS( One, Type, X->One() )
    case currefl::fromQuantity: {
      ASSERT_TRAIT_IS_REFLPROP(fromQuantity)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((long long), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->fromQuantity(p0))
      };
      break;
    }
    case currefl::operator_eq_eq: {
      ASSERT_TRAIT_IS_REFLPROP(operator_eq_eq)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::CharUnits &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->operator==(p0))
      };
      break;
    }
    case currefl::operator_not_eq: {
      ASSERT_TRAIT_IS_REFLPROP(operator_not_eq)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::CharUnits &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->operator!=(p0))
      };
      break;
    }
    case currefl::operator_less: {
      ASSERT_TRAIT_IS_REFLPROP(operator_less)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::CharUnits &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->operator<(p0))
      };
      break;
    }
    case currefl::operator_less_eq: {
      ASSERT_TRAIT_IS_REFLPROP(operator_less_eq)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::CharUnits &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->operator<=(p0))
      };
      break;
    }
    case currefl::operator_gr: {
      ASSERT_TRAIT_IS_REFLPROP(operator_gr)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::CharUnits &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->operator>(p0))
      };
      break;
    }
    case currefl::operator_gr_eq: {
      ASSERT_TRAIT_IS_REFLPROP(operator_gr_eq)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::CharUnits &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->operator>=(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( isZero, Result, X->isZero() )
    case_REFLPROP_0ARGS( isOne, Result, X->isOne() )
    case_REFLPROP_0ARGS( isPositive, Result, X->isPositive() )
    case_REFLPROP_0ARGS( isNegative, Result, X->isNegative() )
    case_REFLPROP_0ARGS( isPowerOfTwo, Result, X->isPowerOfTwo() )
    case currefl::isMultipleOf: {
      ASSERT_TRAIT_IS_REFLPROP(isMultipleOf)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::CharUnits), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isMultipleOf(p0))
      };
      break;
    }
    case currefl::operator_star: {
      ASSERT_TRAIT_IS_REFLPROP(operator_star)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((long long), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->operator*(p0))
      };
      break;
    }
    case currefl::operator_div: {
      ASSERT_TRAIT_IS_REFLPROP(operator_div)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((long long), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->operator/(p0))
      };
      break;
    }
    case currefl::operator_div1: {
      ASSERT_TRAIT_IS_REFLPROP(operator_div1)
      SET_PRIM_TYPE(long long)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::CharUnits &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->operator/(p0))
      };
      break;
    }
    case currefl::operator_mod: {
      ASSERT_TRAIT_IS_REFLPROP(operator_mod)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((long long), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->operator%(p0))
      };
      break;
    }
    case currefl::operator_mod1: {
      ASSERT_TRAIT_IS_REFLPROP(operator_mod1)
      SET_PRIM_TYPE(long long)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::CharUnits &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->operator%(p0))
      };
      break;
    }
    case currefl::operator_plus: {
      ASSERT_TRAIT_IS_REFLPROP(operator_plus)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::CharUnits &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->operator+(p0))
      };
      break;
    }
    case currefl::operator_minus: {
      ASSERT_TRAIT_IS_REFLPROP(operator_minus)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::CharUnits &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->operator-(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( operator_minus1, Type, X->operator-() )
    case_REFLPROP_0ARGS( getQuantity, Result, X->getQuantity() )
    case currefl::alignTo: {
      ASSERT_TRAIT_IS_REFLPROP(alignTo)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::CharUnits &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->alignTo(p0))
      };
      break;
    }
    case currefl::alignmentAtOffset: {
      ASSERT_TRAIT_IS_REFLPROP(alignmentAtOffset)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::CharUnits), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->alignmentAtOffset(p0))
      };
      break;
    }
    case currefl::alignmentOfArrayElement: {
      ASSERT_TRAIT_IS_REFLPROP(alignmentOfArrayElement)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::CharUnits), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->alignmentOfArrayElement(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__FileSystemOptions: {
# define CLASSNAME (clang::FileSystemOptions)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__FileSystemOptions;
  switch( (currefl::memnames)MemNum ) {
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_llvm__Twine: {
# define CLASSNAME (llvm::Twine)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::llvm__Twine;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( isTriviallyEmpty, Result, X->isTriviallyEmpty() )
    case_REFLPROP_0ARGS( isSingleStringRef, Result, X->isSingleStringRef() )
    case_REFLPROP_0ARGS( str, Str, X->str() )
    case_REFLPROP_0ARGS( getSingleStringRef, Str, X->getSingleStringRef() )
    case currefl::print: {
      ASSERT_TRAIT_IS_REFLPROP(print)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::raw_ostream &), p0)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->print((class llvm::raw_ostream &)p0))
      };
      break;
    }
    case currefl::dump: {
      ASSERT_TRAIT_IS_REFLPROP(dump)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        ASSERT_NO_MORE  VOID_REFLECTION(X->dump())
      };
      break;
    }
    case currefl::printRepr: {
      ASSERT_TRAIT_IS_REFLPROP(printRepr)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::raw_ostream &), p0)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->printRepr((class llvm::raw_ostream &)p0))
      };
      break;
    }
    case currefl::dumpRepr: {
      ASSERT_TRAIT_IS_REFLPROP(dumpRepr)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        ASSERT_NO_MORE  VOID_REFLECTION(X->dumpRepr())
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_llvm__sys__fs__UniqueID: {
# define CLASSNAME (llvm::sys::fs::UniqueID)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::llvm__sys__fs__UniqueID;
  switch( (currefl::memnames)MemNum ) {
    case currefl::operator_eq_eq: {
      ASSERT_TRAIT_IS_REFLPROP(operator_eq_eq)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class llvm::sys::fs::UniqueID &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->operator==(p0))
      };
      break;
    }
    case currefl::operator_not_eq: {
      ASSERT_TRAIT_IS_REFLPROP(operator_not_eq)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class llvm::sys::fs::UniqueID &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->operator!=(p0))
      };
      break;
    }
    case currefl::operator_less: {
      ASSERT_TRAIT_IS_REFLPROP(operator_less)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class llvm::sys::fs::UniqueID &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->operator<(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getDevice, Result, X->getDevice() )
    case_REFLPROP_0ARGS( getFile, Result, X->getFile() )
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_llvm__MemoryBuffer: {
# define CLASSNAME (llvm::MemoryBuffer)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::llvm__MemoryBuffer;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getBufferStart, Str, X->getBufferStart() )
    case_REFLPROP_0ARGS( getBufferEnd, Str, X->getBufferEnd() )
    case_REFLPROP_0ARGS( getBufferSize, Result, X->getBufferSize() )
    case_REFLPROP_0ARGS( getBuffer, Str, X->getBuffer() )
    case_REFLPROP_0ARGS( getBufferIdentifier, Str, X->getBufferIdentifier() )
    case_REFLPROP_0ARGS( getBufferKind, Result, X->getBufferKind() )
    case_REFLPROP_0ARGS( getMemBufferRef, Type, X->getMemBufferRef() )
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_llvm__MemoryBufferRef: {
# define CLASSNAME (llvm::MemoryBufferRef)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_NEVERPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::llvm__MemoryBufferRef;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getBuffer, Str, X->getBuffer() )
    case_REFLPROP_0ARGS( getBufferIdentifier, Str, X->getBufferIdentifier() )
    case_REFLPROP_0ARGS( getBufferStart, Str, X->getBufferStart() )
    case_REFLPROP_0ARGS( getBufferEnd, Str, X->getBufferEnd() )
    case_REFLPROP_0ARGS( getBufferSize, Result, X->getBufferSize() )
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__DirectoryEntry: {
# define CLASSNAME (clang::DirectoryEntry)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__DirectoryEntry;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getName, Str, X->getName() )
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__FileEntry: {
# define CLASSNAME (clang::FileEntry)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__FileEntry;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getName, Str, X->getName() )
    case_REFLPROP_0ARGS( tryGetRealPathName, Str, X->tryGetRealPathName() )
    case_REFLPROP_0ARGS( isValid, Result, X->isValid() )
    case_REFLPROP_0ARGS( getSize, Result, X->getSize() )
    case_REFLPROP_0ARGS( getUID, Result, X->getUID() )
    case_REFLPROP_0ARGS( getUniqueID, Type, X->getUniqueID() )
    case_REFLPROP_0ARGS( isInPCH, Result, X->isInPCH() )
    case_REFLPROP_0ARGS( getModificationTime, Result, X->getModificationTime() )
    case_REFLPROP_0ARGS( getDir, Type, X->getDir() )
    case currefl::operator_less: {
      ASSERT_TRAIT_IS_REFLPROP(operator_less)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::FileEntry &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->operator<(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( isNamedPipe, Result, X->isNamedPipe() )
    case currefl::closeFile: {
      ASSERT_TRAIT_IS_REFLPROP(closeFile)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        ASSERT_NO_MORE  VOID_REFLECTION(X->closeFile())
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__FileManager: {
# define CLASSNAME (clang::FileManager)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__FileManager;
  switch( (currefl::memnames)MemNum ) {
    case currefl::Retain: {
      ASSERT_TRAIT_IS_REFLPROP(Retain)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        ASSERT_NO_MORE  VOID_REFLECTION(X->Retain())
      };
      break;
    }
    case currefl::Release: {
      ASSERT_TRAIT_IS_REFLPROP(Release)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        ASSERT_NO_MORE  VOID_REFLECTION(X->Release())
      };
      break;
    }
    case_REFLPROP_0ARGS( getFileSystemOpts, Type, X->getFileSystemOpts() )
    case currefl::modifyFileEntry: {
      ASSERT_TRAIT_IS_REFLPROP(modifyFileEntry)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::FileEntry *), p0)
        LOAD_VAL((long long), p1)
        LOAD_VAL((long), p2)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->modifyFileEntry((class clang::FileEntry *)p0, (off_t)p1, (time_t)p2))
      };
      break;
    }
    case currefl::PrintStats: {
      ASSERT_TRAIT_IS_REFLPROP(PrintStats)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        ASSERT_NO_MORE  VOID_REFLECTION(X->PrintStats())
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__ASTFileSignature: {
# define CLASSNAME (clang::ASTFileSignature)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_NEVERPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__ASTFileSignature;
  switch( (currefl::memnames)MemNum ) {
    case currefl::_this_: {
      switch (TraitKind) {
        case RTK_range_nth:
          SET_PRIM_TYPE(std::remove_reference<decltype(
            *DV(PP_REMOVE_PARENS(CLASSNAME)).begin() )>::type)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE
            BUILD_REFLECTION_CALL_RANGE_NTH(Result, *X)
          };
          break;
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE
            BUILD_REFLECTION_CALL_RANGE_SIZE(*X)
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << "_this_"
                 << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case_REFLPROP_0ARGS( cbegin, Result, X->cbegin() )
    case_REFLPROP_0ARGS( cend, Result, X->cend() )
    case_REFLPROP_0ARGS( size, Result, X->size() )
    case_REFLPROP_0ARGS( max_size, Result, X->max_size() )
    case_REFLPROP_0ARGS( empty, Result, X->empty() )
    case currefl::operator_sub: {
      ASSERT_TRAIT_IS_REFLPROP(operator_sub)
      SET_PRIM_TYPE(const unsigned int &)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((unsigned long), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->operator[](p0))
      };
      break;
    }
    case currefl::at: {
      ASSERT_TRAIT_IS_REFLPROP(at)
      SET_PRIM_TYPE(const unsigned int &)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((unsigned long), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->at(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( front, Result, X->front() )
    case_REFLPROP_0ARGS( back, Result, X->back() )
    case_REFLPROP_0ARGS( data, Result, X->data() )
    case_REFLPROP_0ARGS( operator_bool, Result, X->operator bool() )
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__Module: {
# define CLASSNAME (clang::Module)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__Module;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS(DefinitionLoc, Type, X->DefinitionLoc)
    case_REFLPROP_0ARGS(Kind, Result, X->Kind)
    case_REFLPROP_0ARGS(Parent, Type, X->Parent)
    case_REFLPROP_0ARGS(Directory, Type, X->Directory)
    case_REFLPROP_0ARGS(Signature, Type, X->Signature)
    case_REFLPROP_0ARGS(ShadowingModule, Type, X->ShadowingModule)
    case_REFLPROP_0ARGS(IsMissingRequirement, Result, X->IsMissingRequirement)
    case_REFLPROP_0ARGS(HasIncompatibleModuleFile, Result, X->HasIncompatibleModuleFile)
    case_REFLPROP_0ARGS(IsAvailable, Result, X->IsAvailable)
    case_REFLPROP_0ARGS(IsFromModuleFile, Result, X->IsFromModuleFile)
    case_REFLPROP_0ARGS(IsFramework, Result, X->IsFramework)
    case_REFLPROP_0ARGS(IsExplicit, Result, X->IsExplicit)
    case_REFLPROP_0ARGS(IsSystem, Result, X->IsSystem)
    case_REFLPROP_0ARGS(IsExternC, Result, X->IsExternC)
    case_REFLPROP_0ARGS(IsInferred, Result, X->IsInferred)
    case_REFLPROP_0ARGS(InferSubmodules, Result, X->InferSubmodules)
    case_REFLPROP_0ARGS(InferExplicitSubmodules, Result, X->InferExplicitSubmodules)
    case_REFLPROP_0ARGS(InferExportWildcard, Result, X->InferExportWildcard)
    case_REFLPROP_0ARGS(ConfigMacrosExhaustive, Result, X->ConfigMacrosExhaustive)
    case_REFLPROP_0ARGS(NoUndeclaredIncludes, Result, X->NoUndeclaredIncludes)
    case_REFLPROP_0ARGS(ModuleMapIsPrivate, Result, X->ModuleMapIsPrivate)
    case_REFLPROP_0ARGS(NameVisibility, Result, X->NameVisibility)
    case_REFLPROP_0ARGS(InferredSubmoduleLoc, Type, X->InferredSubmoduleLoc)
    case_REFLPROP_0ARGS(UseExportAsModuleLinkName, Result, X->UseExportAsModuleLinkName)
    case_REFLPROP_0ARGS( isAvailable, Result, X->isAvailable() )
    case_REFLPROP_0ARGS( isSubModule, Result, X->isSubModule() )
    case currefl::isSubModuleOf: {
      ASSERT_TRAIT_IS_REFLPROP(isSubModuleOf)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Module *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isSubModuleOf(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( isPartOfFramework, Result, X->isPartOfFramework() )
    case_REFLPROP_0ARGS( isSubFramework, Result, X->isSubFramework() )
    case currefl::getFullModuleName: {
      ASSERT_TRAIT_IS_REFLPROP(getFullModuleName)
      SET_PRIM_TYPE(const char *)
      SET_CALLBACK(Str) {
        LOAD_VAL_X(Str)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Str, X->getFullModuleName())
        LOAD_VAL((bool), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Str, X->getFullModuleName(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getTopLevelModule, Type, X->getTopLevelModule() )
    case_REFLPROP_0ARGS( getTopLevelModuleName, Str, X->getTopLevelModuleName() )
    case_REFLPROP_0ARGS( getASTFile, Type, X->getASTFile() )
    case_REFLPROP_0ARGS( getUmbrellaDir, Type, X->getUmbrellaDir() )
    case_REFLPROP_0ARGS( getUmbrellaHeader, Type, X->getUmbrellaHeader() )
    case_REFLPROP_0ARGS( hasUmbrellaDir, Result, X->hasUmbrellaDir() )
    case currefl::directlyUses: {
      ASSERT_TRAIT_IS_REFLPROP(directlyUses)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Module *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->directlyUses(p0))
      };
      break;
    }
    case currefl::isModuleVisible: {
      ASSERT_TRAIT_IS_REFLPROP(isModuleVisible)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Module *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isModuleVisible(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getVisibilityID, Result, X->getVisibilityID() )
    case currefl::submodules: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->submodules())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->submodules())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::submodules))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case_REFLPROP_0ARGS( getModuleInputBufferName, Str, X->getModuleInputBufferName() )
    case currefl::print: {
      ASSERT_TRAIT_IS_REFLPROP(print)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::raw_ostream &), p0)
        IF_NO_MORE  VOID_REFLECTION(X->print((class llvm::raw_ostream &)p0))
        LOAD_VAL((unsigned int), p1)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->print((class llvm::raw_ostream &)p0, (unsigned int)p1))
      };
      break;
    }
    case currefl::dump: {
      ASSERT_TRAIT_IS_REFLPROP(dump)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        ASSERT_NO_MORE  VOID_REFLECTION(X->dump())
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__Module__Header: {
# define CLASSNAME (clang::Module::Header)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_NEVERPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__Module__Header;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS(Entry, Type, X->Entry)
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__Module__DirectoryName: {
# define CLASSNAME (clang::Module::DirectoryName)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_NEVERPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__Module__DirectoryName;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS(Entry, Type, X->Entry)
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__ExternalASTSource: {
# define CLASSNAME (clang::ExternalASTSource)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__ExternalASTSource;
  switch( (currefl::memnames)MemNum ) {
    case currefl::Retain: {
      ASSERT_TRAIT_IS_REFLPROP(Retain)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        ASSERT_NO_MORE  VOID_REFLECTION(X->Retain())
      };
      break;
    }
    case currefl::Release: {
      ASSERT_TRAIT_IS_REFLPROP(Release)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        ASSERT_NO_MORE  VOID_REFLECTION(X->Release())
      };
      break;
    }
    case_REFLPROP_0ARGS( getGeneration, Result, X->getGeneration() )
    case_REFLPROP_0ARGS( getMemoryBufferSizes, Type, X->getMemoryBufferSizes() )
    case currefl::getMemoryBufferSizes1: {
      ASSERT_TRAIT_IS_REFLPROP(getMemoryBufferSizes1)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((struct clang::ExternalASTSource::MemoryBufferSizes &), p0)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->getMemoryBufferSizes((struct clang::ExternalASTSource::MemoryBufferSizes &)p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__ExternalASTSource__MemoryBufferSizes: {
# define CLASSNAME (clang::ExternalASTSource::MemoryBufferSizes)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_MAYBEPTR(0, CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__ExternalASTSource__MemoryBufferSizes;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS(malloc_bytes, Result, X->malloc_bytes)
    case_REFLPROP_0ARGS(mmap_bytes, Result, X->mmap_bytes)
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_llvm__FoldingSetBase: {
  llvm_unreachable("Didn't expect RK_llvm__FoldingSetBase to be used");}case RK_llvm__FoldingSetBase__Node: {
# define CLASSNAME (llvm::FoldingSetBase::Node)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::llvm__FoldingSetBase__Node;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getNextInBucket, Result, X->getNextInBucket() )
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_llvm__FoldingSetNodeIDRef: {
# define CLASSNAME (llvm::FoldingSetNodeIDRef)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_NEVERPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::llvm__FoldingSetNodeIDRef;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( ComputeHash, Result, X->ComputeHash() )
    case currefl::operator_eq_eq: {
      ASSERT_TRAIT_IS_REFLPROP(operator_eq_eq)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::FoldingSetNodeIDRef), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->operator==(p0))
      };
      break;
    }
    case currefl::operator_not_eq: {
      ASSERT_TRAIT_IS_REFLPROP(operator_not_eq)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::FoldingSetNodeIDRef), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->operator!=(p0))
      };
      break;
    }
    case currefl::operator_less: {
      ASSERT_TRAIT_IS_REFLPROP(operator_less)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::FoldingSetNodeIDRef), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->operator<(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getData, Result, X->getData() )
    case_REFLPROP_0ARGS( getSize, Result, X->getSize() )
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_llvm__FoldingSetNodeID: {
# define CLASSNAME (llvm::FoldingSetNodeID)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::llvm__FoldingSetNodeID;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( ComputeHash, Result, X->ComputeHash() )
    case currefl::operator_eq_eq: {
      ASSERT_TRAIT_IS_REFLPROP(operator_eq_eq)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class llvm::FoldingSetNodeID &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->operator==(p0))
      };
      break;
    }
    case currefl::operator_eq_eq1: {
      ASSERT_TRAIT_IS_REFLPROP(operator_eq_eq1)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class llvm::FoldingSetNodeIDRef), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->operator==(p0))
      };
      break;
    }
    case currefl::operator_not_eq: {
      ASSERT_TRAIT_IS_REFLPROP(operator_not_eq)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class llvm::FoldingSetNodeID &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->operator!=(p0))
      };
      break;
    }
    case currefl::operator_not_eq1: {
      ASSERT_TRAIT_IS_REFLPROP(operator_not_eq1)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class llvm::FoldingSetNodeIDRef), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->operator!=(p0))
      };
      break;
    }
    case currefl::operator_less: {
      ASSERT_TRAIT_IS_REFLPROP(operator_less)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class llvm::FoldingSetNodeID &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->operator<(p0))
      };
      break;
    }
    case currefl::operator_less1: {
      ASSERT_TRAIT_IS_REFLPROP(operator_less1)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class llvm::FoldingSetNodeIDRef), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->operator<(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__NestedNameSpecifier: {
# define CLASSNAME (clang::NestedNameSpecifier)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__NestedNameSpecifier;
  switch( (currefl::memnames)MemNum ) {
    case currefl::Create: {
      ASSERT_TRAIT_IS_REFLPROP(Create)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((class clang::NestedNameSpecifier *), p1)
        LOAD_VAL((class clang::IdentifierInfo *), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2))
      };
      break;
    }
    case currefl::Create1: {
      ASSERT_TRAIT_IS_REFLPROP(Create1)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((class clang::NestedNameSpecifier *), p1)
        LOAD_VAL((const class clang::NamespaceDecl *), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2))
      };
      break;
    }
    case currefl::Create2: {
      ASSERT_TRAIT_IS_REFLPROP(Create2)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((class clang::NestedNameSpecifier *), p1)
        LOAD_VAL((class clang::NamespaceAliasDecl *), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2))
      };
      break;
    }
    case currefl::Create3: {
      ASSERT_TRAIT_IS_REFLPROP(Create3)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((class clang::NestedNameSpecifier *), p1)
        LOAD_VAL((bool), p2)
        LOAD_VAL((const class clang::Type *), p3)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3))
      };
      break;
    }
    case currefl::Create4: {
      ASSERT_TRAIT_IS_REFLPROP(Create4)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((class clang::IdentifierInfo *), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1))
      };
      break;
    }
    case currefl::GlobalSpecifier: {
      ASSERT_TRAIT_IS_REFLPROP(GlobalSpecifier)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->GlobalSpecifier(p0))
      };
      break;
    }
    case currefl::SuperSpecifier: {
      ASSERT_TRAIT_IS_REFLPROP(SuperSpecifier)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((class clang::CXXRecordDecl *), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->SuperSpecifier(p0, p1))
      };
      break;
    }
    case_REFLPROP_0ARGS( getPrefix, Type, X->getPrefix() )
    case_REFLPROP_0ARGS( getKind, Result, X->getKind() )
    case_REFLPROP_0ARGS( getAsIdentifier, Type, X->getAsIdentifier() )
    case_REFLPROP_0ARGS( getAsNamespace, Type, X->getAsNamespace() )
    case_REFLPROP_0ARGS( getAsNamespaceAlias, Type, X->getAsNamespaceAlias() )
    case_REFLPROP_0ARGS( getAsRecordDecl, Type, X->getAsRecordDecl() )
    case_REFLPROP_0ARGS( getAsType, Type, X->getAsType() )
    case_REFLPROP_0ARGS( isDependent, Result, X->isDependent() )
    case_REFLPROP_0ARGS( isInstantiationDependent, Result, X->isInstantiationDependent() )
    case_REFLPROP_0ARGS( containsUnexpandedParameterPack, Result, X->containsUnexpandedParameterPack() )
    case currefl::print: {
      ASSERT_TRAIT_IS_REFLPROP(print)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::raw_ostream &), p0)
        LOAD_VAL((const struct clang::PrintingPolicy &), p1)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->print((class llvm::raw_ostream &)p0, (const struct clang::PrintingPolicy &)p1))
      };
      break;
    }
    case currefl::Profile: {
      ASSERT_TRAIT_IS_REFLPROP(Profile)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::FoldingSetNodeID &), p0)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->Profile((llvm::FoldingSetNodeID &)p0))
      };
      break;
    }
    case currefl::dump: {
      ASSERT_TRAIT_IS_REFLPROP(dump)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::LangOptions &), p0)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->dump((const class clang::LangOptions &)p0))
      };
      break;
    }
    case currefl::dump1: {
      ASSERT_TRAIT_IS_REFLPROP(dump1)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        ASSERT_NO_MORE  VOID_REFLECTION(X->dump())
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__NestedNameSpecifierLoc: {
# define CLASSNAME (clang::NestedNameSpecifierLoc)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_NEVERPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__NestedNameSpecifierLoc;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( operator_bool, Result, X->operator bool() )
    case_REFLPROP_0ARGS( hasQualifier, Result, X->hasQualifier() )
    case_REFLPROP_0ARGS( getNestedNameSpecifier, Type, X->getNestedNameSpecifier() )
    case_REFLPROP_0ARGS( getOpaqueData, Result, X->getOpaqueData() )
    case_REFLPROP_0ARGS( getSourceRange, Type, X->getSourceRange() )
    case_REFLPROP_0ARGS( getLocalSourceRange, Type, X->getLocalSourceRange() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case_REFLPROP_0ARGS( getLocalBeginLoc, Type, X->getLocalBeginLoc() )
    case_REFLPROP_0ARGS( getLocalEndLoc, Type, X->getLocalEndLoc() )
    case_REFLPROP_0ARGS( getPrefix, Type, X->getPrefix() )
    case_REFLPROP_0ARGS( getTypeLoc, Type, X->getTypeLoc() )
    case_REFLPROP_0ARGS( getDataLength, Result, X->getDataLength() )
    case currefl::operator_eq_eq: {
      ASSERT_TRAIT_IS_REFLPROP(operator_eq_eq)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL((class clang::NestedNameSpecifierLoc), p0 )
        LOAD_VAL((class clang::NestedNameSpecifierLoc), p1 )
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, p0 == p1)
      };
      break;
    }
    case currefl::operator_not_eq: {
      ASSERT_TRAIT_IS_REFLPROP(operator_not_eq)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL((class clang::NestedNameSpecifierLoc), p0 )
        LOAD_VAL((class clang::NestedNameSpecifierLoc), p1 )
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, p0 != p1)
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__UncommonTemplateNameStorage: {
# define CLASSNAME (clang::UncommonTemplateNameStorage)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__UncommonTemplateNameStorage;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( size, Result, X->size() )
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__OverloadedTemplateStorage: {
# define CLASSNAME (clang::OverloadedTemplateStorage)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__OverloadedTemplateStorage;
  switch( (currefl::memnames)MemNum ) {
    case currefl::_this_: {
      switch (TraitKind) {
        case RTK_range_nth:
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE
            BUILD_REFLECTION_CALL_RANGE_NTH(Type, *X)
          };
          break;
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE
            BUILD_REFLECTION_CALL_RANGE_SIZE(*X)
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << "_this_"
                 << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__SubstTemplateTemplateParmPackStorage: {
# define CLASSNAME (clang::SubstTemplateTemplateParmPackStorage)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__SubstTemplateTemplateParmPackStorage;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getParameterPack, Type, X->getParameterPack() )
    case_REFLPROP_0ARGS( getArgumentPack, Type, X->getArgumentPack() )
    case currefl::Profile: {
      ASSERT_TRAIT_IS_REFLPROP(Profile)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::FoldingSetNodeID &), p0)
        LOAD_VAL((class clang::ASTContext &), p1)
        LOAD_VAL((class clang::TemplateTemplateParmDecl *), p2)
        LOAD_VAL((const class clang::TemplateArgument &), p3)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->Profile((llvm::FoldingSetNodeID &)p0, (class clang::ASTContext &)p1, (class clang::TemplateTemplateParmDecl *)p2, (const class clang::TemplateArgument &)p3))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__TemplateName: {
# define CLASSNAME (clang::TemplateName)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_NEVERPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__TemplateName;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( isNull, Result, X->isNull() )
    case_REFLPROP_0ARGS( getKind, Result, X->getKind() )
    case_REFLPROP_0ARGS( getAsTemplateDecl, Type, X->getAsTemplateDecl() )
    case_REFLPROP_0ARGS( getAsOverloadedTemplate, Type, X->getAsOverloadedTemplate() )
    case_REFLPROP_0ARGS( getAsSubstTemplateTemplateParm, Type, X->getAsSubstTemplateTemplateParm() )
    case_REFLPROP_0ARGS( getAsSubstTemplateTemplateParmPack, Type, X->getAsSubstTemplateTemplateParmPack() )
    case_REFLPROP_0ARGS( getAsQualifiedTemplateName, Type, X->getAsQualifiedTemplateName() )
    case_REFLPROP_0ARGS( getAsDependentTemplateName, Type, X->getAsDependentTemplateName() )
    case_REFLPROP_0ARGS( getUnderlying, Type, X->getUnderlying() )
    case_REFLPROP_0ARGS( getNameToSubstitute, Type, X->getNameToSubstitute() )
    case_REFLPROP_0ARGS( isDependent, Result, X->isDependent() )
    case_REFLPROP_0ARGS( isInstantiationDependent, Result, X->isInstantiationDependent() )
    case_REFLPROP_0ARGS( containsUnexpandedParameterPack, Result, X->containsUnexpandedParameterPack() )
    case currefl::print: {
      ASSERT_TRAIT_IS_REFLPROP(print)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::raw_ostream &), p0)
        LOAD_VAL((const struct clang::PrintingPolicy &), p1)
        IF_NO_MORE  VOID_REFLECTION(X->print((class llvm::raw_ostream &)p0, (const struct clang::PrintingPolicy &)p1))
        LOAD_VAL((bool), p2)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->print((class llvm::raw_ostream &)p0, (const struct clang::PrintingPolicy &)p1, (bool)p2))
      };
      break;
    }
    case currefl::dump: {
      ASSERT_TRAIT_IS_REFLPROP(dump)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::raw_ostream &), p0)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->dump((class llvm::raw_ostream &)p0))
      };
      break;
    }
    case currefl::dump1: {
      ASSERT_TRAIT_IS_REFLPROP(dump1)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        ASSERT_NO_MORE  VOID_REFLECTION(X->dump())
      };
      break;
    }
    case_REFLPROP_0ARGS( getAsVoidPointer, Result, X->getAsVoidPointer() )
    case currefl::getFromVoidPointer: {
      ASSERT_TRAIT_IS_REFLPROP(getFromVoidPointer)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((void *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getFromVoidPointer(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__SubstTemplateTemplateParmStorage: {
# define CLASSNAME (clang::SubstTemplateTemplateParmStorage)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__SubstTemplateTemplateParmStorage;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getParameter, Type, X->getParameter() )
    case_REFLPROP_0ARGS( getReplacement, Type, X->getReplacement() )
    case currefl::Profile: {
      ASSERT_TRAIT_IS_REFLPROP(Profile)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::FoldingSetNodeID &), p0)
        LOAD_VAL((class clang::TemplateTemplateParmDecl *), p1)
        LOAD_VAL((class clang::TemplateName), p2)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->Profile((llvm::FoldingSetNodeID &)p0, (class clang::TemplateTemplateParmDecl *)p1, (class clang::TemplateName)p2))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__QualifiedTemplateName: {
# define CLASSNAME (clang::QualifiedTemplateName)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__QualifiedTemplateName;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getQualifier, Type, X->getQualifier() )
    case_REFLPROP_0ARGS( hasTemplateKeyword, Result, X->hasTemplateKeyword() )
    case_REFLPROP_0ARGS( getDecl, Type, X->getDecl() )
    case_REFLPROP_0ARGS( getTemplateDecl, Type, X->getTemplateDecl() )
    case currefl::Profile: {
      ASSERT_TRAIT_IS_REFLPROP(Profile)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::FoldingSetNodeID &), p0)
        LOAD_VAL((class clang::NestedNameSpecifier *), p1)
        LOAD_VAL((bool), p2)
        LOAD_VAL((class clang::TemplateDecl *), p3)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->Profile((llvm::FoldingSetNodeID &)p0, (class clang::NestedNameSpecifier *)p1, (bool)p2, (class clang::TemplateDecl *)p3))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__DependentTemplateName: {
# define CLASSNAME (clang::DependentTemplateName)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__DependentTemplateName;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getQualifier, Type, X->getQualifier() )
    case_REFLPROP_0ARGS( isIdentifier, Result, X->isIdentifier() )
    case_REFLPROP_0ARGS( getIdentifier, Type, X->getIdentifier() )
    case_REFLPROP_0ARGS( isOverloadedOperator, Result, X->isOverloadedOperator() )
    case_REFLPROP_0ARGS( getOperator, Result, X->getOperator() )
    case currefl::Profile: {
      ASSERT_TRAIT_IS_REFLPROP(Profile)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::FoldingSetNodeID &), p0)
        LOAD_VAL((class clang::NestedNameSpecifier *), p1)
        LOAD_VAL((const class clang::IdentifierInfo *), p2)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->Profile((llvm::FoldingSetNodeID &)p0, (class clang::NestedNameSpecifier *)p1, (const class clang::IdentifierInfo *)p2))
      };
      break;
    }
    case currefl::Profile1: {
      ASSERT_TRAIT_IS_REFLPROP(Profile1)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::FoldingSetNodeID &), p0)
        LOAD_VAL((class clang::NestedNameSpecifier *), p1)
        LOAD_VAL((enum clang::OverloadedOperatorKind), p2)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->Profile((llvm::FoldingSetNodeID &)p0, (class clang::NestedNameSpecifier *)p1, (enum clang::OverloadedOperatorKind)p2))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__LinkageInfo: {
# define CLASSNAME (clang::LinkageInfo)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_NEVERPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__LinkageInfo;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( external, Type, X->external() )
    case_REFLPROP_0ARGS( internal, Type, X->internal() )
    case_REFLPROP_0ARGS( uniqueExternal, Type, X->uniqueExternal() )
    case_REFLPROP_0ARGS( none, Type, X->none() )
    case_REFLPROP_0ARGS( visible_none, Type, X->visible_none() )
    case_REFLPROP_0ARGS( getLinkage, Result, X->getLinkage() )
    case_REFLPROP_0ARGS( getVisibility, Result, X->getVisibility() )
    case_REFLPROP_0ARGS( isVisibilityExplicit, Result, X->isVisibilityExplicit() )
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__Qualifiers: {
# define CLASSNAME (clang::Qualifiers)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_MAYBEPTR(1, CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__Qualifiers;
  switch( (currefl::memnames)MemNum ) {
    case currefl::removeCommonQualifiers: {
      ASSERT_TRAIT_IS_REFLPROP(removeCommonQualifiers)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::Qualifiers &), p0)
        LOAD_VAL((class clang::Qualifiers &), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->removeCommonQualifiers(p0, p1))
      };
      break;
    }
    case currefl::fromFastMask: {
      ASSERT_TRAIT_IS_REFLPROP(fromFastMask)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->fromFastMask(p0))
      };
      break;
    }
    case currefl::fromCVRMask: {
      ASSERT_TRAIT_IS_REFLPROP(fromCVRMask)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->fromCVRMask(p0))
      };
      break;
    }
    case currefl::fromCVRUMask: {
      ASSERT_TRAIT_IS_REFLPROP(fromCVRUMask)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->fromCVRUMask(p0))
      };
      break;
    }
    case currefl::fromOpaqueValue: {
      ASSERT_TRAIT_IS_REFLPROP(fromOpaqueValue)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->fromOpaqueValue(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getAsOpaqueValue, Result, X->getAsOpaqueValue() )
    case_REFLPROP_0ARGS( hasConst, Result, X->hasConst() )
    case_REFLPROP_0ARGS( hasVolatile, Result, X->hasVolatile() )
    case_REFLPROP_0ARGS( hasRestrict, Result, X->hasRestrict() )
    case_REFLPROP_0ARGS( hasCVRQualifiers, Result, X->hasCVRQualifiers() )
    case_REFLPROP_0ARGS( getCVRQualifiers, Result, X->getCVRQualifiers() )
    case_REFLPROP_0ARGS( hasUnaligned, Result, X->hasUnaligned() )
    case_REFLPROP_0ARGS( hasObjCGCAttr, Result, X->hasObjCGCAttr() )
    case_REFLPROP_0ARGS( getObjCGCAttr, Result, X->getObjCGCAttr() )
    case_REFLPROP_0ARGS( withoutObjCGCAttr, Type, X->withoutObjCGCAttr() )
    case_REFLPROP_0ARGS( withoutObjCLifetime, Type, X->withoutObjCLifetime() )
    case_REFLPROP_0ARGS( hasObjCLifetime, Result, X->hasObjCLifetime() )
    case_REFLPROP_0ARGS( getObjCLifetime, Result, X->getObjCLifetime() )
    case_REFLPROP_0ARGS( hasNonTrivialObjCLifetime, Result, X->hasNonTrivialObjCLifetime() )
    case_REFLPROP_0ARGS( hasStrongOrWeakObjCLifetime, Result, X->hasStrongOrWeakObjCLifetime() )
    case_REFLPROP_0ARGS( hasAddressSpace, Result, X->hasAddressSpace() )
    case_REFLPROP_0ARGS( getAddressSpace, Result, X->getAddressSpace() )
    case_REFLPROP_0ARGS( hasTargetSpecificAddressSpace, Result, X->hasTargetSpecificAddressSpace() )
    case_REFLPROP_0ARGS( getAddressSpaceAttributePrintValue, Result, X->getAddressSpaceAttributePrintValue() )
    case_REFLPROP_0ARGS( hasFastQualifiers, Result, X->hasFastQualifiers() )
    case_REFLPROP_0ARGS( getFastQualifiers, Result, X->getFastQualifiers() )
    case_REFLPROP_0ARGS( hasNonFastQualifiers, Result, X->hasNonFastQualifiers() )
    case_REFLPROP_0ARGS( getNonFastQualifiers, Type, X->getNonFastQualifiers() )
    case_REFLPROP_0ARGS( hasQualifiers, Result, X->hasQualifiers() )
    case_REFLPROP_0ARGS( empty, Result, X->empty() )
    case currefl::isAddressSpaceSupersetOf: {
      ASSERT_TRAIT_IS_REFLPROP(isAddressSpaceSupersetOf)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::Qualifiers), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isAddressSpaceSupersetOf(p0))
      };
      break;
    }
    case currefl::compatiblyIncludes: {
      ASSERT_TRAIT_IS_REFLPROP(compatiblyIncludes)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::Qualifiers), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->compatiblyIncludes(p0))
      };
      break;
    }
    case currefl::compatiblyIncludesObjCLifetime: {
      ASSERT_TRAIT_IS_REFLPROP(compatiblyIncludesObjCLifetime)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::Qualifiers), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->compatiblyIncludesObjCLifetime(p0))
      };
      break;
    }
    case currefl::isStrictSupersetOf: {
      ASSERT_TRAIT_IS_REFLPROP(isStrictSupersetOf)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::Qualifiers), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isStrictSupersetOf(p0))
      };
      break;
    }
    case currefl::operator_eq_eq: {
      ASSERT_TRAIT_IS_REFLPROP(operator_eq_eq)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::Qualifiers), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->operator==(p0))
      };
      break;
    }
    case currefl::operator_not_eq: {
      ASSERT_TRAIT_IS_REFLPROP(operator_not_eq)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::Qualifiers), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->operator!=(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( operator_bool, Result, X->operator bool() )
    case currefl::operator_plus: {
      ASSERT_TRAIT_IS_REFLPROP(operator_plus)
      SET_CALLBACK(Type) {
        LOAD_VAL((class clang::Qualifiers), p0 )
        LOAD_VAL((class clang::Qualifiers), p1 )
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, p0 + p1)
      };
      break;
    }
    case currefl::operator_minus: {
      ASSERT_TRAIT_IS_REFLPROP(operator_minus)
      SET_CALLBACK(Type) {
        LOAD_VAL((class clang::Qualifiers), p0 )
        LOAD_VAL((class clang::Qualifiers), p1 )
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, p0 - p1)
      };
      break;
    }
    case_REFLPROP_0ARGS( getAsString, Str, X->getAsString() )
    case currefl::getAsString1: {
      ASSERT_TRAIT_IS_REFLPROP(getAsString1)
      SET_PRIM_TYPE(const char *)
      SET_CALLBACK(Str) {
        LOAD_VAL_X(Str)
        LOAD_VAL((const struct clang::PrintingPolicy &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Str, X->getAsString(p0))
      };
      break;
    }
    case currefl::isEmptyWhenPrinted: {
      ASSERT_TRAIT_IS_REFLPROP(isEmptyWhenPrinted)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const struct clang::PrintingPolicy &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isEmptyWhenPrinted(p0))
      };
      break;
    }
    case currefl::print: {
      ASSERT_TRAIT_IS_REFLPROP(print)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::raw_ostream &), p0)
        LOAD_VAL((const struct clang::PrintingPolicy &), p1)
        IF_NO_MORE  VOID_REFLECTION(X->print((class llvm::raw_ostream &)p0, (const struct clang::PrintingPolicy &)p1))
        LOAD_VAL((bool), p2)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->print((class llvm::raw_ostream &)p0, (const struct clang::PrintingPolicy &)p1, (bool)p2))
      };
      break;
    }
    case currefl::Profile: {
      ASSERT_TRAIT_IS_REFLPROP(Profile)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::FoldingSetNodeID &), p0)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->Profile((llvm::FoldingSetNodeID &)p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__SplitQualType: {
# define CLASSNAME (clang::SplitQualType)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_NEVERPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__SplitQualType;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS(Ty, Type, X->Ty)
    case_REFLPROP_0ARGS(Quals, Type, X->Quals)
    case_REFLPROP_0ARGS( getSingleStepDesugaredType, Type, X->getSingleStepDesugaredType() )
    case currefl::operator_eq_eq: {
      ASSERT_TRAIT_IS_REFLPROP(operator_eq_eq)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL((struct clang::SplitQualType), p0 )
        LOAD_VAL((struct clang::SplitQualType), p1 )
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, p0 == p1)
      };
      break;
    }
    case currefl::operator_not_eq: {
      ASSERT_TRAIT_IS_REFLPROP(operator_not_eq)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL((struct clang::SplitQualType), p0 )
        LOAD_VAL((struct clang::SplitQualType), p1 )
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, p0 != p1)
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__QualType: {
# define CLASSNAME (clang::QualType)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_MAYBEPTR(1, CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__QualType;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getLocalFastQualifiers, Result, X->getLocalFastQualifiers() )
    case_REFLPROP_0ARGS( getTypePtr, Type, X->getTypePtr() )
    case_REFLPROP_0ARGS( getTypePtrOrNull, Type, X->getTypePtrOrNull() )
    case_REFLPROP_0ARGS( getBaseTypeIdentifier, Type, X->getBaseTypeIdentifier() )
    case_REFLPROP_0ARGS( split, Type, X->split() )
    case_REFLPROP_0ARGS( getAsOpaquePtr, Result, X->getAsOpaquePtr() )
    case currefl::getFromOpaquePtr: {
      ASSERT_TRAIT_IS_REFLPROP(getFromOpaquePtr)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const void *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getFromOpaquePtr(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( operator_star, Type, X->operator*() )
    case_REFLPROP_0ARGS( operator_arrow, Type, X->operator->() )
    case_REFLPROP_0ARGS( isCanonical, Result, X->isCanonical() )
    case_REFLPROP_0ARGS( isCanonicalAsParam, Result, X->isCanonicalAsParam() )
    case_REFLPROP_0ARGS( isNull, Result, X->isNull() )
    case_REFLPROP_0ARGS( isLocalConstQualified, Result, X->isLocalConstQualified() )
    case_REFLPROP_0ARGS( isConstQualified, Result, X->isConstQualified() )
    case_REFLPROP_0ARGS( isLocalRestrictQualified, Result, X->isLocalRestrictQualified() )
    case_REFLPROP_0ARGS( isRestrictQualified, Result, X->isRestrictQualified() )
    case_REFLPROP_0ARGS( isLocalVolatileQualified, Result, X->isLocalVolatileQualified() )
    case_REFLPROP_0ARGS( isVolatileQualified, Result, X->isVolatileQualified() )
    case_REFLPROP_0ARGS( hasLocalQualifiers, Result, X->hasLocalQualifiers() )
    case_REFLPROP_0ARGS( hasQualifiers, Result, X->hasQualifiers() )
    case_REFLPROP_0ARGS( hasLocalNonFastQualifiers, Result, X->hasLocalNonFastQualifiers() )
    case_REFLPROP_0ARGS( getLocalQualifiers, Type, X->getLocalQualifiers() )
    case_REFLPROP_0ARGS( getQualifiers, Type, X->getQualifiers() )
    case_REFLPROP_0ARGS( getLocalCVRQualifiers, Result, X->getLocalCVRQualifiers() )
    case_REFLPROP_0ARGS( getCVRQualifiers, Result, X->getCVRQualifiers() )
    case currefl::isConstant: {
      ASSERT_TRAIT_IS_REFLPROP(isConstant)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::ASTContext &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isConstant(p0))
      };
      break;
    }
    case currefl::isPODType: {
      ASSERT_TRAIT_IS_REFLPROP(isPODType)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::ASTContext &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isPODType(p0))
      };
      break;
    }
    case currefl::isCXX98PODType: {
      ASSERT_TRAIT_IS_REFLPROP(isCXX98PODType)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::ASTContext &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isCXX98PODType(p0))
      };
      break;
    }
    case currefl::isCXX11PODType: {
      ASSERT_TRAIT_IS_REFLPROP(isCXX11PODType)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::ASTContext &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isCXX11PODType(p0))
      };
      break;
    }
    case currefl::isTrivialType: {
      ASSERT_TRAIT_IS_REFLPROP(isTrivialType)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::ASTContext &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isTrivialType(p0))
      };
      break;
    }
    case currefl::isTriviallyCopyableType: {
      ASSERT_TRAIT_IS_REFLPROP(isTriviallyCopyableType)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::ASTContext &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isTriviallyCopyableType(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( mayBeDynamicClass, Result, X->mayBeDynamicClass() )
    case_REFLPROP_0ARGS( mayBeNotDynamicClass, Result, X->mayBeNotDynamicClass() )
    case_REFLPROP_0ARGS( withConst, Type, X->withConst() )
    case_REFLPROP_0ARGS( withVolatile, Type, X->withVolatile() )
    case_REFLPROP_0ARGS( withRestrict, Type, X->withRestrict() )
    case currefl::withCVRQualifiers: {
      ASSERT_TRAIT_IS_REFLPROP(withCVRQualifiers)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->withCVRQualifiers(p0))
      };
      break;
    }
    case currefl::withFastQualifiers: {
      ASSERT_TRAIT_IS_REFLPROP(withFastQualifiers)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->withFastQualifiers(p0))
      };
      break;
    }
    case currefl::withExactLocalFastQualifiers: {
      ASSERT_TRAIT_IS_REFLPROP(withExactLocalFastQualifiers)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->withExactLocalFastQualifiers(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( withoutLocalFastQualifiers, Type, X->withoutLocalFastQualifiers() )
    case_REFLPROP_0ARGS( getCanonicalType, Type, X->getCanonicalType() )
    case_REFLPROP_0ARGS( getLocalUnqualifiedType, Type, X->getLocalUnqualifiedType() )
    case_REFLPROP_0ARGS( getUnqualifiedType, Type, X->getUnqualifiedType() )
    case_REFLPROP_0ARGS( getSplitUnqualifiedType, Type, X->getSplitUnqualifiedType() )
    case currefl::isMoreQualifiedThan: {
      ASSERT_TRAIT_IS_REFLPROP(isMoreQualifiedThan)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::QualType), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isMoreQualifiedThan(p0))
      };
      break;
    }
    case currefl::isAtLeastAsQualifiedAs: {
      ASSERT_TRAIT_IS_REFLPROP(isAtLeastAsQualifiedAs)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::QualType), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isAtLeastAsQualifiedAs(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getNonReferenceType, Type, X->getNonReferenceType() )
    case currefl::getNonLValueExprType: {
      ASSERT_TRAIT_IS_REFLPROP(getNonLValueExprType)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getNonLValueExprType(p0))
      };
      break;
    }
    case currefl::getDesugaredType: {
      ASSERT_TRAIT_IS_REFLPROP(getDesugaredType)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getDesugaredType(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getSplitDesugaredType, Type, X->getSplitDesugaredType() )
    case currefl::getSingleStepDesugaredType: {
      ASSERT_TRAIT_IS_REFLPROP(getSingleStepDesugaredType)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getSingleStepDesugaredType(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( IgnoreParens, Type, X->IgnoreParens() )
    case currefl::operator_eq_eq: {
      ASSERT_TRAIT_IS_REFLPROP(operator_eq_eq)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL((const class clang::QualType &), p0 )
        LOAD_VAL((const class clang::QualType &), p1 )
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, p0 == p1)
      };
      break;
    }
    case currefl::operator_not_eq: {
      ASSERT_TRAIT_IS_REFLPROP(operator_not_eq)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL((const class clang::QualType &), p0 )
        LOAD_VAL((const class clang::QualType &), p1 )
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, p0 != p1)
      };
      break;
    }
    case currefl::getAsString: {
      ASSERT_TRAIT_IS_REFLPROP(getAsString)
      SET_PRIM_TYPE(const char *)
      SET_CALLBACK(Str) {
        LOAD_VAL_X(Str)
        LOAD_VAL((struct clang::SplitQualType), p0)
        LOAD_VAL((const struct clang::PrintingPolicy &), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Str, X->getAsString(p0, p1))
      };
      break;
    }
    case currefl::getAsString1: {
      ASSERT_TRAIT_IS_REFLPROP(getAsString1)
      SET_PRIM_TYPE(const char *)
      SET_CALLBACK(Str) {
        LOAD_VAL_X(Str)
        LOAD_VAL((const class clang::Type *), p0)
        LOAD_VAL((class clang::Qualifiers), p1)
        LOAD_VAL((const struct clang::PrintingPolicy &), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Str, X->getAsString(p0, p1, p2))
      };
      break;
    }
    case_REFLPROP_0ARGS( getAsString2, Str, X->getAsString() )
    case currefl::getAsString3: {
      ASSERT_TRAIT_IS_REFLPROP(getAsString3)
      SET_PRIM_TYPE(const char *)
      SET_CALLBACK(Str) {
        LOAD_VAL_X(Str)
        LOAD_VAL((const struct clang::PrintingPolicy &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Str, X->getAsString(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getAsString_NoPrependScope, Str, X->getAsString_NoPrependScope() )
    case currefl::print: {
      ASSERT_TRAIT_IS_REFLPROP(print)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::raw_ostream &), p0)
        LOAD_VAL((const struct clang::PrintingPolicy &), p1)
        IF_NO_MORE  VOID_REFLECTION(X->print((class llvm::raw_ostream &)p0, (const struct clang::PrintingPolicy &)p1))
        LOAD_VAL((const class llvm::Twine &), p2)
        IF_NO_MORE  VOID_REFLECTION(X->print((class llvm::raw_ostream &)p0, (const struct clang::PrintingPolicy &)p1, (const class llvm::Twine &)p2))
        LOAD_VAL((unsigned int), p3)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->print((class llvm::raw_ostream &)p0, (const struct clang::PrintingPolicy &)p1, (const class llvm::Twine &)p2, (unsigned int)p3))
      };
      break;
    }
    case currefl::print1: {
      ASSERT_TRAIT_IS_REFLPROP(print1)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((struct clang::SplitQualType), p0)
        LOAD_VAL((class llvm::raw_ostream &), p1)
        LOAD_VAL((const struct clang::PrintingPolicy &), p2)
        LOAD_VAL((const class llvm::Twine &), p3)
        IF_NO_MORE  VOID_REFLECTION(X->print((struct clang::SplitQualType)p0, (class llvm::raw_ostream &)p1, (const struct clang::PrintingPolicy &)p2, (const class llvm::Twine &)p3))
        LOAD_VAL((unsigned int), p4)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->print((struct clang::SplitQualType)p0, (class llvm::raw_ostream &)p1, (const struct clang::PrintingPolicy &)p2, (const class llvm::Twine &)p3, (unsigned int)p4))
      };
      break;
    }
    case currefl::print2: {
      ASSERT_TRAIT_IS_REFLPROP(print2)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Type *), p0)
        LOAD_VAL((class clang::Qualifiers), p1)
        LOAD_VAL((class llvm::raw_ostream &), p2)
        LOAD_VAL((const struct clang::PrintingPolicy &), p3)
        LOAD_VAL((const class llvm::Twine &), p4)
        IF_NO_MORE  VOID_REFLECTION(X->print((const class clang::Type *)p0, (class clang::Qualifiers)p1, (class llvm::raw_ostream &)p2, (const struct clang::PrintingPolicy &)p3, (const class llvm::Twine &)p4))
        LOAD_VAL((unsigned int), p5)
        IF_NO_MORE  VOID_REFLECTION(X->print((const class clang::Type *)p0, (class clang::Qualifiers)p1, (class llvm::raw_ostream &)p2, (const struct clang::PrintingPolicy &)p3, (const class llvm::Twine &)p4, (unsigned int)p5))
        LOAD_VAL((bool), p6)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->print((const class clang::Type *)p0, (class clang::Qualifiers)p1, (class llvm::raw_ostream &)p2, (const struct clang::PrintingPolicy &)p3, (const class llvm::Twine &)p4, (unsigned int)p5, (bool)p6))
      };
      break;
    }
    case currefl::dump: {
      ASSERT_TRAIT_IS_REFLPROP(dump)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const char *), p0)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->dump((const char *)p0))
      };
      break;
    }
    case currefl::dump1: {
      ASSERT_TRAIT_IS_REFLPROP(dump1)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        ASSERT_NO_MORE  VOID_REFLECTION(X->dump())
      };
      break;
    }
    case currefl::dump2: {
      ASSERT_TRAIT_IS_REFLPROP(dump2)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::raw_ostream &), p0)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->dump((llvm::raw_ostream &)p0))
      };
      break;
    }
    case currefl::Profile: {
      ASSERT_TRAIT_IS_REFLPROP(Profile)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::FoldingSetNodeID &), p0)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->Profile((llvm::FoldingSetNodeID &)p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getAddressSpace, Result, X->getAddressSpace() )
    case_REFLPROP_0ARGS( getObjCGCAttr, Result, X->getObjCGCAttr() )
    case_REFLPROP_0ARGS( isObjCGCWeak, Result, X->isObjCGCWeak() )
    case_REFLPROP_0ARGS( isObjCGCStrong, Result, X->isObjCGCStrong() )
    case_REFLPROP_0ARGS( getObjCLifetime, Result, X->getObjCLifetime() )
    case_REFLPROP_0ARGS( hasNonTrivialObjCLifetime, Result, X->hasNonTrivialObjCLifetime() )
    case_REFLPROP_0ARGS( hasStrongOrWeakObjCLifetime, Result, X->hasStrongOrWeakObjCLifetime() )
    case currefl::isNonWeakInMRRWithObjCWeak: {
      ASSERT_TRAIT_IS_REFLPROP(isNonWeakInMRRWithObjCWeak)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::ASTContext &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isNonWeakInMRRWithObjCWeak(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( isNonTrivialToPrimitiveDefaultInitialize, Result, X->isNonTrivialToPrimitiveDefaultInitialize() )
    case_REFLPROP_0ARGS( isNonTrivialToPrimitiveCopy, Result, X->isNonTrivialToPrimitiveCopy() )
    case_REFLPROP_0ARGS( isNonTrivialToPrimitiveDestructiveMove, Result, X->isNonTrivialToPrimitiveDestructiveMove() )
    case_REFLPROP_0ARGS( isDestructedType, Result, X->isDestructedType() )
    case_REFLPROP_0ARGS( isCForbiddenLValueType, Result, X->isCForbiddenLValueType() )
    case currefl::substObjCMemberType: {
      ASSERT_TRAIT_IS_REFLPROP(substObjCMemberType)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::QualType), p0)
        LOAD_VAL((const class clang::DeclContext *), p1)
        LOAD_VAL((enum clang::ObjCSubstitutionContext), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->substObjCMemberType(p0, p1, p2))
      };
      break;
    }
    case currefl::stripObjCKindOfType: {
      ASSERT_TRAIT_IS_REFLPROP(stripObjCKindOfType)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->stripObjCKindOfType(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getAtomicUnqualifiedType, Type, X->getAtomicUnqualifiedType() )
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__ExtQualsTypeCommonBase: {
# define CLASSNAME (clang::ExtQualsTypeCommonBase)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__ExtQualsTypeCommonBase;
  switch( (currefl::memnames)MemNum ) {
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__Type: {
# define CLASSNAME (clang::Type)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__Type;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getTypeClass, Result, X->getTypeClass() )
    case_REFLPROP_0ARGS( isFromAST, Result, X->isFromAST() )
    case_REFLPROP_0ARGS( containsUnexpandedParameterPack, Result, X->containsUnexpandedParameterPack() )
    case_REFLPROP_0ARGS( isCanonicalUnqualified, Result, X->isCanonicalUnqualified() )
    case_REFLPROP_0ARGS( getLocallyUnqualifiedSingleStepDesugaredType, Type, X->getLocallyUnqualifiedSingleStepDesugaredType() )
    case currefl::isIncompleteType: {
      ASSERT_TRAIT_IS_REFLPROP(isIncompleteType)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Result, X->isIncompleteType())
        LOAD_VAL((class clang::NamedDecl **), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isIncompleteType(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( isIncompleteOrObjectType, Result, X->isIncompleteOrObjectType() )
    case_REFLPROP_0ARGS( isObjectType, Result, X->isObjectType() )
    case currefl::isLiteralType: {
      ASSERT_TRAIT_IS_REFLPROP(isLiteralType)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::ASTContext &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isLiteralType(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( isStandardLayoutType, Result, X->isStandardLayoutType() )
    case_REFLPROP_0ARGS( isBuiltinType, Result, X->isBuiltinType() )
    case currefl::isSpecificBuiltinType: {
      ASSERT_TRAIT_IS_REFLPROP(isSpecificBuiltinType)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isSpecificBuiltinType(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( isPlaceholderType, Result, X->isPlaceholderType() )
    case_REFLPROP_0ARGS( getAsPlaceholderType, Type, X->getAsPlaceholderType() )
    case currefl::isSpecificPlaceholderType: {
      ASSERT_TRAIT_IS_REFLPROP(isSpecificPlaceholderType)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isSpecificPlaceholderType(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( isNonOverloadPlaceholderType, Result, X->isNonOverloadPlaceholderType() )
    case_REFLPROP_0ARGS( isIntegerType, Result, X->isIntegerType() )
    case_REFLPROP_0ARGS( isEnumeralType, Result, X->isEnumeralType() )
    case_REFLPROP_0ARGS( isScopedEnumeralType, Result, X->isScopedEnumeralType() )
    case_REFLPROP_0ARGS( isBooleanType, Result, X->isBooleanType() )
    case_REFLPROP_0ARGS( isCharType, Result, X->isCharType() )
    case_REFLPROP_0ARGS( isWideCharType, Result, X->isWideCharType() )
    case_REFLPROP_0ARGS( isChar8Type, Result, X->isChar8Type() )
    case_REFLPROP_0ARGS( isChar16Type, Result, X->isChar16Type() )
    case_REFLPROP_0ARGS( isChar32Type, Result, X->isChar32Type() )
    case_REFLPROP_0ARGS( isAnyCharacterType, Result, X->isAnyCharacterType() )
    case currefl::isIntegralType: {
      ASSERT_TRAIT_IS_REFLPROP(isIntegralType)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::ASTContext &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isIntegralType(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( isIntegralOrEnumerationType, Result, X->isIntegralOrEnumerationType() )
    case_REFLPROP_0ARGS( isIntegralOrUnscopedEnumerationType, Result, X->isIntegralOrUnscopedEnumerationType() )
    case_REFLPROP_0ARGS( isRealFloatingType, Result, X->isRealFloatingType() )
    case_REFLPROP_0ARGS( isComplexType, Result, X->isComplexType() )
    case_REFLPROP_0ARGS( isAnyComplexType, Result, X->isAnyComplexType() )
    case_REFLPROP_0ARGS( isFloatingType, Result, X->isFloatingType() )
    case_REFLPROP_0ARGS( isHalfType, Result, X->isHalfType() )
    case_REFLPROP_0ARGS( isFloat16Type, Result, X->isFloat16Type() )
    case_REFLPROP_0ARGS( isFloat128Type, Result, X->isFloat128Type() )
    case_REFLPROP_0ARGS( isRealType, Result, X->isRealType() )
    case_REFLPROP_0ARGS( isArithmeticType, Result, X->isArithmeticType() )
    case_REFLPROP_0ARGS( isVoidType, Result, X->isVoidType() )
    case_REFLPROP_0ARGS( isScalarType, Result, X->isScalarType() )
    case_REFLPROP_0ARGS( isAggregateType, Result, X->isAggregateType() )
    case_REFLPROP_0ARGS( isFundamentalType, Result, X->isFundamentalType() )
    case_REFLPROP_0ARGS( isCompoundType, Result, X->isCompoundType() )
    case_REFLPROP_0ARGS( isFunctionType, Result, X->isFunctionType() )
    case_REFLPROP_0ARGS( isFunctionNoProtoType, Result, X->isFunctionNoProtoType() )
    case_REFLPROP_0ARGS( isFunctionProtoType, Result, X->isFunctionProtoType() )
    case_REFLPROP_0ARGS( isPointerType, Result, X->isPointerType() )
    case_REFLPROP_0ARGS( isAnyPointerType, Result, X->isAnyPointerType() )
    case_REFLPROP_0ARGS( isBlockPointerType, Result, X->isBlockPointerType() )
    case_REFLPROP_0ARGS( isVoidPointerType, Result, X->isVoidPointerType() )
    case_REFLPROP_0ARGS( isReferenceType, Result, X->isReferenceType() )
    case_REFLPROP_0ARGS( isLValueReferenceType, Result, X->isLValueReferenceType() )
    case_REFLPROP_0ARGS( isRValueReferenceType, Result, X->isRValueReferenceType() )
    case_REFLPROP_0ARGS( isFunctionPointerType, Result, X->isFunctionPointerType() )
    case_REFLPROP_0ARGS( isMemberPointerType, Result, X->isMemberPointerType() )
    case_REFLPROP_0ARGS( isMemberFunctionPointerType, Result, X->isMemberFunctionPointerType() )
    case_REFLPROP_0ARGS( isMemberDataPointerType, Result, X->isMemberDataPointerType() )
    case_REFLPROP_0ARGS( isArrayType, Result, X->isArrayType() )
    case_REFLPROP_0ARGS( isConstantArrayType, Result, X->isConstantArrayType() )
    case_REFLPROP_0ARGS( isIncompleteArrayType, Result, X->isIncompleteArrayType() )
    case_REFLPROP_0ARGS( isVariableArrayType, Result, X->isVariableArrayType() )
    case_REFLPROP_0ARGS( isDependentSizedArrayType, Result, X->isDependentSizedArrayType() )
    case_REFLPROP_0ARGS( isRecordType, Result, X->isRecordType() )
    case_REFLPROP_0ARGS( isClassType, Result, X->isClassType() )
    case_REFLPROP_0ARGS( isStructureType, Result, X->isStructureType() )
    case_REFLPROP_0ARGS( isObjCBoxableRecordType, Result, X->isObjCBoxableRecordType() )
    case_REFLPROP_0ARGS( isInterfaceType, Result, X->isInterfaceType() )
    case_REFLPROP_0ARGS( isStructureOrClassType, Result, X->isStructureOrClassType() )
    case_REFLPROP_0ARGS( isUnionType, Result, X->isUnionType() )
    case_REFLPROP_0ARGS( isReflectedType, Result, X->isReflectedType() )
    case_REFLPROP_0ARGS( isComplexIntegerType, Result, X->isComplexIntegerType() )
    case_REFLPROP_0ARGS( isVectorType, Result, X->isVectorType() )
    case_REFLPROP_0ARGS( isExtVectorType, Result, X->isExtVectorType() )
    case_REFLPROP_0ARGS( isDependentAddressSpaceType, Result, X->isDependentAddressSpaceType() )
    case_REFLPROP_0ARGS( isObjCObjectPointerType, Result, X->isObjCObjectPointerType() )
    case_REFLPROP_0ARGS( isObjCRetainableType, Result, X->isObjCRetainableType() )
    case_REFLPROP_0ARGS( isObjCLifetimeType, Result, X->isObjCLifetimeType() )
    case_REFLPROP_0ARGS( isObjCIndirectLifetimeType, Result, X->isObjCIndirectLifetimeType() )
    case_REFLPROP_0ARGS( isObjCNSObjectType, Result, X->isObjCNSObjectType() )
    case_REFLPROP_0ARGS( isObjCIndependentClassType, Result, X->isObjCIndependentClassType() )
    case_REFLPROP_0ARGS( isObjCObjectType, Result, X->isObjCObjectType() )
    case_REFLPROP_0ARGS( isObjCQualifiedInterfaceType, Result, X->isObjCQualifiedInterfaceType() )
    case_REFLPROP_0ARGS( isObjCQualifiedIdType, Result, X->isObjCQualifiedIdType() )
    case_REFLPROP_0ARGS( isObjCQualifiedClassType, Result, X->isObjCQualifiedClassType() )
    case_REFLPROP_0ARGS( isObjCObjectOrInterfaceType, Result, X->isObjCObjectOrInterfaceType() )
    case_REFLPROP_0ARGS( isObjCIdType, Result, X->isObjCIdType() )
    case_REFLPROP_0ARGS( isObjCInertUnsafeUnretainedType, Result, X->isObjCInertUnsafeUnretainedType() )
    case currefl::isObjCIdOrObjectKindOfType: {
      ASSERT_TRAIT_IS_REFLPROP(isObjCIdOrObjectKindOfType)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((const class clang::ObjCObjectType *&), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isObjCIdOrObjectKindOfType(p0, p1))
      };
      break;
    }
    case_REFLPROP_0ARGS( isObjCClassType, Result, X->isObjCClassType() )
    case_REFLPROP_0ARGS( isObjCClassOrClassKindOfType, Result, X->isObjCClassOrClassKindOfType() )
    case currefl::isBlockCompatibleObjCPointerType: {
      ASSERT_TRAIT_IS_REFLPROP(isBlockCompatibleObjCPointerType)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::ASTContext &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isBlockCompatibleObjCPointerType(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( isObjCSelType, Result, X->isObjCSelType() )
    case_REFLPROP_0ARGS( isObjCBuiltinType, Result, X->isObjCBuiltinType() )
    case_REFLPROP_0ARGS( isObjCARCBridgableType, Result, X->isObjCARCBridgableType() )
    case_REFLPROP_0ARGS( isCARCBridgableType, Result, X->isCARCBridgableType() )
    case_REFLPROP_0ARGS( isTemplateTypeParmType, Result, X->isTemplateTypeParmType() )
    case_REFLPROP_0ARGS( isNullPtrType, Result, X->isNullPtrType() )
    case_REFLPROP_0ARGS( isAlignValT, Result, X->isAlignValT() )
    case_REFLPROP_0ARGS( isStdByteType, Result, X->isStdByteType() )
    case_REFLPROP_0ARGS( isAtomicType, Result, X->isAtomicType() )
    case_REFLPROP_0ARGS( isOCLImage1dROType, Result, X->isOCLImage1dROType() )
    case_REFLPROP_0ARGS( isOCLImage1dArrayROType, Result, X->isOCLImage1dArrayROType() )
    case_REFLPROP_0ARGS( isOCLImage1dBufferROType, Result, X->isOCLImage1dBufferROType() )
    case_REFLPROP_0ARGS( isOCLImage2dROType, Result, X->isOCLImage2dROType() )
    case_REFLPROP_0ARGS( isOCLImage2dArrayROType, Result, X->isOCLImage2dArrayROType() )
    case_REFLPROP_0ARGS( isOCLImage2dDepthROType, Result, X->isOCLImage2dDepthROType() )
    case_REFLPROP_0ARGS( isOCLImage2dArrayDepthROType, Result, X->isOCLImage2dArrayDepthROType() )
    case_REFLPROP_0ARGS( isOCLImage2dMSAAROType, Result, X->isOCLImage2dMSAAROType() )
    case_REFLPROP_0ARGS( isOCLImage2dArrayMSAAROType, Result, X->isOCLImage2dArrayMSAAROType() )
    case_REFLPROP_0ARGS( isOCLImage2dMSAADepthROType, Result, X->isOCLImage2dMSAADepthROType() )
    case_REFLPROP_0ARGS( isOCLImage2dArrayMSAADepthROType, Result, X->isOCLImage2dArrayMSAADepthROType() )
    case_REFLPROP_0ARGS( isOCLImage3dROType, Result, X->isOCLImage3dROType() )
    case_REFLPROP_0ARGS( isOCLImage1dWOType, Result, X->isOCLImage1dWOType() )
    case_REFLPROP_0ARGS( isOCLImage1dArrayWOType, Result, X->isOCLImage1dArrayWOType() )
    case_REFLPROP_0ARGS( isOCLImage1dBufferWOType, Result, X->isOCLImage1dBufferWOType() )
    case_REFLPROP_0ARGS( isOCLImage2dWOType, Result, X->isOCLImage2dWOType() )
    case_REFLPROP_0ARGS( isOCLImage2dArrayWOType, Result, X->isOCLImage2dArrayWOType() )
    case_REFLPROP_0ARGS( isOCLImage2dDepthWOType, Result, X->isOCLImage2dDepthWOType() )
    case_REFLPROP_0ARGS( isOCLImage2dArrayDepthWOType, Result, X->isOCLImage2dArrayDepthWOType() )
    case_REFLPROP_0ARGS( isOCLImage2dMSAAWOType, Result, X->isOCLImage2dMSAAWOType() )
    case_REFLPROP_0ARGS( isOCLImage2dArrayMSAAWOType, Result, X->isOCLImage2dArrayMSAAWOType() )
    case_REFLPROP_0ARGS( isOCLImage2dMSAADepthWOType, Result, X->isOCLImage2dMSAADepthWOType() )
    case_REFLPROP_0ARGS( isOCLImage2dArrayMSAADepthWOType, Result, X->isOCLImage2dArrayMSAADepthWOType() )
    case_REFLPROP_0ARGS( isOCLImage3dWOType, Result, X->isOCLImage3dWOType() )
    case_REFLPROP_0ARGS( isOCLImage1dRWType, Result, X->isOCLImage1dRWType() )
    case_REFLPROP_0ARGS( isOCLImage1dArrayRWType, Result, X->isOCLImage1dArrayRWType() )
    case_REFLPROP_0ARGS( isOCLImage1dBufferRWType, Result, X->isOCLImage1dBufferRWType() )
    case_REFLPROP_0ARGS( isOCLImage2dRWType, Result, X->isOCLImage2dRWType() )
    case_REFLPROP_0ARGS( isOCLImage2dArrayRWType, Result, X->isOCLImage2dArrayRWType() )
    case_REFLPROP_0ARGS( isOCLImage2dDepthRWType, Result, X->isOCLImage2dDepthRWType() )
    case_REFLPROP_0ARGS( isOCLImage2dArrayDepthRWType, Result, X->isOCLImage2dArrayDepthRWType() )
    case_REFLPROP_0ARGS( isOCLImage2dMSAARWType, Result, X->isOCLImage2dMSAARWType() )
    case_REFLPROP_0ARGS( isOCLImage2dArrayMSAARWType, Result, X->isOCLImage2dArrayMSAARWType() )
    case_REFLPROP_0ARGS( isOCLImage2dMSAADepthRWType, Result, X->isOCLImage2dMSAADepthRWType() )
    case_REFLPROP_0ARGS( isOCLImage2dArrayMSAADepthRWType, Result, X->isOCLImage2dArrayMSAADepthRWType() )
    case_REFLPROP_0ARGS( isOCLImage3dRWType, Result, X->isOCLImage3dRWType() )
    case_REFLPROP_0ARGS( isImageType, Result, X->isImageType() )
    case_REFLPROP_0ARGS( isSamplerT, Result, X->isSamplerT() )
    case_REFLPROP_0ARGS( isEventT, Result, X->isEventT() )
    case_REFLPROP_0ARGS( isClkEventT, Result, X->isClkEventT() )
    case_REFLPROP_0ARGS( isQueueT, Result, X->isQueueT() )
    case_REFLPROP_0ARGS( isReserveIDT, Result, X->isReserveIDT() )
    case_REFLPROP_0ARGS( isPipeType, Result, X->isPipeType() )
    case_REFLPROP_0ARGS( isOpenCLSpecificType, Result, X->isOpenCLSpecificType() )
    case_REFLPROP_0ARGS( isObjCARCImplicitlyUnretainedType, Result, X->isObjCARCImplicitlyUnretainedType() )
    case_REFLPROP_0ARGS( getObjCARCImplicitLifetime, Result, X->getObjCARCImplicitLifetime() )
    case_REFLPROP_0ARGS( getScalarTypeKind, Result, X->getScalarTypeKind() )
    case_REFLPROP_0ARGS( isDependentType, Result, X->isDependentType() )
    case_REFLPROP_0ARGS( isInstantiationDependentType, Result, X->isInstantiationDependentType() )
    case_REFLPROP_0ARGS( isUndeducedType, Result, X->isUndeducedType() )
    case_REFLPROP_0ARGS( isVariablyModifiedType, Result, X->isVariablyModifiedType() )
    case_REFLPROP_0ARGS( hasSizedVLAType, Result, X->hasSizedVLAType() )
    case_REFLPROP_0ARGS( hasUnnamedOrLocalType, Result, X->hasUnnamedOrLocalType() )
    case_REFLPROP_0ARGS( isOverloadableType, Result, X->isOverloadableType() )
    case_REFLPROP_0ARGS( isElaboratedTypeSpecifier, Result, X->isElaboratedTypeSpecifier() )
    case_REFLPROP_0ARGS( canDecayToPointerType, Result, X->canDecayToPointerType() )
    case_REFLPROP_0ARGS( hasPointerRepresentation, Result, X->hasPointerRepresentation() )
    case_REFLPROP_0ARGS( hasObjCPointerRepresentation, Result, X->hasObjCPointerRepresentation() )
    case_REFLPROP_0ARGS( hasIntegerRepresentation, Result, X->hasIntegerRepresentation() )
    case_REFLPROP_0ARGS( hasSignedIntegerRepresentation, Result, X->hasSignedIntegerRepresentation() )
    case_REFLPROP_0ARGS( hasUnsignedIntegerRepresentation, Result, X->hasUnsignedIntegerRepresentation() )
    case_REFLPROP_0ARGS( hasFloatingRepresentation, Result, X->hasFloatingRepresentation() )
    case_REFLPROP_0ARGS( getAsStructureType, Type, X->getAsStructureType() )
    case_REFLPROP_0ARGS( getAsUnionType, Type, X->getAsUnionType() )
    case_REFLPROP_0ARGS( getAsComplexIntegerType, Type, X->getAsComplexIntegerType() )
    case_REFLPROP_0ARGS( getAsObjCInterfaceType, Type, X->getAsObjCInterfaceType() )
    case_REFLPROP_0ARGS( getAsObjCInterfacePointerType, Type, X->getAsObjCInterfacePointerType() )
    case_REFLPROP_0ARGS( getAsObjCQualifiedIdType, Type, X->getAsObjCQualifiedIdType() )
    case_REFLPROP_0ARGS( getAsObjCQualifiedClassType, Type, X->getAsObjCQualifiedClassType() )
    case_REFLPROP_0ARGS( getAsObjCQualifiedInterfaceType, Type, X->getAsObjCQualifiedInterfaceType() )
    case_REFLPROP_0ARGS( getAsCXXRecordDecl, Type, X->getAsCXXRecordDecl() )
    case_REFLPROP_0ARGS( getAsRecordDecl, Type, X->getAsRecordDecl() )
    case_REFLPROP_0ARGS( getAsTagDecl, Type, X->getAsTagDecl() )
    case_REFLPROP_0ARGS( getPointeeCXXRecordDecl, Type, X->getPointeeCXXRecordDecl() )
    case_REFLPROP_0ARGS( getContainedDeducedType, Type, X->getContainedDeducedType() )
    case_REFLPROP_0ARGS( getContainedAutoType, Type, X->getContainedAutoType() )
    case_REFLPROP_0ARGS( hasAutoForTrailingReturnType, Result, X->hasAutoForTrailingReturnType() )
    case_REFLPROP_0ARGS( getAsArrayTypeUnsafe, Type, X->getAsArrayTypeUnsafe() )
    case_REFLPROP_0ARGS( castAsArrayTypeUnsafe, Type, X->castAsArrayTypeUnsafe() )
    case_REFLPROP_0ARGS( getBaseElementTypeUnsafe, Type, X->getBaseElementTypeUnsafe() )
    case_REFLPROP_0ARGS( getArrayElementTypeNoTypeQual, Type, X->getArrayElementTypeNoTypeQual() )
    case_REFLPROP_0ARGS( getPointeeOrArrayElementType, Type, X->getPointeeOrArrayElementType() )
    case_REFLPROP_0ARGS( getPointeeType, Type, X->getPointeeType() )
    case_REFLPROP_0ARGS( getUnqualifiedDesugaredType, Type, X->getUnqualifiedDesugaredType() )
    case_REFLPROP_0ARGS( isPromotableIntegerType, Result, X->isPromotableIntegerType() )
    case_REFLPROP_0ARGS( isSignedIntegerType, Result, X->isSignedIntegerType() )
    case_REFLPROP_0ARGS( isUnsignedIntegerType, Result, X->isUnsignedIntegerType() )
    case_REFLPROP_0ARGS( isSignedIntegerOrEnumerationType, Result, X->isSignedIntegerOrEnumerationType() )
    case_REFLPROP_0ARGS( isUnsignedIntegerOrEnumerationType, Result, X->isUnsignedIntegerOrEnumerationType() )
    case_REFLPROP_0ARGS( isFixedPointType, Result, X->isFixedPointType() )
    case_REFLPROP_0ARGS( isSaturatedFixedPointType, Result, X->isSaturatedFixedPointType() )
    case_REFLPROP_0ARGS( isUnsaturatedFixedPointType, Result, X->isUnsaturatedFixedPointType() )
    case_REFLPROP_0ARGS( isSignedFixedPointType, Result, X->isSignedFixedPointType() )
    case_REFLPROP_0ARGS( isUnsignedFixedPointType, Result, X->isUnsignedFixedPointType() )
    case_REFLPROP_0ARGS( isConstantSizeType, Result, X->isConstantSizeType() )
    case_REFLPROP_0ARGS( isSpecifierType, Result, X->isSpecifierType() )
    case_REFLPROP_0ARGS( getLinkage, Result, X->getLinkage() )
    case_REFLPROP_0ARGS( getVisibility, Result, X->getVisibility() )
    case_REFLPROP_0ARGS( isVisibilityExplicit, Result, X->isVisibilityExplicit() )
    case_REFLPROP_0ARGS( getLinkageAndVisibility, Type, X->getLinkageAndVisibility() )
    case_REFLPROP_0ARGS( isLinkageValid, Result, X->isLinkageValid() )
    case currefl::canHaveNullability: {
      ASSERT_TRAIT_IS_REFLPROP(canHaveNullability)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Result, X->canHaveNullability())
        LOAD_VAL((bool), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->canHaveNullability(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( acceptsObjCTypeParams, Result, X->acceptsObjCTypeParams() )
    case_REFLPROP_0ARGS( getTypeClassName, Str, X->getTypeClassName() )
    case_REFLPROP_0ARGS( getCanonicalTypeInternal, Type, X->getCanonicalTypeInternal() )
    case currefl::dump: {
      ASSERT_TRAIT_IS_REFLPROP(dump)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        ASSERT_NO_MORE  VOID_REFLECTION(X->dump())
      };
      break;
    }
    case currefl::dump1: {
      ASSERT_TRAIT_IS_REFLPROP(dump1)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::raw_ostream &), p0)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->dump((llvm::raw_ostream &)p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__BuiltinType: {
# define CLASSNAME (clang::BuiltinType)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__BuiltinType;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getKind, Result, X->getKind() )
    case currefl::getName: {
      ASSERT_TRAIT_IS_REFLPROP(getName)
      SET_PRIM_TYPE(const char *)
      SET_CALLBACK(Str) {
        LOAD_VAL_X(Str)
        LOAD_VAL((const struct clang::PrintingPolicy &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Str, X->getName(p0))
      };
      break;
    }
    case currefl::getNameAsCString: {
      ASSERT_TRAIT_IS_REFLPROP(getNameAsCString)
      SET_PRIM_TYPE(const char *)
      SET_CALLBACK(Str) {
        LOAD_VAL_X(Str)
        LOAD_VAL((const struct clang::PrintingPolicy &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Str, X->getNameAsCString(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( isSugared, Result, X->isSugared() )
    case_REFLPROP_0ARGS( desugar, Type, X->desugar() )
    case_REFLPROP_0ARGS( isInteger, Result, X->isInteger() )
    case_REFLPROP_0ARGS( isSignedInteger, Result, X->isSignedInteger() )
    case_REFLPROP_0ARGS( isUnsignedInteger, Result, X->isUnsignedInteger() )
    case_REFLPROP_0ARGS( isFloatingPoint, Result, X->isFloatingPoint() )
    case currefl::isPlaceholderTypeKind: {
      ASSERT_TRAIT_IS_REFLPROP(isPlaceholderTypeKind)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::BuiltinType::Kind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isPlaceholderTypeKind(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( isPlaceholderType, Result, X->isPlaceholderType() )
    case_REFLPROP_0ARGS( isNonOverloadPlaceholderType, Result, X->isNonOverloadPlaceholderType() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Type *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__ComplexType: {
# define CLASSNAME (clang::ComplexType)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__ComplexType;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getElementType, Type, X->getElementType() )
    case_REFLPROP_0ARGS( isSugared, Result, X->isSugared() )
    case_REFLPROP_0ARGS( desugar, Type, X->desugar() )
    case currefl::Profile: {
      ASSERT_TRAIT_IS_REFLPROP(Profile)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::FoldingSetNodeID &), p0)
        LOAD_VAL((class clang::QualType), p1)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->Profile((llvm::FoldingSetNodeID &)p0, (class clang::QualType)p1))
      };
      break;
    }
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Type *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__ParenType: {
# define CLASSNAME (clang::ParenType)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__ParenType;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getInnerType, Type, X->getInnerType() )
    case_REFLPROP_0ARGS( isSugared, Result, X->isSugared() )
    case_REFLPROP_0ARGS( desugar, Type, X->desugar() )
    case currefl::Profile: {
      ASSERT_TRAIT_IS_REFLPROP(Profile)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::FoldingSetNodeID &), p0)
        LOAD_VAL((class clang::QualType), p1)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->Profile((llvm::FoldingSetNodeID &)p0, (class clang::QualType)p1))
      };
      break;
    }
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Type *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__PointerType: {
# define CLASSNAME (clang::PointerType)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__PointerType;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getPointeeType, Type, X->getPointeeType() )
    case currefl::isAddressSpaceOverlapping: {
      ASSERT_TRAIT_IS_REFLPROP(isAddressSpaceOverlapping)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::PointerType &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isAddressSpaceOverlapping(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( isSugared, Result, X->isSugared() )
    case_REFLPROP_0ARGS( desugar, Type, X->desugar() )
    case currefl::Profile: {
      ASSERT_TRAIT_IS_REFLPROP(Profile)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::FoldingSetNodeID &), p0)
        LOAD_VAL((class clang::QualType), p1)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->Profile((llvm::FoldingSetNodeID &)p0, (class clang::QualType)p1))
      };
      break;
    }
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Type *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__AdjustedType: {
# define CLASSNAME (clang::AdjustedType)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__AdjustedType;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getOriginalType, Type, X->getOriginalType() )
    case_REFLPROP_0ARGS( getAdjustedType, Type, X->getAdjustedType() )
    case_REFLPROP_0ARGS( isSugared, Result, X->isSugared() )
    case_REFLPROP_0ARGS( desugar, Type, X->desugar() )
    case currefl::Profile: {
      ASSERT_TRAIT_IS_REFLPROP(Profile)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::FoldingSetNodeID &), p0)
        LOAD_VAL((class clang::QualType), p1)
        LOAD_VAL((class clang::QualType), p2)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->Profile((llvm::FoldingSetNodeID &)p0, (class clang::QualType)p1, (class clang::QualType)p2))
      };
      break;
    }
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Type *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__DecayedType: {
# define CLASSNAME (clang::DecayedType)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__DecayedType;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getDecayedType, Type, X->getDecayedType() )
    case_REFLPROP_0ARGS( getPointeeType, Type, X->getPointeeType() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Type *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__BlockPointerType: {
# define CLASSNAME (clang::BlockPointerType)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__BlockPointerType;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getPointeeType, Type, X->getPointeeType() )
    case_REFLPROP_0ARGS( isSugared, Result, X->isSugared() )
    case_REFLPROP_0ARGS( desugar, Type, X->desugar() )
    case currefl::Profile: {
      ASSERT_TRAIT_IS_REFLPROP(Profile)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::FoldingSetNodeID &), p0)
        LOAD_VAL((class clang::QualType), p1)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->Profile((llvm::FoldingSetNodeID &)p0, (class clang::QualType)p1))
      };
      break;
    }
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Type *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__ReferenceType: {
# define CLASSNAME (clang::ReferenceType)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__ReferenceType;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( isSpelledAsLValue, Result, X->isSpelledAsLValue() )
    case_REFLPROP_0ARGS( isInnerRef, Result, X->isInnerRef() )
    case_REFLPROP_0ARGS( getPointeeTypeAsWritten, Type, X->getPointeeTypeAsWritten() )
    case_REFLPROP_0ARGS( getPointeeType, Type, X->getPointeeType() )
    case currefl::Profile: {
      ASSERT_TRAIT_IS_REFLPROP(Profile)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::FoldingSetNodeID &), p0)
        LOAD_VAL((class clang::QualType), p1)
        LOAD_VAL((bool), p2)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->Profile((llvm::FoldingSetNodeID &)p0, (class clang::QualType)p1, (bool)p2))
      };
      break;
    }
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Type *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__LValueReferenceType: {
# define CLASSNAME (clang::LValueReferenceType)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__LValueReferenceType;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( isSugared, Result, X->isSugared() )
    case_REFLPROP_0ARGS( desugar, Type, X->desugar() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Type *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__RValueReferenceType: {
# define CLASSNAME (clang::RValueReferenceType)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__RValueReferenceType;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( isSugared, Result, X->isSugared() )
    case_REFLPROP_0ARGS( desugar, Type, X->desugar() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Type *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__MemberPointerType: {
# define CLASSNAME (clang::MemberPointerType)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__MemberPointerType;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getPointeeType, Type, X->getPointeeType() )
    case_REFLPROP_0ARGS( isMemberFunctionPointer, Result, X->isMemberFunctionPointer() )
    case_REFLPROP_0ARGS( isMemberDataPointer, Result, X->isMemberDataPointer() )
    case_REFLPROP_0ARGS( getClass, Type, X->getClass() )
    case_REFLPROP_0ARGS( getMostRecentCXXRecordDecl, Type, X->getMostRecentCXXRecordDecl() )
    case_REFLPROP_0ARGS( isSugared, Result, X->isSugared() )
    case_REFLPROP_0ARGS( desugar, Type, X->desugar() )
    case currefl::Profile: {
      ASSERT_TRAIT_IS_REFLPROP(Profile)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::FoldingSetNodeID &), p0)
        LOAD_VAL((class clang::QualType), p1)
        LOAD_VAL((const class clang::Type *), p2)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->Profile((llvm::FoldingSetNodeID &)p0, (class clang::QualType)p1, (const class clang::Type *)p2))
      };
      break;
    }
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Type *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__ArrayType: {
# define CLASSNAME (clang::ArrayType)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__ArrayType;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getElementType, Type, X->getElementType() )
    case_REFLPROP_0ARGS( getSizeModifier, Result, X->getSizeModifier() )
    case_REFLPROP_0ARGS( getIndexTypeQualifiers, Type, X->getIndexTypeQualifiers() )
    case_REFLPROP_0ARGS( getIndexTypeCVRQualifiers, Result, X->getIndexTypeCVRQualifiers() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Type *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__ConstantArrayType: {
# define CLASSNAME (clang::ConstantArrayType)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__ConstantArrayType;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getSize, Type, X->getSize() )
    case_REFLPROP_0ARGS( isSugared, Result, X->isSugared() )
    case_REFLPROP_0ARGS( desugar, Type, X->desugar() )
    case currefl::getNumAddressingBits: {
      ASSERT_TRAIT_IS_REFLPROP(getNumAddressingBits)
      SET_PRIM_TYPE(unsigned int)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((class clang::QualType), p1)
        LOAD_VAL((const class llvm::APInt &), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getNumAddressingBits(p0, p1, p2))
      };
      break;
    }
    case currefl::getMaxSizeBits: {
      ASSERT_TRAIT_IS_REFLPROP(getMaxSizeBits)
      SET_PRIM_TYPE(unsigned int)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::ASTContext &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getMaxSizeBits(p0))
      };
      break;
    }
    case currefl::Profile: {
      ASSERT_TRAIT_IS_REFLPROP(Profile)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::FoldingSetNodeID &), p0)
        LOAD_VAL((class clang::QualType), p1)
        LOAD_VAL((const class llvm::APInt &), p2)
        LOAD_VAL((enum clang::ArrayType::ArraySizeModifier), p3)
        LOAD_VAL((unsigned int), p4)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->Profile((llvm::FoldingSetNodeID &)p0, (class clang::QualType)p1, (const llvm::APInt &)p2, (enum clang::ArrayType::ArraySizeModifier)p3, (unsigned int)p4))
      };
      break;
    }
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Type *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__IncompleteArrayType: {
# define CLASSNAME (clang::IncompleteArrayType)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__IncompleteArrayType;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( isSugared, Result, X->isSugared() )
    case_REFLPROP_0ARGS( desugar, Type, X->desugar() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Type *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::Profile: {
      ASSERT_TRAIT_IS_REFLPROP(Profile)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::FoldingSetNodeID &), p0)
        LOAD_VAL((class clang::QualType), p1)
        LOAD_VAL((enum clang::ArrayType::ArraySizeModifier), p2)
        LOAD_VAL((unsigned int), p3)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->Profile((llvm::FoldingSetNodeID &)p0, (class clang::QualType)p1, (enum clang::ArrayType::ArraySizeModifier)p2, (unsigned int)p3))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__VariableArrayType: {
# define CLASSNAME (clang::VariableArrayType)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__VariableArrayType;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getSizeExpr, Type, X->getSizeExpr() )
    case_REFLPROP_0ARGS( getBracketsRange, Type, X->getBracketsRange() )
    case_REFLPROP_0ARGS( getLBracketLoc, Type, X->getLBracketLoc() )
    case_REFLPROP_0ARGS( getRBracketLoc, Type, X->getRBracketLoc() )
    case_REFLPROP_0ARGS( isSugared, Result, X->isSugared() )
    case_REFLPROP_0ARGS( desugar, Type, X->desugar() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Type *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__DependentSizedArrayType: {
# define CLASSNAME (clang::DependentSizedArrayType)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__DependentSizedArrayType;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getSizeExpr, Type, X->getSizeExpr() )
    case_REFLPROP_0ARGS( getBracketsRange, Type, X->getBracketsRange() )
    case_REFLPROP_0ARGS( getLBracketLoc, Type, X->getLBracketLoc() )
    case_REFLPROP_0ARGS( getRBracketLoc, Type, X->getRBracketLoc() )
    case_REFLPROP_0ARGS( isSugared, Result, X->isSugared() )
    case_REFLPROP_0ARGS( desugar, Type, X->desugar() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Type *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::Profile: {
      ASSERT_TRAIT_IS_REFLPROP(Profile)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::FoldingSetNodeID &), p0)
        LOAD_VAL((const class clang::ASTContext &), p1)
        LOAD_VAL((class clang::QualType), p2)
        LOAD_VAL((enum clang::ArrayType::ArraySizeModifier), p3)
        LOAD_VAL((unsigned int), p4)
        LOAD_VAL((class clang::Expr *), p5)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->Profile((llvm::FoldingSetNodeID &)p0, (const class clang::ASTContext &)p1, (class clang::QualType)p2, (enum clang::ArrayType::ArraySizeModifier)p3, (unsigned int)p4, (class clang::Expr *)p5))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__DependentAddressSpaceType: {
# define CLASSNAME (clang::DependentAddressSpaceType)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__DependentAddressSpaceType;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getAddrSpaceExpr, Type, X->getAddrSpaceExpr() )
    case_REFLPROP_0ARGS( getPointeeType, Type, X->getPointeeType() )
    case_REFLPROP_0ARGS( getAttributeLoc, Type, X->getAttributeLoc() )
    case_REFLPROP_0ARGS( isSugared, Result, X->isSugared() )
    case_REFLPROP_0ARGS( desugar, Type, X->desugar() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Type *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::Profile: {
      ASSERT_TRAIT_IS_REFLPROP(Profile)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::FoldingSetNodeID &), p0)
        LOAD_VAL((const class clang::ASTContext &), p1)
        LOAD_VAL((class clang::QualType), p2)
        LOAD_VAL((class clang::Expr *), p3)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->Profile((llvm::FoldingSetNodeID &)p0, (const class clang::ASTContext &)p1, (class clang::QualType)p2, (class clang::Expr *)p3))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__DependentSizedExtVectorType: {
# define CLASSNAME (clang::DependentSizedExtVectorType)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__DependentSizedExtVectorType;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getSizeExpr, Type, X->getSizeExpr() )
    case_REFLPROP_0ARGS( getElementType, Type, X->getElementType() )
    case_REFLPROP_0ARGS( getAttributeLoc, Type, X->getAttributeLoc() )
    case_REFLPROP_0ARGS( isSugared, Result, X->isSugared() )
    case_REFLPROP_0ARGS( desugar, Type, X->desugar() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Type *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::Profile: {
      ASSERT_TRAIT_IS_REFLPROP(Profile)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::FoldingSetNodeID &), p0)
        LOAD_VAL((const class clang::ASTContext &), p1)
        LOAD_VAL((class clang::QualType), p2)
        LOAD_VAL((class clang::Expr *), p3)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->Profile((llvm::FoldingSetNodeID &)p0, (const class clang::ASTContext &)p1, (class clang::QualType)p2, (class clang::Expr *)p3))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__VectorType: {
# define CLASSNAME (clang::VectorType)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__VectorType;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getElementType, Type, X->getElementType() )
    case_REFLPROP_0ARGS( getNumElements, Result, X->getNumElements() )
    case currefl::isVectorSizeTooLarge: {
      ASSERT_TRAIT_IS_REFLPROP(isVectorSizeTooLarge)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isVectorSizeTooLarge(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( isSugared, Result, X->isSugared() )
    case_REFLPROP_0ARGS( desugar, Type, X->desugar() )
    case_REFLPROP_0ARGS( getVectorKind, Result, X->getVectorKind() )
    case currefl::Profile: {
      ASSERT_TRAIT_IS_REFLPROP(Profile)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::FoldingSetNodeID &), p0)
        LOAD_VAL((class clang::QualType), p1)
        LOAD_VAL((unsigned int), p2)
        LOAD_VAL((enum clang::Type::TypeClass), p3)
        LOAD_VAL((enum clang::VectorType::VectorKind), p4)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->Profile((llvm::FoldingSetNodeID &)p0, (class clang::QualType)p1, (unsigned int)p2, (enum clang::Type::TypeClass)p3, (enum clang::VectorType::VectorKind)p4))
      };
      break;
    }
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Type *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__DependentVectorType: {
# define CLASSNAME (clang::DependentVectorType)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__DependentVectorType;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getSizeExpr, Type, X->getSizeExpr() )
    case_REFLPROP_0ARGS( getElementType, Type, X->getElementType() )
    case_REFLPROP_0ARGS( getAttributeLoc, Type, X->getAttributeLoc() )
    case_REFLPROP_0ARGS( getVectorKind, Result, X->getVectorKind() )
    case_REFLPROP_0ARGS( isSugared, Result, X->isSugared() )
    case_REFLPROP_0ARGS( desugar, Type, X->desugar() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Type *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::Profile: {
      ASSERT_TRAIT_IS_REFLPROP(Profile)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::FoldingSetNodeID &), p0)
        LOAD_VAL((const class clang::ASTContext &), p1)
        LOAD_VAL((class clang::QualType), p2)
        LOAD_VAL((const class clang::Expr *), p3)
        LOAD_VAL((enum clang::VectorType::VectorKind), p4)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->Profile((llvm::FoldingSetNodeID &)p0, (const class clang::ASTContext &)p1, (class clang::QualType)p2, (const class clang::Expr *)p3, (enum VectorType::VectorKind)p4))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__ExtVectorType: {
# define CLASSNAME (clang::ExtVectorType)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__ExtVectorType;
  switch( (currefl::memnames)MemNum ) {
    case currefl::getPointAccessorIdx: {
      ASSERT_TRAIT_IS_REFLPROP(getPointAccessorIdx)
      SET_PRIM_TYPE(int)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((char), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getPointAccessorIdx(p0))
      };
      break;
    }
    case currefl::getNumericAccessorIdx: {
      ASSERT_TRAIT_IS_REFLPROP(getNumericAccessorIdx)
      SET_PRIM_TYPE(int)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((char), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getNumericAccessorIdx(p0))
      };
      break;
    }
    case currefl::getAccessorIdx: {
      ASSERT_TRAIT_IS_REFLPROP(getAccessorIdx)
      SET_PRIM_TYPE(int)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((char), p0)
        LOAD_VAL((bool), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getAccessorIdx(p0, p1))
      };
      break;
    }
    case currefl::isAccessorWithinNumElements: {
      ASSERT_TRAIT_IS_REFLPROP(isAccessorWithinNumElements)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((char), p0)
        LOAD_VAL((bool), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isAccessorWithinNumElements(p0, p1))
      };
      break;
    }
    case_REFLPROP_0ARGS( isSugared, Result, X->isSugared() )
    case_REFLPROP_0ARGS( desugar, Type, X->desugar() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Type *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__FunctionType: {
# define CLASSNAME (clang::FunctionType)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__FunctionType;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getReturnType, Type, X->getReturnType() )
    case_REFLPROP_0ARGS( getHasRegParm, Result, X->getHasRegParm() )
    case_REFLPROP_0ARGS( getRegParmType, Result, X->getRegParmType() )
    case_REFLPROP_0ARGS( getNoReturnAttr, Result, X->getNoReturnAttr() )
    case_REFLPROP_0ARGS( getCallConv, Result, X->getCallConv() )
    case_REFLPROP_0ARGS( getExtInfo, Type, X->getExtInfo() )
    case_REFLPROP_0ARGS( isConst, Result, X->isConst() )
    case_REFLPROP_0ARGS( isVolatile, Result, X->isVolatile() )
    case_REFLPROP_0ARGS( isRestrict, Result, X->isRestrict() )
    case currefl::getCallResultType: {
      ASSERT_TRAIT_IS_REFLPROP(getCallResultType)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getCallResultType(p0))
      };
      break;
    }
    case currefl::getNameForCallConv: {
      ASSERT_TRAIT_IS_REFLPROP(getNameForCallConv)
      SET_PRIM_TYPE(const char *)
      SET_CALLBACK(Str) {
        LOAD_VAL_X(Str)
        LOAD_VAL((enum clang::CallingConv), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Str, X->getNameForCallConv(p0))
      };
      break;
    }
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Type *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__FunctionType__ExtInfo: {
# define CLASSNAME (clang::FunctionType::ExtInfo)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_MAYBEPTR(1, CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__FunctionType__ExtInfo;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getNoReturn, Result, X->getNoReturn() )
    case_REFLPROP_0ARGS( getProducesResult, Result, X->getProducesResult() )
    case_REFLPROP_0ARGS( getNoCallerSavedRegs, Result, X->getNoCallerSavedRegs() )
    case_REFLPROP_0ARGS( getNoCfCheck, Result, X->getNoCfCheck() )
    case_REFLPROP_0ARGS( getHasRegParm, Result, X->getHasRegParm() )
    case_REFLPROP_0ARGS( getRegParm, Result, X->getRegParm() )
    case_REFLPROP_0ARGS( getCC, Result, X->getCC() )
    case currefl::operator_eq_eq: {
      ASSERT_TRAIT_IS_REFLPROP(operator_eq_eq)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::FunctionType::ExtInfo), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->operator==(p0))
      };
      break;
    }
    case currefl::operator_not_eq: {
      ASSERT_TRAIT_IS_REFLPROP(operator_not_eq)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::FunctionType::ExtInfo), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->operator!=(p0))
      };
      break;
    }
    case currefl::withNoReturn: {
      ASSERT_TRAIT_IS_REFLPROP(withNoReturn)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((bool), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->withNoReturn(p0))
      };
      break;
    }
    case currefl::withProducesResult: {
      ASSERT_TRAIT_IS_REFLPROP(withProducesResult)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((bool), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->withProducesResult(p0))
      };
      break;
    }
    case currefl::withNoCallerSavedRegs: {
      ASSERT_TRAIT_IS_REFLPROP(withNoCallerSavedRegs)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((bool), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->withNoCallerSavedRegs(p0))
      };
      break;
    }
    case currefl::withNoCfCheck: {
      ASSERT_TRAIT_IS_REFLPROP(withNoCfCheck)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((bool), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->withNoCfCheck(p0))
      };
      break;
    }
    case currefl::withRegParm: {
      ASSERT_TRAIT_IS_REFLPROP(withRegParm)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->withRegParm(p0))
      };
      break;
    }
    case currefl::withCallingConv: {
      ASSERT_TRAIT_IS_REFLPROP(withCallingConv)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((enum clang::CallingConv), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->withCallingConv(p0))
      };
      break;
    }
    case currefl::Profile: {
      ASSERT_TRAIT_IS_REFLPROP(Profile)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::FoldingSetNodeID &), p0)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->Profile((llvm::FoldingSetNodeID &)p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__FunctionNoProtoType: {
# define CLASSNAME (clang::FunctionNoProtoType)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__FunctionNoProtoType;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( isSugared, Result, X->isSugared() )
    case_REFLPROP_0ARGS( desugar, Type, X->desugar() )
    case currefl::Profile: {
      ASSERT_TRAIT_IS_REFLPROP(Profile)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::FoldingSetNodeID &), p0)
        LOAD_VAL((class clang::QualType), p1)
        LOAD_VAL((class clang::FunctionType::ExtInfo), p2)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->Profile((llvm::FoldingSetNodeID &)p0, (class clang::QualType)p1, (class clang::FunctionType::ExtInfo)p2))
      };
      break;
    }
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Type *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__FunctionProtoType: {
# define CLASSNAME (clang::FunctionProtoType)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__FunctionProtoType;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getNumParams, Result, X->getNumParams() )
    case currefl::getParamType: {
      ASSERT_TRAIT_IS_REFLPROP(getParamType)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getParamType(p0))
      };
      break;
    }
    case currefl::getParamTypes: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->getParamTypes())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->getParamTypes())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::getParamTypes))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case_REFLPROP_0ARGS( getExtProtoInfo, Type, X->getExtProtoInfo() )
    case_REFLPROP_0ARGS( getExceptionSpecType, Result, X->getExceptionSpecType() )
    case_REFLPROP_0ARGS( hasExceptionSpec, Result, X->hasExceptionSpec() )
    case_REFLPROP_0ARGS( hasDynamicExceptionSpec, Result, X->hasDynamicExceptionSpec() )
    case_REFLPROP_0ARGS( hasNoexceptExceptionSpec, Result, X->hasNoexceptExceptionSpec() )
    case_REFLPROP_0ARGS( hasDependentExceptionSpec, Result, X->hasDependentExceptionSpec() )
    case_REFLPROP_0ARGS( hasInstantiationDependentExceptionSpec, Result, X->hasInstantiationDependentExceptionSpec() )
    case_REFLPROP_0ARGS( getNumExceptions, Result, X->getNumExceptions() )
    case currefl::getExceptionType: {
      ASSERT_TRAIT_IS_REFLPROP(getExceptionType)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getExceptionType(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getNoexceptExpr, Type, X->getNoexceptExpr() )
    case_REFLPROP_0ARGS( getExceptionSpecDecl, Type, X->getExceptionSpecDecl() )
    case_REFLPROP_0ARGS( getExceptionSpecTemplate, Type, X->getExceptionSpecTemplate() )
    case_REFLPROP_0ARGS( canThrow, Result, X->canThrow() )
    case currefl::isNothrow: {
      ASSERT_TRAIT_IS_REFLPROP(isNothrow)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Result, X->isNothrow())
        LOAD_VAL((bool), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isNothrow(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( isVariadic, Result, X->isVariadic() )
    case_REFLPROP_0ARGS( isTemplateVariadic, Result, X->isTemplateVariadic() )
    case_REFLPROP_0ARGS( hasTrailingReturn, Result, X->hasTrailingReturn() )
    case_REFLPROP_0ARGS( getTypeQuals, Result, X->getTypeQuals() )
    case_REFLPROP_0ARGS( getRefQualifier, Result, X->getRefQualifier() )
    case currefl::param_types: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->param_types())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->param_types())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::param_types))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case currefl::exceptions: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->exceptions())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->exceptions())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::exceptions))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case_REFLPROP_0ARGS( hasExtParameterInfos, Result, X->hasExtParameterInfos() )
    case currefl::getExtParameterInfos: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->getExtParameterInfos())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->getExtParameterInfos())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::getExtParameterInfos))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case_REFLPROP_0ARGS( getExtParameterInfosOrNull, Type, X->getExtParameterInfosOrNull() )
    case currefl::getExtParameterInfo: {
      ASSERT_TRAIT_IS_REFLPROP(getExtParameterInfo)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getExtParameterInfo(p0))
      };
      break;
    }
    case currefl::getParameterABI: {
      ASSERT_TRAIT_IS_REFLPROP(getParameterABI)
      SET_PRIM_TYPE(enum clang::ParameterABI)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getParameterABI(p0))
      };
      break;
    }
    case currefl::isParamConsumed: {
      ASSERT_TRAIT_IS_REFLPROP(isParamConsumed)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isParamConsumed(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( isSugared, Result, X->isSugared() )
    case_REFLPROP_0ARGS( desugar, Type, X->desugar() )
    case currefl::printExceptionSpecification: {
      ASSERT_TRAIT_IS_REFLPROP(printExceptionSpecification)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::raw_ostream &), p0)
        LOAD_VAL((const struct clang::PrintingPolicy &), p1)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->printExceptionSpecification((class llvm::raw_ostream &)p0, (const struct clang::PrintingPolicy &)p1))
      };
      break;
    }
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Type *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::Profile: {
      ASSERT_TRAIT_IS_REFLPROP(Profile)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::FoldingSetNodeID &), p0)
        LOAD_VAL((class clang::QualType), p1)
        LOAD_VAL((const class clang::QualType *), p2)
        LOAD_VAL((unsigned int), p3)
        LOAD_VAL((const struct clang::FunctionProtoType::ExtProtoInfo &), p4)
        LOAD_VAL((const class clang::ASTContext &), p5)
        LOAD_VAL((bool), p6)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->Profile((llvm::FoldingSetNodeID &)p0, (class clang::QualType)p1, (clang::FunctionProtoType::param_type_iterator)p2, (unsigned int)p3, (const struct clang::FunctionProtoType::ExtProtoInfo &)p4, (const class clang::ASTContext &)p5, (bool)p6))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__FunctionProtoType__ExtParameterInfo: {
# define CLASSNAME (clang::FunctionProtoType::ExtParameterInfo)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_MAYBEPTR(1, CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__FunctionProtoType__ExtParameterInfo;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getABI, Result, X->getABI() )
    case currefl::withABI: {
      ASSERT_TRAIT_IS_REFLPROP(withABI)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((enum clang::ParameterABI), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->withABI(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( isConsumed, Result, X->isConsumed() )
    case currefl::withIsConsumed: {
      ASSERT_TRAIT_IS_REFLPROP(withIsConsumed)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((bool), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->withIsConsumed(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( hasPassObjectSize, Result, X->hasPassObjectSize() )
    case_REFLPROP_0ARGS( withHasPassObjectSize, Type, X->withHasPassObjectSize() )
    case_REFLPROP_0ARGS( isNoEscape, Result, X->isNoEscape() )
    case currefl::withIsNoEscape: {
      ASSERT_TRAIT_IS_REFLPROP(withIsNoEscape)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((bool), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->withIsNoEscape(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getOpaqueValue, Result, X->getOpaqueValue() )
    case currefl::getFromOpaqueValue: {
      ASSERT_TRAIT_IS_REFLPROP(getFromOpaqueValue)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned char), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getFromOpaqueValue(p0))
      };
      break;
    }
    case currefl::operator_eq_eq: {
      ASSERT_TRAIT_IS_REFLPROP(operator_eq_eq)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL((class clang::FunctionProtoType::ExtParameterInfo), p0 )
        LOAD_VAL((class clang::FunctionProtoType::ExtParameterInfo), p1 )
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, p0 == p1)
      };
      break;
    }
    case currefl::operator_not_eq: {
      ASSERT_TRAIT_IS_REFLPROP(operator_not_eq)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL((class clang::FunctionProtoType::ExtParameterInfo), p0 )
        LOAD_VAL((class clang::FunctionProtoType::ExtParameterInfo), p1 )
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, p0 != p1)
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__FunctionProtoType__ExceptionSpecInfo: {
# define CLASSNAME (clang::FunctionProtoType::ExceptionSpecInfo)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_NEVERPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__FunctionProtoType__ExceptionSpecInfo;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS(Type, Result, X->Type)
    case_REFLPROP_0ARGS(NoexceptExpr, Type, X->NoexceptExpr)
    case_REFLPROP_0ARGS(SourceDecl, Type, X->SourceDecl)
    case_REFLPROP_0ARGS(SourceTemplate, Type, X->SourceTemplate)
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__FunctionProtoType__ExtProtoInfo: {
# define CLASSNAME (clang::FunctionProtoType::ExtProtoInfo)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_MAYBEPTR(1, CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__FunctionProtoType__ExtProtoInfo;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS(ExtInfo, Type, X->ExtInfo)
    case_REFLPROP_0ARGS(Variadic, Result, X->Variadic)
    case_REFLPROP_0ARGS(HasTrailingReturn, Result, X->HasTrailingReturn)
    case_REFLPROP_0ARGS(TypeQuals, Result, X->TypeQuals)
    case_REFLPROP_0ARGS(RefQualifier, Result, X->RefQualifier)
    case_REFLPROP_0ARGS(ExceptionSpec, Type, X->ExceptionSpec)
    case_REFLPROP_0ARGS(ExtParameterInfos, Type, X->ExtParameterInfos)
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__UnresolvedUsingType: {
# define CLASSNAME (clang::UnresolvedUsingType)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__UnresolvedUsingType;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getDecl, Type, X->getDecl() )
    case_REFLPROP_0ARGS( isSugared, Result, X->isSugared() )
    case_REFLPROP_0ARGS( desugar, Type, X->desugar() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Type *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::Profile: {
      ASSERT_TRAIT_IS_REFLPROP(Profile)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::FoldingSetNodeID &), p0)
        LOAD_VAL((class clang::UnresolvedUsingTypenameDecl *), p1)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->Profile((llvm::FoldingSetNodeID &)p0, (class clang::UnresolvedUsingTypenameDecl *)p1))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__TypedefType: {
# define CLASSNAME (clang::TypedefType)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__TypedefType;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getDecl, Type, X->getDecl() )
    case_REFLPROP_0ARGS( isSugared, Result, X->isSugared() )
    case_REFLPROP_0ARGS( desugar, Type, X->desugar() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Type *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__TypeOfExprType: {
# define CLASSNAME (clang::TypeOfExprType)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__TypeOfExprType;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getUnderlyingExpr, Type, X->getUnderlyingExpr() )
    case_REFLPROP_0ARGS( desugar, Type, X->desugar() )
    case_REFLPROP_0ARGS( isSugared, Result, X->isSugared() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Type *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__TypeOfType: {
# define CLASSNAME (clang::TypeOfType)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__TypeOfType;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getUnderlyingType, Type, X->getUnderlyingType() )
    case_REFLPROP_0ARGS( desugar, Type, X->desugar() )
    case_REFLPROP_0ARGS( isSugared, Result, X->isSugared() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Type *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__DecltypeType: {
# define CLASSNAME (clang::DecltypeType)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__DecltypeType;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getUnderlyingExpr, Type, X->getUnderlyingExpr() )
    case_REFLPROP_0ARGS( getUnderlyingType, Type, X->getUnderlyingType() )
    case_REFLPROP_0ARGS( desugar, Type, X->desugar() )
    case_REFLPROP_0ARGS( isSugared, Result, X->isSugared() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Type *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__ReflectedType: {
# define CLASSNAME (clang::ReflectedType)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__ReflectedType;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getTypeReflection, Type, X->getTypeReflection() )
    case_REFLPROP_0ARGS( getUnderlyingType, Type, X->getUnderlyingType() )
    case_REFLPROP_0ARGS( isSugared, Result, X->isSugared() )
    case_REFLPROP_0ARGS( desugar, Type, X->desugar() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Type *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__UnaryTransformType: {
# define CLASSNAME (clang::UnaryTransformType)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__UnaryTransformType;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( isSugared, Result, X->isSugared() )
    case_REFLPROP_0ARGS( desugar, Type, X->desugar() )
    case_REFLPROP_0ARGS( getUnderlyingType, Type, X->getUnderlyingType() )
    case_REFLPROP_0ARGS( getBaseType, Type, X->getBaseType() )
    case_REFLPROP_0ARGS( getUTTKind, Result, X->getUTTKind() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Type *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__TagType: {
# define CLASSNAME (clang::TagType)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__TagType;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getDecl, Type, X->getDecl() )
    case_REFLPROP_0ARGS( isBeingDefined, Result, X->isBeingDefined() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Type *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__RecordType: {
# define CLASSNAME (clang::RecordType)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__RecordType;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getDecl, Type, X->getDecl() )
    case_REFLPROP_0ARGS( hasConstFields, Result, X->hasConstFields() )
    case_REFLPROP_0ARGS( isSugared, Result, X->isSugared() )
    case_REFLPROP_0ARGS( desugar, Type, X->desugar() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Type *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__EnumType: {
# define CLASSNAME (clang::EnumType)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__EnumType;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getDecl, Type, X->getDecl() )
    case_REFLPROP_0ARGS( isSugared, Result, X->isSugared() )
    case_REFLPROP_0ARGS( desugar, Type, X->desugar() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Type *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__AttributedType: {
# define CLASSNAME (clang::AttributedType)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__AttributedType;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getAttrKind, Result, X->getAttrKind() )
    case_REFLPROP_0ARGS( getModifiedType, Type, X->getModifiedType() )
    case_REFLPROP_0ARGS( getEquivalentType, Type, X->getEquivalentType() )
    case_REFLPROP_0ARGS( isSugared, Result, X->isSugared() )
    case_REFLPROP_0ARGS( desugar, Type, X->desugar() )
    case_REFLPROP_0ARGS( isQualifier, Result, X->isQualifier() )
    case_REFLPROP_0ARGS( isMSTypeSpec, Result, X->isMSTypeSpec() )
    case_REFLPROP_0ARGS( isCallingConv, Result, X->isCallingConv() )
    case currefl::getNullabilityAttrKind: {
      ASSERT_TRAIT_IS_REFLPROP(getNullabilityAttrKind)
      SET_PRIM_TYPE(enum clang::AttributedType::Kind)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::NullabilityKind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getNullabilityAttrKind(p0))
      };
      break;
    }
    case currefl::Profile: {
      ASSERT_TRAIT_IS_REFLPROP(Profile)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::FoldingSetNodeID &), p0)
        LOAD_VAL((enum clang::AttributedType::Kind), p1)
        LOAD_VAL((class clang::QualType), p2)
        LOAD_VAL((class clang::QualType), p3)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->Profile((llvm::FoldingSetNodeID &)p0, (enum clang::AttributedType::Kind)p1, (class clang::QualType)p2, (class clang::QualType)p3))
      };
      break;
    }
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Type *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__TemplateTypeParmType: {
# define CLASSNAME (clang::TemplateTypeParmType)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__TemplateTypeParmType;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getDepth, Result, X->getDepth() )
    case_REFLPROP_0ARGS( getIndex, Result, X->getIndex() )
    case_REFLPROP_0ARGS( isParameterPack, Result, X->isParameterPack() )
    case_REFLPROP_0ARGS( getDecl, Type, X->getDecl() )
    case_REFLPROP_0ARGS( getIdentifier, Type, X->getIdentifier() )
    case_REFLPROP_0ARGS( isSugared, Result, X->isSugared() )
    case_REFLPROP_0ARGS( desugar, Type, X->desugar() )
    case currefl::Profile: {
      ASSERT_TRAIT_IS_REFLPROP(Profile)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::FoldingSetNodeID &), p0)
        LOAD_VAL((unsigned int), p1)
        LOAD_VAL((unsigned int), p2)
        LOAD_VAL((bool), p3)
        LOAD_VAL((class clang::TemplateTypeParmDecl *), p4)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->Profile((llvm::FoldingSetNodeID &)p0, (unsigned int)p1, (unsigned int)p2, (bool)p3, (class clang::TemplateTypeParmDecl *)p4))
      };
      break;
    }
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Type *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__SubstTemplateTypeParmType: {
# define CLASSNAME (clang::SubstTemplateTypeParmType)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__SubstTemplateTypeParmType;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getReplacedParameter, Type, X->getReplacedParameter() )
    case_REFLPROP_0ARGS( getReplacementType, Type, X->getReplacementType() )
    case_REFLPROP_0ARGS( isSugared, Result, X->isSugared() )
    case_REFLPROP_0ARGS( desugar, Type, X->desugar() )
    case currefl::Profile: {
      ASSERT_TRAIT_IS_REFLPROP(Profile)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::FoldingSetNodeID &), p0)
        LOAD_VAL((const class clang::TemplateTypeParmType *), p1)
        LOAD_VAL((class clang::QualType), p2)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->Profile((llvm::FoldingSetNodeID &)p0, (const class clang::TemplateTypeParmType *)p1, (class clang::QualType)p2))
      };
      break;
    }
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Type *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__SubstTemplateTypeParmPackType: {
# define CLASSNAME (clang::SubstTemplateTypeParmPackType)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__SubstTemplateTypeParmPackType;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getIdentifier, Type, X->getIdentifier() )
    case_REFLPROP_0ARGS( getReplacedParameter, Type, X->getReplacedParameter() )
    case_REFLPROP_0ARGS( isSugared, Result, X->isSugared() )
    case_REFLPROP_0ARGS( desugar, Type, X->desugar() )
    case_REFLPROP_0ARGS( getArgumentPack, Type, X->getArgumentPack() )
    case currefl::Profile: {
      ASSERT_TRAIT_IS_REFLPROP(Profile)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::FoldingSetNodeID &), p0)
        LOAD_VAL((const class clang::TemplateTypeParmType *), p1)
        LOAD_VAL((const class clang::TemplateArgument &), p2)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->Profile((llvm::FoldingSetNodeID &)p0, (const class clang::TemplateTypeParmType *)p1, (const class clang::TemplateArgument &)p2))
      };
      break;
    }
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Type *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__DeducedType: {
# define CLASSNAME (clang::DeducedType)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__DeducedType;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( isSugared, Result, X->isSugared() )
    case_REFLPROP_0ARGS( desugar, Type, X->desugar() )
    case_REFLPROP_0ARGS( getDeducedType, Type, X->getDeducedType() )
    case_REFLPROP_0ARGS( isDeduced, Result, X->isDeduced() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Type *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__AutoType: {
# define CLASSNAME (clang::AutoType)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__AutoType;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( isDecltypeAuto, Result, X->isDecltypeAuto() )
    case_REFLPROP_0ARGS( getKeyword, Result, X->getKeyword() )
    case currefl::Profile: {
      ASSERT_TRAIT_IS_REFLPROP(Profile)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::FoldingSetNodeID &), p0)
        LOAD_VAL((class clang::QualType), p1)
        LOAD_VAL((enum clang::AutoTypeKeyword), p2)
        LOAD_VAL((bool), p3)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->Profile((llvm::FoldingSetNodeID &)p0, (class clang::QualType)p1, (enum clang::AutoTypeKeyword)p2, (bool)p3))
      };
      break;
    }
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Type *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__DeducedTemplateSpecializationType: {
# define CLASSNAME (clang::DeducedTemplateSpecializationType)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__DeducedTemplateSpecializationType;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getTemplateName, Type, X->getTemplateName() )
    case currefl::Profile: {
      ASSERT_TRAIT_IS_REFLPROP(Profile)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::FoldingSetNodeID &), p0)
        LOAD_VAL((class clang::TemplateName), p1)
        LOAD_VAL((class clang::QualType), p2)
        LOAD_VAL((bool), p3)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->Profile((llvm::FoldingSetNodeID &)p0, (class clang::TemplateName)p1, (class clang::QualType)p2, (bool)p3))
      };
      break;
    }
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Type *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__TemplateSpecializationType: {
# define CLASSNAME (clang::TemplateSpecializationType)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__TemplateSpecializationType;
  switch( (currefl::memnames)MemNum ) {
    case currefl::_this_: {
      switch (TraitKind) {
        case RTK_range_nth:
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE
            BUILD_REFLECTION_CALL_RANGE_NTH(Type, *X)
          };
          break;
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE
            BUILD_REFLECTION_CALL_RANGE_SIZE(*X)
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << "_this_"
                 << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case_REFLPROP_0ARGS( isCurrentInstantiation, Result, X->isCurrentInstantiation() )
    case_REFLPROP_0ARGS( isTypeAlias, Result, X->isTypeAlias() )
    case_REFLPROP_0ARGS( getAliasedType, Type, X->getAliasedType() )
    case_REFLPROP_0ARGS( getTemplateName, Type, X->getTemplateName() )
    case_REFLPROP_0ARGS( getArgs, Type, X->getArgs() )
    case_REFLPROP_0ARGS( getNumArgs, Result, X->getNumArgs() )
    case currefl::getArg: {
      ASSERT_TRAIT_IS_REFLPROP(getArg)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getArg(p0))
      };
      break;
    }
    case currefl::template_arguments: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->template_arguments())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->template_arguments())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::template_arguments))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case_REFLPROP_0ARGS( isSugared, Result, X->isSugared() )
    case_REFLPROP_0ARGS( desugar, Type, X->desugar() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Type *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__InjectedClassNameType: {
# define CLASSNAME (clang::InjectedClassNameType)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__InjectedClassNameType;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getInjectedSpecializationType, Type, X->getInjectedSpecializationType() )
    case_REFLPROP_0ARGS( getInjectedTST, Type, X->getInjectedTST() )
    case_REFLPROP_0ARGS( getTemplateName, Type, X->getTemplateName() )
    case_REFLPROP_0ARGS( getDecl, Type, X->getDecl() )
    case_REFLPROP_0ARGS( isSugared, Result, X->isSugared() )
    case_REFLPROP_0ARGS( desugar, Type, X->desugar() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Type *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__TypeWithKeyword: {
# define CLASSNAME (clang::TypeWithKeyword)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__TypeWithKeyword;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getKeyword, Result, X->getKeyword() )
    case currefl::getKeywordForTypeSpec: {
      ASSERT_TRAIT_IS_REFLPROP(getKeywordForTypeSpec)
      SET_PRIM_TYPE(enum clang::ElaboratedTypeKeyword)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getKeywordForTypeSpec(p0))
      };
      break;
    }
    case currefl::getTagTypeKindForTypeSpec: {
      ASSERT_TRAIT_IS_REFLPROP(getTagTypeKindForTypeSpec)
      SET_PRIM_TYPE(enum clang::TagTypeKind)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getTagTypeKindForTypeSpec(p0))
      };
      break;
    }
    case currefl::getKeywordForTagTypeKind: {
      ASSERT_TRAIT_IS_REFLPROP(getKeywordForTagTypeKind)
      SET_PRIM_TYPE(enum clang::ElaboratedTypeKeyword)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::TagTypeKind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getKeywordForTagTypeKind(p0))
      };
      break;
    }
    case currefl::getTagTypeKindForKeyword: {
      ASSERT_TRAIT_IS_REFLPROP(getTagTypeKindForKeyword)
      SET_PRIM_TYPE(enum clang::TagTypeKind)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::ElaboratedTypeKeyword), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getTagTypeKindForKeyword(p0))
      };
      break;
    }
    case currefl::KeywordIsTagTypeKind: {
      ASSERT_TRAIT_IS_REFLPROP(KeywordIsTagTypeKind)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::ElaboratedTypeKeyword), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->KeywordIsTagTypeKind(p0))
      };
      break;
    }
    case currefl::getKeywordName: {
      ASSERT_TRAIT_IS_REFLPROP(getKeywordName)
      SET_PRIM_TYPE(const char *)
      SET_CALLBACK(Str) {
        LOAD_VAL_X(Str)
        LOAD_VAL((enum clang::ElaboratedTypeKeyword), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Str, X->getKeywordName(p0))
      };
      break;
    }
    case currefl::getTagTypeKindName: {
      ASSERT_TRAIT_IS_REFLPROP(getTagTypeKindName)
      SET_PRIM_TYPE(const char *)
      SET_CALLBACK(Str) {
        LOAD_VAL_X(Str)
        LOAD_VAL((enum clang::TagTypeKind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Str, X->getTagTypeKindName(p0))
      };
      break;
    }
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Type *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__ElaboratedType: {
# define CLASSNAME (clang::ElaboratedType)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__ElaboratedType;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getQualifier, Type, X->getQualifier() )
    case_REFLPROP_0ARGS( getNamedType, Type, X->getNamedType() )
    case_REFLPROP_0ARGS( desugar, Type, X->desugar() )
    case_REFLPROP_0ARGS( isSugared, Result, X->isSugared() )
    case_REFLPROP_0ARGS( getOwnedTagDecl, Type, X->getOwnedTagDecl() )
    case currefl::Profile: {
      ASSERT_TRAIT_IS_REFLPROP(Profile)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::FoldingSetNodeID &), p0)
        LOAD_VAL((enum clang::ElaboratedTypeKeyword), p1)
        LOAD_VAL((class clang::NestedNameSpecifier *), p2)
        LOAD_VAL((class clang::QualType), p3)
        LOAD_VAL((class clang::TagDecl *), p4)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->Profile((llvm::FoldingSetNodeID &)p0, (enum clang::ElaboratedTypeKeyword)p1, (class clang::NestedNameSpecifier *)p2, (class clang::QualType)p3, (class clang::TagDecl *)p4))
      };
      break;
    }
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Type *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__DependentNameType: {
# define CLASSNAME (clang::DependentNameType)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__DependentNameType;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getQualifier, Type, X->getQualifier() )
    case_REFLPROP_0ARGS( getIdentifier, Type, X->getIdentifier() )
    case_REFLPROP_0ARGS( isSugared, Result, X->isSugared() )
    case_REFLPROP_0ARGS( desugar, Type, X->desugar() )
    case currefl::Profile: {
      ASSERT_TRAIT_IS_REFLPROP(Profile)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::FoldingSetNodeID &), p0)
        LOAD_VAL((enum clang::ElaboratedTypeKeyword), p1)
        LOAD_VAL((class clang::NestedNameSpecifier *), p2)
        LOAD_VAL((const class clang::IdentifierInfo *), p3)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->Profile((llvm::FoldingSetNodeID &)p0, (enum clang::ElaboratedTypeKeyword)p1, (class clang::NestedNameSpecifier *)p2, (const class clang::IdentifierInfo *)p3))
      };
      break;
    }
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Type *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__DependentTemplateSpecializationType: {
# define CLASSNAME (clang::DependentTemplateSpecializationType)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__DependentTemplateSpecializationType;
  switch( (currefl::memnames)MemNum ) {
    case currefl::_this_: {
      switch (TraitKind) {
        case RTK_range_nth:
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE
            BUILD_REFLECTION_CALL_RANGE_NTH(Type, *X)
          };
          break;
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE
            BUILD_REFLECTION_CALL_RANGE_SIZE(*X)
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << "_this_"
                 << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case_REFLPROP_0ARGS( getQualifier, Type, X->getQualifier() )
    case_REFLPROP_0ARGS( getIdentifier, Type, X->getIdentifier() )
    case_REFLPROP_0ARGS( getArgs, Type, X->getArgs() )
    case_REFLPROP_0ARGS( getNumArgs, Result, X->getNumArgs() )
    case currefl::getArg: {
      ASSERT_TRAIT_IS_REFLPROP(getArg)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getArg(p0))
      };
      break;
    }
    case currefl::template_arguments: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->template_arguments())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->template_arguments())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::template_arguments))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case_REFLPROP_0ARGS( isSugared, Result, X->isSugared() )
    case_REFLPROP_0ARGS( desugar, Type, X->desugar() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Type *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__PackExpansionType: {
# define CLASSNAME (clang::PackExpansionType)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__PackExpansionType;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getPattern, Type, X->getPattern() )
    case_REFLPROP_0ARGS( isSugared, Result, X->isSugared() )
    case_REFLPROP_0ARGS( desugar, Type, X->desugar() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Type *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__ObjCTypeParamType: {
# define CLASSNAME (clang::ObjCTypeParamType)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__ObjCTypeParamType;
  switch( (currefl::memnames)MemNum ) {
    case currefl::quals: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->quals())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->quals())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::quals))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case_REFLPROP_0ARGS( qual_empty, Result, X->qual_empty() )
    case_REFLPROP_0ARGS( getNumProtocols, Result, X->getNumProtocols() )
    case currefl::getProtocol: {
      ASSERT_TRAIT_IS_REFLPROP(getProtocol)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getProtocol(p0))
      };
      break;
    }
    case currefl::getProtocols: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->getProtocols())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->getProtocols())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::getProtocols))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case_REFLPROP_0ARGS( isSugared, Result, X->isSugared() )
    case_REFLPROP_0ARGS( desugar, Type, X->desugar() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Type *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getDecl, Type, X->getDecl() )
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__ObjCObjectType: {
# define CLASSNAME (clang::ObjCObjectType)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__ObjCObjectType;
  switch( (currefl::memnames)MemNum ) {
    case currefl::quals: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->quals())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->quals())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::quals))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case_REFLPROP_0ARGS( qual_empty, Result, X->qual_empty() )
    case_REFLPROP_0ARGS( getNumProtocols, Result, X->getNumProtocols() )
    case currefl::getProtocol: {
      ASSERT_TRAIT_IS_REFLPROP(getProtocol)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getProtocol(p0))
      };
      break;
    }
    case currefl::getProtocols: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->getProtocols())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->getProtocols())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::getProtocols))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case_REFLPROP_0ARGS( getBaseType, Type, X->getBaseType() )
    case_REFLPROP_0ARGS( isObjCId, Result, X->isObjCId() )
    case_REFLPROP_0ARGS( isObjCClass, Result, X->isObjCClass() )
    case_REFLPROP_0ARGS( isObjCUnqualifiedId, Result, X->isObjCUnqualifiedId() )
    case_REFLPROP_0ARGS( isObjCUnqualifiedClass, Result, X->isObjCUnqualifiedClass() )
    case_REFLPROP_0ARGS( isObjCUnqualifiedIdOrClass, Result, X->isObjCUnqualifiedIdOrClass() )
    case_REFLPROP_0ARGS( isObjCQualifiedId, Result, X->isObjCQualifiedId() )
    case_REFLPROP_0ARGS( isObjCQualifiedClass, Result, X->isObjCQualifiedClass() )
    case_REFLPROP_0ARGS( getInterface, Type, X->getInterface() )
    case_REFLPROP_0ARGS( isSpecialized, Result, X->isSpecialized() )
    case_REFLPROP_0ARGS( isSpecializedAsWritten, Result, X->isSpecializedAsWritten() )
    case_REFLPROP_0ARGS( isUnspecialized, Result, X->isUnspecialized() )
    case_REFLPROP_0ARGS( isUnspecializedAsWritten, Result, X->isUnspecializedAsWritten() )
    case currefl::getTypeArgs: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->getTypeArgs())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->getTypeArgs())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::getTypeArgs))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case currefl::getTypeArgsAsWritten: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->getTypeArgsAsWritten())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->getTypeArgsAsWritten())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::getTypeArgsAsWritten))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case_REFLPROP_0ARGS( isKindOfTypeAsWritten, Result, X->isKindOfTypeAsWritten() )
    case_REFLPROP_0ARGS( isKindOfType, Result, X->isKindOfType() )
    case_REFLPROP_0ARGS( getSuperClassType, Type, X->getSuperClassType() )
    case currefl::stripObjCKindOfTypeAndQuals: {
      ASSERT_TRAIT_IS_REFLPROP(stripObjCKindOfTypeAndQuals)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->stripObjCKindOfTypeAndQuals(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( isSugared, Result, X->isSugared() )
    case_REFLPROP_0ARGS( desugar, Type, X->desugar() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Type *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__ObjCInterfaceType: {
# define CLASSNAME (clang::ObjCInterfaceType)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__ObjCInterfaceType;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getDecl, Type, X->getDecl() )
    case_REFLPROP_0ARGS( isSugared, Result, X->isSugared() )
    case_REFLPROP_0ARGS( desugar, Type, X->desugar() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Type *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__ObjCObjectPointerType: {
# define CLASSNAME (clang::ObjCObjectPointerType)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__ObjCObjectPointerType;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getPointeeType, Type, X->getPointeeType() )
    case_REFLPROP_0ARGS( getObjectType, Type, X->getObjectType() )
    case_REFLPROP_0ARGS( getInterfaceType, Type, X->getInterfaceType() )
    case_REFLPROP_0ARGS( getInterfaceDecl, Type, X->getInterfaceDecl() )
    case_REFLPROP_0ARGS( isObjCIdType, Result, X->isObjCIdType() )
    case_REFLPROP_0ARGS( isObjCClassType, Result, X->isObjCClassType() )
    case_REFLPROP_0ARGS( isObjCIdOrClassType, Result, X->isObjCIdOrClassType() )
    case_REFLPROP_0ARGS( isObjCQualifiedIdType, Result, X->isObjCQualifiedIdType() )
    case_REFLPROP_0ARGS( isObjCQualifiedClassType, Result, X->isObjCQualifiedClassType() )
    case_REFLPROP_0ARGS( isKindOfType, Result, X->isKindOfType() )
    case_REFLPROP_0ARGS( isSpecialized, Result, X->isSpecialized() )
    case_REFLPROP_0ARGS( isSpecializedAsWritten, Result, X->isSpecializedAsWritten() )
    case_REFLPROP_0ARGS( isUnspecialized, Result, X->isUnspecialized() )
    case_REFLPROP_0ARGS( isUnspecializedAsWritten, Result, X->isUnspecializedAsWritten() )
    case currefl::getTypeArgs: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->getTypeArgs())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->getTypeArgs())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::getTypeArgs))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case currefl::getTypeArgsAsWritten: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->getTypeArgsAsWritten())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->getTypeArgsAsWritten())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::getTypeArgsAsWritten))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case currefl::quals: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->quals())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->quals())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::quals))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case_REFLPROP_0ARGS( qual_empty, Result, X->qual_empty() )
    case_REFLPROP_0ARGS( getNumProtocols, Result, X->getNumProtocols() )
    case currefl::getProtocol: {
      ASSERT_TRAIT_IS_REFLPROP(getProtocol)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getProtocol(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( isSugared, Result, X->isSugared() )
    case_REFLPROP_0ARGS( desugar, Type, X->desugar() )
    case_REFLPROP_0ARGS( getSuperClassType, Type, X->getSuperClassType() )
    case currefl::stripObjCKindOfTypeAndQuals: {
      ASSERT_TRAIT_IS_REFLPROP(stripObjCKindOfTypeAndQuals)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->stripObjCKindOfTypeAndQuals(p0))
      };
      break;
    }
    case currefl::Profile: {
      ASSERT_TRAIT_IS_REFLPROP(Profile)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::FoldingSetNodeID &), p0)
        LOAD_VAL((class clang::QualType), p1)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->Profile((llvm::FoldingSetNodeID &)p0, (class clang::QualType)p1))
      };
      break;
    }
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Type *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__AtomicType: {
# define CLASSNAME (clang::AtomicType)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__AtomicType;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getValueType, Type, X->getValueType() )
    case_REFLPROP_0ARGS( isSugared, Result, X->isSugared() )
    case_REFLPROP_0ARGS( desugar, Type, X->desugar() )
    case currefl::Profile: {
      ASSERT_TRAIT_IS_REFLPROP(Profile)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::FoldingSetNodeID &), p0)
        LOAD_VAL((class clang::QualType), p1)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->Profile((llvm::FoldingSetNodeID &)p0, (class clang::QualType)p1))
      };
      break;
    }
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Type *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__PipeType: {
# define CLASSNAME (clang::PipeType)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__PipeType;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getElementType, Type, X->getElementType() )
    case_REFLPROP_0ARGS( isSugared, Result, X->isSugared() )
    case_REFLPROP_0ARGS( desugar, Type, X->desugar() )
    case currefl::Profile: {
      ASSERT_TRAIT_IS_REFLPROP(Profile)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::FoldingSetNodeID &), p0)
        LOAD_VAL((class clang::QualType), p1)
        LOAD_VAL((bool), p2)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->Profile((llvm::FoldingSetNodeID &)p0, (class clang::QualType)p1, (bool)p2))
      };
      break;
    }
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Type *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( isReadOnly, Result, X->isReadOnly() )
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__TypeSourceInfo: {
# define CLASSNAME (clang::TypeSourceInfo)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__TypeSourceInfo;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getType, Type, X->getType() )
    case_REFLPROP_0ARGS( getTypeLoc, Type, X->getTypeLoc() )
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__TranslationUnitDecl: {
# define CLASSNAME (clang::TranslationUnitDecl)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__TranslationUnitDecl;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getASTContext, Type, X->getASTContext() )
    case_REFLPROP_0ARGS( getAnonymousNamespace, Type, X->getAnonymousNamespace() )
    case currefl::Create: {
      ASSERT_TRAIT_IS_REFLPROP(Create)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0))
      };
      break;
    }
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Decl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::classofKind: {
      ASSERT_TRAIT_IS_REFLPROP(classofKind)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::Decl::Kind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classofKind(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__PragmaCommentDecl: {
# define CLASSNAME (clang::PragmaCommentDecl)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__PragmaCommentDecl;
  switch( (currefl::memnames)MemNum ) {
    case currefl::CreateDeserialized: {
      ASSERT_TRAIT_IS_REFLPROP(CreateDeserialized)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        LOAD_VAL((unsigned int), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateDeserialized(p0, p1, p2))
      };
      break;
    }
    case_REFLPROP_0ARGS( getCommentKind, Result, X->getCommentKind() )
    case_REFLPROP_0ARGS( getArg, Str, X->getArg() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Decl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::classofKind: {
      ASSERT_TRAIT_IS_REFLPROP(classofKind)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::Decl::Kind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classofKind(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__PragmaDetectMismatchDecl: {
# define CLASSNAME (clang::PragmaDetectMismatchDecl)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__PragmaDetectMismatchDecl;
  switch( (currefl::memnames)MemNum ) {
    case currefl::CreateDeserialized: {
      ASSERT_TRAIT_IS_REFLPROP(CreateDeserialized)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        LOAD_VAL((unsigned int), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateDeserialized(p0, p1, p2))
      };
      break;
    }
    case_REFLPROP_0ARGS( getName, Str, X->getName() )
    case_REFLPROP_0ARGS( getValue, Str, X->getValue() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Decl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::classofKind: {
      ASSERT_TRAIT_IS_REFLPROP(classofKind)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::Decl::Kind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classofKind(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__ExternCContextDecl: {
# define CLASSNAME (clang::ExternCContextDecl)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__ExternCContextDecl;
  switch( (currefl::memnames)MemNum ) {
    case currefl::Create: {
      ASSERT_TRAIT_IS_REFLPROP(Create)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((class clang::TranslationUnitDecl *), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1))
      };
      break;
    }
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Decl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::classofKind: {
      ASSERT_TRAIT_IS_REFLPROP(classofKind)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::Decl::Kind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classofKind(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__NamedDecl: {
# define CLASSNAME (clang::NamedDecl)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__NamedDecl;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getIdentifier, Type, X->getIdentifier() )
    case_REFLPROP_0ARGS( getName, Str, X->getName() )
    case_REFLPROP_0ARGS( getNameAsString, Str, X->getNameAsString() )
    case currefl::printName: {
      ASSERT_TRAIT_IS_REFLPROP(printName)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::raw_ostream &), p0)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->printName((class llvm::raw_ostream &)p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getDeclName, Type, X->getDeclName() )
    case currefl::printQualifiedName: {
      ASSERT_TRAIT_IS_REFLPROP(printQualifiedName)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::raw_ostream &), p0)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->printQualifiedName((class llvm::raw_ostream &)p0))
      };
      break;
    }
    case currefl::printQualifiedName1: {
      ASSERT_TRAIT_IS_REFLPROP(printQualifiedName1)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::raw_ostream &), p0)
        LOAD_VAL((const struct clang::PrintingPolicy &), p1)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->printQualifiedName((class llvm::raw_ostream &)p0, (const struct clang::PrintingPolicy &)p1))
      };
      break;
    }
    case_REFLPROP_0ARGS( getQualifiedNameAsString, Str, X->getQualifiedNameAsString() )
    case currefl::getNameForDiagnostic: {
      ASSERT_TRAIT_IS_REFLPROP(getNameForDiagnostic)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::raw_ostream &), p0)
        LOAD_VAL((const struct clang::PrintingPolicy &), p1)
        LOAD_VAL((bool), p2)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->getNameForDiagnostic((class llvm::raw_ostream &)p0, (const struct clang::PrintingPolicy &)p1, (bool)p2))
      };
      break;
    }
    case currefl::declarationReplaces: {
      ASSERT_TRAIT_IS_REFLPROP(declarationReplaces)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::NamedDecl *), p0)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Result, X->declarationReplaces(p0))
        LOAD_VAL((bool), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->declarationReplaces(p0, p1))
      };
      break;
    }
    case_REFLPROP_0ARGS( hasLinkage, Result, X->hasLinkage() )
    case_REFLPROP_0ARGS( isCXXClassMember, Result, X->isCXXClassMember() )
    case_REFLPROP_0ARGS( isCXXInstanceMember, Result, X->isCXXInstanceMember() )
    case_REFLPROP_0ARGS( getLinkageInternal, Result, X->getLinkageInternal() )
    case_REFLPROP_0ARGS( getFormalLinkage, Result, X->getFormalLinkage() )
    case_REFLPROP_0ARGS( hasExternalFormalLinkage, Result, X->hasExternalFormalLinkage() )
    case_REFLPROP_0ARGS( isExternallyVisible, Result, X->isExternallyVisible() )
    case_REFLPROP_0ARGS( isExternallyDeclarable, Result, X->isExternallyDeclarable() )
    case_REFLPROP_0ARGS( getVisibility, Result, X->getVisibility() )
    case_REFLPROP_0ARGS( getLinkageAndVisibility, Type, X->getLinkageAndVisibility() )
    case_REFLPROP_0ARGS( isLinkageValid, Result, X->isLinkageValid() )
    case_REFLPROP_0ARGS( hasLinkageBeenComputed, Result, X->hasLinkageBeenComputed() )
    case_REFLPROP_0ARGS( getUnderlyingDecl, Type, X->getUnderlyingDecl() )
    case_REFLPROP_0ARGS( getMostRecentDecl, Type, X->getMostRecentDecl() )
    case_REFLPROP_0ARGS( getObjCFStringFormattingFamily, Result, X->getObjCFStringFormattingFamily() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Decl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::classofKind: {
      ASSERT_TRAIT_IS_REFLPROP(classofKind)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::Decl::Kind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classofKind(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__LabelDecl: {
# define CLASSNAME (clang::LabelDecl)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__LabelDecl;
  switch( (currefl::memnames)MemNum ) {
    case currefl::Create: {
      ASSERT_TRAIT_IS_REFLPROP(Create)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((class clang::DeclContext *), p1)
        LOAD_VAL((class clang::SourceLocation), p2)
        LOAD_VAL((class clang::IdentifierInfo *), p3)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3))
      };
      break;
    }
    case currefl::Create1: {
      ASSERT_TRAIT_IS_REFLPROP(Create1)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((class clang::DeclContext *), p1)
        LOAD_VAL((class clang::SourceLocation), p2)
        LOAD_VAL((class clang::IdentifierInfo *), p3)
        LOAD_VAL((class clang::SourceLocation), p4)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3, p4))
      };
      break;
    }
    case currefl::CreateDeserialized: {
      ASSERT_TRAIT_IS_REFLPROP(CreateDeserialized)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateDeserialized(p0, p1))
      };
      break;
    }
    case_REFLPROP_0ARGS( getStmt, Type, X->getStmt() )
    case_REFLPROP_0ARGS( isGnuLocal, Result, X->isGnuLocal() )
    case_REFLPROP_0ARGS( getSourceRange, Type, X->getSourceRange() )
    case_REFLPROP_0ARGS( isMSAsmLabel, Result, X->isMSAsmLabel() )
    case_REFLPROP_0ARGS( isResolvedMSAsmLabel, Result, X->isResolvedMSAsmLabel() )
    case_REFLPROP_0ARGS( getMSAsmLabel, Str, X->getMSAsmLabel() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Decl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::classofKind: {
      ASSERT_TRAIT_IS_REFLPROP(classofKind)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::Decl::Kind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classofKind(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__NamespaceDecl: {
# define CLASSNAME (clang::NamespaceDecl)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__NamespaceDecl;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getPreviousDecl, Type, X->getPreviousDecl() )
    case_REFLPROP_0ARGS( getFirstDecl, Type, X->getFirstDecl() )
    case_REFLPROP_0ARGS( getMostRecentDecl, Type, X->getMostRecentDecl() )
    case currefl::Create: {
      ASSERT_TRAIT_IS_REFLPROP(Create)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((class clang::DeclContext *), p1)
        LOAD_VAL((bool), p2)
        LOAD_VAL((class clang::SourceLocation), p3)
        LOAD_VAL((class clang::SourceLocation), p4)
        LOAD_VAL((class clang::IdentifierInfo *), p5)
        LOAD_VAL((class clang::NamespaceDecl *), p6)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3, p4, p5, p6))
      };
      break;
    }
    case currefl::CreateDeserialized: {
      ASSERT_TRAIT_IS_REFLPROP(CreateDeserialized)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateDeserialized(p0, p1))
      };
      break;
    }
    case_REFLPROP_0ARGS( isAnonymousNamespace, Result, X->isAnonymousNamespace() )
    case_REFLPROP_0ARGS( isInline, Result, X->isInline() )
    case_REFLPROP_0ARGS( getOriginalNamespace, Type, X->getOriginalNamespace() )
    case_REFLPROP_0ARGS( isOriginalNamespace, Result, X->isOriginalNamespace() )
    case_REFLPROP_0ARGS( getAnonymousNamespace, Type, X->getAnonymousNamespace() )
    case_REFLPROP_0ARGS( getCanonicalDecl, Type, X->getCanonicalDecl() )
    case_REFLPROP_0ARGS( getSourceRange, Type, X->getSourceRange() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getRBraceLoc, Type, X->getRBraceLoc() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Decl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::classofKind: {
      ASSERT_TRAIT_IS_REFLPROP(classofKind)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::Decl::Kind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classofKind(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__ValueDecl: {
# define CLASSNAME (clang::ValueDecl)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__ValueDecl;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getType, Type, X->getType() )
    case_REFLPROP_0ARGS( isWeak, Result, X->isWeak() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Decl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::classofKind: {
      ASSERT_TRAIT_IS_REFLPROP(classofKind)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::Decl::Kind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classofKind(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__DeclaratorDecl: {
# define CLASSNAME (clang::DeclaratorDecl)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__DeclaratorDecl;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getTypeSourceInfo, Type, X->getTypeSourceInfo() )
    case_REFLPROP_0ARGS( getInnerLocStart, Type, X->getInnerLocStart() )
    case_REFLPROP_0ARGS( getOuterLocStart, Type, X->getOuterLocStart() )
    case_REFLPROP_0ARGS( getSourceRange, Type, X->getSourceRange() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getQualifier, Type, X->getQualifier() )
    case_REFLPROP_0ARGS( getQualifierLoc, Type, X->getQualifierLoc() )
    case_REFLPROP_0ARGS( getNumTemplateParameterLists, Result, X->getNumTemplateParameterLists() )
    case currefl::getTemplateParameterList: {
      ASSERT_TRAIT_IS_REFLPROP(getTemplateParameterList)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getTemplateParameterList(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getTypeSpecStartLoc, Type, X->getTypeSpecStartLoc() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Decl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::classofKind: {
      ASSERT_TRAIT_IS_REFLPROP(classofKind)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::Decl::Kind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classofKind(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__EvaluatedStmt: {
# define CLASSNAME (clang::EvaluatedStmt)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__EvaluatedStmt;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS(WasEvaluated, Result, X->WasEvaluated)
    case_REFLPROP_0ARGS(IsEvaluating, Result, X->IsEvaluating)
    case_REFLPROP_0ARGS(CheckedICE, Result, X->CheckedICE)
    case_REFLPROP_0ARGS(CheckingICE, Result, X->CheckingICE)
    case_REFLPROP_0ARGS(IsICE, Result, X->IsICE)
    case_REFLPROP_0ARGS(Value, Type, X->Value)
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__VarDecl: {
# define CLASSNAME (clang::VarDecl)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__VarDecl;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getPreviousDecl, Type, X->getPreviousDecl() )
    case_REFLPROP_0ARGS( getFirstDecl, Type, X->getFirstDecl() )
    case_REFLPROP_0ARGS( getMostRecentDecl, Type, X->getMostRecentDecl() )
    case currefl::getStorageClassSpecifierString: {
      ASSERT_TRAIT_IS_REFLPROP(getStorageClassSpecifierString)
      SET_PRIM_TYPE(const char *)
      SET_CALLBACK(Str) {
        LOAD_VAL_X(Str)
        LOAD_VAL((enum clang::StorageClass), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Str, X->getStorageClassSpecifierString(p0))
      };
      break;
    }
    case currefl::Create: {
      ASSERT_TRAIT_IS_REFLPROP(Create)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((class clang::DeclContext *), p1)
        LOAD_VAL((class clang::SourceLocation), p2)
        LOAD_VAL((class clang::SourceLocation), p3)
        LOAD_VAL((class clang::IdentifierInfo *), p4)
        LOAD_VAL((class clang::QualType), p5)
        LOAD_VAL((class clang::TypeSourceInfo *), p6)
        LOAD_VAL((enum clang::StorageClass), p7)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3, p4, p5, p6, p7))
      };
      break;
    }
    case currefl::Create1: {
      ASSERT_TRAIT_IS_REFLPROP(Create1)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((class clang::DeclContext *), p1)
        LOAD_VAL((class clang::SourceLocation), p2)
        LOAD_VAL((struct clang::DeclarationNameInfo), p3)
        LOAD_VAL((class clang::QualType), p4)
        LOAD_VAL((class clang::TypeSourceInfo *), p5)
        LOAD_VAL((enum clang::StorageClass), p6)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3, p4, p5, p6))
      };
      break;
    }
    case currefl::CreateDeserialized: {
      ASSERT_TRAIT_IS_REFLPROP(CreateDeserialized)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateDeserialized(p0, p1))
      };
      break;
    }
    case_REFLPROP_0ARGS( getSourceRange, Type, X->getSourceRange() )
    case_REFLPROP_0ARGS( getStorageClass, Result, X->getStorageClass() )
    case_REFLPROP_0ARGS( getTSCSpec, Result, X->getTSCSpec() )
    case_REFLPROP_0ARGS( getTLSKind, Result, X->getTLSKind() )
    case_REFLPROP_0ARGS( hasLocalStorage, Result, X->hasLocalStorage() )
    case_REFLPROP_0ARGS( isStaticLocal, Result, X->isStaticLocal() )
    case_REFLPROP_0ARGS( hasExternalStorage, Result, X->hasExternalStorage() )
    case_REFLPROP_0ARGS( hasGlobalStorage, Result, X->hasGlobalStorage() )
    case_REFLPROP_0ARGS( getStorageDuration, Result, X->getStorageDuration() )
    case_REFLPROP_0ARGS( getLanguageLinkage, Result, X->getLanguageLinkage() )
    case_REFLPROP_0ARGS( isExternC, Result, X->isExternC() )
    case_REFLPROP_0ARGS( isInExternCContext, Result, X->isInExternCContext() )
    case_REFLPROP_0ARGS( isInExternCXXContext, Result, X->isInExternCXXContext() )
    case_REFLPROP_0ARGS( isLocalVarDecl, Result, X->isLocalVarDecl() )
    case_REFLPROP_0ARGS( isLocalVarDeclOrParm, Result, X->isLocalVarDeclOrParm() )
    case_REFLPROP_0ARGS( isFunctionOrMethodVarDecl, Result, X->isFunctionOrMethodVarDecl() )
    case_REFLPROP_0ARGS( isStaticDataMember, Result, X->isStaticDataMember() )
    case_REFLPROP_0ARGS( getCanonicalDecl, Type, X->getCanonicalDecl() )
    case currefl::isThisDeclarationADefinition: {
      ASSERT_TRAIT_IS_REFLPROP(isThisDeclarationADefinition)
      SET_PRIM_TYPE(enum clang::VarDecl::DefinitionKind)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::ASTContext &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isThisDeclarationADefinition(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( isThisDeclarationADefinition1, Result, X->isThisDeclarationADefinition() )
    case currefl::hasDefinition: {
      ASSERT_TRAIT_IS_REFLPROP(hasDefinition)
      SET_PRIM_TYPE(enum clang::VarDecl::DefinitionKind)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::ASTContext &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->hasDefinition(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( hasDefinition1, Result, X->hasDefinition() )
    case_REFLPROP_0ARGS( getActingDefinition, Type, X->getActingDefinition() )
    case currefl::getDefinition: {
      ASSERT_TRAIT_IS_REFLPROP(getDefinition)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getDefinition(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getDefinition1, Type, X->getDefinition() )
    case_REFLPROP_0ARGS( isOutOfLine, Result, X->isOutOfLine() )
    case_REFLPROP_0ARGS( isFileVarDecl, Result, X->isFileVarDecl() )
    case_REFLPROP_0ARGS( getAnyInitializer, Type, X->getAnyInitializer() )
    case currefl::getAnyInitializer1: {
      ASSERT_TRAIT_IS_REFLPROP(getAnyInitializer1)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::VarDecl *&), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getAnyInitializer(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( hasInit, Result, X->hasInit() )
    case_REFLPROP_0ARGS( getInit, Type, X->getInit() )
    case currefl::isUsableInConstantExpressions: {
      ASSERT_TRAIT_IS_REFLPROP(isUsableInConstantExpressions)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::ASTContext &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isUsableInConstantExpressions(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( ensureEvaluatedStmt, Type, X->ensureEvaluatedStmt() )
    case_REFLPROP_0ARGS( evaluateValue, Type, X->evaluateValue() )
    case_REFLPROP_0ARGS( getEvaluatedValue, Type, X->getEvaluatedValue() )
    case_REFLPROP_0ARGS( isInitKnownICE, Result, X->isInitKnownICE() )
    case_REFLPROP_0ARGS( isInitICE, Result, X->isInitICE() )
    case_REFLPROP_0ARGS( checkInitIsICE, Result, X->checkInitIsICE() )
    case_REFLPROP_0ARGS( getInitStyle, Result, X->getInitStyle() )
    case_REFLPROP_0ARGS( isDirectInit, Result, X->isDirectInit() )
    case_REFLPROP_0ARGS( isThisDeclarationADemotedDefinition, Result, X->isThisDeclarationADemotedDefinition() )
    case_REFLPROP_0ARGS( isExceptionVariable, Result, X->isExceptionVariable() )
    case_REFLPROP_0ARGS( isNRVOVariable, Result, X->isNRVOVariable() )
    case_REFLPROP_0ARGS( isCXXForRangeDecl, Result, X->isCXXForRangeDecl() )
    case_REFLPROP_0ARGS( isObjCForDecl, Result, X->isObjCForDecl() )
    case_REFLPROP_0ARGS( isARCPseudoStrong, Result, X->isARCPseudoStrong() )
    case_REFLPROP_0ARGS( isInline, Result, X->isInline() )
    case_REFLPROP_0ARGS( isInlineSpecified, Result, X->isInlineSpecified() )
    case_REFLPROP_0ARGS( isConstexpr, Result, X->isConstexpr() )
    case_REFLPROP_0ARGS( isInitCapture, Result, X->isInitCapture() )
    case_REFLPROP_0ARGS( isPreviousDeclInSameBlockScope, Result, X->isPreviousDeclInSameBlockScope() )
    case_REFLPROP_0ARGS( getTemplateInstantiationPattern, Type, X->getTemplateInstantiationPattern() )
    case_REFLPROP_0ARGS( getInstantiatedFromStaticDataMember, Type, X->getInstantiatedFromStaticDataMember() )
    case_REFLPROP_0ARGS( getTemplateSpecializationKind, Result, X->getTemplateSpecializationKind() )
    case_REFLPROP_0ARGS( getPointOfInstantiation, Type, X->getPointOfInstantiation() )
    case_REFLPROP_0ARGS( getMemberSpecializationInfo, Type, X->getMemberSpecializationInfo() )
    case_REFLPROP_0ARGS( getDescribedVarTemplate, Type, X->getDescribedVarTemplate() )
    case_REFLPROP_0ARGS( isKnownToBeDefined, Result, X->isKnownToBeDefined() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Decl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::classofKind: {
      ASSERT_TRAIT_IS_REFLPROP(classofKind)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::Decl::Kind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classofKind(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__ImplicitParamDecl: {
# define CLASSNAME (clang::ImplicitParamDecl)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__ImplicitParamDecl;
  switch( (currefl::memnames)MemNum ) {
    case currefl::Create: {
      ASSERT_TRAIT_IS_REFLPROP(Create)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((class clang::DeclContext *), p1)
        LOAD_VAL((class clang::SourceLocation), p2)
        LOAD_VAL((class clang::IdentifierInfo *), p3)
        LOAD_VAL((class clang::QualType), p4)
        LOAD_VAL((enum clang::ImplicitParamDecl::ImplicitParamKind), p5)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3, p4, p5))
      };
      break;
    }
    case currefl::Create1: {
      ASSERT_TRAIT_IS_REFLPROP(Create1)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((class clang::QualType), p1)
        LOAD_VAL((enum clang::ImplicitParamDecl::ImplicitParamKind), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2))
      };
      break;
    }
    case currefl::CreateDeserialized: {
      ASSERT_TRAIT_IS_REFLPROP(CreateDeserialized)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateDeserialized(p0, p1))
      };
      break;
    }
    case_REFLPROP_0ARGS( getParameterKind, Result, X->getParameterKind() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Decl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::classofKind: {
      ASSERT_TRAIT_IS_REFLPROP(classofKind)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::Decl::Kind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classofKind(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__ParmVarDecl: {
# define CLASSNAME (clang::ParmVarDecl)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__ParmVarDecl;
  switch( (currefl::memnames)MemNum ) {
    case currefl::Create: {
      ASSERT_TRAIT_IS_REFLPROP(Create)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((class clang::DeclContext *), p1)
        LOAD_VAL((class clang::SourceLocation), p2)
        LOAD_VAL((class clang::SourceLocation), p3)
        LOAD_VAL((class clang::IdentifierInfo *), p4)
        LOAD_VAL((class clang::QualType), p5)
        LOAD_VAL((class clang::TypeSourceInfo *), p6)
        LOAD_VAL((enum clang::StorageClass), p7)
        LOAD_VAL((class clang::Expr *), p8)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3, p4, p5, p6, p7, p8))
      };
      break;
    }
    case currefl::CreateDeserialized: {
      ASSERT_TRAIT_IS_REFLPROP(CreateDeserialized)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateDeserialized(p0, p1))
      };
      break;
    }
    case_REFLPROP_0ARGS( getSourceRange, Type, X->getSourceRange() )
    case_REFLPROP_0ARGS( isObjCMethodParameter, Result, X->isObjCMethodParameter() )
    case_REFLPROP_0ARGS( getFunctionScopeDepth, Result, X->getFunctionScopeDepth() )
    case_REFLPROP_0ARGS( getFunctionScopeIndex, Result, X->getFunctionScopeIndex() )
    case_REFLPROP_0ARGS( getObjCDeclQualifier, Result, X->getObjCDeclQualifier() )
    case_REFLPROP_0ARGS( isKNRPromoted, Result, X->isKNRPromoted() )
    case_REFLPROP_0ARGS( getDefaultArg, Type, X->getDefaultArg() )
    case_REFLPROP_0ARGS( getDefaultArgRange, Type, X->getDefaultArgRange() )
    case_REFLPROP_0ARGS( getUninstantiatedDefaultArg, Type, X->getUninstantiatedDefaultArg() )
    case_REFLPROP_0ARGS( hasDefaultArg, Result, X->hasDefaultArg() )
    case_REFLPROP_0ARGS( hasUnparsedDefaultArg, Result, X->hasUnparsedDefaultArg() )
    case_REFLPROP_0ARGS( hasUninstantiatedDefaultArg, Result, X->hasUninstantiatedDefaultArg() )
    case_REFLPROP_0ARGS( hasInheritedDefaultArg, Result, X->hasInheritedDefaultArg() )
    case_REFLPROP_0ARGS( getOriginalType, Type, X->getOriginalType() )
    case_REFLPROP_0ARGS( isParameterPack, Result, X->isParameterPack() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Decl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::classofKind: {
      ASSERT_TRAIT_IS_REFLPROP(classofKind)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::Decl::Kind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classofKind(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__FunctionDecl: {
# define CLASSNAME (clang::FunctionDecl)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__FunctionDecl;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getPreviousDecl, Type, X->getPreviousDecl() )
    case_REFLPROP_0ARGS( getFirstDecl, Type, X->getFirstDecl() )
    case_REFLPROP_0ARGS( getMostRecentDecl, Type, X->getMostRecentDecl() )
    case currefl::Create: {
      ASSERT_TRAIT_IS_REFLPROP(Create)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((class clang::DeclContext *), p1)
        LOAD_VAL((class clang::SourceLocation), p2)
        LOAD_VAL((class clang::SourceLocation), p3)
        LOAD_VAL((class clang::DeclarationName), p4)
        LOAD_VAL((class clang::QualType), p5)
        LOAD_VAL((class clang::TypeSourceInfo *), p6)
        LOAD_VAL((enum clang::StorageClass), p7)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3, p4, p5, p6, p7))
        LOAD_VAL((bool), p8)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3, p4, p5, p6, p7, p8))
        LOAD_VAL((bool), p9)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9))
        LOAD_VAL((bool), p10)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10))
      };
      break;
    }
    case currefl::Create1: {
      ASSERT_TRAIT_IS_REFLPROP(Create1)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((class clang::DeclContext *), p1)
        LOAD_VAL((class clang::SourceLocation), p2)
        LOAD_VAL((const struct clang::DeclarationNameInfo &), p3)
        LOAD_VAL((class clang::QualType), p4)
        LOAD_VAL((class clang::TypeSourceInfo *), p5)
        LOAD_VAL((enum clang::StorageClass), p6)
        LOAD_VAL((bool), p7)
        LOAD_VAL((bool), p8)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3, p4, p5, p6, p7, p8))
        LOAD_VAL((bool), p9)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9))
      };
      break;
    }
    case currefl::CreateDeserialized: {
      ASSERT_TRAIT_IS_REFLPROP(CreateDeserialized)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateDeserialized(p0, p1))
      };
      break;
    }
    case_REFLPROP_0ARGS( getNameInfo, Type, X->getNameInfo() )
    case currefl::getNameForDiagnostic: {
      ASSERT_TRAIT_IS_REFLPROP(getNameForDiagnostic)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::raw_ostream &), p0)
        LOAD_VAL((const struct clang::PrintingPolicy &), p1)
        LOAD_VAL((bool), p2)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->getNameForDiagnostic((class llvm::raw_ostream &)p0, (const struct clang::PrintingPolicy &)p1, (bool)p2))
      };
      break;
    }
    case_REFLPROP_0ARGS( getSourceRange, Type, X->getSourceRange() )
    case currefl::hasBody: {
      ASSERT_TRAIT_IS_REFLPROP(hasBody)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::FunctionDecl *&), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->hasBody(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( hasBody1, Result, X->hasBody() )
    case_REFLPROP_0ARGS( hasTrivialBody, Result, X->hasTrivialBody() )
    case currefl::isDefined: {
      ASSERT_TRAIT_IS_REFLPROP(isDefined)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::FunctionDecl *&), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isDefined(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( isDefined1, Result, X->isDefined() )
    case_REFLPROP_0ARGS( getDefinition, Type, X->getDefinition() )
    case currefl::getBody: {
      ASSERT_TRAIT_IS_REFLPROP(getBody)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::FunctionDecl *&), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getBody(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getBody1, Type, X->getBody() )
    case_REFLPROP_0ARGS( isThisDeclarationADefinition, Result, X->isThisDeclarationADefinition() )
    case_REFLPROP_0ARGS( doesThisDeclarationHaveABody, Result, X->doesThisDeclarationHaveABody() )
    case_REFLPROP_0ARGS( isVariadic, Result, X->isVariadic() )
    case_REFLPROP_0ARGS( isVirtualAsWritten, Result, X->isVirtualAsWritten() )
    case_REFLPROP_0ARGS( isPure, Result, X->isPure() )
    case_REFLPROP_0ARGS( isLateTemplateParsed, Result, X->isLateTemplateParsed() )
    case_REFLPROP_0ARGS( isTrivial, Result, X->isTrivial() )
    case_REFLPROP_0ARGS( isTrivialForCall, Result, X->isTrivialForCall() )
    case_REFLPROP_0ARGS( isDefaulted, Result, X->isDefaulted() )
    case_REFLPROP_0ARGS( isExplicitlyDefaulted, Result, X->isExplicitlyDefaulted() )
    case_REFLPROP_0ARGS( hasImplicitReturnZero, Result, X->hasImplicitReturnZero() )
    case_REFLPROP_0ARGS( hasPrototype, Result, X->hasPrototype() )
    case_REFLPROP_0ARGS( hasWrittenPrototype, Result, X->hasWrittenPrototype() )
    case_REFLPROP_0ARGS( hasInheritedPrototype, Result, X->hasInheritedPrototype() )
    case_REFLPROP_0ARGS( isConstexpr, Result, X->isConstexpr() )
    case_REFLPROP_0ARGS( instantiationIsPending, Result, X->instantiationIsPending() )
    case_REFLPROP_0ARGS( usesSEHTry, Result, X->usesSEHTry() )
    case_REFLPROP_0ARGS( isDeleted, Result, X->isDeleted() )
    case_REFLPROP_0ARGS( isDeletedAsWritten, Result, X->isDeletedAsWritten() )
    case_REFLPROP_0ARGS( isMain, Result, X->isMain() )
    case_REFLPROP_0ARGS( isMSVCRTEntryPoint, Result, X->isMSVCRTEntryPoint() )
    case_REFLPROP_0ARGS( isReservedGlobalPlacementOperator, Result, X->isReservedGlobalPlacementOperator() )
    case currefl::isReplaceableGlobalAllocationFunction: {
      ASSERT_TRAIT_IS_REFLPROP(isReplaceableGlobalAllocationFunction)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Result, X->isReplaceableGlobalAllocationFunction())
        LOAD_VAL((bool *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isReplaceableGlobalAllocationFunction(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( isDestroyingOperatorDelete, Result, X->isDestroyingOperatorDelete() )
    case_REFLPROP_0ARGS( getLanguageLinkage, Result, X->getLanguageLinkage() )
    case_REFLPROP_0ARGS( isExternC, Result, X->isExternC() )
    case_REFLPROP_0ARGS( isInExternCContext, Result, X->isInExternCContext() )
    case_REFLPROP_0ARGS( isInExternCXXContext, Result, X->isInExternCXXContext() )
    case_REFLPROP_0ARGS( isGlobal, Result, X->isGlobal() )
    case_REFLPROP_0ARGS( isNoReturn, Result, X->isNoReturn() )
    case_REFLPROP_0ARGS( hasSkippedBody, Result, X->hasSkippedBody() )
    case_REFLPROP_0ARGS( willHaveBody, Result, X->willHaveBody() )
    case_REFLPROP_0ARGS( isMetaprogram, Result, X->isMetaprogram() )
    case_REFLPROP_0ARGS( isMultiVersion, Result, X->isMultiVersion() )
    case_REFLPROP_0ARGS( isCPUDispatchMultiVersion, Result, X->isCPUDispatchMultiVersion() )
    case_REFLPROP_0ARGS( isCPUSpecificMultiVersion, Result, X->isCPUSpecificMultiVersion() )
    case_REFLPROP_0ARGS( getCanonicalDecl, Type, X->getCanonicalDecl() )
    case_REFLPROP_0ARGS( getBuiltinID, Result, X->getBuiltinID() )
    case currefl::parameters: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->parameters())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->parameters())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::parameters))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case_REFLPROP_0ARGS( param_empty, Result, X->param_empty() )
    case_REFLPROP_0ARGS( param_size, Result, X->param_size() )
    case_REFLPROP_0ARGS( getNumParams, Result, X->getNumParams() )
    case currefl::getParamDecl: {
      ASSERT_TRAIT_IS_REFLPROP(getParamDecl)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getParamDecl(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getMinRequiredArguments, Result, X->getMinRequiredArguments() )
    case_REFLPROP_0ARGS( getReturnType, Type, X->getReturnType() )
    case_REFLPROP_0ARGS( getReturnTypeSourceRange, Type, X->getReturnTypeSourceRange() )
    case_REFLPROP_0ARGS( getExceptionSpecSourceRange, Type, X->getExceptionSpecSourceRange() )
    case_REFLPROP_0ARGS( getCallResultType, Type, X->getCallResultType() )
    case_REFLPROP_0ARGS( getUnusedResultAttr, Type, X->getUnusedResultAttr() )
    case_REFLPROP_0ARGS( hasUnusedResultAttr, Result, X->hasUnusedResultAttr() )
    case_REFLPROP_0ARGS( getStorageClass, Result, X->getStorageClass() )
    case_REFLPROP_0ARGS( isInlineSpecified, Result, X->isInlineSpecified() )
    case_REFLPROP_0ARGS( isInlined, Result, X->isInlined() )
    case_REFLPROP_0ARGS( isInlineDefinitionExternallyVisible, Result, X->isInlineDefinitionExternallyVisible() )
    case_REFLPROP_0ARGS( isMSExternInline, Result, X->isMSExternInline() )
    case_REFLPROP_0ARGS( doesDeclarationForceExternallyVisibleDefinition, Result, X->doesDeclarationForceExternallyVisibleDefinition() )
    case_REFLPROP_0ARGS( isOverloadedOperator, Result, X->isOverloadedOperator() )
    case_REFLPROP_0ARGS( getOverloadedOperator, Result, X->getOverloadedOperator() )
    case_REFLPROP_0ARGS( getLiteralIdentifier, Type, X->getLiteralIdentifier() )
    case_REFLPROP_0ARGS( getInstantiatedFromMemberFunction, Type, X->getInstantiatedFromMemberFunction() )
    case_REFLPROP_0ARGS( getTemplatedKind, Result, X->getTemplatedKind() )
    case_REFLPROP_0ARGS( getMemberSpecializationInfo, Type, X->getMemberSpecializationInfo() )
    case_REFLPROP_0ARGS( getDescribedFunctionTemplate, Type, X->getDescribedFunctionTemplate() )
    case_REFLPROP_0ARGS( isFunctionTemplateSpecialization, Result, X->isFunctionTemplateSpecialization() )
    case_REFLPROP_0ARGS( getClassScopeSpecializationPattern, Type, X->getClassScopeSpecializationPattern() )
    case_REFLPROP_0ARGS( getTemplateSpecializationInfo, Type, X->getTemplateSpecializationInfo() )
    case_REFLPROP_0ARGS( isImplicitlyInstantiable, Result, X->isImplicitlyInstantiable() )
    case_REFLPROP_0ARGS( isTemplateInstantiation, Result, X->isTemplateInstantiation() )
    case_REFLPROP_0ARGS( getTemplateInstantiationPattern, Type, X->getTemplateInstantiationPattern() )
    case_REFLPROP_0ARGS( getPrimaryTemplate, Type, X->getPrimaryTemplate() )
    case_REFLPROP_0ARGS( getTemplateSpecializationArgs, Type, X->getTemplateSpecializationArgs() )
    case_REFLPROP_0ARGS( getTemplateSpecializationArgsAsWritten, Type, X->getTemplateSpecializationArgsAsWritten() )
    case_REFLPROP_0ARGS( getDependentSpecializationInfo, Type, X->getDependentSpecializationInfo() )
    case_REFLPROP_0ARGS( getTemplateSpecializationKind, Result, X->getTemplateSpecializationKind() )
    case_REFLPROP_0ARGS( getPointOfInstantiation, Type, X->getPointOfInstantiation() )
    case_REFLPROP_0ARGS( isOutOfLine, Result, X->isOutOfLine() )
    case_REFLPROP_0ARGS( getMemoryFunctionKind, Result, X->getMemoryFunctionKind() )
    case_REFLPROP_0ARGS( getODRHash, Result, X->getODRHash() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Decl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::classofKind: {
      ASSERT_TRAIT_IS_REFLPROP(classofKind)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::Decl::Kind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classofKind(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__FieldDecl: {
# define CLASSNAME (clang::FieldDecl)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__FieldDecl;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getFirstDecl, Type, X->getFirstDecl() )
    case currefl::Create: {
      ASSERT_TRAIT_IS_REFLPROP(Create)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((class clang::DeclContext *), p1)
        LOAD_VAL((class clang::SourceLocation), p2)
        LOAD_VAL((class clang::SourceLocation), p3)
        LOAD_VAL((class clang::IdentifierInfo *), p4)
        LOAD_VAL((class clang::QualType), p5)
        LOAD_VAL((class clang::TypeSourceInfo *), p6)
        LOAD_VAL((class clang::Expr *), p7)
        LOAD_VAL((bool), p8)
        LOAD_VAL((enum clang::InClassInitStyle), p9)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9))
      };
      break;
    }
    case currefl::Create1: {
      ASSERT_TRAIT_IS_REFLPROP(Create1)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((class clang::DeclContext *), p1)
        LOAD_VAL((class clang::SourceLocation), p2)
        LOAD_VAL((struct clang::DeclarationNameInfo), p3)
        LOAD_VAL((class clang::QualType), p4)
        LOAD_VAL((class clang::TypeSourceInfo *), p5)
        LOAD_VAL((class clang::Expr *), p6)
        LOAD_VAL((bool), p7)
        LOAD_VAL((enum clang::InClassInitStyle), p8)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3, p4, p5, p6, p7, p8))
      };
      break;
    }
    case currefl::CreateDeserialized: {
      ASSERT_TRAIT_IS_REFLPROP(CreateDeserialized)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateDeserialized(p0, p1))
      };
      break;
    }
    case_REFLPROP_0ARGS( getFieldIndex, Result, X->getFieldIndex() )
    case_REFLPROP_0ARGS( isMutable, Result, X->isMutable() )
    case_REFLPROP_0ARGS( isBitField, Result, X->isBitField() )
    case_REFLPROP_0ARGS( isUnnamedBitfield, Result, X->isUnnamedBitfield() )
    case_REFLPROP_0ARGS( isAnonymousStructOrUnion, Result, X->isAnonymousStructOrUnion() )
    case_REFLPROP_0ARGS( getBitWidth, Type, X->getBitWidth() )
    case currefl::getBitWidthValue: {
      ASSERT_TRAIT_IS_REFLPROP(getBitWidthValue)
      SET_PRIM_TYPE(unsigned int)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::ASTContext &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getBitWidthValue(p0))
      };
      break;
    }
    case currefl::isZeroLengthBitField: {
      ASSERT_TRAIT_IS_REFLPROP(isZeroLengthBitField)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::ASTContext &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isZeroLengthBitField(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getInClassInitStyle, Result, X->getInClassInitStyle() )
    case_REFLPROP_0ARGS( hasInClassInitializer, Result, X->hasInClassInitializer() )
    case_REFLPROP_0ARGS( getInClassInitializer, Type, X->getInClassInitializer() )
    case_REFLPROP_0ARGS( hasCapturedVLAType, Result, X->hasCapturedVLAType() )
    case_REFLPROP_0ARGS( getCapturedVLAType, Type, X->getCapturedVLAType() )
    case_REFLPROP_0ARGS( getParent, Type, X->getParent() )
    case_REFLPROP_0ARGS( getSourceRange, Type, X->getSourceRange() )
    case_REFLPROP_0ARGS( getCanonicalDecl, Type, X->getCanonicalDecl() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Decl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::classofKind: {
      ASSERT_TRAIT_IS_REFLPROP(classofKind)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::Decl::Kind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classofKind(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__EnumConstantDecl: {
# define CLASSNAME (clang::EnumConstantDecl)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__EnumConstantDecl;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getFirstDecl, Type, X->getFirstDecl() )
    case currefl::Create: {
      ASSERT_TRAIT_IS_REFLPROP(Create)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((class clang::EnumDecl *), p1)
        LOAD_VAL((class clang::SourceLocation), p2)
        LOAD_VAL((class clang::IdentifierInfo *), p3)
        LOAD_VAL((class clang::QualType), p4)
        LOAD_VAL((class clang::Expr *), p5)
        LOAD_VAL((const class llvm::APSInt &), p6)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3, p4, p5, p6))
      };
      break;
    }
    case currefl::CreateDeserialized: {
      ASSERT_TRAIT_IS_REFLPROP(CreateDeserialized)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateDeserialized(p0, p1))
      };
      break;
    }
    case_REFLPROP_0ARGS( getInitExpr, Type, X->getInitExpr() )
    case_REFLPROP_0ARGS( getInitVal, Type, X->getInitVal() )
    case_REFLPROP_0ARGS( getSourceRange, Type, X->getSourceRange() )
    case_REFLPROP_0ARGS( getCanonicalDecl, Type, X->getCanonicalDecl() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Decl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::classofKind: {
      ASSERT_TRAIT_IS_REFLPROP(classofKind)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::Decl::Kind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classofKind(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__IndirectFieldDecl: {
# define CLASSNAME (clang::IndirectFieldDecl)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__IndirectFieldDecl;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getFirstDecl, Type, X->getFirstDecl() )
    case currefl::CreateDeserialized: {
      ASSERT_TRAIT_IS_REFLPROP(CreateDeserialized)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateDeserialized(p0, p1))
      };
      break;
    }
    case currefl::chain: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->chain())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->chain())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::chain))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case_REFLPROP_0ARGS( getChainingSize, Result, X->getChainingSize() )
    case_REFLPROP_0ARGS( getAnonField, Type, X->getAnonField() )
    case_REFLPROP_0ARGS( getVarDecl, Type, X->getVarDecl() )
    case_REFLPROP_0ARGS( getCanonicalDecl, Type, X->getCanonicalDecl() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Decl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::classofKind: {
      ASSERT_TRAIT_IS_REFLPROP(classofKind)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::Decl::Kind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classofKind(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__TypeDecl: {
# define CLASSNAME (clang::TypeDecl)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__TypeDecl;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getTypeForDecl, Type, X->getTypeForDecl() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getSourceRange, Type, X->getSourceRange() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Decl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::classofKind: {
      ASSERT_TRAIT_IS_REFLPROP(classofKind)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::Decl::Kind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classofKind(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__TypedefNameDecl: {
# define CLASSNAME (clang::TypedefNameDecl)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__TypedefNameDecl;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getPreviousDecl, Type, X->getPreviousDecl() )
    case_REFLPROP_0ARGS( getFirstDecl, Type, X->getFirstDecl() )
    case_REFLPROP_0ARGS( getMostRecentDecl, Type, X->getMostRecentDecl() )
    case_REFLPROP_0ARGS( isModed, Result, X->isModed() )
    case_REFLPROP_0ARGS( getTypeSourceInfo, Type, X->getTypeSourceInfo() )
    case_REFLPROP_0ARGS( getUnderlyingType, Type, X->getUnderlyingType() )
    case_REFLPROP_0ARGS( getCanonicalDecl, Type, X->getCanonicalDecl() )
    case currefl::getAnonDeclWithTypedefName: {
      ASSERT_TRAIT_IS_REFLPROP(getAnonDeclWithTypedefName)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Type, X->getAnonDeclWithTypedefName())
        LOAD_VAL((bool), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getAnonDeclWithTypedefName(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( isTransparentTag, Result, X->isTransparentTag() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Decl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::classofKind: {
      ASSERT_TRAIT_IS_REFLPROP(classofKind)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::Decl::Kind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classofKind(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__TypedefDecl: {
# define CLASSNAME (clang::TypedefDecl)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__TypedefDecl;
  switch( (currefl::memnames)MemNum ) {
    case currefl::Create: {
      ASSERT_TRAIT_IS_REFLPROP(Create)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((class clang::DeclContext *), p1)
        LOAD_VAL((class clang::SourceLocation), p2)
        LOAD_VAL((class clang::SourceLocation), p3)
        LOAD_VAL((class clang::IdentifierInfo *), p4)
        LOAD_VAL((class clang::TypeSourceInfo *), p5)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3, p4, p5))
      };
      break;
    }
    case currefl::CreateDeserialized: {
      ASSERT_TRAIT_IS_REFLPROP(CreateDeserialized)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateDeserialized(p0, p1))
      };
      break;
    }
    case_REFLPROP_0ARGS( getSourceRange, Type, X->getSourceRange() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Decl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::classofKind: {
      ASSERT_TRAIT_IS_REFLPROP(classofKind)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::Decl::Kind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classofKind(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__TypeAliasDecl: {
# define CLASSNAME (clang::TypeAliasDecl)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__TypeAliasDecl;
  switch( (currefl::memnames)MemNum ) {
    case currefl::Create: {
      ASSERT_TRAIT_IS_REFLPROP(Create)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((class clang::DeclContext *), p1)
        LOAD_VAL((class clang::SourceLocation), p2)
        LOAD_VAL((class clang::SourceLocation), p3)
        LOAD_VAL((class clang::IdentifierInfo *), p4)
        LOAD_VAL((class clang::TypeSourceInfo *), p5)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3, p4, p5))
      };
      break;
    }
    case currefl::CreateDeserialized: {
      ASSERT_TRAIT_IS_REFLPROP(CreateDeserialized)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateDeserialized(p0, p1))
      };
      break;
    }
    case_REFLPROP_0ARGS( getSourceRange, Type, X->getSourceRange() )
    case_REFLPROP_0ARGS( getDescribedAliasTemplate, Type, X->getDescribedAliasTemplate() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Decl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::classofKind: {
      ASSERT_TRAIT_IS_REFLPROP(classofKind)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::Decl::Kind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classofKind(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__TagDecl: {
# define CLASSNAME (clang::TagDecl)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__TagDecl;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getPreviousDecl, Type, X->getPreviousDecl() )
    case_REFLPROP_0ARGS( getFirstDecl, Type, X->getFirstDecl() )
    case_REFLPROP_0ARGS( getMostRecentDecl, Type, X->getMostRecentDecl() )
    case_REFLPROP_0ARGS( getBraceRange, Type, X->getBraceRange() )
    case_REFLPROP_0ARGS( getInnerLocStart, Type, X->getInnerLocStart() )
    case_REFLPROP_0ARGS( getOuterLocStart, Type, X->getOuterLocStart() )
    case_REFLPROP_0ARGS( getSourceRange, Type, X->getSourceRange() )
    case_REFLPROP_0ARGS( getCanonicalDecl, Type, X->getCanonicalDecl() )
    case_REFLPROP_0ARGS( isThisDeclarationADefinition, Result, X->isThisDeclarationADefinition() )
    case_REFLPROP_0ARGS( isCompleteDefinition, Result, X->isCompleteDefinition() )
    case_REFLPROP_0ARGS( isCompleteDefinitionRequired, Result, X->isCompleteDefinitionRequired() )
    case_REFLPROP_0ARGS( isBeingDefined, Result, X->isBeingDefined() )
    case_REFLPROP_0ARGS( isEmbeddedInDeclarator, Result, X->isEmbeddedInDeclarator() )
    case_REFLPROP_0ARGS( isFreeStanding, Result, X->isFreeStanding() )
    case_REFLPROP_0ARGS( isDependentType, Result, X->isDependentType() )
    case_REFLPROP_0ARGS( getDefinition, Type, X->getDefinition() )
    case_REFLPROP_0ARGS( getKindName, Str, X->getKindName() )
    case_REFLPROP_0ARGS( getTagKind, Result, X->getTagKind() )
    case_REFLPROP_0ARGS( isStruct, Result, X->isStruct() )
    case_REFLPROP_0ARGS( isInterface, Result, X->isInterface() )
    case_REFLPROP_0ARGS( isClass, Result, X->isClass() )
    case_REFLPROP_0ARGS( isUnion, Result, X->isUnion() )
    case_REFLPROP_0ARGS( isEnum, Result, X->isEnum() )
    case_REFLPROP_0ARGS( hasNameForLinkage, Result, X->hasNameForLinkage() )
    case_REFLPROP_0ARGS( getTypedefNameForAnonDecl, Type, X->getTypedefNameForAnonDecl() )
    case_REFLPROP_0ARGS( getQualifier, Type, X->getQualifier() )
    case_REFLPROP_0ARGS( getQualifierLoc, Type, X->getQualifierLoc() )
    case_REFLPROP_0ARGS( getNumTemplateParameterLists, Result, X->getNumTemplateParameterLists() )
    case currefl::getTemplateParameterList: {
      ASSERT_TRAIT_IS_REFLPROP(getTemplateParameterList)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getTemplateParameterList(p0))
      };
      break;
    }
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Decl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::classofKind: {
      ASSERT_TRAIT_IS_REFLPROP(classofKind)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::Decl::Kind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classofKind(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__EnumDecl: {
# define CLASSNAME (clang::EnumDecl)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__EnumDecl;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getCanonicalDecl, Type, X->getCanonicalDecl() )
    case_REFLPROP_0ARGS( getPreviousDecl, Type, X->getPreviousDecl() )
    case_REFLPROP_0ARGS( getMostRecentDecl, Type, X->getMostRecentDecl() )
    case_REFLPROP_0ARGS( getDefinition, Type, X->getDefinition() )
    case currefl::Create: {
      ASSERT_TRAIT_IS_REFLPROP(Create)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((class clang::DeclContext *), p1)
        LOAD_VAL((class clang::SourceLocation), p2)
        LOAD_VAL((class clang::SourceLocation), p3)
        LOAD_VAL((class clang::IdentifierInfo *), p4)
        LOAD_VAL((class clang::EnumDecl *), p5)
        LOAD_VAL((bool), p6)
        LOAD_VAL((bool), p7)
        LOAD_VAL((bool), p8)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3, p4, p5, p6, p7, p8))
      };
      break;
    }
    case currefl::CreateDeserialized: {
      ASSERT_TRAIT_IS_REFLPROP(CreateDeserialized)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateDeserialized(p0, p1))
      };
      break;
    }
    case currefl::enumerators: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->enumerators())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->enumerators())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::enumerators))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case_REFLPROP_0ARGS( getPromotionType, Type, X->getPromotionType() )
    case_REFLPROP_0ARGS( getIntegerType, Type, X->getIntegerType() )
    case_REFLPROP_0ARGS( getIntegerTypeSourceInfo, Type, X->getIntegerTypeSourceInfo() )
    case_REFLPROP_0ARGS( getIntegerTypeRange, Type, X->getIntegerTypeRange() )
    case_REFLPROP_0ARGS( getNumPositiveBits, Result, X->getNumPositiveBits() )
    case_REFLPROP_0ARGS( getNumNegativeBits, Result, X->getNumNegativeBits() )
    case_REFLPROP_0ARGS( isScoped, Result, X->isScoped() )
    case_REFLPROP_0ARGS( isScopedUsingClassTag, Result, X->isScopedUsingClassTag() )
    case_REFLPROP_0ARGS( isFixed, Result, X->isFixed() )
    case_REFLPROP_0ARGS( isComplete, Result, X->isComplete() )
    case_REFLPROP_0ARGS( isClosed, Result, X->isClosed() )
    case_REFLPROP_0ARGS( isClosedFlag, Result, X->isClosedFlag() )
    case_REFLPROP_0ARGS( isClosedNonFlag, Result, X->isClosedNonFlag() )
    case_REFLPROP_0ARGS( getTemplateInstantiationPattern, Type, X->getTemplateInstantiationPattern() )
    case_REFLPROP_0ARGS( getInstantiatedFromMemberEnum, Type, X->getInstantiatedFromMemberEnum() )
    case_REFLPROP_0ARGS( getTemplateSpecializationKind, Result, X->getTemplateSpecializationKind() )
    case_REFLPROP_0ARGS( getMemberSpecializationInfo, Type, X->getMemberSpecializationInfo() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Decl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::classofKind: {
      ASSERT_TRAIT_IS_REFLPROP(classofKind)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::Decl::Kind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classofKind(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__RecordDecl: {
# define CLASSNAME (clang::RecordDecl)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__RecordDecl;
  switch( (currefl::memnames)MemNum ) {
    case currefl::Create: {
      ASSERT_TRAIT_IS_REFLPROP(Create)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((enum clang::TagTypeKind), p1)
        LOAD_VAL((class clang::DeclContext *), p2)
        LOAD_VAL((class clang::SourceLocation), p3)
        LOAD_VAL((class clang::SourceLocation), p4)
        LOAD_VAL((class clang::IdentifierInfo *), p5)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3, p4, p5))
        LOAD_VAL((class clang::RecordDecl *), p6)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3, p4, p5, p6))
      };
      break;
    }
    case currefl::CreateDeserialized: {
      ASSERT_TRAIT_IS_REFLPROP(CreateDeserialized)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateDeserialized(p0, p1))
      };
      break;
    }
    case_REFLPROP_0ARGS( getPreviousDecl, Type, X->getPreviousDecl() )
    case_REFLPROP_0ARGS( getMostRecentDecl, Type, X->getMostRecentDecl() )
    case_REFLPROP_0ARGS( hasFlexibleArrayMember, Result, X->hasFlexibleArrayMember() )
    case_REFLPROP_0ARGS( isAnonymousStructOrUnion, Result, X->isAnonymousStructOrUnion() )
    case_REFLPROP_0ARGS( hasObjectMember, Result, X->hasObjectMember() )
    case_REFLPROP_0ARGS( hasVolatileMember, Result, X->hasVolatileMember() )
    case_REFLPROP_0ARGS( hasLoadedFieldsFromExternalStorage, Result, X->hasLoadedFieldsFromExternalStorage() )
    case_REFLPROP_0ARGS( isNonTrivialToPrimitiveDefaultInitialize, Result, X->isNonTrivialToPrimitiveDefaultInitialize() )
    case_REFLPROP_0ARGS( isNonTrivialToPrimitiveCopy, Result, X->isNonTrivialToPrimitiveCopy() )
    case_REFLPROP_0ARGS( isNonTrivialToPrimitiveDestroy, Result, X->isNonTrivialToPrimitiveDestroy() )
    case_REFLPROP_0ARGS( canPassInRegisters, Result, X->canPassInRegisters() )
    case_REFLPROP_0ARGS( getArgPassingRestrictions, Result, X->getArgPassingRestrictions() )
    case_REFLPROP_0ARGS( isParamDestroyedInCallee, Result, X->isParamDestroyedInCallee() )
    case_REFLPROP_0ARGS( isInjectedClassName, Result, X->isInjectedClassName() )
    case_REFLPROP_0ARGS( isLambda, Result, X->isLambda() )
    case_REFLPROP_0ARGS( isCapturedRecord, Result, X->isCapturedRecord() )
    case_REFLPROP_0ARGS( getDefinition, Type, X->getDefinition() )
    case currefl::fields: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->fields())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->fields())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::fields))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case_REFLPROP_0ARGS( field_empty, Result, X->field_empty() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Decl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::classofKind: {
      ASSERT_TRAIT_IS_REFLPROP(classofKind)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::Decl::Kind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classofKind(p0))
      };
      break;
    }
    case currefl::isMsStruct: {
      ASSERT_TRAIT_IS_REFLPROP(isMsStruct)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::ASTContext &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isMsStruct(p0))
      };
      break;
    }
    case currefl::mayInsertExtraPadding: {
      ASSERT_TRAIT_IS_REFLPROP(mayInsertExtraPadding)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Result, X->mayInsertExtraPadding())
        LOAD_VAL((bool), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->mayInsertExtraPadding(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( findFirstNamedDataMember, Type, X->findFirstNamedDataMember() )
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__FileScopeAsmDecl: {
# define CLASSNAME (clang::FileScopeAsmDecl)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__FileScopeAsmDecl;
  switch( (currefl::memnames)MemNum ) {
    case currefl::Create: {
      ASSERT_TRAIT_IS_REFLPROP(Create)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((class clang::DeclContext *), p1)
        LOAD_VAL((class clang::StringLiteral *), p2)
        LOAD_VAL((class clang::SourceLocation), p3)
        LOAD_VAL((class clang::SourceLocation), p4)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3, p4))
      };
      break;
    }
    case currefl::CreateDeserialized: {
      ASSERT_TRAIT_IS_REFLPROP(CreateDeserialized)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateDeserialized(p0, p1))
      };
      break;
    }
    case_REFLPROP_0ARGS( getAsmLoc, Type, X->getAsmLoc() )
    case_REFLPROP_0ARGS( getRParenLoc, Type, X->getRParenLoc() )
    case_REFLPROP_0ARGS( getSourceRange, Type, X->getSourceRange() )
    case_REFLPROP_0ARGS( getAsmString, Type, X->getAsmString() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Decl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::classofKind: {
      ASSERT_TRAIT_IS_REFLPROP(classofKind)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::Decl::Kind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classofKind(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__BlockDecl: {
# define CLASSNAME (clang::BlockDecl)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__BlockDecl;
  switch( (currefl::memnames)MemNum ) {
    case currefl::Create: {
      ASSERT_TRAIT_IS_REFLPROP(Create)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((class clang::DeclContext *), p1)
        LOAD_VAL((class clang::SourceLocation), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2))
      };
      break;
    }
    case currefl::CreateDeserialized: {
      ASSERT_TRAIT_IS_REFLPROP(CreateDeserialized)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateDeserialized(p0, p1))
      };
      break;
    }
    case_REFLPROP_0ARGS( getCaretLocation, Type, X->getCaretLocation() )
    case_REFLPROP_0ARGS( isVariadic, Result, X->isVariadic() )
    case_REFLPROP_0ARGS( getCompoundBody, Type, X->getCompoundBody() )
    case_REFLPROP_0ARGS( getBody, Type, X->getBody() )
    case_REFLPROP_0ARGS( getSignatureAsWritten, Type, X->getSignatureAsWritten() )
    case currefl::parameters: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->parameters())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->parameters())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::parameters))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case_REFLPROP_0ARGS( param_empty, Result, X->param_empty() )
    case_REFLPROP_0ARGS( param_size, Result, X->param_size() )
    case_REFLPROP_0ARGS( getNumParams, Result, X->getNumParams() )
    case currefl::getParamDecl: {
      ASSERT_TRAIT_IS_REFLPROP(getParamDecl)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getParamDecl(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( hasCaptures, Result, X->hasCaptures() )
    case_REFLPROP_0ARGS( getNumCaptures, Result, X->getNumCaptures() )
    case currefl::captures: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->captures())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->captures())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::captures))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case_REFLPROP_0ARGS( capturesCXXThis, Result, X->capturesCXXThis() )
    case_REFLPROP_0ARGS( blockMissingReturnType, Result, X->blockMissingReturnType() )
    case_REFLPROP_0ARGS( isConversionFromLambda, Result, X->isConversionFromLambda() )
    case_REFLPROP_0ARGS( doesNotEscape, Result, X->doesNotEscape() )
    case currefl::capturesVariable: {
      ASSERT_TRAIT_IS_REFLPROP(capturesVariable)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::VarDecl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->capturesVariable(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getBlockManglingNumber, Result, X->getBlockManglingNumber() )
    case_REFLPROP_0ARGS( getBlockManglingContextDecl, Type, X->getBlockManglingContextDecl() )
    case_REFLPROP_0ARGS( getSourceRange, Type, X->getSourceRange() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Decl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::classofKind: {
      ASSERT_TRAIT_IS_REFLPROP(classofKind)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::Decl::Kind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classofKind(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__BlockDecl__Capture: {
# define CLASSNAME (clang::BlockDecl::Capture)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_NEVERPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__BlockDecl__Capture;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getVariable, Type, X->getVariable() )
    case_REFLPROP_0ARGS( isByRef, Result, X->isByRef() )
    case_REFLPROP_0ARGS( isNested, Result, X->isNested() )
    case_REFLPROP_0ARGS( hasCopyExpr, Result, X->hasCopyExpr() )
    case_REFLPROP_0ARGS( getCopyExpr, Type, X->getCopyExpr() )
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__CapturedDecl: {
# define CLASSNAME (clang::CapturedDecl)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__CapturedDecl;
  switch( (currefl::memnames)MemNum ) {
    case currefl::Create: {
      ASSERT_TRAIT_IS_REFLPROP(Create)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((class clang::DeclContext *), p1)
        LOAD_VAL((unsigned int), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2))
      };
      break;
    }
    case currefl::CreateDeserialized: {
      ASSERT_TRAIT_IS_REFLPROP(CreateDeserialized)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        LOAD_VAL((unsigned int), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateDeserialized(p0, p1, p2))
      };
      break;
    }
    case_REFLPROP_0ARGS( getBody, Type, X->getBody() )
    case_REFLPROP_0ARGS( isNothrow, Result, X->isNothrow() )
    case_REFLPROP_0ARGS( getNumParams, Result, X->getNumParams() )
    case currefl::getParam: {
      ASSERT_TRAIT_IS_REFLPROP(getParam)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getParam(p0))
      };
      break;
    }
    case currefl::parameters: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->parameters())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->parameters())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::parameters))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case_REFLPROP_0ARGS( getContextParam, Type, X->getContextParam() )
    case_REFLPROP_0ARGS( getContextParamPosition, Result, X->getContextParamPosition() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Decl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::classofKind: {
      ASSERT_TRAIT_IS_REFLPROP(classofKind)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::Decl::Kind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classofKind(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__ImportDecl: {
# define CLASSNAME (clang::ImportDecl)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__ImportDecl;
  switch( (currefl::memnames)MemNum ) {
    case currefl::CreateImplicit: {
      ASSERT_TRAIT_IS_REFLPROP(CreateImplicit)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((class clang::DeclContext *), p1)
        LOAD_VAL((class clang::SourceLocation), p2)
        LOAD_VAL((class clang::Module *), p3)
        LOAD_VAL((class clang::SourceLocation), p4)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateImplicit(p0, p1, p2, p3, p4))
      };
      break;
    }
    case currefl::CreateDeserialized: {
      ASSERT_TRAIT_IS_REFLPROP(CreateDeserialized)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        LOAD_VAL((unsigned int), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateDeserialized(p0, p1, p2))
      };
      break;
    }
    case_REFLPROP_0ARGS( getImportedModule, Type, X->getImportedModule() )
    case currefl::getIdentifierLocs: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->getIdentifierLocs())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->getIdentifierLocs())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::getIdentifierLocs))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case_REFLPROP_0ARGS( getSourceRange, Type, X->getSourceRange() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Decl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::classofKind: {
      ASSERT_TRAIT_IS_REFLPROP(classofKind)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::Decl::Kind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classofKind(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__ExportDecl: {
# define CLASSNAME (clang::ExportDecl)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__ExportDecl;
  switch( (currefl::memnames)MemNum ) {
    case currefl::Create: {
      ASSERT_TRAIT_IS_REFLPROP(Create)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((class clang::DeclContext *), p1)
        LOAD_VAL((class clang::SourceLocation), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2))
      };
      break;
    }
    case currefl::CreateDeserialized: {
      ASSERT_TRAIT_IS_REFLPROP(CreateDeserialized)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateDeserialized(p0, p1))
      };
      break;
    }
    case_REFLPROP_0ARGS( getExportLoc, Type, X->getExportLoc() )
    case_REFLPROP_0ARGS( getRBraceLoc, Type, X->getRBraceLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case_REFLPROP_0ARGS( getSourceRange, Type, X->getSourceRange() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Decl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::classofKind: {
      ASSERT_TRAIT_IS_REFLPROP(classofKind)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::Decl::Kind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classofKind(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__EmptyDecl: {
# define CLASSNAME (clang::EmptyDecl)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__EmptyDecl;
  switch( (currefl::memnames)MemNum ) {
    case currefl::Create: {
      ASSERT_TRAIT_IS_REFLPROP(Create)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((class clang::DeclContext *), p1)
        LOAD_VAL((class clang::SourceLocation), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2))
      };
      break;
    }
    case currefl::CreateDeserialized: {
      ASSERT_TRAIT_IS_REFLPROP(CreateDeserialized)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateDeserialized(p0, p1))
      };
      break;
    }
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Decl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::classofKind: {
      ASSERT_TRAIT_IS_REFLPROP(classofKind)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::Decl::Kind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classofKind(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__DeclGroup: {
# define CLASSNAME (clang::DeclGroup)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__DeclGroup;
  switch( (currefl::memnames)MemNum ) {
    case currefl::Create: {
      ASSERT_TRAIT_IS_REFLPROP(Create)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((class clang::Decl **), p1)
        LOAD_VAL((unsigned int), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2))
      };
      break;
    }
    case_REFLPROP_0ARGS( size, Result, X->size() )
    case currefl::operator_sub: {
      ASSERT_TRAIT_IS_REFLPROP(operator_sub)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->operator[](p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__DeclGroupRef: {
# define CLASSNAME (clang::DeclGroupRef)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_NEVERPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__DeclGroupRef;
  switch( (currefl::memnames)MemNum ) {
    case currefl::_this_: {
      switch (TraitKind) {
        case RTK_range_nth:
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE
            BUILD_REFLECTION_CALL_RANGE_NTH(Type, *X)
          };
          break;
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE
            BUILD_REFLECTION_CALL_RANGE_SIZE(*X)
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << "_this_"
                 << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case currefl::Create: {
      ASSERT_TRAIT_IS_REFLPROP(Create)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((class clang::Decl **), p1)
        LOAD_VAL((unsigned int), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2))
      };
      break;
    }
    case_REFLPROP_0ARGS( isNull, Result, X->isNull() )
    case_REFLPROP_0ARGS( isSingleDecl, Result, X->isSingleDecl() )
    case_REFLPROP_0ARGS( isDeclGroup, Result, X->isDeclGroup() )
    case_REFLPROP_0ARGS( getSingleDecl, Type, X->getSingleDecl() )
    case_REFLPROP_0ARGS( getDeclGroup, Type, X->getDeclGroup() )
    case_REFLPROP_0ARGS( getAsOpaquePtr, Result, X->getAsOpaquePtr() )
    case currefl::getFromOpaquePtr: {
      ASSERT_TRAIT_IS_REFLPROP(getFromOpaquePtr)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((void *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getFromOpaquePtr(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__Stmt: {
# define CLASSNAME (clang::Stmt)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__Stmt;
  switch( (currefl::memnames)MemNum ) {
    case currefl::operator_new: {
      ASSERT_TRAIT_IS_REFLPROP(operator_new)
      SET_PRIM_TYPE(void *)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((unsigned long), p0)
        LOAD_VAL((const class clang::ASTContext &), p1)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Result, X->operator new(p0, p1))
        LOAD_VAL((unsigned int), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->operator new(p0, p1, p2))
      };
      break;
    }
    case currefl::operator_new1: {
      ASSERT_TRAIT_IS_REFLPROP(operator_new1)
      SET_PRIM_TYPE(void *)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((unsigned long), p0)
        LOAD_VAL((const class clang::ASTContext *), p1)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Result, X->operator new(p0, p1))
        LOAD_VAL((unsigned int), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->operator new(p0, p1, p2))
      };
      break;
    }
    case currefl::operator_new2: {
      ASSERT_TRAIT_IS_REFLPROP(operator_new2)
      SET_PRIM_TYPE(void *)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((unsigned long), p0)
        LOAD_VAL((void *), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->operator new(p0, p1))
      };
      break;
    }
    case currefl::operator_delete: {
      ASSERT_TRAIT_IS_REFLPROP(operator_delete)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((void *), p0)
        LOAD_VAL((const class clang::ASTContext &), p1)
        LOAD_VAL((unsigned int), p2)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->operator delete((void *)p0, (const class clang::ASTContext &)p1, (unsigned int)p2))
      };
      break;
    }
    case currefl::operator_delete1: {
      ASSERT_TRAIT_IS_REFLPROP(operator_delete1)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((void *), p0)
        LOAD_VAL((const class clang::ASTContext *), p1)
        LOAD_VAL((unsigned int), p2)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->operator delete((void *)p0, (const class clang::ASTContext *)p1, (unsigned int)p2))
      };
      break;
    }
    case currefl::operator_delete2: {
      ASSERT_TRAIT_IS_REFLPROP(operator_delete2)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((void *), p0)
        LOAD_VAL((unsigned long), p1)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->operator delete((void *)p0, (size_t)p1))
      };
      break;
    }
    case currefl::operator_delete3: {
      ASSERT_TRAIT_IS_REFLPROP(operator_delete3)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((void *), p0)
        LOAD_VAL((void *), p1)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->operator delete((void *)p0, (void *)p1))
      };
      break;
    }
    case_REFLPROP_0ARGS( getStmtClass, Result, X->getStmtClass() )
    case_REFLPROP_0ARGS( getStmtClassName, Str, X->getStmtClassName() )
    case_REFLPROP_0ARGS( getSourceRange, Type, X->getSourceRange() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case currefl::addStmtClass: {
      ASSERT_TRAIT_IS_REFLPROP(addStmtClass)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const enum clang::Stmt::StmtClass), p0)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->addStmtClass((const enum clang::Stmt::StmtClass)p0))
      };
      break;
    }
    case currefl::EnableStatistics: {
      ASSERT_TRAIT_IS_REFLPROP(EnableStatistics)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        ASSERT_NO_MORE  VOID_REFLECTION(X->EnableStatistics())
      };
      break;
    }
    case currefl::PrintStats: {
      ASSERT_TRAIT_IS_REFLPROP(PrintStats)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        ASSERT_NO_MORE  VOID_REFLECTION(X->PrintStats())
      };
      break;
    }
    case currefl::dump: {
      ASSERT_TRAIT_IS_REFLPROP(dump)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        ASSERT_NO_MORE  VOID_REFLECTION(X->dump())
      };
      break;
    }
    case currefl::dump1: {
      ASSERT_TRAIT_IS_REFLPROP(dump1)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::SourceManager &), p0)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->dump((class clang::SourceManager &)p0))
      };
      break;
    }
    case currefl::dump2: {
      ASSERT_TRAIT_IS_REFLPROP(dump2)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::raw_ostream &), p0)
        LOAD_VAL((class clang::SourceManager &), p1)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->dump((class llvm::raw_ostream &)p0, (class clang::SourceManager &)p1))
      };
      break;
    }
    case currefl::dump3: {
      ASSERT_TRAIT_IS_REFLPROP(dump3)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::raw_ostream &), p0)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->dump((class llvm::raw_ostream &)p0))
      };
      break;
    }
    case currefl::dumpColor: {
      ASSERT_TRAIT_IS_REFLPROP(dumpColor)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        ASSERT_NO_MORE  VOID_REFLECTION(X->dumpColor())
      };
      break;
    }
    case currefl::dumpPretty: {
      ASSERT_TRAIT_IS_REFLPROP(dumpPretty)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::ASTContext &), p0)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->dumpPretty((const class clang::ASTContext &)p0))
      };
      break;
    }
    case currefl::printPretty: {
      ASSERT_TRAIT_IS_REFLPROP(printPretty)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::raw_ostream &), p0)
        LOAD_VAL((class clang::PrinterHelper *), p1)
        LOAD_VAL((const struct clang::PrintingPolicy &), p2)
        IF_NO_MORE  VOID_REFLECTION(X->printPretty((class llvm::raw_ostream &)p0, (class clang::PrinterHelper *)p1, (const struct clang::PrintingPolicy &)p2))
        LOAD_VAL((unsigned int), p3)
        IF_NO_MORE  VOID_REFLECTION(X->printPretty((class llvm::raw_ostream &)p0, (class clang::PrinterHelper *)p1, (const struct clang::PrintingPolicy &)p2, (unsigned int)p3))
        LOAD_VAL((const class clang::ASTContext *), p4)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->printPretty((class llvm::raw_ostream &)p0, (class clang::PrinterHelper *)p1, (const struct clang::PrintingPolicy &)p2, (unsigned int)p3, (const class clang::ASTContext *)p4))
      };
      break;
    }
    case currefl::viewAST: {
      ASSERT_TRAIT_IS_REFLPROP(viewAST)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        ASSERT_NO_MORE  VOID_REFLECTION(X->viewAST())
      };
      break;
    }
    case_REFLPROP_0ARGS( IgnoreImplicit, Type, X->IgnoreImplicit() )
    case currefl::IgnoreContainers: {
      ASSERT_TRAIT_IS_REFLPROP(IgnoreContainers)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Type, X->IgnoreContainers())
        LOAD_VAL((bool), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->IgnoreContainers(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( stripLabelLikeStatements, Type, X->stripLabelLikeStatements() )
    case currefl::children: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->children())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->children())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::children))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case currefl::Profile: {
      ASSERT_TRAIT_IS_REFLPROP(Profile)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::FoldingSetNodeID &), p0)
        LOAD_VAL((const class clang::ASTContext &), p1)
        LOAD_VAL((bool), p2)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->Profile((llvm::FoldingSetNodeID &)p0, (const class clang::ASTContext &)p1, (bool)p2))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__Stmt__EmptyShell: {
# define CLASSNAME (clang::Stmt::EmptyShell)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_NEVERPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__Stmt__EmptyShell;
  switch( (currefl::memnames)MemNum ) {
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__DeclStmt: {
# define CLASSNAME (clang::DeclStmt)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__DeclStmt;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( isSingleDecl, Result, X->isSingleDecl() )
    case_REFLPROP_0ARGS( getSingleDecl, Type, X->getSingleDecl() )
    case_REFLPROP_0ARGS( getDeclGroup, Type, X->getDeclGroup() )
    case_REFLPROP_0ARGS( getStartLoc, Type, X->getStartLoc() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::decls: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->decls())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->decls())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::decls))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__NullStmt: {
# define CLASSNAME (clang::NullStmt)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__NullStmt;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getSemiLoc, Type, X->getSemiLoc() )
    case_REFLPROP_0ARGS( hasLeadingEmptyMacro, Result, X->hasLeadingEmptyMacro() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__CompoundStmt: {
# define CLASSNAME (clang::CompoundStmt)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__CompoundStmt;
  switch( (currefl::memnames)MemNum ) {
    case currefl::CreateEmpty: {
      ASSERT_TRAIT_IS_REFLPROP(CreateEmpty)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateEmpty(p0, p1))
      };
      break;
    }
    case_REFLPROP_0ARGS( body_empty, Result, X->body_empty() )
    case_REFLPROP_0ARGS( size, Result, X->size() )
    case currefl::body: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->body())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->body())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::body))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case_REFLPROP_0ARGS( body_front, Type, X->body_front() )
    case_REFLPROP_0ARGS( body_back, Type, X->body_back() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case_REFLPROP_0ARGS( getLBracLoc, Type, X->getLBracLoc() )
    case_REFLPROP_0ARGS( getRBracLoc, Type, X->getRBracLoc() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::children: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->children())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->children())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::children))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__SwitchCase: {
# define CLASSNAME (clang::SwitchCase)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__SwitchCase;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getNextSwitchCase, Type, X->getNextSwitchCase() )
    case_REFLPROP_0ARGS( getKeywordLoc, Type, X->getKeywordLoc() )
    case_REFLPROP_0ARGS( getColonLoc, Type, X->getColonLoc() )
    case_REFLPROP_0ARGS( getSubStmt, Type, X->getSubStmt() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__CaseStmt: {
# define CLASSNAME (clang::CaseStmt)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__CaseStmt;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getCaseLoc, Type, X->getCaseLoc() )
    case_REFLPROP_0ARGS( getEllipsisLoc, Type, X->getEllipsisLoc() )
    case_REFLPROP_0ARGS( getColonLoc, Type, X->getColonLoc() )
    case_REFLPROP_0ARGS( getLHS, Type, X->getLHS() )
    case_REFLPROP_0ARGS( getRHS, Type, X->getRHS() )
    case_REFLPROP_0ARGS( getSubStmt, Type, X->getSubStmt() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__DefaultStmt: {
# define CLASSNAME (clang::DefaultStmt)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__DefaultStmt;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getSubStmt, Type, X->getSubStmt() )
    case_REFLPROP_0ARGS( getDefaultLoc, Type, X->getDefaultLoc() )
    case_REFLPROP_0ARGS( getColonLoc, Type, X->getColonLoc() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__LabelStmt: {
# define CLASSNAME (clang::LabelStmt)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__LabelStmt;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getIdentLoc, Type, X->getIdentLoc() )
    case_REFLPROP_0ARGS( getDecl, Type, X->getDecl() )
    case_REFLPROP_0ARGS( getName, Str, X->getName() )
    case_REFLPROP_0ARGS( getSubStmt, Type, X->getSubStmt() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__AttributedStmt: {
# define CLASSNAME (clang::AttributedStmt)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__AttributedStmt;
  switch( (currefl::memnames)MemNum ) {
    case currefl::CreateEmpty: {
      ASSERT_TRAIT_IS_REFLPROP(CreateEmpty)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateEmpty(p0, p1))
      };
      break;
    }
    case_REFLPROP_0ARGS( getAttrLoc, Type, X->getAttrLoc() )
    case currefl::getAttrs: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->getAttrs())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->getAttrs())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::getAttrs))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case_REFLPROP_0ARGS( getSubStmt, Type, X->getSubStmt() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__IfStmt: {
# define CLASSNAME (clang::IfStmt)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__IfStmt;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getConditionVariable, Type, X->getConditionVariable() )
    case_REFLPROP_0ARGS( getConditionVariableDeclStmt, Type, X->getConditionVariableDeclStmt() )
    case_REFLPROP_0ARGS( getInit, Type, X->getInit() )
    case_REFLPROP_0ARGS( getCond, Type, X->getCond() )
    case_REFLPROP_0ARGS( getThen, Type, X->getThen() )
    case_REFLPROP_0ARGS( getElse, Type, X->getElse() )
    case_REFLPROP_0ARGS( getIfLoc, Type, X->getIfLoc() )
    case_REFLPROP_0ARGS( getElseLoc, Type, X->getElseLoc() )
    case_REFLPROP_0ARGS( isConstexpr, Result, X->isConstexpr() )
    case_REFLPROP_0ARGS( isObjCAvailabilityCheck, Result, X->isObjCAvailabilityCheck() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__SwitchStmt: {
# define CLASSNAME (clang::SwitchStmt)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__SwitchStmt;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getConditionVariable, Type, X->getConditionVariable() )
    case_REFLPROP_0ARGS( getConditionVariableDeclStmt, Type, X->getConditionVariableDeclStmt() )
    case_REFLPROP_0ARGS( getInit, Type, X->getInit() )
    case_REFLPROP_0ARGS( getCond, Type, X->getCond() )
    case_REFLPROP_0ARGS( getBody, Type, X->getBody() )
    case_REFLPROP_0ARGS( getSwitchCaseList, Type, X->getSwitchCaseList() )
    case_REFLPROP_0ARGS( getSwitchLoc, Type, X->getSwitchLoc() )
    case_REFLPROP_0ARGS( isAllEnumCasesCovered, Result, X->isAllEnumCasesCovered() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__WhileStmt: {
# define CLASSNAME (clang::WhileStmt)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__WhileStmt;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getConditionVariable, Type, X->getConditionVariable() )
    case_REFLPROP_0ARGS( getConditionVariableDeclStmt, Type, X->getConditionVariableDeclStmt() )
    case_REFLPROP_0ARGS( getCond, Type, X->getCond() )
    case_REFLPROP_0ARGS( getBody, Type, X->getBody() )
    case_REFLPROP_0ARGS( getWhileLoc, Type, X->getWhileLoc() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__DoStmt: {
# define CLASSNAME (clang::DoStmt)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__DoStmt;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getCond, Type, X->getCond() )
    case_REFLPROP_0ARGS( getBody, Type, X->getBody() )
    case_REFLPROP_0ARGS( getDoLoc, Type, X->getDoLoc() )
    case_REFLPROP_0ARGS( getWhileLoc, Type, X->getWhileLoc() )
    case_REFLPROP_0ARGS( getRParenLoc, Type, X->getRParenLoc() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__ForStmt: {
# define CLASSNAME (clang::ForStmt)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__ForStmt;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getConditionVariable, Type, X->getConditionVariable() )
    case_REFLPROP_0ARGS( getConditionVariableDeclStmt, Type, X->getConditionVariableDeclStmt() )
    case_REFLPROP_0ARGS( getInit, Type, X->getInit() )
    case_REFLPROP_0ARGS( getCond, Type, X->getCond() )
    case_REFLPROP_0ARGS( getInc, Type, X->getInc() )
    case_REFLPROP_0ARGS( getBody, Type, X->getBody() )
    case_REFLPROP_0ARGS( getForLoc, Type, X->getForLoc() )
    case_REFLPROP_0ARGS( getLParenLoc, Type, X->getLParenLoc() )
    case_REFLPROP_0ARGS( getRParenLoc, Type, X->getRParenLoc() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__GotoStmt: {
# define CLASSNAME (clang::GotoStmt)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__GotoStmt;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getLabel, Type, X->getLabel() )
    case_REFLPROP_0ARGS( getGotoLoc, Type, X->getGotoLoc() )
    case_REFLPROP_0ARGS( getLabelLoc, Type, X->getLabelLoc() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__IndirectGotoStmt: {
# define CLASSNAME (clang::IndirectGotoStmt)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__IndirectGotoStmt;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getGotoLoc, Type, X->getGotoLoc() )
    case_REFLPROP_0ARGS( getStarLoc, Type, X->getStarLoc() )
    case_REFLPROP_0ARGS( getTarget, Type, X->getTarget() )
    case_REFLPROP_0ARGS( getConstantTarget, Type, X->getConstantTarget() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__ContinueStmt: {
# define CLASSNAME (clang::ContinueStmt)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__ContinueStmt;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getContinueLoc, Type, X->getContinueLoc() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__BreakStmt: {
# define CLASSNAME (clang::BreakStmt)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__BreakStmt;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getBreakLoc, Type, X->getBreakLoc() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__ReturnStmt: {
# define CLASSNAME (clang::ReturnStmt)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__ReturnStmt;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getRetValue, Type, X->getRetValue() )
    case_REFLPROP_0ARGS( getReturnLoc, Type, X->getReturnLoc() )
    case_REFLPROP_0ARGS( getNRVOCandidate, Type, X->getNRVOCandidate() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__AsmStmt: {
# define CLASSNAME (clang::AsmStmt)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__AsmStmt;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getAsmLoc, Type, X->getAsmLoc() )
    case_REFLPROP_0ARGS( isSimple, Result, X->isSimple() )
    case_REFLPROP_0ARGS( isVolatile, Result, X->isVolatile() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case currefl::generateAsmString: {
      ASSERT_TRAIT_IS_REFLPROP(generateAsmString)
      SET_PRIM_TYPE(const char *)
      SET_CALLBACK(Str) {
        LOAD_VAL_X(Str)
        LOAD_VAL((const class clang::ASTContext &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Str, X->generateAsmString(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getNumOutputs, Result, X->getNumOutputs() )
    case currefl::getOutputConstraint: {
      ASSERT_TRAIT_IS_REFLPROP(getOutputConstraint)
      SET_PRIM_TYPE(const char *)
      SET_CALLBACK(Str) {
        LOAD_VAL_X(Str)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Str, X->getOutputConstraint(p0))
      };
      break;
    }
    case currefl::isOutputPlusConstraint: {
      ASSERT_TRAIT_IS_REFLPROP(isOutputPlusConstraint)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isOutputPlusConstraint(p0))
      };
      break;
    }
    case currefl::getOutputExpr: {
      ASSERT_TRAIT_IS_REFLPROP(getOutputExpr)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getOutputExpr(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getNumPlusOperands, Result, X->getNumPlusOperands() )
    case_REFLPROP_0ARGS( getNumInputs, Result, X->getNumInputs() )
    case currefl::getInputConstraint: {
      ASSERT_TRAIT_IS_REFLPROP(getInputConstraint)
      SET_PRIM_TYPE(const char *)
      SET_CALLBACK(Str) {
        LOAD_VAL_X(Str)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Str, X->getInputConstraint(p0))
      };
      break;
    }
    case currefl::getInputExpr: {
      ASSERT_TRAIT_IS_REFLPROP(getInputExpr)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getInputExpr(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getNumClobbers, Result, X->getNumClobbers() )
    case currefl::getClobber: {
      ASSERT_TRAIT_IS_REFLPROP(getClobber)
      SET_PRIM_TYPE(const char *)
      SET_CALLBACK(Str) {
        LOAD_VAL_X(Str)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Str, X->getClobber(p0))
      };
      break;
    }
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::inputs: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->inputs())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->inputs())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::inputs))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case currefl::outputs: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->outputs())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->outputs())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::outputs))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__GCCAsmStmt: {
# define CLASSNAME (clang::GCCAsmStmt)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__GCCAsmStmt;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getRParenLoc, Type, X->getRParenLoc() )
    case_REFLPROP_0ARGS( getAsmString, Type, X->getAsmString() )
    case currefl::generateAsmString: {
      ASSERT_TRAIT_IS_REFLPROP(generateAsmString)
      SET_PRIM_TYPE(const char *)
      SET_CALLBACK(Str) {
        LOAD_VAL_X(Str)
        LOAD_VAL((const class clang::ASTContext &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Str, X->generateAsmString(p0))
      };
      break;
    }
    case currefl::getOutputIdentifier: {
      ASSERT_TRAIT_IS_REFLPROP(getOutputIdentifier)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getOutputIdentifier(p0))
      };
      break;
    }
    case currefl::getOutputName: {
      ASSERT_TRAIT_IS_REFLPROP(getOutputName)
      SET_PRIM_TYPE(const char *)
      SET_CALLBACK(Str) {
        LOAD_VAL_X(Str)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Str, X->getOutputName(p0))
      };
      break;
    }
    case currefl::getOutputConstraint: {
      ASSERT_TRAIT_IS_REFLPROP(getOutputConstraint)
      SET_PRIM_TYPE(const char *)
      SET_CALLBACK(Str) {
        LOAD_VAL_X(Str)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Str, X->getOutputConstraint(p0))
      };
      break;
    }
    case currefl::getOutputConstraintLiteral: {
      ASSERT_TRAIT_IS_REFLPROP(getOutputConstraintLiteral)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getOutputConstraintLiteral(p0))
      };
      break;
    }
    case currefl::getOutputExpr: {
      ASSERT_TRAIT_IS_REFLPROP(getOutputExpr)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getOutputExpr(p0))
      };
      break;
    }
    case currefl::getInputIdentifier: {
      ASSERT_TRAIT_IS_REFLPROP(getInputIdentifier)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getInputIdentifier(p0))
      };
      break;
    }
    case currefl::getInputName: {
      ASSERT_TRAIT_IS_REFLPROP(getInputName)
      SET_PRIM_TYPE(const char *)
      SET_CALLBACK(Str) {
        LOAD_VAL_X(Str)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Str, X->getInputName(p0))
      };
      break;
    }
    case currefl::getInputConstraint: {
      ASSERT_TRAIT_IS_REFLPROP(getInputConstraint)
      SET_PRIM_TYPE(const char *)
      SET_CALLBACK(Str) {
        LOAD_VAL_X(Str)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Str, X->getInputConstraint(p0))
      };
      break;
    }
    case currefl::getInputConstraintLiteral: {
      ASSERT_TRAIT_IS_REFLPROP(getInputConstraintLiteral)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getInputConstraintLiteral(p0))
      };
      break;
    }
    case currefl::getInputExpr: {
      ASSERT_TRAIT_IS_REFLPROP(getInputExpr)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getInputExpr(p0))
      };
      break;
    }
    case currefl::getNamedOperand: {
      ASSERT_TRAIT_IS_REFLPROP(getNamedOperand)
      SET_PRIM_TYPE(int)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const char *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getNamedOperand(p0))
      };
      break;
    }
    case currefl::getClobber: {
      ASSERT_TRAIT_IS_REFLPROP(getClobber)
      SET_PRIM_TYPE(const char *)
      SET_CALLBACK(Str) {
        LOAD_VAL_X(Str)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Str, X->getClobber(p0))
      };
      break;
    }
    case currefl::getClobberStringLiteral: {
      ASSERT_TRAIT_IS_REFLPROP(getClobberStringLiteral)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getClobberStringLiteral(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__MSAsmStmt: {
# define CLASSNAME (clang::MSAsmStmt)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__MSAsmStmt;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getLBraceLoc, Type, X->getLBraceLoc() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case_REFLPROP_0ARGS( hasBraces, Result, X->hasBraces() )
    case_REFLPROP_0ARGS( getAsmString, Str, X->getAsmString() )
    case currefl::generateAsmString: {
      ASSERT_TRAIT_IS_REFLPROP(generateAsmString)
      SET_PRIM_TYPE(const char *)
      SET_CALLBACK(Str) {
        LOAD_VAL_X(Str)
        LOAD_VAL((const class clang::ASTContext &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Str, X->generateAsmString(p0))
      };
      break;
    }
    case currefl::getOutputConstraint: {
      ASSERT_TRAIT_IS_REFLPROP(getOutputConstraint)
      SET_PRIM_TYPE(const char *)
      SET_CALLBACK(Str) {
        LOAD_VAL_X(Str)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Str, X->getOutputConstraint(p0))
      };
      break;
    }
    case currefl::getOutputExpr: {
      ASSERT_TRAIT_IS_REFLPROP(getOutputExpr)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getOutputExpr(p0))
      };
      break;
    }
    case currefl::getInputConstraint: {
      ASSERT_TRAIT_IS_REFLPROP(getInputConstraint)
      SET_PRIM_TYPE(const char *)
      SET_CALLBACK(Str) {
        LOAD_VAL_X(Str)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Str, X->getInputConstraint(p0))
      };
      break;
    }
    case currefl::getInputExpr: {
      ASSERT_TRAIT_IS_REFLPROP(getInputExpr)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getInputExpr(p0))
      };
      break;
    }
    case currefl::getAllConstraints: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_PRIM_TYPE(std::remove_reference<decltype(
            *X->getAllConstraints().begin() )>::type)
          SET_CALLBACK(Str) {
            LOAD_VAL_X(Str)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Str, X->getAllConstraints())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->getAllConstraints())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::getAllConstraints))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case currefl::getClobbers: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_PRIM_TYPE(std::remove_reference<decltype(
            *X->getClobbers().begin() )>::type)
          SET_CALLBACK(Str) {
            LOAD_VAL_X(Str)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Str, X->getClobbers())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->getClobbers())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::getClobbers))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case currefl::getAllExprs: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->getAllExprs())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->getAllExprs())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::getAllExprs))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case currefl::getClobber: {
      ASSERT_TRAIT_IS_REFLPROP(getClobber)
      SET_PRIM_TYPE(const char *)
      SET_CALLBACK(Str) {
        LOAD_VAL_X(Str)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Str, X->getClobber(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__SEHExceptStmt: {
# define CLASSNAME (clang::SEHExceptStmt)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__SEHExceptStmt;
  switch( (currefl::memnames)MemNum ) {
    case currefl::Create: {
      ASSERT_TRAIT_IS_REFLPROP(Create)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((class clang::SourceLocation), p1)
        LOAD_VAL((class clang::Expr *), p2)
        LOAD_VAL((class clang::Stmt *), p3)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3))
      };
      break;
    }
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getExceptLoc, Type, X->getExceptLoc() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case_REFLPROP_0ARGS( getFilterExpr, Type, X->getFilterExpr() )
    case_REFLPROP_0ARGS( getBlock, Type, X->getBlock() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__SEHFinallyStmt: {
# define CLASSNAME (clang::SEHFinallyStmt)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__SEHFinallyStmt;
  switch( (currefl::memnames)MemNum ) {
    case currefl::Create: {
      ASSERT_TRAIT_IS_REFLPROP(Create)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((class clang::SourceLocation), p1)
        LOAD_VAL((class clang::Stmt *), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2))
      };
      break;
    }
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getFinallyLoc, Type, X->getFinallyLoc() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case_REFLPROP_0ARGS( getBlock, Type, X->getBlock() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__SEHTryStmt: {
# define CLASSNAME (clang::SEHTryStmt)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__SEHTryStmt;
  switch( (currefl::memnames)MemNum ) {
    case currefl::Create: {
      ASSERT_TRAIT_IS_REFLPROP(Create)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((bool), p1)
        LOAD_VAL((class clang::SourceLocation), p2)
        LOAD_VAL((class clang::Stmt *), p3)
        LOAD_VAL((class clang::Stmt *), p4)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3, p4))
      };
      break;
    }
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getTryLoc, Type, X->getTryLoc() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case_REFLPROP_0ARGS( getIsCXXTry, Result, X->getIsCXXTry() )
    case_REFLPROP_0ARGS( getTryBlock, Type, X->getTryBlock() )
    case_REFLPROP_0ARGS( getHandler, Type, X->getHandler() )
    case_REFLPROP_0ARGS( getExceptHandler, Type, X->getExceptHandler() )
    case_REFLPROP_0ARGS( getFinallyHandler, Type, X->getFinallyHandler() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__SEHLeaveStmt: {
# define CLASSNAME (clang::SEHLeaveStmt)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__SEHLeaveStmt;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getLeaveLoc, Type, X->getLeaveLoc() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__CapturedStmt: {
# define CLASSNAME (clang::CapturedStmt)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__CapturedStmt;
  switch( (currefl::memnames)MemNum ) {
    case currefl::CreateDeserialized: {
      ASSERT_TRAIT_IS_REFLPROP(CreateDeserialized)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateDeserialized(p0, p1))
      };
      break;
    }
    case_REFLPROP_0ARGS( getCapturedStmt, Type, X->getCapturedStmt() )
    case_REFLPROP_0ARGS( getCapturedDecl, Type, X->getCapturedDecl() )
    case_REFLPROP_0ARGS( getCapturedRegionKind, Result, X->getCapturedRegionKind() )
    case_REFLPROP_0ARGS( getCapturedRecordDecl, Type, X->getCapturedRecordDecl() )
    case currefl::capturesVariable: {
      ASSERT_TRAIT_IS_REFLPROP(capturesVariable)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::VarDecl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->capturesVariable(p0))
      };
      break;
    }
    case currefl::captures: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->captures())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->captures())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::captures))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case_REFLPROP_0ARGS( capture_size, Result, X->capture_size() )
    case currefl::capture_inits: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->capture_inits())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->capture_inits())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::capture_inits))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case_REFLPROP_0ARGS( getSourceRange, Type, X->getSourceRange() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__CapturedStmt__Capture: {
# define CLASSNAME (clang::CapturedStmt::Capture)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_NEVERPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__CapturedStmt__Capture;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getCaptureKind, Result, X->getCaptureKind() )
    case_REFLPROP_0ARGS( getLocation, Type, X->getLocation() )
    case_REFLPROP_0ARGS( capturesThis, Result, X->capturesThis() )
    case_REFLPROP_0ARGS( capturesVariable, Result, X->capturesVariable() )
    case_REFLPROP_0ARGS( capturesVariableByCopy, Result, X->capturesVariableByCopy() )
    case_REFLPROP_0ARGS( capturesVariableArrayType, Result, X->capturesVariableArrayType() )
    case_REFLPROP_0ARGS( getCapturedVar, Type, X->getCapturedVar() )
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__TemplateArgument: {
# define CLASSNAME (clang::TemplateArgument)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_MAYBEPTR(1, CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__TemplateArgument;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getEmptyPack, Type, X->getEmptyPack() )
    case_REFLPROP_0ARGS( getKind, Result, X->getKind() )
    case_REFLPROP_0ARGS( isNull, Result, X->isNull() )
    case_REFLPROP_0ARGS( isDependent, Result, X->isDependent() )
    case_REFLPROP_0ARGS( isInstantiationDependent, Result, X->isInstantiationDependent() )
    case_REFLPROP_0ARGS( containsUnexpandedParameterPack, Result, X->containsUnexpandedParameterPack() )
    case_REFLPROP_0ARGS( isPackExpansion, Result, X->isPackExpansion() )
    case_REFLPROP_0ARGS( getAsType, Type, X->getAsType() )
    case_REFLPROP_0ARGS( getAsDecl, Type, X->getAsDecl() )
    case_REFLPROP_0ARGS( getParamTypeForDecl, Type, X->getParamTypeForDecl() )
    case_REFLPROP_0ARGS( getNullPtrType, Type, X->getNullPtrType() )
    case_REFLPROP_0ARGS( getAsTemplate, Type, X->getAsTemplate() )
    case_REFLPROP_0ARGS( getAsTemplateOrTemplatePattern, Type, X->getAsTemplateOrTemplatePattern() )
    case_REFLPROP_0ARGS( getAsIntegral, Type, X->getAsIntegral() )
    case_REFLPROP_0ARGS( getIntegralType, Type, X->getIntegralType() )
    case_REFLPROP_0ARGS( getNonTypeTemplateArgumentType, Type, X->getNonTypeTemplateArgumentType() )
    case_REFLPROP_0ARGS( getAsExpr, Type, X->getAsExpr() )
    case currefl::pack_elements: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->pack_elements())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->pack_elements())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::pack_elements))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case_REFLPROP_0ARGS( pack_size, Result, X->pack_size() )
    case currefl::getPackAsArray: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->getPackAsArray())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->getPackAsArray())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::getPackAsArray))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case currefl::structurallyEquals: {
      ASSERT_TRAIT_IS_REFLPROP(structurallyEquals)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::TemplateArgument &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->structurallyEquals(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getPackExpansionPattern, Type, X->getPackExpansionPattern() )
    case currefl::print: {
      ASSERT_TRAIT_IS_REFLPROP(print)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const struct clang::PrintingPolicy &), p0)
        LOAD_VAL((class llvm::raw_ostream &), p1)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->print((const struct clang::PrintingPolicy &)p0, (class llvm::raw_ostream &)p1))
      };
      break;
    }
    case currefl::dump: {
      ASSERT_TRAIT_IS_REFLPROP(dump)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::raw_ostream &), p0)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->dump((class llvm::raw_ostream &)p0))
      };
      break;
    }
    case currefl::dump1: {
      ASSERT_TRAIT_IS_REFLPROP(dump1)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        ASSERT_NO_MORE  VOID_REFLECTION(X->dump())
      };
      break;
    }
    case currefl::Profile: {
      ASSERT_TRAIT_IS_REFLPROP(Profile)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::FoldingSetNodeID &), p0)
        LOAD_VAL((const class clang::ASTContext &), p1)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->Profile((llvm::FoldingSetNodeID &)p0, (const class clang::ASTContext &)p1))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__TemplateArgumentLocInfo: {
# define CLASSNAME (clang::TemplateArgumentLocInfo)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_NEVERPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__TemplateArgumentLocInfo;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getAsTypeSourceInfo, Type, X->getAsTypeSourceInfo() )
    case_REFLPROP_0ARGS( getAsExpr, Type, X->getAsExpr() )
    case_REFLPROP_0ARGS( getTemplateQualifierLoc, Type, X->getTemplateQualifierLoc() )
    case_REFLPROP_0ARGS( getTemplateNameLoc, Type, X->getTemplateNameLoc() )
    case_REFLPROP_0ARGS( getTemplateEllipsisLoc, Type, X->getTemplateEllipsisLoc() )
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__TemplateArgumentLoc: {
# define CLASSNAME (clang::TemplateArgumentLoc)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_MAYBEPTR(1, CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__TemplateArgumentLoc;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getLocation, Type, X->getLocation() )
    case_REFLPROP_0ARGS( getSourceRange, Type, X->getSourceRange() )
    case_REFLPROP_0ARGS( getArgument, Type, X->getArgument() )
    case_REFLPROP_0ARGS( getLocInfo, Type, X->getLocInfo() )
    case_REFLPROP_0ARGS( getTypeSourceInfo, Type, X->getTypeSourceInfo() )
    case_REFLPROP_0ARGS( getSourceExpression, Type, X->getSourceExpression() )
    case_REFLPROP_0ARGS( getSourceDeclExpression, Type, X->getSourceDeclExpression() )
    case_REFLPROP_0ARGS( getSourceNullPtrExpression, Type, X->getSourceNullPtrExpression() )
    case_REFLPROP_0ARGS( getSourceIntegralExpression, Type, X->getSourceIntegralExpression() )
    case_REFLPROP_0ARGS( getTemplateQualifierLoc, Type, X->getTemplateQualifierLoc() )
    case_REFLPROP_0ARGS( getTemplateNameLoc, Type, X->getTemplateNameLoc() )
    case_REFLPROP_0ARGS( getTemplateEllipsisLoc, Type, X->getTemplateEllipsisLoc() )
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__TemplateArgumentListInfo: {
# define CLASSNAME (clang::TemplateArgumentListInfo)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_MAYBEPTR(1, CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__TemplateArgumentListInfo;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getLAngleLoc, Type, X->getLAngleLoc() )
    case_REFLPROP_0ARGS( getRAngleLoc, Type, X->getRAngleLoc() )
    case_REFLPROP_0ARGS( size, Result, X->size() )
    case_REFLPROP_0ARGS( getArgumentArray, Type, X->getArgumentArray() )
    case currefl::arguments: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->arguments())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->arguments())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::arguments))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case currefl::operator_sub: {
      ASSERT_TRAIT_IS_REFLPROP(operator_sub)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->operator[](p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__ASTTemplateArgumentListInfo: {
# define CLASSNAME (clang::ASTTemplateArgumentListInfo)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__ASTTemplateArgumentListInfo;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS(LAngleLoc, Type, X->LAngleLoc)
    case_REFLPROP_0ARGS(RAngleLoc, Type, X->RAngleLoc)
    case_REFLPROP_0ARGS(NumTemplateArgs, Result, X->NumTemplateArgs)
    case_REFLPROP_0ARGS( getTemplateArgs, Type, X->getTemplateArgs() )
    case currefl::arguments: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->arguments())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->arguments())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::arguments))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case currefl::operator_sub: {
      ASSERT_TRAIT_IS_REFLPROP(operator_sub)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->operator[](p0))
      };
      break;
    }
    case currefl::Create: {
      ASSERT_TRAIT_IS_REFLPROP(Create)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((const class clang::TemplateArgumentListInfo &), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__TypeLoc: {
# define CLASSNAME (clang::TypeLoc)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_MAYBEPTR(1, CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__TypeLoc;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getTypeLocClass, Result, X->getTypeLocClass() )
    case_REFLPROP_0ARGS( isNull, Result, X->isNull() )
    case_REFLPROP_0ARGS( operator_bool, Result, X->operator bool() )
    case currefl::getFullDataSizeForType: {
      ASSERT_TRAIT_IS_REFLPROP(getFullDataSizeForType)
      SET_PRIM_TYPE(unsigned int)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::QualType), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getFullDataSizeForType(p0))
      };
      break;
    }
    case currefl::getLocalAlignmentForType: {
      ASSERT_TRAIT_IS_REFLPROP(getLocalAlignmentForType)
      SET_PRIM_TYPE(unsigned int)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::QualType), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getLocalAlignmentForType(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getType, Type, X->getType() )
    case_REFLPROP_0ARGS( getTypePtr, Type, X->getTypePtr() )
    case_REFLPROP_0ARGS( getOpaqueData, Result, X->getOpaqueData() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case_REFLPROP_0ARGS( getSourceRange, Type, X->getSourceRange() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getLocalSourceRange, Type, X->getLocalSourceRange() )
    case_REFLPROP_0ARGS( getFullDataSize, Result, X->getFullDataSize() )
    case_REFLPROP_0ARGS( getNextTypeLoc, Type, X->getNextTypeLoc() )
    case_REFLPROP_0ARGS( getUnqualifiedLoc, Type, X->getUnqualifiedLoc() )
    case_REFLPROP_0ARGS( IgnoreParens, Type, X->IgnoreParens() )
    case_REFLPROP_0ARGS( findExplicitQualifierLoc, Type, X->findExplicitQualifierLoc() )
    case currefl::initialize: {
      ASSERT_TRAIT_IS_REFLPROP(initialize)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((class clang::SourceLocation), p1)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->initialize((class clang::ASTContext &)p0, (class clang::SourceLocation)p1))
      };
      break;
    }
    case currefl::operator_eq_eq: {
      ASSERT_TRAIT_IS_REFLPROP(operator_eq_eq)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL((const class clang::TypeLoc &), p0 )
        LOAD_VAL((const class clang::TypeLoc &), p1 )
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, p0 == p1)
      };
      break;
    }
    case currefl::operator_not_eq: {
      ASSERT_TRAIT_IS_REFLPROP(operator_not_eq)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL((const class clang::TypeLoc &), p0 )
        LOAD_VAL((const class clang::TypeLoc &), p1 )
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, p0 != p1)
      };
      break;
    }
    case_REFLPROP_0ARGS( findNullabilityLoc, Type, X->findNullabilityLoc() )
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__UnqualTypeLoc: {
# define CLASSNAME (clang::UnqualTypeLoc)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_MAYBEPTR(1, CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__UnqualTypeLoc;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getTypePtr, Type, X->getTypePtr() )
    case_REFLPROP_0ARGS( getTypeLocClass, Result, X->getTypeLocClass() )
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__CommentOptions: {
# define CLASSNAME (clang::CommentOptions)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_NEVERPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__CommentOptions;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS(ParseAllComments, Result, X->ParseAllComments)
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__comments__CommandInfo: {
# define CLASSNAME (clang::comments::CommandInfo)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__comments__CommandInfo;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getID, Result, X->getID() )
    case_REFLPROP_0ARGS(Name, Str, X->Name)
    case_REFLPROP_0ARGS(EndCommandName, Str, X->EndCommandName)
    case_REFLPROP_0ARGS(ID, Result, X->ID)
    case_REFLPROP_0ARGS(NumArgs, Result, X->NumArgs)
    case_REFLPROP_0ARGS(IsInlineCommand, Result, X->IsInlineCommand)
    case_REFLPROP_0ARGS(IsBlockCommand, Result, X->IsBlockCommand)
    case_REFLPROP_0ARGS(IsBriefCommand, Result, X->IsBriefCommand)
    case_REFLPROP_0ARGS(IsReturnsCommand, Result, X->IsReturnsCommand)
    case_REFLPROP_0ARGS(IsParamCommand, Result, X->IsParamCommand)
    case_REFLPROP_0ARGS(IsTParamCommand, Result, X->IsTParamCommand)
    case_REFLPROP_0ARGS(IsThrowsCommand, Result, X->IsThrowsCommand)
    case_REFLPROP_0ARGS(IsDeprecatedCommand, Result, X->IsDeprecatedCommand)
    case_REFLPROP_0ARGS(IsHeaderfileCommand, Result, X->IsHeaderfileCommand)
    case_REFLPROP_0ARGS(IsEmptyParagraphAllowed, Result, X->IsEmptyParagraphAllowed)
    case_REFLPROP_0ARGS(IsVerbatimBlockCommand, Result, X->IsVerbatimBlockCommand)
    case_REFLPROP_0ARGS(IsVerbatimBlockEndCommand, Result, X->IsVerbatimBlockEndCommand)
    case_REFLPROP_0ARGS(IsVerbatimLineCommand, Result, X->IsVerbatimLineCommand)
    case_REFLPROP_0ARGS(IsDeclarationCommand, Result, X->IsDeclarationCommand)
    case_REFLPROP_0ARGS(IsFunctionDeclarationCommand, Result, X->IsFunctionDeclarationCommand)
    case_REFLPROP_0ARGS(IsRecordLikeDetailCommand, Result, X->IsRecordLikeDetailCommand)
    case_REFLPROP_0ARGS(IsRecordLikeDeclarationCommand, Result, X->IsRecordLikeDeclarationCommand)
    case_REFLPROP_0ARGS(IsUnknownCommand, Result, X->IsUnknownCommand)
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__comments__CommandTraits: {
# define CLASSNAME (clang::comments::CommandTraits)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__comments__CommandTraits;
  switch( (currefl::memnames)MemNum ) {
    case currefl::getCommandInfo: {
      ASSERT_TRAIT_IS_REFLPROP(getCommandInfo)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getCommandInfo(p0))
      };
      break;
    }
    case currefl::getBuiltinCommandInfo: {
      ASSERT_TRAIT_IS_REFLPROP(getBuiltinCommandInfo)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getBuiltinCommandInfo(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_llvm__Triple: {
# define CLASSNAME (llvm::Triple)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_MAYBEPTR(1, CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::llvm__Triple;
  switch( (currefl::memnames)MemNum ) {
    case currefl::operator_eq_eq: {
      ASSERT_TRAIT_IS_REFLPROP(operator_eq_eq)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class llvm::Triple &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->operator==(p0))
      };
      break;
    }
    case currefl::operator_not_eq: {
      ASSERT_TRAIT_IS_REFLPROP(operator_not_eq)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class llvm::Triple &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->operator!=(p0))
      };
      break;
    }
    case currefl::normalize: {
      ASSERT_TRAIT_IS_REFLPROP(normalize)
      SET_PRIM_TYPE(const char *)
      SET_CALLBACK(Str) {
        LOAD_VAL_X(Str)
        LOAD_VAL((const char *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Str, X->normalize(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( normalize1, Str, X->normalize() )
    case_REFLPROP_0ARGS( getArch, Result, X->getArch() )
    case_REFLPROP_0ARGS( getSubArch, Result, X->getSubArch() )
    case_REFLPROP_0ARGS( getVendor, Result, X->getVendor() )
    case_REFLPROP_0ARGS( getOS, Result, X->getOS() )
    case_REFLPROP_0ARGS( hasEnvironment, Result, X->hasEnvironment() )
    case_REFLPROP_0ARGS( getEnvironment, Result, X->getEnvironment() )
    case_REFLPROP_0ARGS( getObjectFormat, Result, X->getObjectFormat() )
    case_REFLPROP_0ARGS( getOSMajorVersion, Result, X->getOSMajorVersion() )
    case_REFLPROP_0ARGS( getArchName, Str, X->getArchName() )
    case_REFLPROP_0ARGS( getVendorName, Str, X->getVendorName() )
    case_REFLPROP_0ARGS( getOSName, Str, X->getOSName() )
    case_REFLPROP_0ARGS( getEnvironmentName, Str, X->getEnvironmentName() )
    case_REFLPROP_0ARGS( getOSAndEnvironmentName, Str, X->getOSAndEnvironmentName() )
    case_REFLPROP_0ARGS( isArch64Bit, Result, X->isArch64Bit() )
    case_REFLPROP_0ARGS( isArch32Bit, Result, X->isArch32Bit() )
    case_REFLPROP_0ARGS( isArch16Bit, Result, X->isArch16Bit() )
    case currefl::isOSVersionLT: {
      ASSERT_TRAIT_IS_REFLPROP(isOSVersionLT)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((unsigned int), p0)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Result, X->isOSVersionLT(p0))
        LOAD_VAL((unsigned int), p1)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Result, X->isOSVersionLT(p0, p1))
        LOAD_VAL((unsigned int), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isOSVersionLT(p0, p1, p2))
      };
      break;
    }
    case currefl::isOSVersionLT1: {
      ASSERT_TRAIT_IS_REFLPROP(isOSVersionLT1)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class llvm::Triple &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isOSVersionLT(p0))
      };
      break;
    }
    case currefl::isMacOSXVersionLT: {
      ASSERT_TRAIT_IS_REFLPROP(isMacOSXVersionLT)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((unsigned int), p0)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Result, X->isMacOSXVersionLT(p0))
        LOAD_VAL((unsigned int), p1)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Result, X->isMacOSXVersionLT(p0, p1))
        LOAD_VAL((unsigned int), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isMacOSXVersionLT(p0, p1, p2))
      };
      break;
    }
    case_REFLPROP_0ARGS( isMacOSX, Result, X->isMacOSX() )
    case_REFLPROP_0ARGS( isiOS, Result, X->isiOS() )
    case_REFLPROP_0ARGS( isTvOS, Result, X->isTvOS() )
    case_REFLPROP_0ARGS( isWatchOS, Result, X->isWatchOS() )
    case_REFLPROP_0ARGS( isWatchABI, Result, X->isWatchABI() )
    case_REFLPROP_0ARGS( isOSDarwin, Result, X->isOSDarwin() )
    case_REFLPROP_0ARGS( isSimulatorEnvironment, Result, X->isSimulatorEnvironment() )
    case_REFLPROP_0ARGS( isOSNetBSD, Result, X->isOSNetBSD() )
    case_REFLPROP_0ARGS( isOSOpenBSD, Result, X->isOSOpenBSD() )
    case_REFLPROP_0ARGS( isOSFreeBSD, Result, X->isOSFreeBSD() )
    case_REFLPROP_0ARGS( isOSFuchsia, Result, X->isOSFuchsia() )
    case_REFLPROP_0ARGS( isOSDragonFly, Result, X->isOSDragonFly() )
    case_REFLPROP_0ARGS( isOSSolaris, Result, X->isOSSolaris() )
    case_REFLPROP_0ARGS( isOSIAMCU, Result, X->isOSIAMCU() )
    case_REFLPROP_0ARGS( isOSUnknown, Result, X->isOSUnknown() )
    case_REFLPROP_0ARGS( isGNUEnvironment, Result, X->isGNUEnvironment() )
    case_REFLPROP_0ARGS( isOSContiki, Result, X->isOSContiki() )
    case_REFLPROP_0ARGS( isOSHaiku, Result, X->isOSHaiku() )
    case_REFLPROP_0ARGS( isWindowsMSVCEnvironment, Result, X->isWindowsMSVCEnvironment() )
    case_REFLPROP_0ARGS( isKnownWindowsMSVCEnvironment, Result, X->isKnownWindowsMSVCEnvironment() )
    case_REFLPROP_0ARGS( isWindowsCoreCLREnvironment, Result, X->isWindowsCoreCLREnvironment() )
    case_REFLPROP_0ARGS( isWindowsItaniumEnvironment, Result, X->isWindowsItaniumEnvironment() )
    case_REFLPROP_0ARGS( isWindowsCygwinEnvironment, Result, X->isWindowsCygwinEnvironment() )
    case_REFLPROP_0ARGS( isWindowsGNUEnvironment, Result, X->isWindowsGNUEnvironment() )
    case_REFLPROP_0ARGS( isOSCygMing, Result, X->isOSCygMing() )
    case_REFLPROP_0ARGS( isOSMSVCRT, Result, X->isOSMSVCRT() )
    case_REFLPROP_0ARGS( isOSWindows, Result, X->isOSWindows() )
    case_REFLPROP_0ARGS( isOSNaCl, Result, X->isOSNaCl() )
    case_REFLPROP_0ARGS( isOSLinux, Result, X->isOSLinux() )
    case_REFLPROP_0ARGS( isOSKFreeBSD, Result, X->isOSKFreeBSD() )
    case_REFLPROP_0ARGS( isOSGlibc, Result, X->isOSGlibc() )
    case_REFLPROP_0ARGS( isOSBinFormatELF, Result, X->isOSBinFormatELF() )
    case_REFLPROP_0ARGS( isOSBinFormatCOFF, Result, X->isOSBinFormatCOFF() )
    case_REFLPROP_0ARGS( isOSBinFormatMachO, Result, X->isOSBinFormatMachO() )
    case_REFLPROP_0ARGS( isOSBinFormatWasm, Result, X->isOSBinFormatWasm() )
    case_REFLPROP_0ARGS( isPS4CPU, Result, X->isPS4CPU() )
    case_REFLPROP_0ARGS( isPS4, Result, X->isPS4() )
    case_REFLPROP_0ARGS( isAndroid, Result, X->isAndroid() )
    case currefl::isAndroidVersionLT: {
      ASSERT_TRAIT_IS_REFLPROP(isAndroidVersionLT)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isAndroidVersionLT(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( isMusl, Result, X->isMusl() )
    case_REFLPROP_0ARGS( isNVPTX, Result, X->isNVPTX() )
    case_REFLPROP_0ARGS( isThumb, Result, X->isThumb() )
    case_REFLPROP_0ARGS( isARM, Result, X->isARM() )
    case_REFLPROP_0ARGS( isAArch64, Result, X->isAArch64() )
    case_REFLPROP_0ARGS( isMIPS32, Result, X->isMIPS32() )
    case_REFLPROP_0ARGS( isMIPS64, Result, X->isMIPS64() )
    case_REFLPROP_0ARGS( isMIPS, Result, X->isMIPS() )
    case_REFLPROP_0ARGS( supportsCOMDAT, Result, X->supportsCOMDAT() )
    case_REFLPROP_0ARGS( hasDefaultEmulatedTLS, Result, X->hasDefaultEmulatedTLS() )
    case_REFLPROP_0ARGS( get32BitArchVariant, Type, X->get32BitArchVariant() )
    case_REFLPROP_0ARGS( get64BitArchVariant, Type, X->get64BitArchVariant() )
    case_REFLPROP_0ARGS( getBigEndianArchVariant, Type, X->getBigEndianArchVariant() )
    case_REFLPROP_0ARGS( getLittleEndianArchVariant, Type, X->getLittleEndianArchVariant() )
    case currefl::getARMCPUForArch: {
      ASSERT_TRAIT_IS_REFLPROP(getARMCPUForArch)
      SET_PRIM_TYPE(const char *)
      SET_CALLBACK(Str) {
        LOAD_VAL_X(Str)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Str, X->getARMCPUForArch())
        LOAD_VAL((const char *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Str, X->getARMCPUForArch(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( isLittleEndian, Result, X->isLittleEndian() )
    case currefl::isCompatibleWith: {
      ASSERT_TRAIT_IS_REFLPROP(isCompatibleWith)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class llvm::Triple &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isCompatibleWith(p0))
      };
      break;
    }
    case currefl::merge: {
      ASSERT_TRAIT_IS_REFLPROP(merge)
      SET_PRIM_TYPE(const char *)
      SET_CALLBACK(Str) {
        LOAD_VAL_X(Str)
        LOAD_VAL((const class llvm::Triple &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Str, X->merge(p0))
      };
      break;
    }
    case currefl::getArchTypeName: {
      ASSERT_TRAIT_IS_REFLPROP(getArchTypeName)
      SET_PRIM_TYPE(const char *)
      SET_CALLBACK(Str) {
        LOAD_VAL_X(Str)
        LOAD_VAL((enum llvm::Triple::ArchType), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Str, X->getArchTypeName(p0))
      };
      break;
    }
    case currefl::getArchTypePrefix: {
      ASSERT_TRAIT_IS_REFLPROP(getArchTypePrefix)
      SET_PRIM_TYPE(const char *)
      SET_CALLBACK(Str) {
        LOAD_VAL_X(Str)
        LOAD_VAL((enum llvm::Triple::ArchType), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Str, X->getArchTypePrefix(p0))
      };
      break;
    }
    case currefl::getVendorTypeName: {
      ASSERT_TRAIT_IS_REFLPROP(getVendorTypeName)
      SET_PRIM_TYPE(const char *)
      SET_CALLBACK(Str) {
        LOAD_VAL_X(Str)
        LOAD_VAL((enum llvm::Triple::VendorType), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Str, X->getVendorTypeName(p0))
      };
      break;
    }
    case currefl::getOSTypeName: {
      ASSERT_TRAIT_IS_REFLPROP(getOSTypeName)
      SET_PRIM_TYPE(const char *)
      SET_CALLBACK(Str) {
        LOAD_VAL_X(Str)
        LOAD_VAL((enum llvm::Triple::OSType), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Str, X->getOSTypeName(p0))
      };
      break;
    }
    case currefl::getEnvironmentTypeName: {
      ASSERT_TRAIT_IS_REFLPROP(getEnvironmentTypeName)
      SET_PRIM_TYPE(const char *)
      SET_CALLBACK(Str) {
        LOAD_VAL_X(Str)
        LOAD_VAL((enum llvm::Triple::EnvironmentType), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Str, X->getEnvironmentTypeName(p0))
      };
      break;
    }
    case currefl::getArchTypeForLLVMName: {
      ASSERT_TRAIT_IS_REFLPROP(getArchTypeForLLVMName)
      SET_PRIM_TYPE(enum llvm::Triple::ArchType)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const char *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getArchTypeForLLVMName(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__ObjCRuntime: {
# define CLASSNAME (clang::ObjCRuntime)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_MAYBEPTR(1, CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__ObjCRuntime;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getKind, Result, X->getKind() )
    case_REFLPROP_0ARGS( getVersion, Type, X->getVersion() )
    case_REFLPROP_0ARGS( isNonFragile, Result, X->isNonFragile() )
    case_REFLPROP_0ARGS( isFragile, Result, X->isFragile() )
    case_REFLPROP_0ARGS( isGNUFamily, Result, X->isGNUFamily() )
    case_REFLPROP_0ARGS( isNeXTFamily, Result, X->isNeXTFamily() )
    case_REFLPROP_0ARGS( allowsARC, Result, X->allowsARC() )
    case_REFLPROP_0ARGS( hasNativeARC, Result, X->hasNativeARC() )
    case_REFLPROP_0ARGS( hasOptimizedSetter, Result, X->hasOptimizedSetter() )
    case_REFLPROP_0ARGS( allowsWeak, Result, X->allowsWeak() )
    case_REFLPROP_0ARGS( hasNativeWeak, Result, X->hasNativeWeak() )
    case_REFLPROP_0ARGS( hasSubscripting, Result, X->hasSubscripting() )
    case_REFLPROP_0ARGS( allowsSizeofAlignof, Result, X->allowsSizeofAlignof() )
    case_REFLPROP_0ARGS( allowsPointerArithmetic, Result, X->allowsPointerArithmetic() )
    case_REFLPROP_0ARGS( isSubscriptPointerArithmetic, Result, X->isSubscriptPointerArithmetic() )
    case_REFLPROP_0ARGS( hasTerminate, Result, X->hasTerminate() )
    case_REFLPROP_0ARGS( hasWeakClassImport, Result, X->hasWeakClassImport() )
    case_REFLPROP_0ARGS( hasUnwindExceptions, Result, X->hasUnwindExceptions() )
    case_REFLPROP_0ARGS( hasAtomicCopyHelper, Result, X->hasAtomicCopyHelper() )
    case_REFLPROP_0ARGS( hasARCUnsafeClaimAutoreleasedReturnValue, Result, X->hasARCUnsafeClaimAutoreleasedReturnValue() )
    case_REFLPROP_0ARGS( hasEmptyCollections, Result, X->hasEmptyCollections() )
    case_REFLPROP_0ARGS( getAsString, Str, X->getAsString() )
    case currefl::operator_eq_eq: {
      ASSERT_TRAIT_IS_REFLPROP(operator_eq_eq)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL((const class clang::ObjCRuntime &), p0 )
        LOAD_VAL((const class clang::ObjCRuntime &), p1 )
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, p0 == p1)
      };
      break;
    }
    case currefl::operator_not_eq: {
      ASSERT_TRAIT_IS_REFLPROP(operator_not_eq)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL((const class clang::ObjCRuntime &), p0 )
        LOAD_VAL((const class clang::ObjCRuntime &), p1 )
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, p0 != p1)
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__SanitizerSet: {
# define CLASSNAME (clang::SanitizerSet)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_NEVERPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__SanitizerSet;
  switch( (currefl::memnames)MemNum ) {
    case currefl::has: {
      ASSERT_TRAIT_IS_REFLPROP(has)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((unsigned long long), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->has(p0))
      };
      break;
    }
    case currefl::hasOneOf: {
      ASSERT_TRAIT_IS_REFLPROP(hasOneOf)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((unsigned long long), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->hasOneOf(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( empty, Result, X->empty() )
    case_REFLPROP_0ARGS(Mask, Result, X->Mask)
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__LangOptionsBase: {
# define CLASSNAME (clang::LangOptionsBase)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__LangOptionsBase;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS(C99, Result, X->C99)
    case_REFLPROP_0ARGS(C11, Result, X->C11)
    case_REFLPROP_0ARGS(C17, Result, X->C17)
    case_REFLPROP_0ARGS(MSVCCompat, Result, X->MSVCCompat)
    case_REFLPROP_0ARGS(MicrosoftExt, Result, X->MicrosoftExt)
    case_REFLPROP_0ARGS(AsmBlocks, Result, X->AsmBlocks)
    case_REFLPROP_0ARGS(Borland, Result, X->Borland)
    case_REFLPROP_0ARGS(CPlusPlus, Result, X->CPlusPlus)
    case_REFLPROP_0ARGS(CPlusPlus11, Result, X->CPlusPlus11)
    case_REFLPROP_0ARGS(CPlusPlus14, Result, X->CPlusPlus14)
    case_REFLPROP_0ARGS(CPlusPlus17, Result, X->CPlusPlus17)
    case_REFLPROP_0ARGS(CPlusPlus2a, Result, X->CPlusPlus2a)
    case_REFLPROP_0ARGS(ObjC1, Result, X->ObjC1)
    case_REFLPROP_0ARGS(ObjC2, Result, X->ObjC2)
    case_REFLPROP_0ARGS(ObjCDefaultSynthProperties, Result, X->ObjCDefaultSynthProperties)
    case_REFLPROP_0ARGS(EncodeExtendedBlockSig, Result, X->EncodeExtendedBlockSig)
    case_REFLPROP_0ARGS(ObjCInferRelatedResultType, Result, X->ObjCInferRelatedResultType)
    case_REFLPROP_0ARGS(AppExt, Result, X->AppExt)
    case_REFLPROP_0ARGS(Trigraphs, Result, X->Trigraphs)
    case_REFLPROP_0ARGS(LineComment, Result, X->LineComment)
    case_REFLPROP_0ARGS(Bool, Result, X->Bool)
    case_REFLPROP_0ARGS(Half, Result, X->Half)
    case_REFLPROP_0ARGS(WChar, Result, X->WChar)
    case_REFLPROP_0ARGS(Char8, Result, X->Char8)
    case_REFLPROP_0ARGS(DeclSpecKeyword, Result, X->DeclSpecKeyword)
    case_REFLPROP_0ARGS(DollarIdents, Result, X->DollarIdents)
    case_REFLPROP_0ARGS(AsmPreprocessor, Result, X->AsmPreprocessor)
    case_REFLPROP_0ARGS(GNUMode, Result, X->GNUMode)
    case_REFLPROP_0ARGS(GNUKeywords, Result, X->GNUKeywords)
    case_REFLPROP_0ARGS(ImplicitInt, Result, X->ImplicitInt)
    case_REFLPROP_0ARGS(Digraphs, Result, X->Digraphs)
    case_REFLPROP_0ARGS(HexFloats, Result, X->HexFloats)
    case_REFLPROP_0ARGS(CXXOperatorNames, Result, X->CXXOperatorNames)
    case_REFLPROP_0ARGS(AppleKext, Result, X->AppleKext)
    case_REFLPROP_0ARGS(PascalStrings, Result, X->PascalStrings)
    case_REFLPROP_0ARGS(WritableStrings, Result, X->WritableStrings)
    case_REFLPROP_0ARGS(ConstStrings, Result, X->ConstStrings)
    case_REFLPROP_0ARGS(LaxVectorConversions, Result, X->LaxVectorConversions)
    case_REFLPROP_0ARGS(AltiVec, Result, X->AltiVec)
    case_REFLPROP_0ARGS(ZVector, Result, X->ZVector)
    case_REFLPROP_0ARGS(Exceptions, Result, X->Exceptions)
    case_REFLPROP_0ARGS(ObjCExceptions, Result, X->ObjCExceptions)
    case_REFLPROP_0ARGS(CXXExceptions, Result, X->CXXExceptions)
    case_REFLPROP_0ARGS(DWARFExceptions, Result, X->DWARFExceptions)
    case_REFLPROP_0ARGS(SjLjExceptions, Result, X->SjLjExceptions)
    case_REFLPROP_0ARGS(SEHExceptions, Result, X->SEHExceptions)
    case_REFLPROP_0ARGS(ExternCNoUnwind, Result, X->ExternCNoUnwind)
    case_REFLPROP_0ARGS(TraditionalCPP, Result, X->TraditionalCPP)
    case_REFLPROP_0ARGS(RTTI, Result, X->RTTI)
    case_REFLPROP_0ARGS(RTTIData, Result, X->RTTIData)
    case_REFLPROP_0ARGS(MSBitfields, Result, X->MSBitfields)
    case_REFLPROP_0ARGS(Freestanding, Result, X->Freestanding)
    case_REFLPROP_0ARGS(NoBuiltin, Result, X->NoBuiltin)
    case_REFLPROP_0ARGS(NoMathBuiltin, Result, X->NoMathBuiltin)
    case_REFLPROP_0ARGS(GNUAsm, Result, X->GNUAsm)
    case_REFLPROP_0ARGS(CoroutinesTS, Result, X->CoroutinesTS)
    case_REFLPROP_0ARGS(RelaxedTemplateTemplateArgs, Result, X->RelaxedTemplateTemplateArgs)
    case_REFLPROP_0ARGS(DoubleSquareBracketAttributes, Result, X->DoubleSquareBracketAttributes)
    case_REFLPROP_0ARGS(ThreadsafeStatics, Result, X->ThreadsafeStatics)
    case_REFLPROP_0ARGS(POSIXThreads, Result, X->POSIXThreads)
    case_REFLPROP_0ARGS(Blocks, Result, X->Blocks)
    case_REFLPROP_0ARGS(EmitAllDecls, Result, X->EmitAllDecls)
    case_REFLPROP_0ARGS(MathErrno, Result, X->MathErrno)
    case_REFLPROP_0ARGS(HeinousExtensions, Result, X->HeinousExtensions)
    case_REFLPROP_0ARGS(Modules, Result, X->Modules)
    case_REFLPROP_0ARGS(ModulesTS, Result, X->ModulesTS)
    case_REFLPROP_0ARGS(CompilingPCH, Result, X->CompilingPCH)
    case_REFLPROP_0ARGS(BuildingPCHWithObjectFile, Result, X->BuildingPCHWithObjectFile)
    case_REFLPROP_0ARGS(ModulesDeclUse, Result, X->ModulesDeclUse)
    case_REFLPROP_0ARGS(ModulesSearchAll, Result, X->ModulesSearchAll)
    case_REFLPROP_0ARGS(ModulesStrictDeclUse, Result, X->ModulesStrictDeclUse)
    case_REFLPROP_0ARGS(ModulesErrorRecovery, Result, X->ModulesErrorRecovery)
    case_REFLPROP_0ARGS(ImplicitModules, Result, X->ImplicitModules)
    case_REFLPROP_0ARGS(ModulesLocalVisibility, Result, X->ModulesLocalVisibility)
    case_REFLPROP_0ARGS(Optimize, Result, X->Optimize)
    case_REFLPROP_0ARGS(OptimizeSize, Result, X->OptimizeSize)
    case_REFLPROP_0ARGS(Static, Result, X->Static)
    case_REFLPROP_0ARGS(PackStruct, Result, X->PackStruct)
    case_REFLPROP_0ARGS(MaxTypeAlign, Result, X->MaxTypeAlign)
    case_REFLPROP_0ARGS(AlignDouble, Result, X->AlignDouble)
    case_REFLPROP_0ARGS(PICLevel, Result, X->PICLevel)
    case_REFLPROP_0ARGS(PIE, Result, X->PIE)
    case_REFLPROP_0ARGS(GNUInline, Result, X->GNUInline)
    case_REFLPROP_0ARGS(NoInlineDefine, Result, X->NoInlineDefine)
    case_REFLPROP_0ARGS(Deprecated, Result, X->Deprecated)
    case_REFLPROP_0ARGS(FastMath, Result, X->FastMath)
    case_REFLPROP_0ARGS(FiniteMathOnly, Result, X->FiniteMathOnly)
    case_REFLPROP_0ARGS(UnsafeFPMath, Result, X->UnsafeFPMath)
    case_REFLPROP_0ARGS(ObjCGCBitmapPrint, Result, X->ObjCGCBitmapPrint)
    case_REFLPROP_0ARGS(AccessControl, Result, X->AccessControl)
    case_REFLPROP_0ARGS(CharIsSigned, Result, X->CharIsSigned)
    case_REFLPROP_0ARGS(WCharSize, Result, X->WCharSize)
    case_REFLPROP_0ARGS(WCharIsSigned, Result, X->WCharIsSigned)
    case_REFLPROP_0ARGS(ShortEnums, Result, X->ShortEnums)
    case_REFLPROP_0ARGS(OpenCL, Result, X->OpenCL)
    case_REFLPROP_0ARGS(OpenCLVersion, Result, X->OpenCLVersion)
    case_REFLPROP_0ARGS(OpenCLCPlusPlus, Result, X->OpenCLCPlusPlus)
    case_REFLPROP_0ARGS(OpenCLCPlusPlusVersion, Result, X->OpenCLCPlusPlusVersion)
    case_REFLPROP_0ARGS(NativeHalfType, Result, X->NativeHalfType)
    case_REFLPROP_0ARGS(NativeHalfArgsAndReturns, Result, X->NativeHalfArgsAndReturns)
    case_REFLPROP_0ARGS(HalfArgsAndReturns, Result, X->HalfArgsAndReturns)
    case_REFLPROP_0ARGS(CUDA, Result, X->CUDA)
    case_REFLPROP_0ARGS(HIP, Result, X->HIP)
    case_REFLPROP_0ARGS(OpenMP, Result, X->OpenMP)
    case_REFLPROP_0ARGS(OpenMPSimd, Result, X->OpenMPSimd)
    case_REFLPROP_0ARGS(OpenMPUseTLS, Result, X->OpenMPUseTLS)
    case_REFLPROP_0ARGS(OpenMPIsDevice, Result, X->OpenMPIsDevice)
    case_REFLPROP_0ARGS(OpenMPCUDAMode, Result, X->OpenMPCUDAMode)
    case_REFLPROP_0ARGS(OpenMPHostCXXExceptions, Result, X->OpenMPHostCXXExceptions)
    case_REFLPROP_0ARGS(RenderScript, Result, X->RenderScript)
    case_REFLPROP_0ARGS(CUDAIsDevice, Result, X->CUDAIsDevice)
    case_REFLPROP_0ARGS(CUDAAllowVariadicFunctions, Result, X->CUDAAllowVariadicFunctions)
    case_REFLPROP_0ARGS(CUDAHostDeviceConstexpr, Result, X->CUDAHostDeviceConstexpr)
    case_REFLPROP_0ARGS(CUDADeviceApproxTranscendentals, Result, X->CUDADeviceApproxTranscendentals)
    case_REFLPROP_0ARGS(CUDARelocatableDeviceCode, Result, X->CUDARelocatableDeviceCode)
    case_REFLPROP_0ARGS(SizedDeallocation, Result, X->SizedDeallocation)
    case_REFLPROP_0ARGS(AlignedAllocation, Result, X->AlignedAllocation)
    case_REFLPROP_0ARGS(AlignedAllocationUnavailable, Result, X->AlignedAllocationUnavailable)
    case_REFLPROP_0ARGS(NewAlignOverride, Result, X->NewAlignOverride)
    case_REFLPROP_0ARGS(ConceptsTS, Result, X->ConceptsTS)
    case_REFLPROP_0ARGS(Reflection, Result, X->Reflection)
    case_REFLPROP_0ARGS(ModulesCodegen, Result, X->ModulesCodegen)
    case_REFLPROP_0ARGS(ModulesDebugInfo, Result, X->ModulesDebugInfo)
    case_REFLPROP_0ARGS(ElideConstructors, Result, X->ElideConstructors)
    case_REFLPROP_0ARGS(DumpRecordLayouts, Result, X->DumpRecordLayouts)
    case_REFLPROP_0ARGS(DumpRecordLayoutsSimple, Result, X->DumpRecordLayoutsSimple)
    case_REFLPROP_0ARGS(DumpVTableLayouts, Result, X->DumpVTableLayouts)
    case_REFLPROP_0ARGS(NoConstantCFStrings, Result, X->NoConstantCFStrings)
    case_REFLPROP_0ARGS(InlineVisibilityHidden, Result, X->InlineVisibilityHidden)
    case_REFLPROP_0ARGS(ParseUnknownAnytype, Result, X->ParseUnknownAnytype)
    case_REFLPROP_0ARGS(DebuggerSupport, Result, X->DebuggerSupport)
    case_REFLPROP_0ARGS(DebuggerCastResultToId, Result, X->DebuggerCastResultToId)
    case_REFLPROP_0ARGS(DebuggerObjCLiteral, Result, X->DebuggerObjCLiteral)
    case_REFLPROP_0ARGS(SpellChecking, Result, X->SpellChecking)
    case_REFLPROP_0ARGS(SinglePrecisionConstants, Result, X->SinglePrecisionConstants)
    case_REFLPROP_0ARGS(FastRelaxedMath, Result, X->FastRelaxedMath)
    case_REFLPROP_0ARGS(NoBitFieldTypeAlign, Result, X->NoBitFieldTypeAlign)
    case_REFLPROP_0ARGS(HexagonQdsp6Compat, Result, X->HexagonQdsp6Compat)
    case_REFLPROP_0ARGS(ObjCAutoRefCount, Result, X->ObjCAutoRefCount)
    case_REFLPROP_0ARGS(ObjCWeakRuntime, Result, X->ObjCWeakRuntime)
    case_REFLPROP_0ARGS(ObjCWeak, Result, X->ObjCWeak)
    case_REFLPROP_0ARGS(ObjCSubscriptingLegacyRuntime, Result, X->ObjCSubscriptingLegacyRuntime)
    case_REFLPROP_0ARGS(CFProtectionBranch, Result, X->CFProtectionBranch)
    case_REFLPROP_0ARGS(FakeAddressSpaceMap, Result, X->FakeAddressSpaceMap)
    case_REFLPROP_0ARGS(IncludeDefaultHeader, Result, X->IncludeDefaultHeader)
    case_REFLPROP_0ARGS(DelayedTemplateParsing, Result, X->DelayedTemplateParsing)
    case_REFLPROP_0ARGS(BlocksRuntimeOptional, Result, X->BlocksRuntimeOptional)
    case_REFLPROP_0ARGS(CompleteMemberPointers, Result, X->CompleteMemberPointers)
    case_REFLPROP_0ARGS(ArrowDepth, Result, X->ArrowDepth)
    case_REFLPROP_0ARGS(InstantiationDepth, Result, X->InstantiationDepth)
    case_REFLPROP_0ARGS(ConstexprCallDepth, Result, X->ConstexprCallDepth)
    case_REFLPROP_0ARGS(ConstexprStepLimit, Result, X->ConstexprStepLimit)
    case_REFLPROP_0ARGS(BracketDepth, Result, X->BracketDepth)
    case_REFLPROP_0ARGS(NumLargeByValueCopy, Result, X->NumLargeByValueCopy)
    case_REFLPROP_0ARGS(MSCompatibilityVersion, Result, X->MSCompatibilityVersion)
    case_REFLPROP_0ARGS(VtorDispMode, Result, X->VtorDispMode)
    case_REFLPROP_0ARGS(ApplePragmaPack, Result, X->ApplePragmaPack)
    case_REFLPROP_0ARGS(RetainCommentsFromSystemHeaders, Result, X->RetainCommentsFromSystemHeaders)
    case_REFLPROP_0ARGS(SanitizeAddressFieldPadding, Result, X->SanitizeAddressFieldPadding)
    case_REFLPROP_0ARGS(XRayInstrument, Result, X->XRayInstrument)
    case_REFLPROP_0ARGS(XRayAlwaysEmitCustomEvents, Result, X->XRayAlwaysEmitCustomEvents)
    case_REFLPROP_0ARGS(XRayAlwaysEmitTypedEvents, Result, X->XRayAlwaysEmitTypedEvents)
    case_REFLPROP_0ARGS(ForceEmitVTables, Result, X->ForceEmitVTables)
    case_REFLPROP_0ARGS(AllowEditorPlaceholders, Result, X->AllowEditorPlaceholders)
    case_REFLPROP_0ARGS(FunctionAlignment, Result, X->FunctionAlignment)
    case_REFLPROP_0ARGS(FixedPoint, Result, X->FixedPoint)
    case_REFLPROP_0ARGS(PaddingOnUnsignedFixedPoint, Result, X->PaddingOnUnsignedFixedPoint)
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__LangOptions: {
# define CLASSNAME (clang::LangOptions)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__LangOptions;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS(Sanitize, Type, X->Sanitize)
    case_REFLPROP_0ARGS(ObjCRuntime, Type, X->ObjCRuntime)
    case_REFLPROP_0ARGS(CommentOpts, Type, X->CommentOpts)
    case_REFLPROP_0ARGS(IsHeaderFile, Result, X->IsHeaderFile)
    case_REFLPROP_0ARGS( getCompilingModule, Result, X->getCompilingModule() )
    case_REFLPROP_0ARGS( getMSPointerToMemberRepresentationMethod, Result, X->getMSPointerToMemberRepresentationMethod() )
    case_REFLPROP_0ARGS( getDefaultCallingConv, Result, X->getDefaultCallingConv() )
    case_REFLPROP_0ARGS( getDefaultFPContractMode, Result, X->getDefaultFPContractMode() )
    case_REFLPROP_0ARGS( getAddressSpaceMapMangling, Result, X->getAddressSpaceMapMangling() )
    case_REFLPROP_0ARGS( getGC, Result, X->getGC() )
    case_REFLPROP_0ARGS( getValueVisibilityMode, Result, X->getValueVisibilityMode() )
    case_REFLPROP_0ARGS( getTypeVisibilityMode, Result, X->getTypeVisibilityMode() )
    case_REFLPROP_0ARGS( getStackProtector, Result, X->getStackProtector() )
    case_REFLPROP_0ARGS( getSignedOverflowBehavior, Result, X->getSignedOverflowBehavior() )
    case_REFLPROP_0ARGS( getClangABICompat, Result, X->getClangABICompat() )
    case_REFLPROP_0ARGS( isCompilingModule, Result, X->isCompilingModule() )
    case_REFLPROP_0ARGS( trackLocalOwningModule, Result, X->trackLocalOwningModule() )
    case_REFLPROP_0ARGS( isSignedOverflowDefined, Result, X->isSignedOverflowDefined() )
    case_REFLPROP_0ARGS( isSubscriptPointerArithmetic, Result, X->isSubscriptPointerArithmetic() )
    case currefl::isCompatibleWithMSVC: {
      ASSERT_TRAIT_IS_REFLPROP(isCompatibleWithMSVC)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::LangOptions::MSVCMajorVersion), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isCompatibleWithMSVC(p0))
      };
      break;
    }
    case currefl::isNoBuiltinFunc: {
      ASSERT_TRAIT_IS_REFLPROP(isNoBuiltinFunc)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const char *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isNoBuiltinFunc(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( allowsNonTrivialObjCLifetimeQualifiers, Result, X->allowsNonTrivialObjCLifetimeQualifiers() )
    case_REFLPROP_0ARGS( assumeFunctionsAreConvergent, Result, X->assumeFunctionsAreConvergent() )
    case_REFLPROP_0ARGS( getOpenCLVersionTuple, Type, X->getOpenCLVersionTuple() )
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__FPOptions: {
# define CLASSNAME (clang::FPOptions)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_NEVERPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__FPOptions;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( allowFPContractWithinStatement, Result, X->allowFPContractWithinStatement() )
    case_REFLPROP_0ARGS( allowFPContractAcrossStatement, Result, X->allowFPContractAcrossStatement() )
    case_REFLPROP_0ARGS( getInt, Result, X->getInt() )
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__PrinterHelper: {
# define CLASSNAME (clang::PrinterHelper)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__PrinterHelper;
  switch( (currefl::memnames)MemNum ) {
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__PrintingPolicy: {
# define CLASSNAME (clang::PrintingPolicy)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__PrintingPolicy;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS(Indentation, Result, X->Indentation)
    case_REFLPROP_0ARGS(SuppressSpecifiers, Result, X->SuppressSpecifiers)
    case_REFLPROP_0ARGS(SuppressTagKeyword, Result, X->SuppressTagKeyword)
    case_REFLPROP_0ARGS(IncludeTagDefinition, Result, X->IncludeTagDefinition)
    case_REFLPROP_0ARGS(SuppressScope, Result, X->SuppressScope)
    case_REFLPROP_0ARGS(SuppressUnwrittenScope, Result, X->SuppressUnwrittenScope)
    case_REFLPROP_0ARGS(SuppressInitializers, Result, X->SuppressInitializers)
    case_REFLPROP_0ARGS(ConstantArraySizeAsWritten, Result, X->ConstantArraySizeAsWritten)
    case_REFLPROP_0ARGS(AnonymousTagLocations, Result, X->AnonymousTagLocations)
    case_REFLPROP_0ARGS(SuppressStrongLifetime, Result, X->SuppressStrongLifetime)
    case_REFLPROP_0ARGS(SuppressLifetimeQualifiers, Result, X->SuppressLifetimeQualifiers)
    case_REFLPROP_0ARGS(SuppressTemplateArgsInCXXConstructors, Result, X->SuppressTemplateArgsInCXXConstructors)
    case_REFLPROP_0ARGS(Bool, Result, X->Bool)
    case_REFLPROP_0ARGS(Restrict, Result, X->Restrict)
    case_REFLPROP_0ARGS(Alignof, Result, X->Alignof)
    case_REFLPROP_0ARGS(UnderscoreAlignof, Result, X->UnderscoreAlignof)
    case_REFLPROP_0ARGS(UseVoidForZeroParams, Result, X->UseVoidForZeroParams)
    case_REFLPROP_0ARGS(TerseOutput, Result, X->TerseOutput)
    case_REFLPROP_0ARGS(PolishForDeclaration, Result, X->PolishForDeclaration)
    case_REFLPROP_0ARGS(Half, Result, X->Half)
    case_REFLPROP_0ARGS(MSWChar, Result, X->MSWChar)
    case_REFLPROP_0ARGS(IncludeNewlines, Result, X->IncludeNewlines)
    case_REFLPROP_0ARGS(MSVCFormatting, Result, X->MSVCFormatting)
    case_REFLPROP_0ARGS(ConstantsAsWritten, Result, X->ConstantsAsWritten)
    case_REFLPROP_0ARGS(SuppressImplicitBase, Result, X->SuppressImplicitBase)
    case_REFLPROP_0ARGS(FullyQualifiedName, Result, X->FullyQualifiedName)
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__SrcMgr__ContentCache: {
# define CLASSNAME (clang::SrcMgr::ContentCache)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__SrcMgr__ContentCache;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS(OrigEntry, Type, X->OrigEntry)
    case_REFLPROP_0ARGS(ContentsEntry, Type, X->ContentsEntry)
    case_REFLPROP_0ARGS(SourceLineCache, Result, X->SourceLineCache)
    case_REFLPROP_0ARGS(NumLines, Result, X->NumLines)
    case_REFLPROP_0ARGS(BufferOverridden, Result, X->BufferOverridden)
    case_REFLPROP_0ARGS(IsSystemFile, Result, X->IsSystemFile)
    case_REFLPROP_0ARGS(IsTransient, Result, X->IsTransient)
    case currefl::getBuffer: {
      ASSERT_TRAIT_IS_REFLPROP(getBuffer)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::DiagnosticsEngine &), p0)
        LOAD_VAL((const class clang::SourceManager &), p1)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Type, X->getBuffer(p0, p1))
        LOAD_VAL((class clang::SourceLocation), p2)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Type, X->getBuffer(p0, p1, p2))
        LOAD_VAL((bool *), p3)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getBuffer(p0, p1, p2, p3))
      };
      break;
    }
    case_REFLPROP_0ARGS( getSize, Result, X->getSize() )
    case_REFLPROP_0ARGS( getSizeBytesMapped, Result, X->getSizeBytesMapped() )
    case_REFLPROP_0ARGS( getMemoryBufferKind, Result, X->getMemoryBufferKind() )
    case_REFLPROP_0ARGS( getRawBuffer, Type, X->getRawBuffer() )
    case_REFLPROP_0ARGS( isBufferInvalid, Result, X->isBufferInvalid() )
    case_REFLPROP_0ARGS( shouldFreeBuffer, Result, X->shouldFreeBuffer() )
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__SrcMgr__FileInfo: {
# define CLASSNAME (clang::SrcMgr::FileInfo)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_MAYBEPTR(1, CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__SrcMgr__FileInfo;
  switch( (currefl::memnames)MemNum ) {
    case currefl::get: {
      ASSERT_TRAIT_IS_REFLPROP(get)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::SourceLocation), p0)
        LOAD_VAL((const class clang::SrcMgr::ContentCache *), p1)
        LOAD_VAL((enum clang::SrcMgr::CharacteristicKind), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->get(p0, p1, p2))
      };
      break;
    }
    case_REFLPROP_0ARGS( getIncludeLoc, Type, X->getIncludeLoc() )
    case_REFLPROP_0ARGS( getContentCache, Type, X->getContentCache() )
    case_REFLPROP_0ARGS( getFileCharacteristic, Result, X->getFileCharacteristic() )
    case_REFLPROP_0ARGS( hasLineDirectives, Result, X->hasLineDirectives() )
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__SrcMgr__ExpansionInfo: {
# define CLASSNAME (clang::SrcMgr::ExpansionInfo)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_MAYBEPTR(1, CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__SrcMgr__ExpansionInfo;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getSpellingLoc, Type, X->getSpellingLoc() )
    case_REFLPROP_0ARGS( getExpansionLocStart, Type, X->getExpansionLocStart() )
    case_REFLPROP_0ARGS( getExpansionLocEnd, Type, X->getExpansionLocEnd() )
    case_REFLPROP_0ARGS( isExpansionTokenRange, Result, X->isExpansionTokenRange() )
    case_REFLPROP_0ARGS( getExpansionLocRange, Type, X->getExpansionLocRange() )
    case_REFLPROP_0ARGS( isMacroArgExpansion, Result, X->isMacroArgExpansion() )
    case_REFLPROP_0ARGS( isMacroBodyExpansion, Result, X->isMacroBodyExpansion() )
    case_REFLPROP_0ARGS( isFunctionMacroExpansion, Result, X->isFunctionMacroExpansion() )
    case currefl::create: {
      ASSERT_TRAIT_IS_REFLPROP(create)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::SourceLocation), p0)
        LOAD_VAL((class clang::SourceLocation), p1)
        LOAD_VAL((class clang::SourceLocation), p2)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Type, X->create(p0, p1, p2))
        LOAD_VAL((bool), p3)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->create(p0, p1, p2, p3))
      };
      break;
    }
    case currefl::createForMacroArg: {
      ASSERT_TRAIT_IS_REFLPROP(createForMacroArg)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::SourceLocation), p0)
        LOAD_VAL((class clang::SourceLocation), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->createForMacroArg(p0, p1))
      };
      break;
    }
    case currefl::createForTokenSplit: {
      ASSERT_TRAIT_IS_REFLPROP(createForTokenSplit)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::SourceLocation), p0)
        LOAD_VAL((class clang::SourceLocation), p1)
        LOAD_VAL((class clang::SourceLocation), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->createForTokenSplit(p0, p1, p2))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__SrcMgr__SLocEntry: {
# define CLASSNAME (clang::SrcMgr::SLocEntry)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_MAYBEPTR(1, CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__SrcMgr__SLocEntry;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getOffset, Result, X->getOffset() )
    case_REFLPROP_0ARGS( isExpansion, Result, X->isExpansion() )
    case_REFLPROP_0ARGS( isFile, Result, X->isFile() )
    case_REFLPROP_0ARGS( getFile, Type, X->getFile() )
    case_REFLPROP_0ARGS( getExpansion, Type, X->getExpansion() )
    case currefl::get: {
      ASSERT_TRAIT_IS_REFLPROP(get)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        LOAD_VAL((const class clang::SrcMgr::FileInfo &), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->get(p0, p1))
      };
      break;
    }
    case currefl::get1: {
      ASSERT_TRAIT_IS_REFLPROP(get1)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        LOAD_VAL((const class clang::SrcMgr::ExpansionInfo &), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->get(p0, p1))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__SourceManager: {
# define CLASSNAME (clang::SourceManager)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__SourceManager;
  switch( (currefl::memnames)MemNum ) {
    case currefl::Retain: {
      ASSERT_TRAIT_IS_REFLPROP(Retain)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        ASSERT_NO_MORE  VOID_REFLECTION(X->Retain())
      };
      break;
    }
    case currefl::Release: {
      ASSERT_TRAIT_IS_REFLPROP(Release)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        ASSERT_NO_MORE  VOID_REFLECTION(X->Release())
      };
      break;
    }
    case_REFLPROP_0ARGS( getDiagnostics, Type, X->getDiagnostics() )
    case_REFLPROP_0ARGS( getFileManager, Type, X->getFileManager() )
    case_REFLPROP_0ARGS( userFilesAreVolatile, Result, X->userFilesAreVolatile() )
    case_REFLPROP_0ARGS( getMainFileID, Type, X->getMainFileID() )
    case_REFLPROP_0ARGS( getPreambleFileID, Type, X->getPreambleFileID() )
    case currefl::isFileOverridden: {
      ASSERT_TRAIT_IS_REFLPROP(isFileOverridden)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::FileEntry *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isFileOverridden(p0))
      };
      break;
    }
    case currefl::getBuffer: {
      ASSERT_TRAIT_IS_REFLPROP(getBuffer)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::FileID), p0)
        LOAD_VAL((class clang::SourceLocation), p1)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Type, X->getBuffer(p0, p1))
        LOAD_VAL((bool *), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getBuffer(p0, p1, p2))
      };
      break;
    }
    case currefl::getBuffer1: {
      ASSERT_TRAIT_IS_REFLPROP(getBuffer1)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::FileID), p0)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Type, X->getBuffer(p0))
        LOAD_VAL((bool *), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getBuffer(p0, p1))
      };
      break;
    }
    case currefl::getFileEntryForID: {
      ASSERT_TRAIT_IS_REFLPROP(getFileEntryForID)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::FileID), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getFileEntryForID(p0))
      };
      break;
    }
    case currefl::getFileEntryForSLocEntry: {
      ASSERT_TRAIT_IS_REFLPROP(getFileEntryForSLocEntry)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::SrcMgr::SLocEntry &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getFileEntryForSLocEntry(p0))
      };
      break;
    }
    case currefl::getBufferData: {
      ASSERT_TRAIT_IS_REFLPROP(getBufferData)
      SET_PRIM_TYPE(const char *)
      SET_CALLBACK(Str) {
        LOAD_VAL_X(Str)
        LOAD_VAL((class clang::FileID), p0)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Str, X->getBufferData(p0))
        LOAD_VAL((bool *), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Str, X->getBufferData(p0, p1))
      };
      break;
    }
    case currefl::getNumCreatedFIDsForFileID: {
      ASSERT_TRAIT_IS_REFLPROP(getNumCreatedFIDsForFileID)
      SET_PRIM_TYPE(unsigned int)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::FileID), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getNumCreatedFIDsForFileID(p0))
      };
      break;
    }
    case currefl::setNumCreatedFIDsForFileID: {
      ASSERT_TRAIT_IS_REFLPROP(setNumCreatedFIDsForFileID)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::FileID), p0)
        LOAD_VAL((unsigned int), p1)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->setNumCreatedFIDsForFileID((class clang::FileID)p0, (unsigned int)p1))
      };
      break;
    }
    case currefl::getFileID: {
      ASSERT_TRAIT_IS_REFLPROP(getFileID)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::SourceLocation), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getFileID(p0))
      };
      break;
    }
    case currefl::getFilename: {
      ASSERT_TRAIT_IS_REFLPROP(getFilename)
      SET_PRIM_TYPE(const char *)
      SET_CALLBACK(Str) {
        LOAD_VAL_X(Str)
        LOAD_VAL((class clang::SourceLocation), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Str, X->getFilename(p0))
      };
      break;
    }
    case currefl::getLocForStartOfFile: {
      ASSERT_TRAIT_IS_REFLPROP(getLocForStartOfFile)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::FileID), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getLocForStartOfFile(p0))
      };
      break;
    }
    case currefl::getLocForEndOfFile: {
      ASSERT_TRAIT_IS_REFLPROP(getLocForEndOfFile)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::FileID), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getLocForEndOfFile(p0))
      };
      break;
    }
    case currefl::getIncludeLoc: {
      ASSERT_TRAIT_IS_REFLPROP(getIncludeLoc)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::FileID), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getIncludeLoc(p0))
      };
      break;
    }
    case currefl::getExpansionLoc: {
      ASSERT_TRAIT_IS_REFLPROP(getExpansionLoc)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::SourceLocation), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getExpansionLoc(p0))
      };
      break;
    }
    case currefl::getFileLoc: {
      ASSERT_TRAIT_IS_REFLPROP(getFileLoc)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::SourceLocation), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getFileLoc(p0))
      };
      break;
    }
    case currefl::getImmediateExpansionRange: {
      ASSERT_TRAIT_IS_REFLPROP(getImmediateExpansionRange)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::SourceLocation), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getImmediateExpansionRange(p0))
      };
      break;
    }
    case currefl::getExpansionRange: {
      ASSERT_TRAIT_IS_REFLPROP(getExpansionRange)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::SourceLocation), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getExpansionRange(p0))
      };
      break;
    }
    case currefl::getExpansionRange1: {
      ASSERT_TRAIT_IS_REFLPROP(getExpansionRange1)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::SourceRange), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getExpansionRange(p0))
      };
      break;
    }
    case currefl::getExpansionRange2: {
      ASSERT_TRAIT_IS_REFLPROP(getExpansionRange2)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::CharSourceRange), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getExpansionRange(p0))
      };
      break;
    }
    case currefl::getSpellingLoc: {
      ASSERT_TRAIT_IS_REFLPROP(getSpellingLoc)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::SourceLocation), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getSpellingLoc(p0))
      };
      break;
    }
    case currefl::getImmediateSpellingLoc: {
      ASSERT_TRAIT_IS_REFLPROP(getImmediateSpellingLoc)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::SourceLocation), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getImmediateSpellingLoc(p0))
      };
      break;
    }
    case currefl::getComposedLoc: {
      ASSERT_TRAIT_IS_REFLPROP(getComposedLoc)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::FileID), p0)
        LOAD_VAL((unsigned int), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getComposedLoc(p0, p1))
      };
      break;
    }
    case currefl::getFileOffset: {
      ASSERT_TRAIT_IS_REFLPROP(getFileOffset)
      SET_PRIM_TYPE(unsigned int)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::SourceLocation), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getFileOffset(p0))
      };
      break;
    }
    case currefl::isMacroArgExpansion: {
      ASSERT_TRAIT_IS_REFLPROP(isMacroArgExpansion)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::SourceLocation), p0)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Result, X->isMacroArgExpansion(p0))
        LOAD_VAL((class clang::SourceLocation *), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isMacroArgExpansion(p0, p1))
      };
      break;
    }
    case currefl::isMacroBodyExpansion: {
      ASSERT_TRAIT_IS_REFLPROP(isMacroBodyExpansion)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::SourceLocation), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isMacroBodyExpansion(p0))
      };
      break;
    }
    case currefl::isAtStartOfImmediateMacroExpansion: {
      ASSERT_TRAIT_IS_REFLPROP(isAtStartOfImmediateMacroExpansion)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::SourceLocation), p0)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Result, X->isAtStartOfImmediateMacroExpansion(p0))
        LOAD_VAL((class clang::SourceLocation *), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isAtStartOfImmediateMacroExpansion(p0, p1))
      };
      break;
    }
    case currefl::isAtEndOfImmediateMacroExpansion: {
      ASSERT_TRAIT_IS_REFLPROP(isAtEndOfImmediateMacroExpansion)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::SourceLocation), p0)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Result, X->isAtEndOfImmediateMacroExpansion(p0))
        LOAD_VAL((class clang::SourceLocation *), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isAtEndOfImmediateMacroExpansion(p0, p1))
      };
      break;
    }
    case currefl::isInSLocAddrSpace: {
      ASSERT_TRAIT_IS_REFLPROP(isInSLocAddrSpace)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::SourceLocation), p0)
        LOAD_VAL((class clang::SourceLocation), p1)
        LOAD_VAL((unsigned int), p2)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Result, X->isInSLocAddrSpace(p0, p1, p2))
        LOAD_VAL((unsigned int *), p3)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isInSLocAddrSpace(p0, p1, p2, p3))
      };
      break;
    }
    case currefl::isInSameSLocAddrSpace: {
      ASSERT_TRAIT_IS_REFLPROP(isInSameSLocAddrSpace)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::SourceLocation), p0)
        LOAD_VAL((class clang::SourceLocation), p1)
        LOAD_VAL((int *), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isInSameSLocAddrSpace(p0, p1, p2))
      };
      break;
    }
    case currefl::getCharacterData: {
      ASSERT_TRAIT_IS_REFLPROP(getCharacterData)
      SET_PRIM_TYPE(const char *)
      SET_CALLBACK(Str) {
        LOAD_VAL_X(Str)
        LOAD_VAL((class clang::SourceLocation), p0)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Str, X->getCharacterData(p0))
        LOAD_VAL((bool *), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Str, X->getCharacterData(p0, p1))
      };
      break;
    }
    case currefl::getColumnNumber: {
      ASSERT_TRAIT_IS_REFLPROP(getColumnNumber)
      SET_PRIM_TYPE(unsigned int)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::FileID), p0)
        LOAD_VAL((unsigned int), p1)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Result, X->getColumnNumber(p0, p1))
        LOAD_VAL((bool *), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getColumnNumber(p0, p1, p2))
      };
      break;
    }
    case currefl::getSpellingColumnNumber: {
      ASSERT_TRAIT_IS_REFLPROP(getSpellingColumnNumber)
      SET_PRIM_TYPE(unsigned int)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::SourceLocation), p0)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Result, X->getSpellingColumnNumber(p0))
        LOAD_VAL((bool *), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getSpellingColumnNumber(p0, p1))
      };
      break;
    }
    case currefl::getExpansionColumnNumber: {
      ASSERT_TRAIT_IS_REFLPROP(getExpansionColumnNumber)
      SET_PRIM_TYPE(unsigned int)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::SourceLocation), p0)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Result, X->getExpansionColumnNumber(p0))
        LOAD_VAL((bool *), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getExpansionColumnNumber(p0, p1))
      };
      break;
    }
    case currefl::getPresumedColumnNumber: {
      ASSERT_TRAIT_IS_REFLPROP(getPresumedColumnNumber)
      SET_PRIM_TYPE(unsigned int)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::SourceLocation), p0)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Result, X->getPresumedColumnNumber(p0))
        LOAD_VAL((bool *), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getPresumedColumnNumber(p0, p1))
      };
      break;
    }
    case currefl::getLineNumber: {
      ASSERT_TRAIT_IS_REFLPROP(getLineNumber)
      SET_PRIM_TYPE(unsigned int)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::FileID), p0)
        LOAD_VAL((unsigned int), p1)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Result, X->getLineNumber(p0, p1))
        LOAD_VAL((bool *), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getLineNumber(p0, p1, p2))
      };
      break;
    }
    case currefl::getSpellingLineNumber: {
      ASSERT_TRAIT_IS_REFLPROP(getSpellingLineNumber)
      SET_PRIM_TYPE(unsigned int)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::SourceLocation), p0)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Result, X->getSpellingLineNumber(p0))
        LOAD_VAL((bool *), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getSpellingLineNumber(p0, p1))
      };
      break;
    }
    case currefl::getExpansionLineNumber: {
      ASSERT_TRAIT_IS_REFLPROP(getExpansionLineNumber)
      SET_PRIM_TYPE(unsigned int)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::SourceLocation), p0)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Result, X->getExpansionLineNumber(p0))
        LOAD_VAL((bool *), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getExpansionLineNumber(p0, p1))
      };
      break;
    }
    case currefl::getPresumedLineNumber: {
      ASSERT_TRAIT_IS_REFLPROP(getPresumedLineNumber)
      SET_PRIM_TYPE(unsigned int)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::SourceLocation), p0)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Result, X->getPresumedLineNumber(p0))
        LOAD_VAL((bool *), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getPresumedLineNumber(p0, p1))
      };
      break;
    }
    case currefl::getBufferName: {
      ASSERT_TRAIT_IS_REFLPROP(getBufferName)
      SET_PRIM_TYPE(const char *)
      SET_CALLBACK(Str) {
        LOAD_VAL_X(Str)
        LOAD_VAL((class clang::SourceLocation), p0)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Str, X->getBufferName(p0))
        LOAD_VAL((bool *), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Str, X->getBufferName(p0, p1))
      };
      break;
    }
    case currefl::getFileCharacteristic: {
      ASSERT_TRAIT_IS_REFLPROP(getFileCharacteristic)
      SET_PRIM_TYPE(enum clang::SrcMgr::CharacteristicKind)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::SourceLocation), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getFileCharacteristic(p0))
      };
      break;
    }
    case currefl::getPresumedLoc: {
      ASSERT_TRAIT_IS_REFLPROP(getPresumedLoc)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::SourceLocation), p0)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Type, X->getPresumedLoc(p0))
        LOAD_VAL((bool), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getPresumedLoc(p0, p1))
      };
      break;
    }
    case currefl::isInMainFile: {
      ASSERT_TRAIT_IS_REFLPROP(isInMainFile)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::SourceLocation), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isInMainFile(p0))
      };
      break;
    }
    case currefl::isWrittenInSameFile: {
      ASSERT_TRAIT_IS_REFLPROP(isWrittenInSameFile)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::SourceLocation), p0)
        LOAD_VAL((class clang::SourceLocation), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isWrittenInSameFile(p0, p1))
      };
      break;
    }
    case currefl::isWrittenInMainFile: {
      ASSERT_TRAIT_IS_REFLPROP(isWrittenInMainFile)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::SourceLocation), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isWrittenInMainFile(p0))
      };
      break;
    }
    case currefl::isInSystemHeader: {
      ASSERT_TRAIT_IS_REFLPROP(isInSystemHeader)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::SourceLocation), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isInSystemHeader(p0))
      };
      break;
    }
    case currefl::isInExternCSystemHeader: {
      ASSERT_TRAIT_IS_REFLPROP(isInExternCSystemHeader)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::SourceLocation), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isInExternCSystemHeader(p0))
      };
      break;
    }
    case currefl::isInSystemMacro: {
      ASSERT_TRAIT_IS_REFLPROP(isInSystemMacro)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::SourceLocation), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isInSystemMacro(p0))
      };
      break;
    }
    case currefl::getFileIDSize: {
      ASSERT_TRAIT_IS_REFLPROP(getFileIDSize)
      SET_PRIM_TYPE(unsigned int)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::FileID), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getFileIDSize(p0))
      };
      break;
    }
    case currefl::isInFileID: {
      ASSERT_TRAIT_IS_REFLPROP(isInFileID)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::SourceLocation), p0)
        LOAD_VAL((class clang::FileID), p1)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Result, X->isInFileID(p0, p1))
        LOAD_VAL((unsigned int *), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isInFileID(p0, p1, p2))
      };
      break;
    }
    case_REFLPROP_0ARGS( hasLineTable, Result, X->hasLineTable() )
    case_REFLPROP_0ARGS( getContentCacheSize, Result, X->getContentCacheSize() )
    case_REFLPROP_0ARGS( getDataStructureSizes, Result, X->getDataStructureSizes() )
    case currefl::translateFileLineCol: {
      ASSERT_TRAIT_IS_REFLPROP(translateFileLineCol)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::FileEntry *), p0)
        LOAD_VAL((unsigned int), p1)
        LOAD_VAL((unsigned int), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->translateFileLineCol(p0, p1, p2))
      };
      break;
    }
    case currefl::translateFile: {
      ASSERT_TRAIT_IS_REFLPROP(translateFile)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::FileEntry *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->translateFile(p0))
      };
      break;
    }
    case currefl::translateLineCol: {
      ASSERT_TRAIT_IS_REFLPROP(translateLineCol)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::FileID), p0)
        LOAD_VAL((unsigned int), p1)
        LOAD_VAL((unsigned int), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->translateLineCol(p0, p1, p2))
      };
      break;
    }
    case currefl::getMacroArgExpandedLocation: {
      ASSERT_TRAIT_IS_REFLPROP(getMacroArgExpandedLocation)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::SourceLocation), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getMacroArgExpandedLocation(p0))
      };
      break;
    }
    case currefl::isBeforeInTranslationUnit: {
      ASSERT_TRAIT_IS_REFLPROP(isBeforeInTranslationUnit)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::SourceLocation), p0)
        LOAD_VAL((class clang::SourceLocation), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isBeforeInTranslationUnit(p0, p1))
      };
      break;
    }
    case currefl::isBeforeInSLocAddrSpace: {
      ASSERT_TRAIT_IS_REFLPROP(isBeforeInSLocAddrSpace)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::SourceLocation), p0)
        LOAD_VAL((class clang::SourceLocation), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isBeforeInSLocAddrSpace(p0, p1))
      };
      break;
    }
    case currefl::isBeforeInSLocAddrSpace1: {
      ASSERT_TRAIT_IS_REFLPROP(isBeforeInSLocAddrSpace1)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::SourceLocation), p0)
        LOAD_VAL((unsigned int), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isBeforeInSLocAddrSpace(p0, p1))
      };
      break;
    }
    case currefl::isPointWithin: {
      ASSERT_TRAIT_IS_REFLPROP(isPointWithin)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::SourceLocation), p0)
        LOAD_VAL((class clang::SourceLocation), p1)
        LOAD_VAL((class clang::SourceLocation), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isPointWithin(p0, p1, p2))
      };
      break;
    }
    case currefl::hasFileInfo: {
      ASSERT_TRAIT_IS_REFLPROP(hasFileInfo)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::FileEntry *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->hasFileInfo(p0))
      };
      break;
    }
    case currefl::PrintStats: {
      ASSERT_TRAIT_IS_REFLPROP(PrintStats)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        ASSERT_NO_MORE  VOID_REFLECTION(X->PrintStats())
      };
      break;
    }
    case currefl::dump: {
      ASSERT_TRAIT_IS_REFLPROP(dump)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        ASSERT_NO_MORE  VOID_REFLECTION(X->dump())
      };
      break;
    }
    case_REFLPROP_0ARGS( local_sloc_entry_size, Result, X->local_sloc_entry_size() )
    case currefl::getLocalSLocEntry: {
      ASSERT_TRAIT_IS_REFLPROP(getLocalSLocEntry)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Type, X->getLocalSLocEntry(p0))
        LOAD_VAL((bool *), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getLocalSLocEntry(p0, p1))
      };
      break;
    }
    case_REFLPROP_0ARGS( loaded_sloc_entry_size, Result, X->loaded_sloc_entry_size() )
    case currefl::getLoadedSLocEntry: {
      ASSERT_TRAIT_IS_REFLPROP(getLoadedSLocEntry)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Type, X->getLoadedSLocEntry(p0))
        LOAD_VAL((bool *), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getLoadedSLocEntry(p0, p1))
      };
      break;
    }
    case currefl::getSLocEntry: {
      ASSERT_TRAIT_IS_REFLPROP(getSLocEntry)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::FileID), p0)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Type, X->getSLocEntry(p0))
        LOAD_VAL((bool *), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getSLocEntry(p0, p1))
      };
      break;
    }
    case_REFLPROP_0ARGS( getNextLocalOffset, Result, X->getNextLocalOffset() )
    case currefl::isLoadedSourceLocation: {
      ASSERT_TRAIT_IS_REFLPROP(isLoadedSourceLocation)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::SourceLocation), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isLoadedSourceLocation(p0))
      };
      break;
    }
    case currefl::isLocalSourceLocation: {
      ASSERT_TRAIT_IS_REFLPROP(isLocalSourceLocation)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::SourceLocation), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isLocalSourceLocation(p0))
      };
      break;
    }
    case currefl::isLoadedFileID: {
      ASSERT_TRAIT_IS_REFLPROP(isLoadedFileID)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::FileID), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isLoadedFileID(p0))
      };
      break;
    }
    case currefl::isLocalFileID: {
      ASSERT_TRAIT_IS_REFLPROP(isLocalFileID)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::FileID), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isLocalFileID(p0))
      };
      break;
    }
    case currefl::getImmediateMacroCallerLoc: {
      ASSERT_TRAIT_IS_REFLPROP(getImmediateMacroCallerLoc)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::SourceLocation), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getImmediateMacroCallerLoc(p0))
      };
      break;
    }
    case currefl::getTopMacroCallerLoc: {
      ASSERT_TRAIT_IS_REFLPROP(getTopMacroCallerLoc)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::SourceLocation), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getTopMacroCallerLoc(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__RawComment: {
# define CLASSNAME (clang::RawComment)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__RawComment;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getKind, Result, X->getKind() )
    case_REFLPROP_0ARGS( isInvalid, Result, X->isInvalid() )
    case_REFLPROP_0ARGS( isMerged, Result, X->isMerged() )
    case_REFLPROP_0ARGS( isAttached, Result, X->isAttached() )
    case_REFLPROP_0ARGS( isTrailingComment, Result, X->isTrailingComment() )
    case_REFLPROP_0ARGS( isAlmostTrailingComment, Result, X->isAlmostTrailingComment() )
    case_REFLPROP_0ARGS( isOrdinary, Result, X->isOrdinary() )
    case_REFLPROP_0ARGS( isDocumentation, Result, X->isDocumentation() )
    case currefl::getRawText: {
      ASSERT_TRAIT_IS_REFLPROP(getRawText)
      SET_PRIM_TYPE(const char *)
      SET_CALLBACK(Str) {
        LOAD_VAL_X(Str)
        LOAD_VAL((const class clang::SourceManager &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Str, X->getRawText(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getSourceRange, Type, X->getSourceRange() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case currefl::getBriefText: {
      ASSERT_TRAIT_IS_REFLPROP(getBriefText)
      SET_PRIM_TYPE(const char *)
      SET_CALLBACK(Str) {
        LOAD_VAL_X(Str)
        LOAD_VAL((const class clang::ASTContext &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Str, X->getBriefText(p0))
      };
      break;
    }
    case currefl::getFormattedText: {
      ASSERT_TRAIT_IS_REFLPROP(getFormattedText)
      SET_PRIM_TYPE(const char *)
      SET_CALLBACK(Str) {
        LOAD_VAL_X(Str)
        LOAD_VAL((const class clang::SourceManager &), p0)
        LOAD_VAL((class clang::DiagnosticsEngine &), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Str, X->getFormattedText(p0, p1))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__SanitizerBlacklist: {
# define CLASSNAME (clang::SanitizerBlacklist)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__SanitizerBlacklist;
  switch( (currefl::memnames)MemNum ) {
    case currefl::isBlacklistedGlobal: {
      ASSERT_TRAIT_IS_REFLPROP(isBlacklistedGlobal)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((unsigned long long), p0)
        LOAD_VAL((const char *), p1)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Result, X->isBlacklistedGlobal(p0, p1))
        LOAD_VAL((const char *), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isBlacklistedGlobal(p0, p1, p2))
      };
      break;
    }
    case currefl::isBlacklistedType: {
      ASSERT_TRAIT_IS_REFLPROP(isBlacklistedType)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((unsigned long long), p0)
        LOAD_VAL((const char *), p1)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Result, X->isBlacklistedType(p0, p1))
        LOAD_VAL((const char *), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isBlacklistedType(p0, p1, p2))
      };
      break;
    }
    case currefl::isBlacklistedFunction: {
      ASSERT_TRAIT_IS_REFLPROP(isBlacklistedFunction)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((unsigned long long), p0)
        LOAD_VAL((const char *), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isBlacklistedFunction(p0, p1))
      };
      break;
    }
    case currefl::isBlacklistedFile: {
      ASSERT_TRAIT_IS_REFLPROP(isBlacklistedFile)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((unsigned long long), p0)
        LOAD_VAL((const char *), p1)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Result, X->isBlacklistedFile(p0, p1))
        LOAD_VAL((const char *), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isBlacklistedFile(p0, p1, p2))
      };
      break;
    }
    case currefl::isBlacklistedLocation: {
      ASSERT_TRAIT_IS_REFLPROP(isBlacklistedLocation)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((unsigned long long), p0)
        LOAD_VAL((class clang::SourceLocation), p1)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Result, X->isBlacklistedLocation(p0, p1))
        LOAD_VAL((const char *), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isBlacklistedLocation(p0, p1, p2))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__TargetCXXABI: {
# define CLASSNAME (clang::TargetCXXABI)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_MAYBEPTR(1, CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__TargetCXXABI;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getKind, Result, X->getKind() )
    case_REFLPROP_0ARGS( isItaniumFamily, Result, X->isItaniumFamily() )
    case_REFLPROP_0ARGS( isMicrosoft, Result, X->isMicrosoft() )
    case_REFLPROP_0ARGS( areMemberFunctionsAligned, Result, X->areMemberFunctionsAligned() )
    case_REFLPROP_0ARGS( areArgsDestroyedLeftToRightInCallee, Result, X->areArgsDestroyedLeftToRightInCallee() )
    case_REFLPROP_0ARGS( hasConstructorVariants, Result, X->hasConstructorVariants() )
    case_REFLPROP_0ARGS( hasPrimaryVBases, Result, X->hasPrimaryVBases() )
    case_REFLPROP_0ARGS( hasKeyFunctions, Result, X->hasKeyFunctions() )
    case_REFLPROP_0ARGS( canKeyFunctionBeInline, Result, X->canKeyFunctionBeInline() )
    case_REFLPROP_0ARGS( getTailPaddingUseRules, Result, X->getTailPaddingUseRules() )
    case currefl::operator_eq_eq: {
      ASSERT_TRAIT_IS_REFLPROP(operator_eq_eq)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL((const class clang::TargetCXXABI &), p0 )
        LOAD_VAL((const class clang::TargetCXXABI &), p1 )
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, p0 == p1)
      };
      break;
    }
    case currefl::operator_not_eq: {
      ASSERT_TRAIT_IS_REFLPROP(operator_not_eq)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL((const class clang::TargetCXXABI &), p0 )
        LOAD_VAL((const class clang::TargetCXXABI &), p1 )
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, p0 != p1)
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__OpenCLOptions: {
# define CLASSNAME (clang::OpenCLOptions)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_MAYBEPTR(1, CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__OpenCLOptions;
  switch( (currefl::memnames)MemNum ) {
    case currefl::isKnown: {
      ASSERT_TRAIT_IS_REFLPROP(isKnown)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const char *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isKnown(p0))
      };
      break;
    }
    case currefl::isEnabled: {
      ASSERT_TRAIT_IS_REFLPROP(isEnabled)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const char *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isEnabled(p0))
      };
      break;
    }
    case currefl::isSupported: {
      ASSERT_TRAIT_IS_REFLPROP(isSupported)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const char *), p0)
        LOAD_VAL((unsigned int), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isSupported(p0, p1))
      };
      break;
    }
    case currefl::isSupportedCore: {
      ASSERT_TRAIT_IS_REFLPROP(isSupportedCore)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const char *), p0)
        LOAD_VAL((unsigned int), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isSupportedCore(p0, p1))
      };
      break;
    }
    case currefl::isSupportedExtension: {
      ASSERT_TRAIT_IS_REFLPROP(isSupportedExtension)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const char *), p0)
        LOAD_VAL((unsigned int), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isSupportedExtension(p0, p1))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__TargetOptions: {
# define CLASSNAME (clang::TargetOptions)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__TargetOptions;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS(EABIVersion, Result, X->EABIVersion)
    case_REFLPROP_0ARGS(SupportedOpenCLOptions, Type, X->SupportedOpenCLOptions)
    case_REFLPROP_0ARGS(ForceEnableInt128, Result, X->ForceEnableInt128)
    case_REFLPROP_0ARGS(NVPTXUseShortPointers, Result, X->NVPTXUseShortPointers)
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_llvm__Type: {
# define CLASSNAME (llvm::Type)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::llvm__Type;
  switch( (currefl::memnames)MemNum ) {
    case currefl::print: {
      ASSERT_TRAIT_IS_REFLPROP(print)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::raw_ostream &), p0)
        IF_NO_MORE  VOID_REFLECTION(X->print((class llvm::raw_ostream &)p0))
        LOAD_VAL((bool), p1)
        IF_NO_MORE  VOID_REFLECTION(X->print((class llvm::raw_ostream &)p0, (bool)p1))
        LOAD_VAL((bool), p2)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->print((class llvm::raw_ostream &)p0, (bool)p1, (bool)p2))
      };
      break;
    }
    case currefl::dump: {
      ASSERT_TRAIT_IS_REFLPROP(dump)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        ASSERT_NO_MORE  VOID_REFLECTION(X->dump())
      };
      break;
    }
    case_REFLPROP_0ARGS( getTypeID, Result, X->getTypeID() )
    case_REFLPROP_0ARGS( isVoidTy, Result, X->isVoidTy() )
    case_REFLPROP_0ARGS( isHalfTy, Result, X->isHalfTy() )
    case_REFLPROP_0ARGS( isFloatTy, Result, X->isFloatTy() )
    case_REFLPROP_0ARGS( isDoubleTy, Result, X->isDoubleTy() )
    case_REFLPROP_0ARGS( isX86_FP80Ty, Result, X->isX86_FP80Ty() )
    case_REFLPROP_0ARGS( isFP128Ty, Result, X->isFP128Ty() )
    case_REFLPROP_0ARGS( isPPC_FP128Ty, Result, X->isPPC_FP128Ty() )
    case_REFLPROP_0ARGS( isFloatingPointTy, Result, X->isFloatingPointTy() )
    case_REFLPROP_0ARGS( isX86_MMXTy, Result, X->isX86_MMXTy() )
    case_REFLPROP_0ARGS( isFPOrFPVectorTy, Result, X->isFPOrFPVectorTy() )
    case_REFLPROP_0ARGS( isLabelTy, Result, X->isLabelTy() )
    case_REFLPROP_0ARGS( isMetadataTy, Result, X->isMetadataTy() )
    case_REFLPROP_0ARGS( isTokenTy, Result, X->isTokenTy() )
    case_REFLPROP_0ARGS( isIntegerTy, Result, X->isIntegerTy() )
    case currefl::isIntegerTy1: {
      ASSERT_TRAIT_IS_REFLPROP(isIntegerTy1)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isIntegerTy(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( isIntOrIntVectorTy, Result, X->isIntOrIntVectorTy() )
    case currefl::isIntOrIntVectorTy1: {
      ASSERT_TRAIT_IS_REFLPROP(isIntOrIntVectorTy1)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isIntOrIntVectorTy(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( isIntOrPtrTy, Result, X->isIntOrPtrTy() )
    case_REFLPROP_0ARGS( isFunctionTy, Result, X->isFunctionTy() )
    case_REFLPROP_0ARGS( isStructTy, Result, X->isStructTy() )
    case_REFLPROP_0ARGS( isArrayTy, Result, X->isArrayTy() )
    case_REFLPROP_0ARGS( isPointerTy, Result, X->isPointerTy() )
    case_REFLPROP_0ARGS( isPtrOrPtrVectorTy, Result, X->isPtrOrPtrVectorTy() )
    case_REFLPROP_0ARGS( isVectorTy, Result, X->isVectorTy() )
    case currefl::canLosslesslyBitCastTo: {
      ASSERT_TRAIT_IS_REFLPROP(canLosslesslyBitCastTo)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::Type *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->canLosslesslyBitCastTo(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( isEmptyTy, Result, X->isEmptyTy() )
    case_REFLPROP_0ARGS( isFirstClassType, Result, X->isFirstClassType() )
    case_REFLPROP_0ARGS( isSingleValueType, Result, X->isSingleValueType() )
    case_REFLPROP_0ARGS( isAggregateType, Result, X->isAggregateType() )
    case_REFLPROP_0ARGS( getPrimitiveSizeInBits, Result, X->getPrimitiveSizeInBits() )
    case_REFLPROP_0ARGS( getScalarSizeInBits, Result, X->getScalarSizeInBits() )
    case_REFLPROP_0ARGS( getFPMantissaWidth, Result, X->getFPMantissaWidth() )
    case_REFLPROP_0ARGS( getScalarType, Type, X->getScalarType() )
    case currefl::subtypes: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->subtypes())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->subtypes())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::subtypes))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case currefl::getContainedType: {
      ASSERT_TRAIT_IS_REFLPROP(getContainedType)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getContainedType(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getNumContainedTypes, Result, X->getNumContainedTypes() )
    case_REFLPROP_0ARGS( getIntegerBitWidth, Result, X->getIntegerBitWidth() )
    case currefl::getFunctionParamType: {
      ASSERT_TRAIT_IS_REFLPROP(getFunctionParamType)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getFunctionParamType(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getFunctionNumParams, Result, X->getFunctionNumParams() )
    case_REFLPROP_0ARGS( isFunctionVarArg, Result, X->isFunctionVarArg() )
    case_REFLPROP_0ARGS( getStructName, Str, X->getStructName() )
    case_REFLPROP_0ARGS( getStructNumElements, Result, X->getStructNumElements() )
    case currefl::getStructElementType: {
      ASSERT_TRAIT_IS_REFLPROP(getStructElementType)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getStructElementType(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getSequentialElementType, Type, X->getSequentialElementType() )
    case_REFLPROP_0ARGS( getArrayNumElements, Result, X->getArrayNumElements() )
    case_REFLPROP_0ARGS( getArrayElementType, Type, X->getArrayElementType() )
    case_REFLPROP_0ARGS( getVectorNumElements, Result, X->getVectorNumElements() )
    case_REFLPROP_0ARGS( getVectorElementType, Type, X->getVectorElementType() )
    case_REFLPROP_0ARGS( getPointerElementType, Type, X->getPointerElementType() )
    case_REFLPROP_0ARGS( getPointerAddressSpace, Result, X->getPointerAddressSpace() )
    case currefl::getPointerTo: {
      ASSERT_TRAIT_IS_REFLPROP(getPointerTo)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Type, X->getPointerTo())
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getPointerTo(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_llvm__IntegerType: {
# define CLASSNAME (llvm::IntegerType)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::llvm__IntegerType;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getBitWidth, Result, X->getBitWidth() )
    case_REFLPROP_0ARGS( getBitMask, Result, X->getBitMask() )
    case_REFLPROP_0ARGS( getSignBit, Result, X->getSignBit() )
    case_REFLPROP_0ARGS( isPowerOf2ByteWidth, Result, X->isPowerOf2ByteWidth() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class llvm::Type *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_llvm__CompositeType: {
# define CLASSNAME (llvm::CompositeType)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::llvm__CompositeType;
  switch( (currefl::memnames)MemNum ) {
    case currefl::getTypeAtIndex: {
      ASSERT_TRAIT_IS_REFLPROP(getTypeAtIndex)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getTypeAtIndex(p0))
      };
      break;
    }
    case currefl::indexValid: {
      ASSERT_TRAIT_IS_REFLPROP(indexValid)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->indexValid(p0))
      };
      break;
    }
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class llvm::Type *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_llvm__StructType: {
# define CLASSNAME (llvm::StructType)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::llvm__StructType;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( isPacked, Result, X->isPacked() )
    case_REFLPROP_0ARGS( isLiteral, Result, X->isLiteral() )
    case_REFLPROP_0ARGS( isOpaque, Result, X->isOpaque() )
    case_REFLPROP_0ARGS( hasName, Result, X->hasName() )
    case_REFLPROP_0ARGS( getName, Str, X->getName() )
    case currefl::isValidElementType: {
      ASSERT_TRAIT_IS_REFLPROP(isValidElementType)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::Type *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isValidElementType(p0))
      };
      break;
    }
    case currefl::elements: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->elements())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->elements())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::elements))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case currefl::isLayoutIdentical: {
      ASSERT_TRAIT_IS_REFLPROP(isLayoutIdentical)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::StructType *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isLayoutIdentical(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getNumElements, Result, X->getNumElements() )
    case currefl::getElementType: {
      ASSERT_TRAIT_IS_REFLPROP(getElementType)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getElementType(p0))
      };
      break;
    }
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class llvm::Type *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_llvm__PointerType: {
# define CLASSNAME (llvm::PointerType)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::llvm__PointerType;
  switch( (currefl::memnames)MemNum ) {
    case currefl::get: {
      ASSERT_TRAIT_IS_REFLPROP(get)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class llvm::Type *), p0)
        LOAD_VAL((unsigned int), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->get(p0, p1))
      };
      break;
    }
    case currefl::getUnqual: {
      ASSERT_TRAIT_IS_REFLPROP(getUnqual)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class llvm::Type *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getUnqual(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getElementType, Type, X->getElementType() )
    case currefl::isValidElementType: {
      ASSERT_TRAIT_IS_REFLPROP(isValidElementType)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::Type *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isValidElementType(p0))
      };
      break;
    }
    case currefl::isLoadableOrStorableType: {
      ASSERT_TRAIT_IS_REFLPROP(isLoadableOrStorableType)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::Type *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isLoadableOrStorableType(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getAddressSpace, Result, X->getAddressSpace() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class llvm::Type *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_llvm__DataLayout: {
# define CLASSNAME (llvm::DataLayout)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::llvm__DataLayout;
  switch( (currefl::memnames)MemNum ) {
    case currefl::operator_eq_eq: {
      ASSERT_TRAIT_IS_REFLPROP(operator_eq_eq)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class llvm::DataLayout &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->operator==(p0))
      };
      break;
    }
    case currefl::operator_not_eq: {
      ASSERT_TRAIT_IS_REFLPROP(operator_not_eq)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class llvm::DataLayout &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->operator!=(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( isLittleEndian, Result, X->isLittleEndian() )
    case_REFLPROP_0ARGS( isBigEndian, Result, X->isBigEndian() )
    case_REFLPROP_0ARGS( isDefault, Result, X->isDefault() )
    case currefl::isLegalInteger: {
      ASSERT_TRAIT_IS_REFLPROP(isLegalInteger)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((unsigned long long), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isLegalInteger(p0))
      };
      break;
    }
    case currefl::isIllegalInteger: {
      ASSERT_TRAIT_IS_REFLPROP(isIllegalInteger)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((unsigned long long), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isIllegalInteger(p0))
      };
      break;
    }
    case currefl::exceedsNaturalStackAlignment: {
      ASSERT_TRAIT_IS_REFLPROP(exceedsNaturalStackAlignment)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->exceedsNaturalStackAlignment(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getStackAlignment, Result, X->getStackAlignment() )
    case_REFLPROP_0ARGS( getAllocaAddrSpace, Result, X->getAllocaAddrSpace() )
    case_REFLPROP_0ARGS( getProgramAddressSpace, Result, X->getProgramAddressSpace() )
    case_REFLPROP_0ARGS( hasMicrosoftFastStdCallMangling, Result, X->hasMicrosoftFastStdCallMangling() )
    case_REFLPROP_0ARGS( doNotMangleLeadingQuestionMark, Result, X->doNotMangleLeadingQuestionMark() )
    case_REFLPROP_0ARGS( hasLinkerPrivateGlobalPrefix, Result, X->hasLinkerPrivateGlobalPrefix() )
    case_REFLPROP_0ARGS( getLinkerPrivateGlobalPrefix, Str, X->getLinkerPrivateGlobalPrefix() )
    case_REFLPROP_0ARGS( getGlobalPrefix, Result, X->getGlobalPrefix() )
    case_REFLPROP_0ARGS( getPrivateGlobalPrefix, Str, X->getPrivateGlobalPrefix() )
    case currefl::getManglingComponent: {
      ASSERT_TRAIT_IS_REFLPROP(getManglingComponent)
      SET_PRIM_TYPE(const char *)
      SET_CALLBACK(Str) {
        LOAD_VAL_X(Str)
        LOAD_VAL((const class llvm::Triple &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Str, X->getManglingComponent(p0))
      };
      break;
    }
    case currefl::fitsInLegalInteger: {
      ASSERT_TRAIT_IS_REFLPROP(fitsInLegalInteger)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->fitsInLegalInteger(p0))
      };
      break;
    }
    case currefl::getPointerABIAlignment: {
      ASSERT_TRAIT_IS_REFLPROP(getPointerABIAlignment)
      SET_PRIM_TYPE(unsigned int)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getPointerABIAlignment(p0))
      };
      break;
    }
    case currefl::getPointerPrefAlignment: {
      ASSERT_TRAIT_IS_REFLPROP(getPointerPrefAlignment)
      SET_PRIM_TYPE(unsigned int)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Result, X->getPointerPrefAlignment())
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getPointerPrefAlignment(p0))
      };
      break;
    }
    case currefl::getPointerSize: {
      ASSERT_TRAIT_IS_REFLPROP(getPointerSize)
      SET_PRIM_TYPE(unsigned int)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Result, X->getPointerSize())
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getPointerSize(p0))
      };
      break;
    }
    case currefl::getIndexSize: {
      ASSERT_TRAIT_IS_REFLPROP(getIndexSize)
      SET_PRIM_TYPE(unsigned int)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getIndexSize(p0))
      };
      break;
    }
    case currefl::getNonIntegralAddressSpaces: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_PRIM_TYPE(std::remove_reference<decltype(
            *X->getNonIntegralAddressSpaces().begin() )>::type)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Result, X->getNonIntegralAddressSpaces())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->getNonIntegralAddressSpaces())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::getNonIntegralAddressSpaces))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case currefl::isNonIntegralPointerType: {
      ASSERT_TRAIT_IS_REFLPROP(isNonIntegralPointerType)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::PointerType *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isNonIntegralPointerType(p0))
      };
      break;
    }
    case currefl::isNonIntegralPointerType1: {
      ASSERT_TRAIT_IS_REFLPROP(isNonIntegralPointerType1)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::Type *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isNonIntegralPointerType(p0))
      };
      break;
    }
    case currefl::getPointerSizeInBits: {
      ASSERT_TRAIT_IS_REFLPROP(getPointerSizeInBits)
      SET_PRIM_TYPE(unsigned int)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Result, X->getPointerSizeInBits())
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getPointerSizeInBits(p0))
      };
      break;
    }
    case currefl::getIndexSizeInBits: {
      ASSERT_TRAIT_IS_REFLPROP(getIndexSizeInBits)
      SET_PRIM_TYPE(unsigned int)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getIndexSizeInBits(p0))
      };
      break;
    }
    case currefl::getPointerTypeSizeInBits: {
      ASSERT_TRAIT_IS_REFLPROP(getPointerTypeSizeInBits)
      SET_PRIM_TYPE(unsigned int)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::Type *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getPointerTypeSizeInBits(p0))
      };
      break;
    }
    case currefl::getIndexTypeSizeInBits: {
      ASSERT_TRAIT_IS_REFLPROP(getIndexTypeSizeInBits)
      SET_PRIM_TYPE(unsigned int)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::Type *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getIndexTypeSizeInBits(p0))
      };
      break;
    }
    case currefl::getPointerTypeSize: {
      ASSERT_TRAIT_IS_REFLPROP(getPointerTypeSize)
      SET_PRIM_TYPE(unsigned int)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::Type *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getPointerTypeSize(p0))
      };
      break;
    }
    case currefl::getTypeSizeInBits: {
      ASSERT_TRAIT_IS_REFLPROP(getTypeSizeInBits)
      SET_PRIM_TYPE(unsigned long long)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::Type *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getTypeSizeInBits(p0))
      };
      break;
    }
    case currefl::getTypeStoreSize: {
      ASSERT_TRAIT_IS_REFLPROP(getTypeStoreSize)
      SET_PRIM_TYPE(unsigned long long)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::Type *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getTypeStoreSize(p0))
      };
      break;
    }
    case currefl::getTypeStoreSizeInBits: {
      ASSERT_TRAIT_IS_REFLPROP(getTypeStoreSizeInBits)
      SET_PRIM_TYPE(unsigned long long)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::Type *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getTypeStoreSizeInBits(p0))
      };
      break;
    }
    case currefl::getTypeAllocSize: {
      ASSERT_TRAIT_IS_REFLPROP(getTypeAllocSize)
      SET_PRIM_TYPE(unsigned long long)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::Type *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getTypeAllocSize(p0))
      };
      break;
    }
    case currefl::getTypeAllocSizeInBits: {
      ASSERT_TRAIT_IS_REFLPROP(getTypeAllocSizeInBits)
      SET_PRIM_TYPE(unsigned long long)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::Type *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getTypeAllocSizeInBits(p0))
      };
      break;
    }
    case currefl::getABITypeAlignment: {
      ASSERT_TRAIT_IS_REFLPROP(getABITypeAlignment)
      SET_PRIM_TYPE(unsigned int)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::Type *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getABITypeAlignment(p0))
      };
      break;
    }
    case currefl::getABIIntegerTypeAlignment: {
      ASSERT_TRAIT_IS_REFLPROP(getABIIntegerTypeAlignment)
      SET_PRIM_TYPE(unsigned int)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getABIIntegerTypeAlignment(p0))
      };
      break;
    }
    case currefl::getPrefTypeAlignment: {
      ASSERT_TRAIT_IS_REFLPROP(getPrefTypeAlignment)
      SET_PRIM_TYPE(unsigned int)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::Type *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getPrefTypeAlignment(p0))
      };
      break;
    }
    case currefl::getPreferredTypeAlignmentShift: {
      ASSERT_TRAIT_IS_REFLPROP(getPreferredTypeAlignmentShift)
      SET_PRIM_TYPE(unsigned int)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::Type *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getPreferredTypeAlignmentShift(p0))
      };
      break;
    }
    case currefl::getIntPtrType: {
      ASSERT_TRAIT_IS_REFLPROP(getIntPtrType)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class llvm::Type *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getIntPtrType(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getLargestLegalIntTypeSizeInBits, Result, X->getLargestLegalIntTypeSizeInBits() )
    case currefl::getIndexType: {
      ASSERT_TRAIT_IS_REFLPROP(getIndexType)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class llvm::Type *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getIndexType(p0))
      };
      break;
    }
    case currefl::getStructLayout: {
      ASSERT_TRAIT_IS_REFLPROP(getStructLayout)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class llvm::StructType *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getStructLayout(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_llvm__StructLayout: {
# define CLASSNAME (llvm::StructLayout)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::llvm__StructLayout;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getSizeInBytes, Result, X->getSizeInBytes() )
    case_REFLPROP_0ARGS( getSizeInBits, Result, X->getSizeInBits() )
    case_REFLPROP_0ARGS( getAlignment, Result, X->getAlignment() )
    case_REFLPROP_0ARGS( hasPadding, Result, X->hasPadding() )
    case currefl::getElementContainingOffset: {
      ASSERT_TRAIT_IS_REFLPROP(getElementContainingOffset)
      SET_PRIM_TYPE(unsigned int)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((unsigned long long), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getElementContainingOffset(p0))
      };
      break;
    }
    case currefl::getElementOffset: {
      ASSERT_TRAIT_IS_REFLPROP(getElementOffset)
      SET_PRIM_TYPE(unsigned long long)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getElementOffset(p0))
      };
      break;
    }
    case currefl::getElementOffsetInBits: {
      ASSERT_TRAIT_IS_REFLPROP(getElementOffsetInBits)
      SET_PRIM_TYPE(unsigned long long)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getElementOffsetInBits(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__TargetInfo: {
# define CLASSNAME (clang::TargetInfo)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__TargetInfo;
  switch( (currefl::memnames)MemNum ) {
    case currefl::Retain: {
      ASSERT_TRAIT_IS_REFLPROP(Retain)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        ASSERT_NO_MORE  VOID_REFLECTION(X->Retain())
      };
      break;
    }
    case currefl::Release: {
      ASSERT_TRAIT_IS_REFLPROP(Release)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        ASSERT_NO_MORE  VOID_REFLECTION(X->Release())
      };
      break;
    }
    case_REFLPROP_0ARGS( getTargetOpts, Type, X->getTargetOpts() )
    case_REFLPROP_0ARGS( getSizeType, Result, X->getSizeType() )
    case_REFLPROP_0ARGS( getSignedSizeType, Result, X->getSignedSizeType() )
    case_REFLPROP_0ARGS( getIntMaxType, Result, X->getIntMaxType() )
    case_REFLPROP_0ARGS( getUIntMaxType, Result, X->getUIntMaxType() )
    case currefl::getPtrDiffType: {
      ASSERT_TRAIT_IS_REFLPROP(getPtrDiffType)
      SET_PRIM_TYPE(enum clang::TargetInfo::IntType)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getPtrDiffType(p0))
      };
      break;
    }
    case currefl::getUnsignedPtrDiffType: {
      ASSERT_TRAIT_IS_REFLPROP(getUnsignedPtrDiffType)
      SET_PRIM_TYPE(enum clang::TargetInfo::IntType)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getUnsignedPtrDiffType(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getIntPtrType, Result, X->getIntPtrType() )
    case_REFLPROP_0ARGS( getUIntPtrType, Result, X->getUIntPtrType() )
    case_REFLPROP_0ARGS( getWCharType, Result, X->getWCharType() )
    case_REFLPROP_0ARGS( getWIntType, Result, X->getWIntType() )
    case_REFLPROP_0ARGS( getChar16Type, Result, X->getChar16Type() )
    case_REFLPROP_0ARGS( getChar32Type, Result, X->getChar32Type() )
    case_REFLPROP_0ARGS( getInt64Type, Result, X->getInt64Type() )
    case_REFLPROP_0ARGS( getUInt64Type, Result, X->getUInt64Type() )
    case_REFLPROP_0ARGS( getSigAtomicType, Result, X->getSigAtomicType() )
    case_REFLPROP_0ARGS( getProcessIDType, Result, X->getProcessIDType() )
    case currefl::getCorrespondingUnsignedType: {
      ASSERT_TRAIT_IS_REFLPROP(getCorrespondingUnsignedType)
      SET_PRIM_TYPE(enum clang::TargetInfo::IntType)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::TargetInfo::IntType), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getCorrespondingUnsignedType(p0))
      };
      break;
    }
    case currefl::getTypeWidth: {
      ASSERT_TRAIT_IS_REFLPROP(getTypeWidth)
      SET_PRIM_TYPE(unsigned int)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::TargetInfo::IntType), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getTypeWidth(p0))
      };
      break;
    }
    case currefl::getIntTypeByWidth: {
      ASSERT_TRAIT_IS_REFLPROP(getIntTypeByWidth)
      SET_PRIM_TYPE(enum clang::TargetInfo::IntType)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((unsigned int), p0)
        LOAD_VAL((bool), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getIntTypeByWidth(p0, p1))
      };
      break;
    }
    case currefl::getLeastIntTypeByWidth: {
      ASSERT_TRAIT_IS_REFLPROP(getLeastIntTypeByWidth)
      SET_PRIM_TYPE(enum clang::TargetInfo::IntType)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((unsigned int), p0)
        LOAD_VAL((bool), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getLeastIntTypeByWidth(p0, p1))
      };
      break;
    }
    case currefl::getRealTypeByWidth: {
      ASSERT_TRAIT_IS_REFLPROP(getRealTypeByWidth)
      SET_PRIM_TYPE(enum clang::TargetInfo::RealType)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getRealTypeByWidth(p0))
      };
      break;
    }
    case currefl::getTypeAlign: {
      ASSERT_TRAIT_IS_REFLPROP(getTypeAlign)
      SET_PRIM_TYPE(unsigned int)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::TargetInfo::IntType), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getTypeAlign(p0))
      };
      break;
    }
    case currefl::isTypeSigned: {
      ASSERT_TRAIT_IS_REFLPROP(isTypeSigned)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::TargetInfo::IntType), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isTypeSigned(p0))
      };
      break;
    }
    case currefl::getPointerWidth: {
      ASSERT_TRAIT_IS_REFLPROP(getPointerWidth)
      SET_PRIM_TYPE(unsigned long long)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getPointerWidth(p0))
      };
      break;
    }
    case currefl::getPointerAlign: {
      ASSERT_TRAIT_IS_REFLPROP(getPointerAlign)
      SET_PRIM_TYPE(unsigned long long)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getPointerAlign(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getMaxPointerWidth, Result, X->getMaxPointerWidth() )
    case currefl::getNullPointerValue: {
      ASSERT_TRAIT_IS_REFLPROP(getNullPointerValue)
      SET_PRIM_TYPE(unsigned long long)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::LangAS), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getNullPointerValue(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getBoolWidth, Result, X->getBoolWidth() )
    case_REFLPROP_0ARGS( getBoolAlign, Result, X->getBoolAlign() )
    case_REFLPROP_0ARGS( getCharWidth, Result, X->getCharWidth() )
    case_REFLPROP_0ARGS( getCharAlign, Result, X->getCharAlign() )
    case_REFLPROP_0ARGS( getShortWidth, Result, X->getShortWidth() )
    case_REFLPROP_0ARGS( getShortAlign, Result, X->getShortAlign() )
    case_REFLPROP_0ARGS( getIntWidth, Result, X->getIntWidth() )
    case_REFLPROP_0ARGS( getIntAlign, Result, X->getIntAlign() )
    case_REFLPROP_0ARGS( getLongWidth, Result, X->getLongWidth() )
    case_REFLPROP_0ARGS( getLongAlign, Result, X->getLongAlign() )
    case_REFLPROP_0ARGS( getLongLongWidth, Result, X->getLongLongWidth() )
    case_REFLPROP_0ARGS( getLongLongAlign, Result, X->getLongLongAlign() )
    case_REFLPROP_0ARGS( getShortAccumWidth, Result, X->getShortAccumWidth() )
    case_REFLPROP_0ARGS( getShortAccumAlign, Result, X->getShortAccumAlign() )
    case_REFLPROP_0ARGS( getAccumWidth, Result, X->getAccumWidth() )
    case_REFLPROP_0ARGS( getAccumAlign, Result, X->getAccumAlign() )
    case_REFLPROP_0ARGS( getLongAccumWidth, Result, X->getLongAccumWidth() )
    case_REFLPROP_0ARGS( getLongAccumAlign, Result, X->getLongAccumAlign() )
    case_REFLPROP_0ARGS( getShortFractWidth, Result, X->getShortFractWidth() )
    case_REFLPROP_0ARGS( getShortFractAlign, Result, X->getShortFractAlign() )
    case_REFLPROP_0ARGS( getFractWidth, Result, X->getFractWidth() )
    case_REFLPROP_0ARGS( getFractAlign, Result, X->getFractAlign() )
    case_REFLPROP_0ARGS( getLongFractWidth, Result, X->getLongFractWidth() )
    case_REFLPROP_0ARGS( getLongFractAlign, Result, X->getLongFractAlign() )
    case_REFLPROP_0ARGS( getShortAccumScale, Result, X->getShortAccumScale() )
    case_REFLPROP_0ARGS( getShortAccumIBits, Result, X->getShortAccumIBits() )
    case_REFLPROP_0ARGS( getAccumScale, Result, X->getAccumScale() )
    case_REFLPROP_0ARGS( getAccumIBits, Result, X->getAccumIBits() )
    case_REFLPROP_0ARGS( getLongAccumScale, Result, X->getLongAccumScale() )
    case_REFLPROP_0ARGS( getLongAccumIBits, Result, X->getLongAccumIBits() )
    case_REFLPROP_0ARGS( getUnsignedShortAccumScale, Result, X->getUnsignedShortAccumScale() )
    case_REFLPROP_0ARGS( getUnsignedShortAccumIBits, Result, X->getUnsignedShortAccumIBits() )
    case_REFLPROP_0ARGS( getUnsignedAccumScale, Result, X->getUnsignedAccumScale() )
    case_REFLPROP_0ARGS( getUnsignedAccumIBits, Result, X->getUnsignedAccumIBits() )
    case_REFLPROP_0ARGS( getUnsignedLongAccumScale, Result, X->getUnsignedLongAccumScale() )
    case_REFLPROP_0ARGS( getUnsignedLongAccumIBits, Result, X->getUnsignedLongAccumIBits() )
    case_REFLPROP_0ARGS( getShortFractScale, Result, X->getShortFractScale() )
    case_REFLPROP_0ARGS( getFractScale, Result, X->getFractScale() )
    case_REFLPROP_0ARGS( getLongFractScale, Result, X->getLongFractScale() )
    case_REFLPROP_0ARGS( getUnsignedShortFractScale, Result, X->getUnsignedShortFractScale() )
    case_REFLPROP_0ARGS( getUnsignedFractScale, Result, X->getUnsignedFractScale() )
    case_REFLPROP_0ARGS( getUnsignedLongFractScale, Result, X->getUnsignedLongFractScale() )
    case_REFLPROP_0ARGS( hasInt128Type, Result, X->hasInt128Type() )
    case_REFLPROP_0ARGS( hasLegalHalfType, Result, X->hasLegalHalfType() )
    case_REFLPROP_0ARGS( hasFloat128Type, Result, X->hasFloat128Type() )
    case_REFLPROP_0ARGS( getSuitableAlign, Result, X->getSuitableAlign() )
    case_REFLPROP_0ARGS( getDefaultAlignForAttributeAligned, Result, X->getDefaultAlignForAttributeAligned() )
    case_REFLPROP_0ARGS( getMinGlobalAlign, Result, X->getMinGlobalAlign() )
    case_REFLPROP_0ARGS( getNewAlign, Result, X->getNewAlign() )
    case_REFLPROP_0ARGS( getWCharWidth, Result, X->getWCharWidth() )
    case_REFLPROP_0ARGS( getWCharAlign, Result, X->getWCharAlign() )
    case_REFLPROP_0ARGS( getChar16Width, Result, X->getChar16Width() )
    case_REFLPROP_0ARGS( getChar16Align, Result, X->getChar16Align() )
    case_REFLPROP_0ARGS( getChar32Width, Result, X->getChar32Width() )
    case_REFLPROP_0ARGS( getChar32Align, Result, X->getChar32Align() )
    case_REFLPROP_0ARGS( getHalfWidth, Result, X->getHalfWidth() )
    case_REFLPROP_0ARGS( getHalfAlign, Result, X->getHalfAlign() )
    case_REFLPROP_0ARGS( getFloatWidth, Result, X->getFloatWidth() )
    case_REFLPROP_0ARGS( getFloatAlign, Result, X->getFloatAlign() )
    case_REFLPROP_0ARGS( getDoubleWidth, Result, X->getDoubleWidth() )
    case_REFLPROP_0ARGS( getDoubleAlign, Result, X->getDoubleAlign() )
    case_REFLPROP_0ARGS( getLongDoubleWidth, Result, X->getLongDoubleWidth() )
    case_REFLPROP_0ARGS( getLongDoubleAlign, Result, X->getLongDoubleAlign() )
    case_REFLPROP_0ARGS( getFloat128Width, Result, X->getFloat128Width() )
    case_REFLPROP_0ARGS( getFloat128Align, Result, X->getFloat128Align() )
    case_REFLPROP_0ARGS( useFloat128ManglingForLongDouble, Result, X->useFloat128ManglingForLongDouble() )
    case_REFLPROP_0ARGS( getFloatEvalMethod, Result, X->getFloatEvalMethod() )
    case_REFLPROP_0ARGS( getLargeArrayMinWidth, Result, X->getLargeArrayMinWidth() )
    case_REFLPROP_0ARGS( getLargeArrayAlign, Result, X->getLargeArrayAlign() )
    case_REFLPROP_0ARGS( getMaxAtomicPromoteWidth, Result, X->getMaxAtomicPromoteWidth() )
    case_REFLPROP_0ARGS( getMaxAtomicInlineWidth, Result, X->getMaxAtomicInlineWidth() )
    case currefl::hasBuiltinAtomic: {
      ASSERT_TRAIT_IS_REFLPROP(hasBuiltinAtomic)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((unsigned long long), p0)
        LOAD_VAL((unsigned long long), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->hasBuiltinAtomic(p0, p1))
      };
      break;
    }
    case_REFLPROP_0ARGS( getMaxVectorAlign, Result, X->getMaxVectorAlign() )
    case_REFLPROP_0ARGS( getSimdDefaultAlign, Result, X->getSimdDefaultAlign() )
    case_REFLPROP_0ARGS( getIntMaxTWidth, Result, X->getIntMaxTWidth() )
    case_REFLPROP_0ARGS( getUnwindWordWidth, Result, X->getUnwindWordWidth() )
    case_REFLPROP_0ARGS( getRegisterWidth, Result, X->getRegisterWidth() )
    case_REFLPROP_0ARGS( getMCountName, Str, X->getMCountName() )
    case_REFLPROP_0ARGS( useSignedCharForObjCBool, Result, X->useSignedCharForObjCBool() )
    case_REFLPROP_0ARGS( useBitFieldTypeAlignment, Result, X->useBitFieldTypeAlignment() )
    case_REFLPROP_0ARGS( useZeroLengthBitfieldAlignment, Result, X->useZeroLengthBitfieldAlignment() )
    case_REFLPROP_0ARGS( getZeroLengthBitfieldBoundary, Result, X->getZeroLengthBitfieldBoundary() )
    case_REFLPROP_0ARGS( useExplicitBitFieldAlignment, Result, X->useExplicitBitFieldAlignment() )
    case_REFLPROP_0ARGS( hasAlignMac68kSupport, Result, X->hasAlignMac68kSupport() )
    case currefl::getTypeName: {
      ASSERT_TRAIT_IS_REFLPROP(getTypeName)
      SET_PRIM_TYPE(const char *)
      SET_CALLBACK(Str) {
        LOAD_VAL_X(Str)
        LOAD_VAL((enum clang::TargetInfo::IntType), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Str, X->getTypeName(p0))
      };
      break;
    }
    case currefl::getTypeConstantSuffix: {
      ASSERT_TRAIT_IS_REFLPROP(getTypeConstantSuffix)
      SET_PRIM_TYPE(const char *)
      SET_CALLBACK(Str) {
        LOAD_VAL_X(Str)
        LOAD_VAL((enum clang::TargetInfo::IntType), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Str, X->getTypeConstantSuffix(p0))
      };
      break;
    }
    case currefl::getTypeFormatModifier: {
      ASSERT_TRAIT_IS_REFLPROP(getTypeFormatModifier)
      SET_PRIM_TYPE(const char *)
      SET_CALLBACK(Str) {
        LOAD_VAL_X(Str)
        LOAD_VAL((enum clang::TargetInfo::IntType), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Str, X->getTypeFormatModifier(p0))
      };
      break;
    }
    case currefl::useObjCFPRetForRealType: {
      ASSERT_TRAIT_IS_REFLPROP(useObjCFPRetForRealType)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::TargetInfo::RealType), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->useObjCFPRetForRealType(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( useObjCFP2RetForComplexLongDouble, Result, X->useObjCFP2RetForComplexLongDouble() )
    case_REFLPROP_0ARGS( useFP16ConversionIntrinsics, Result, X->useFP16ConversionIntrinsics() )
    case_REFLPROP_0ARGS( useAddressSpaceMapMangling, Result, X->useAddressSpaceMapMangling() )
    case_REFLPROP_0ARGS( isCLZForZeroUndef, Result, X->isCLZForZeroUndef() )
    case_REFLPROP_0ARGS( getBuiltinVaListKind, Result, X->getBuiltinVaListKind() )
    case_REFLPROP_0ARGS( hasBuiltinMSVaList, Result, X->hasBuiltinMSVaList() )
    case_REFLPROP_0ARGS( isRenderScriptTarget, Result, X->isRenderScriptTarget() )
    case currefl::isValidClobber: {
      ASSERT_TRAIT_IS_REFLPROP(isValidClobber)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const char *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isValidClobber(p0))
      };
      break;
    }
    case currefl::isValidGCCRegisterName: {
      ASSERT_TRAIT_IS_REFLPROP(isValidGCCRegisterName)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const char *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isValidGCCRegisterName(p0))
      };
      break;
    }
    case currefl::getNormalizedGCCRegisterName: {
      ASSERT_TRAIT_IS_REFLPROP(getNormalizedGCCRegisterName)
      SET_PRIM_TYPE(const char *)
      SET_CALLBACK(Str) {
        LOAD_VAL_X(Str)
        LOAD_VAL((const char *), p0)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Str, X->getNormalizedGCCRegisterName(p0))
        LOAD_VAL((bool), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Str, X->getNormalizedGCCRegisterName(p0, p1))
      };
      break;
    }
    case currefl::getConstraintRegister: {
      ASSERT_TRAIT_IS_REFLPROP(getConstraintRegister)
      SET_PRIM_TYPE(const char *)
      SET_CALLBACK(Str) {
        LOAD_VAL_X(Str)
        LOAD_VAL((const char *), p0)
        LOAD_VAL((const char *), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Str, X->getConstraintRegister(p0, p1))
      };
      break;
    }
    case currefl::validateOutputConstraint: {
      ASSERT_TRAIT_IS_REFLPROP(validateOutputConstraint)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((struct clang::TargetInfo::ConstraintInfo &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->validateOutputConstraint(p0))
      };
      break;
    }
    case currefl::validateOutputSize: {
      ASSERT_TRAIT_IS_REFLPROP(validateOutputSize)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const char *), p0)
        LOAD_VAL((unsigned int), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->validateOutputSize(p0, p1))
      };
      break;
    }
    case currefl::validateInputSize: {
      ASSERT_TRAIT_IS_REFLPROP(validateInputSize)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const char *), p0)
        LOAD_VAL((unsigned int), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->validateInputSize(p0, p1))
      };
      break;
    }
    case_REFLPROP_0ARGS( getClobbers, Str, X->getClobbers() )
    case_REFLPROP_0ARGS( isNan2008, Result, X->isNan2008() )
    case_REFLPROP_0ARGS( getTriple, Type, X->getTriple() )
    case_REFLPROP_0ARGS( getDataLayout, Type, X->getDataLayout() )
    case_REFLPROP_0ARGS( hasProtectedVisibility, Result, X->hasProtectedVisibility() )
    case currefl::isValidSectionSpecifier: {
      ASSERT_TRAIT_IS_REFLPROP(isValidSectionSpecifier)
      SET_PRIM_TYPE(const char *)
      SET_CALLBACK(Str) {
        LOAD_VAL_X(Str)
        LOAD_VAL((const char *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Str, X->isValidSectionSpecifier(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getABI, Str, X->getABI() )
    case_REFLPROP_0ARGS( getCXXABI, Type, X->getCXXABI() )
    case currefl::isValidCPUName: {
      ASSERT_TRAIT_IS_REFLPROP(isValidCPUName)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const char *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isValidCPUName(p0))
      };
      break;
    }
    case currefl::isValidFeatureName: {
      ASSERT_TRAIT_IS_REFLPROP(isValidFeatureName)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const char *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isValidFeatureName(p0))
      };
      break;
    }
    case currefl::hasFeature: {
      ASSERT_TRAIT_IS_REFLPROP(hasFeature)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const char *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->hasFeature(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( supportsMultiVersioning, Result, X->supportsMultiVersioning() )
    case currefl::validateCpuSupports: {
      ASSERT_TRAIT_IS_REFLPROP(validateCpuSupports)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const char *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->validateCpuSupports(p0))
      };
      break;
    }
    case currefl::multiVersionSortPriority: {
      ASSERT_TRAIT_IS_REFLPROP(multiVersionSortPriority)
      SET_PRIM_TYPE(unsigned int)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const char *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->multiVersionSortPriority(p0))
      };
      break;
    }
    case currefl::validateCpuIs: {
      ASSERT_TRAIT_IS_REFLPROP(validateCpuIs)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const char *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->validateCpuIs(p0))
      };
      break;
    }
    case currefl::validateCPUSpecificCPUDispatch: {
      ASSERT_TRAIT_IS_REFLPROP(validateCPUSpecificCPUDispatch)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const char *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->validateCPUSpecificCPUDispatch(p0))
      };
      break;
    }
    case currefl::CPUSpecificManglingCharacter: {
      ASSERT_TRAIT_IS_REFLPROP(CPUSpecificManglingCharacter)
      SET_PRIM_TYPE(char)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const char *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->CPUSpecificManglingCharacter(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getRegParmMax, Result, X->getRegParmMax() )
    case_REFLPROP_0ARGS( isTLSSupported, Result, X->isTLSSupported() )
    case_REFLPROP_0ARGS( getMaxTLSAlign, Result, X->getMaxTLSAlign() )
    case_REFLPROP_0ARGS( isVLASupported, Result, X->isVLASupported() )
    case_REFLPROP_0ARGS( isSEHTrySupported, Result, X->isSEHTrySupported() )
    case_REFLPROP_0ARGS( hasNoAsmVariants, Result, X->hasNoAsmVariants() )
    case currefl::getEHDataRegisterNumber: {
      ASSERT_TRAIT_IS_REFLPROP(getEHDataRegisterNumber)
      SET_PRIM_TYPE(int)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getEHDataRegisterNumber(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getStaticInitSectionSpecifier, Str, X->getStaticInitSectionSpecifier() )
    case_REFLPROP_0ARGS( getPlatformName, Str, X->getPlatformName() )
    case_REFLPROP_0ARGS( getPlatformMinVersion, Type, X->getPlatformMinVersion() )
    case_REFLPROP_0ARGS( isBigEndian, Result, X->isBigEndian() )
    case_REFLPROP_0ARGS( isLittleEndian, Result, X->isLittleEndian() )
    case currefl::getDefaultCallingConv: {
      ASSERT_TRAIT_IS_REFLPROP(getDefaultCallingConv)
      SET_PRIM_TYPE(enum clang::CallingConv)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::TargetInfo::CallingConvMethodType), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getDefaultCallingConv(p0))
      };
      break;
    }
    case currefl::checkCallingConvention: {
      ASSERT_TRAIT_IS_REFLPROP(checkCallingConvention)
      SET_PRIM_TYPE(enum clang::TargetInfo::CallingConvCheckResult)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::CallingConv), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->checkCallingConvention(p0))
      };
      break;
    }
    case currefl::getCallingConvKind: {
      ASSERT_TRAIT_IS_REFLPROP(getCallingConvKind)
      SET_PRIM_TYPE(enum clang::TargetInfo::CallingConvKind)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((bool), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getCallingConvKind(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( hasSjLjLowering, Result, X->hasSjLjLowering() )
    case currefl::checkCFProtectionBranchSupported: {
      ASSERT_TRAIT_IS_REFLPROP(checkCFProtectionBranchSupported)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::DiagnosticsEngine &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->checkCFProtectionBranchSupported(p0))
      };
      break;
    }
    case currefl::checkCFProtectionReturnSupported: {
      ASSERT_TRAIT_IS_REFLPROP(checkCFProtectionReturnSupported)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::DiagnosticsEngine &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->checkCFProtectionReturnSupported(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( allowsLargerPreferedTypeAlignment, Result, X->allowsLargerPreferedTypeAlignment() )
    case_REFLPROP_0ARGS( getSupportedOpenCLOpts, Type, X->getSupportedOpenCLOpts() )
    case currefl::getOpenCLTypeAddrSpace: {
      ASSERT_TRAIT_IS_REFLPROP(getOpenCLTypeAddrSpace)
      SET_PRIM_TYPE(enum clang::LangAS)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::TargetInfo::OpenCLTypeKind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getOpenCLTypeAddrSpace(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getVtblPtrAddressSpace, Result, X->getVtblPtrAddressSpace() )
    case currefl::validateTarget: {
      ASSERT_TRAIT_IS_REFLPROP(validateTarget)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::DiagnosticsEngine &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->validateTarget(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__TargetInfo__ConstraintInfo: {
# define CLASSNAME (clang::TargetInfo::ConstraintInfo)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__TargetInfo__ConstraintInfo;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS(Flags, Result, X->Flags)
    case_REFLPROP_0ARGS(TiedOperand, Result, X->TiedOperand)
    case_REFLPROP_0ARGS( isReadWrite, Result, X->isReadWrite() )
    case_REFLPROP_0ARGS( allowsRegister, Result, X->allowsRegister() )
    case_REFLPROP_0ARGS( allowsMemory, Result, X->allowsMemory() )
    case_REFLPROP_0ARGS( hasMatchingInput, Result, X->hasMatchingInput() )
    case_REFLPROP_0ARGS( hasTiedOperand, Result, X->hasTiedOperand() )
    case_REFLPROP_0ARGS( getTiedOperand, Result, X->getTiedOperand() )
    case_REFLPROP_0ARGS( requiresImmediateConstant, Result, X->requiresImmediateConstant() )
    case currefl::isValidAsmImmediate: {
      ASSERT_TRAIT_IS_REFLPROP(isValidAsmImmediate)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class llvm::APInt &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isValidAsmImmediate(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__XRayFunctionFilter: {
# define CLASSNAME (clang::XRayFunctionFilter)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__XRayFunctionFilter;
  switch( (currefl::memnames)MemNum ) {
    case currefl::shouldImbueFunction: {
      ASSERT_TRAIT_IS_REFLPROP(shouldImbueFunction)
      SET_PRIM_TYPE(enum clang::XRayFunctionFilter::ImbueAttribute)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const char *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->shouldImbueFunction(p0))
      };
      break;
    }
    case currefl::shouldImbueFunctionsInFile: {
      ASSERT_TRAIT_IS_REFLPROP(shouldImbueFunctionsInFile)
      SET_PRIM_TYPE(enum clang::XRayFunctionFilter::ImbueAttribute)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const char *), p0)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Result, X->shouldImbueFunctionsInFile(p0))
        LOAD_VAL((const char *), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->shouldImbueFunctionsInFile(p0, p1))
      };
      break;
    }
    case currefl::shouldImbueLocation: {
      ASSERT_TRAIT_IS_REFLPROP(shouldImbueLocation)
      SET_PRIM_TYPE(enum clang::XRayFunctionFilter::ImbueAttribute)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::SourceLocation), p0)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Result, X->shouldImbueLocation(p0))
        LOAD_VAL((const char *), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->shouldImbueLocation(p0, p1))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__TypeInfo: {
# define CLASSNAME (clang::TypeInfo)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_NEVERPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__TypeInfo;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS(Width, Result, X->Width)
    case_REFLPROP_0ARGS(Align, Result, X->Align)
    case_REFLPROP_0ARGS(AlignIsRequired, Result, X->AlignIsRequired)
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__ASTContext: {
# define CLASSNAME (clang::ASTContext)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__ASTContext;
  switch( (currefl::memnames)MemNum ) {
    case currefl::Retain: {
      ASSERT_TRAIT_IS_REFLPROP(Retain)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        ASSERT_NO_MORE  VOID_REFLECTION(X->Retain())
      };
      break;
    }
    case currefl::Release: {
      ASSERT_TRAIT_IS_REFLPROP(Release)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        ASSERT_NO_MORE  VOID_REFLECTION(X->Release())
      };
      break;
    }
    case_REFLPROP_0ARGS(Idents, Type, X->Idents)
    case_REFLPROP_0ARGS(Selectors, Type, X->Selectors)
    case_REFLPROP_0ARGS( getPrintingPolicy, Type, X->getPrintingPolicy() )
    case_REFLPROP_0ARGS( getSourceManager, Type, X->getSourceManager() )
    case currefl::Allocate: {
      ASSERT_TRAIT_IS_REFLPROP(Allocate)
      SET_PRIM_TYPE(void *)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((unsigned long), p0)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Result, X->Allocate(p0))
        LOAD_VAL((unsigned int), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->Allocate(p0, p1))
      };
      break;
    }
    case currefl::Deallocate: {
      ASSERT_TRAIT_IS_REFLPROP(Deallocate)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((void *), p0)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->Deallocate((void *)p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getASTAllocatedMemory, Result, X->getASTAllocatedMemory() )
    case_REFLPROP_0ARGS( getSideTableAllocatedMemory, Result, X->getSideTableAllocatedMemory() )
    case_REFLPROP_0ARGS( getTargetInfo, Type, X->getTargetInfo() )
    case_REFLPROP_0ARGS( getAuxTargetInfo, Type, X->getAuxTargetInfo() )
    case currefl::getIntTypeForBitwidth: {
      ASSERT_TRAIT_IS_REFLPROP(getIntTypeForBitwidth)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        LOAD_VAL((unsigned int), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getIntTypeForBitwidth(p0, p1))
      };
      break;
    }
    case currefl::getRealTypeForBitwidth: {
      ASSERT_TRAIT_IS_REFLPROP(getRealTypeForBitwidth)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getRealTypeForBitwidth(p0))
      };
      break;
    }
    case currefl::AtomicUsesUnsupportedLibcall: {
      ASSERT_TRAIT_IS_REFLPROP(AtomicUsesUnsupportedLibcall)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::AtomicExpr *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->AtomicUsesUnsupportedLibcall(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getLangOpts, Type, X->getLangOpts() )
    case_REFLPROP_0ARGS( getSanitizerBlacklist, Type, X->getSanitizerBlacklist() )
    case_REFLPROP_0ARGS( getXRayFilter, Type, X->getXRayFilter() )
    case_REFLPROP_0ARGS( getDiagnostics, Type, X->getDiagnostics() )
    case currefl::getFullLoc: {
      ASSERT_TRAIT_IS_REFLPROP(getFullLoc)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::SourceLocation), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getFullLoc(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS(CommentsLoaded, Result, X->CommentsLoaded)
    case currefl::getRawCommentForDeclNoCache: {
      ASSERT_TRAIT_IS_REFLPROP(getRawCommentForDeclNoCache)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::Decl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getRawCommentForDeclNoCache(p0))
      };
      break;
    }
    case currefl::getRawCommentForAnyRedecl: {
      ASSERT_TRAIT_IS_REFLPROP(getRawCommentForAnyRedecl)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::Decl *), p0)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Type, X->getRawCommentForAnyRedecl(p0))
        LOAD_VAL((const class clang::Decl **), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getRawCommentForAnyRedecl(p0, p1))
      };
      break;
    }
    case_REFLPROP_0ARGS( getCommentCommandTraits, Type, X->getCommentCommandTraits() )
    case currefl::overridden_methods_size: {
      ASSERT_TRAIT_IS_REFLPROP(overridden_methods_size)
      SET_PRIM_TYPE(unsigned int)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::CXXMethodDecl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->overridden_methods_size(p0))
      };
      break;
    }
    case currefl::getNextLocalImport: {
      ASSERT_TRAIT_IS_REFLPROP(getNextLocalImport)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ImportDecl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getNextLocalImport(p0))
      };
      break;
    }
    case currefl::local_imports: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->local_imports())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->local_imports())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::local_imports))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case_REFLPROP_0ARGS( getTranslationUnitDecl, Type, X->getTranslationUnitDecl() )
    case_REFLPROP_0ARGS( getExternCContextDecl, Type, X->getExternCContextDecl() )
    case_REFLPROP_0ARGS( getMakeIntegerSeqDecl, Type, X->getMakeIntegerSeqDecl() )
    case_REFLPROP_0ARGS( getTypePackElementDecl, Type, X->getTypePackElementDecl() )
    case_REFLPROP_0ARGS(AutoDeductTy, Type, X->AutoDeductTy)
    case_REFLPROP_0ARGS(AutoRRefDeductTy, Type, X->AutoRRefDeductTy)
    case_REFLPROP_0ARGS(VaListTagDecl, Type, X->VaListTagDecl)
    case_REFLPROP_0ARGS( getExternalSource, Type, X->getExternalSource() )
    case currefl::PrintStats: {
      ASSERT_TRAIT_IS_REFLPROP(PrintStats)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        ASSERT_NO_MORE  VOID_REFLECTION(X->PrintStats())
      };
      break;
    }
    case_REFLPROP_0ARGS( getInt128Decl, Type, X->getInt128Decl() )
    case_REFLPROP_0ARGS( getUInt128Decl, Type, X->getUInt128Decl() )
    case currefl::getAddrSpaceQualType: {
      ASSERT_TRAIT_IS_REFLPROP(getAddrSpaceQualType)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::QualType), p0)
        LOAD_VAL((enum clang::LangAS), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getAddrSpaceQualType(p0, p1))
      };
      break;
    }
    case currefl::removeAddrSpaceQualType: {
      ASSERT_TRAIT_IS_REFLPROP(removeAddrSpaceQualType)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::QualType), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->removeAddrSpaceQualType(p0))
      };
      break;
    }
    case currefl::getObjCGCQualType: {
      ASSERT_TRAIT_IS_REFLPROP(getObjCGCQualType)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::QualType), p0)
        LOAD_VAL((enum clang::Qualifiers::GC), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getObjCGCQualType(p0, p1))
      };
      break;
    }
    case currefl::getRestrictType: {
      ASSERT_TRAIT_IS_REFLPROP(getRestrictType)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::QualType), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getRestrictType(p0))
      };
      break;
    }
    case currefl::getVolatileType: {
      ASSERT_TRAIT_IS_REFLPROP(getVolatileType)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::QualType), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getVolatileType(p0))
      };
      break;
    }
    case currefl::getConstType: {
      ASSERT_TRAIT_IS_REFLPROP(getConstType)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::QualType), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getConstType(p0))
      };
      break;
    }
    case currefl::getComplexType: {
      ASSERT_TRAIT_IS_REFLPROP(getComplexType)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::QualType), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getComplexType(p0))
      };
      break;
    }
    case currefl::getPointerType: {
      ASSERT_TRAIT_IS_REFLPROP(getPointerType)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::QualType), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getPointerType(p0))
      };
      break;
    }
    case currefl::getAdjustedType: {
      ASSERT_TRAIT_IS_REFLPROP(getAdjustedType)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::QualType), p0)
        LOAD_VAL((class clang::QualType), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getAdjustedType(p0, p1))
      };
      break;
    }
    case currefl::getDecayedType: {
      ASSERT_TRAIT_IS_REFLPROP(getDecayedType)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::QualType), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getDecayedType(p0))
      };
      break;
    }
    case currefl::getAtomicType: {
      ASSERT_TRAIT_IS_REFLPROP(getAtomicType)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::QualType), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getAtomicType(p0))
      };
      break;
    }
    case currefl::getBlockPointerType: {
      ASSERT_TRAIT_IS_REFLPROP(getBlockPointerType)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::QualType), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getBlockPointerType(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getBlockDescriptorType, Type, X->getBlockDescriptorType() )
    case currefl::getReadPipeType: {
      ASSERT_TRAIT_IS_REFLPROP(getReadPipeType)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::QualType), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getReadPipeType(p0))
      };
      break;
    }
    case currefl::getWritePipeType: {
      ASSERT_TRAIT_IS_REFLPROP(getWritePipeType)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::QualType), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getWritePipeType(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getBlockDescriptorExtendedType, Type, X->getBlockDescriptorExtendedType() )
    case currefl::getOpenCLTypeKind: {
      ASSERT_TRAIT_IS_REFLPROP(getOpenCLTypeKind)
      SET_PRIM_TYPE(enum clang::TargetInfo::OpenCLTypeKind)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Type *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getOpenCLTypeKind(p0))
      };
      break;
    }
    case currefl::getOpenCLTypeAddrSpace: {
      ASSERT_TRAIT_IS_REFLPROP(getOpenCLTypeAddrSpace)
      SET_PRIM_TYPE(enum clang::LangAS)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Type *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getOpenCLTypeAddrSpace(p0))
      };
      break;
    }
    case currefl::getLValueReferenceType: {
      ASSERT_TRAIT_IS_REFLPROP(getLValueReferenceType)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::QualType), p0)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Type, X->getLValueReferenceType(p0))
        LOAD_VAL((bool), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getLValueReferenceType(p0, p1))
      };
      break;
    }
    case currefl::getRValueReferenceType: {
      ASSERT_TRAIT_IS_REFLPROP(getRValueReferenceType)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::QualType), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getRValueReferenceType(p0))
      };
      break;
    }
    case currefl::getMemberPointerType: {
      ASSERT_TRAIT_IS_REFLPROP(getMemberPointerType)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::QualType), p0)
        LOAD_VAL((const class clang::Type *), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getMemberPointerType(p0, p1))
      };
      break;
    }
    case currefl::getVariableArrayType: {
      ASSERT_TRAIT_IS_REFLPROP(getVariableArrayType)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::QualType), p0)
        LOAD_VAL((class clang::Expr *), p1)
        LOAD_VAL((enum clang::ArrayType::ArraySizeModifier), p2)
        LOAD_VAL((unsigned int), p3)
        LOAD_VAL((class clang::SourceRange), p4)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getVariableArrayType(p0, p1, p2, p3, p4))
      };
      break;
    }
    case currefl::getDependentSizedArrayType: {
      ASSERT_TRAIT_IS_REFLPROP(getDependentSizedArrayType)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::QualType), p0)
        LOAD_VAL((class clang::Expr *), p1)
        LOAD_VAL((enum clang::ArrayType::ArraySizeModifier), p2)
        LOAD_VAL((unsigned int), p3)
        LOAD_VAL((class clang::SourceRange), p4)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getDependentSizedArrayType(p0, p1, p2, p3, p4))
      };
      break;
    }
    case currefl::getIncompleteArrayType: {
      ASSERT_TRAIT_IS_REFLPROP(getIncompleteArrayType)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::QualType), p0)
        LOAD_VAL((enum clang::ArrayType::ArraySizeModifier), p1)
        LOAD_VAL((unsigned int), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getIncompleteArrayType(p0, p1, p2))
      };
      break;
    }
    case currefl::getConstantArrayType: {
      ASSERT_TRAIT_IS_REFLPROP(getConstantArrayType)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::QualType), p0)
        LOAD_VAL((const class llvm::APInt &), p1)
        LOAD_VAL((enum clang::ArrayType::ArraySizeModifier), p2)
        LOAD_VAL((unsigned int), p3)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getConstantArrayType(p0, p1, p2, p3))
      };
      break;
    }
    case currefl::getVariableArrayDecayedType: {
      ASSERT_TRAIT_IS_REFLPROP(getVariableArrayDecayedType)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::QualType), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getVariableArrayDecayedType(p0))
      };
      break;
    }
    case currefl::getVectorType: {
      ASSERT_TRAIT_IS_REFLPROP(getVectorType)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::QualType), p0)
        LOAD_VAL((unsigned int), p1)
        LOAD_VAL((enum clang::VectorType::VectorKind), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getVectorType(p0, p1, p2))
      };
      break;
    }
    case currefl::getDependentVectorType: {
      ASSERT_TRAIT_IS_REFLPROP(getDependentVectorType)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::QualType), p0)
        LOAD_VAL((class clang::Expr *), p1)
        LOAD_VAL((class clang::SourceLocation), p2)
        LOAD_VAL((enum clang::VectorType::VectorKind), p3)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getDependentVectorType(p0, p1, p2, p3))
      };
      break;
    }
    case currefl::getExtVectorType: {
      ASSERT_TRAIT_IS_REFLPROP(getExtVectorType)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::QualType), p0)
        LOAD_VAL((unsigned int), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getExtVectorType(p0, p1))
      };
      break;
    }
    case currefl::getDependentSizedExtVectorType: {
      ASSERT_TRAIT_IS_REFLPROP(getDependentSizedExtVectorType)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::QualType), p0)
        LOAD_VAL((class clang::Expr *), p1)
        LOAD_VAL((class clang::SourceLocation), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getDependentSizedExtVectorType(p0, p1, p2))
      };
      break;
    }
    case currefl::getDependentAddressSpaceType: {
      ASSERT_TRAIT_IS_REFLPROP(getDependentAddressSpaceType)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::QualType), p0)
        LOAD_VAL((class clang::Expr *), p1)
        LOAD_VAL((class clang::SourceLocation), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getDependentAddressSpaceType(p0, p1, p2))
      };
      break;
    }
    case currefl::getFunctionNoProtoType: {
      ASSERT_TRAIT_IS_REFLPROP(getFunctionNoProtoType)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::QualType), p0)
        LOAD_VAL((const class clang::FunctionType::ExtInfo &), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getFunctionNoProtoType(p0, p1))
      };
      break;
    }
    case currefl::getFunctionNoProtoType1: {
      ASSERT_TRAIT_IS_REFLPROP(getFunctionNoProtoType1)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::QualType), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getFunctionNoProtoType(p0))
      };
      break;
    }
    case currefl::adjustStringLiteralBaseType: {
      ASSERT_TRAIT_IS_REFLPROP(adjustStringLiteralBaseType)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::QualType), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->adjustStringLiteralBaseType(p0))
      };
      break;
    }
    case currefl::getTypeDeclType: {
      ASSERT_TRAIT_IS_REFLPROP(getTypeDeclType)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::TypeDecl *), p0)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Type, X->getTypeDeclType(p0))
        LOAD_VAL((const class clang::TypeDecl *), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getTypeDeclType(p0, p1))
      };
      break;
    }
    case currefl::getTypedefType: {
      ASSERT_TRAIT_IS_REFLPROP(getTypedefType)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::TypedefNameDecl *), p0)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Type, X->getTypedefType(p0))
        LOAD_VAL((class clang::QualType), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getTypedefType(p0, p1))
      };
      break;
    }
    case currefl::getRecordType: {
      ASSERT_TRAIT_IS_REFLPROP(getRecordType)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::RecordDecl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getRecordType(p0))
      };
      break;
    }
    case currefl::getEnumType: {
      ASSERT_TRAIT_IS_REFLPROP(getEnumType)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::EnumDecl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getEnumType(p0))
      };
      break;
    }
    case currefl::getInjectedClassNameType: {
      ASSERT_TRAIT_IS_REFLPROP(getInjectedClassNameType)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::CXXRecordDecl *), p0)
        LOAD_VAL((class clang::QualType), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getInjectedClassNameType(p0, p1))
      };
      break;
    }
    case currefl::getSubstTemplateTypeParmType: {
      ASSERT_TRAIT_IS_REFLPROP(getSubstTemplateTypeParmType)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::TemplateTypeParmType *), p0)
        LOAD_VAL((class clang::QualType), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getSubstTemplateTypeParmType(p0, p1))
      };
      break;
    }
    case currefl::getTemplateTypeParmType: {
      ASSERT_TRAIT_IS_REFLPROP(getTemplateTypeParmType)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        LOAD_VAL((unsigned int), p1)
        LOAD_VAL((bool), p2)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Type, X->getTemplateTypeParmType(p0, p1, p2))
        LOAD_VAL((class clang::TemplateTypeParmDecl *), p3)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getTemplateTypeParmType(p0, p1, p2, p3))
      };
      break;
    }
    case currefl::getTemplateSpecializationType: {
      ASSERT_TRAIT_IS_REFLPROP(getTemplateSpecializationType)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::TemplateName), p0)
        LOAD_VAL((const class clang::TemplateArgumentListInfo &), p1)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Type, X->getTemplateSpecializationType(p0, p1))
        LOAD_VAL((class clang::QualType), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getTemplateSpecializationType(p0, p1, p2))
      };
      break;
    }
    case currefl::getTemplateSpecializationTypeInfo: {
      ASSERT_TRAIT_IS_REFLPROP(getTemplateSpecializationTypeInfo)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::TemplateName), p0)
        LOAD_VAL((class clang::SourceLocation), p1)
        LOAD_VAL((const class clang::TemplateArgumentListInfo &), p2)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Type, X->getTemplateSpecializationTypeInfo(p0, p1, p2))
        LOAD_VAL((class clang::QualType), p3)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getTemplateSpecializationTypeInfo(p0, p1, p2, p3))
      };
      break;
    }
    case currefl::getParenType: {
      ASSERT_TRAIT_IS_REFLPROP(getParenType)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::QualType), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getParenType(p0))
      };
      break;
    }
    case currefl::getElaboratedType: {
      ASSERT_TRAIT_IS_REFLPROP(getElaboratedType)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((enum clang::ElaboratedTypeKeyword), p0)
        LOAD_VAL((class clang::NestedNameSpecifier *), p1)
        LOAD_VAL((class clang::QualType), p2)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Type, X->getElaboratedType(p0, p1, p2))
        LOAD_VAL((class clang::TagDecl *), p3)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getElaboratedType(p0, p1, p2, p3))
      };
      break;
    }
    case currefl::getDependentNameType: {
      ASSERT_TRAIT_IS_REFLPROP(getDependentNameType)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((enum clang::ElaboratedTypeKeyword), p0)
        LOAD_VAL((class clang::NestedNameSpecifier *), p1)
        LOAD_VAL((const class clang::IdentifierInfo *), p2)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Type, X->getDependentNameType(p0, p1, p2))
        LOAD_VAL((class clang::QualType), p3)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getDependentNameType(p0, p1, p2, p3))
      };
      break;
    }
    case currefl::getDependentTemplateSpecializationType: {
      ASSERT_TRAIT_IS_REFLPROP(getDependentTemplateSpecializationType)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((enum clang::ElaboratedTypeKeyword), p0)
        LOAD_VAL((class clang::NestedNameSpecifier *), p1)
        LOAD_VAL((const class clang::IdentifierInfo *), p2)
        LOAD_VAL((const class clang::TemplateArgumentListInfo &), p3)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getDependentTemplateSpecializationType(p0, p1, p2, p3))
      };
      break;
    }
    case currefl::getObjCInterfaceType: {
      ASSERT_TRAIT_IS_REFLPROP(getObjCInterfaceType)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ObjCInterfaceDecl *), p0)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Type, X->getObjCInterfaceType(p0))
        LOAD_VAL((class clang::ObjCInterfaceDecl *), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getObjCInterfaceType(p0, p1))
      };
      break;
    }
    case currefl::getObjCObjectType: {
      ASSERT_TRAIT_IS_REFLPROP(getObjCObjectType)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::QualType), p0)
        LOAD_VAL((class clang::ObjCProtocolDecl *const *), p1)
        LOAD_VAL((unsigned int), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getObjCObjectType(p0, p1, p2))
      };
      break;
    }
    case currefl::getObjCObjectPointerType: {
      ASSERT_TRAIT_IS_REFLPROP(getObjCObjectPointerType)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::QualType), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getObjCObjectPointerType(p0))
      };
      break;
    }
    case currefl::getTypeOfExprType: {
      ASSERT_TRAIT_IS_REFLPROP(getTypeOfExprType)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::Expr *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getTypeOfExprType(p0))
      };
      break;
    }
    case currefl::getTypeOfType: {
      ASSERT_TRAIT_IS_REFLPROP(getTypeOfType)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::QualType), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getTypeOfType(p0))
      };
      break;
    }
    case currefl::getDecltypeType: {
      ASSERT_TRAIT_IS_REFLPROP(getDecltypeType)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::Expr *), p0)
        LOAD_VAL((class clang::QualType), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getDecltypeType(p0, p1))
      };
      break;
    }
    case currefl::getReflectedType: {
      ASSERT_TRAIT_IS_REFLPROP(getReflectedType)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::Expr *), p0)
        LOAD_VAL((class clang::QualType), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getReflectedType(p0, p1))
      };
      break;
    }
    case currefl::getUnaryTransformType: {
      ASSERT_TRAIT_IS_REFLPROP(getUnaryTransformType)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::QualType), p0)
        LOAD_VAL((class clang::QualType), p1)
        LOAD_VAL((enum clang::UnaryTransformType::UTTKind), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getUnaryTransformType(p0, p1, p2))
      };
      break;
    }
    case currefl::getAutoType: {
      ASSERT_TRAIT_IS_REFLPROP(getAutoType)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::QualType), p0)
        LOAD_VAL((enum clang::AutoTypeKeyword), p1)
        LOAD_VAL((bool), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getAutoType(p0, p1, p2))
      };
      break;
    }
    case_REFLPROP_0ARGS( getAutoDeductType, Type, X->getAutoDeductType() )
    case_REFLPROP_0ARGS( getAutoRRefDeductType, Type, X->getAutoRRefDeductType() )
    case currefl::getDeducedTemplateSpecializationType: {
      ASSERT_TRAIT_IS_REFLPROP(getDeducedTemplateSpecializationType)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::TemplateName), p0)
        LOAD_VAL((class clang::QualType), p1)
        LOAD_VAL((bool), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getDeducedTemplateSpecializationType(p0, p1, p2))
      };
      break;
    }
    case currefl::getTagDeclType: {
      ASSERT_TRAIT_IS_REFLPROP(getTagDeclType)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::TagDecl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getTagDeclType(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getWCharType, Type, X->getWCharType() )
    case_REFLPROP_0ARGS( getWideCharType, Type, X->getWideCharType() )
    case_REFLPROP_0ARGS( getSignedWCharType, Type, X->getSignedWCharType() )
    case_REFLPROP_0ARGS( getUnsignedWCharType, Type, X->getUnsignedWCharType() )
    case_REFLPROP_0ARGS( getWIntType, Type, X->getWIntType() )
    case_REFLPROP_0ARGS( getIntPtrType, Type, X->getIntPtrType() )
    case_REFLPROP_0ARGS( getUIntPtrType, Type, X->getUIntPtrType() )
    case_REFLPROP_0ARGS( getPointerDiffType, Type, X->getPointerDiffType() )
    case_REFLPROP_0ARGS( getUnsignedPointerDiffType, Type, X->getUnsignedPointerDiffType() )
    case_REFLPROP_0ARGS( getProcessIDType, Type, X->getProcessIDType() )
    case_REFLPROP_0ARGS( getCFConstantStringType, Type, X->getCFConstantStringType() )
    case_REFLPROP_0ARGS( getObjCSuperType, Type, X->getObjCSuperType() )
    case_REFLPROP_0ARGS( getRawCFConstantStringType, Type, X->getRawCFConstantStringType() )
    case_REFLPROP_0ARGS( getCFConstantStringDecl, Type, X->getCFConstantStringDecl() )
    case_REFLPROP_0ARGS( getCFConstantStringTagDecl, Type, X->getCFConstantStringTagDecl() )
    case_REFLPROP_0ARGS( getObjCConstantStringInterface, Type, X->getObjCConstantStringInterface() )
    case_REFLPROP_0ARGS( getObjCNSStringType, Type, X->getObjCNSStringType() )
    case_REFLPROP_0ARGS( getObjCIdRedefinitionType, Type, X->getObjCIdRedefinitionType() )
    case_REFLPROP_0ARGS( getObjCClassRedefinitionType, Type, X->getObjCClassRedefinitionType() )
    case_REFLPROP_0ARGS( getObjCSelRedefinitionType, Type, X->getObjCSelRedefinitionType() )
    case_REFLPROP_0ARGS( getBoolName, Type, X->getBoolName() )
    case_REFLPROP_0ARGS( getMakeIntegerSeqName, Type, X->getMakeIntegerSeqName() )
    case_REFLPROP_0ARGS( getTypePackElementName, Type, X->getTypePackElementName() )
    case_REFLPROP_0ARGS( getFILEType, Type, X->getFILEType() )
    case_REFLPROP_0ARGS( getjmp_bufType, Type, X->getjmp_bufType() )
    case_REFLPROP_0ARGS( getsigjmp_bufType, Type, X->getsigjmp_bufType() )
    case_REFLPROP_0ARGS( getucontext_tType, Type, X->getucontext_tType() )
    case_REFLPROP_0ARGS( getLogicalOperationType, Type, X->getLogicalOperationType() )
    case currefl::getLegacyIntegralTypeEncoding: {
      ASSERT_TRAIT_IS_REFLPROP(getLegacyIntegralTypeEncoding)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::QualType &), p0)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->getLegacyIntegralTypeEncoding((class clang::QualType &)p0))
      };
      break;
    }
    case currefl::getObjCEncodingForFunctionDecl: {
      ASSERT_TRAIT_IS_REFLPROP(getObjCEncodingForFunctionDecl)
      SET_PRIM_TYPE(const char *)
      SET_CALLBACK(Str) {
        LOAD_VAL_X(Str)
        LOAD_VAL((const class clang::FunctionDecl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Str, X->getObjCEncodingForFunctionDecl(p0))
      };
      break;
    }
    case currefl::getObjCEncodingForMethodDecl: {
      ASSERT_TRAIT_IS_REFLPROP(getObjCEncodingForMethodDecl)
      SET_PRIM_TYPE(const char *)
      SET_CALLBACK(Str) {
        LOAD_VAL_X(Str)
        LOAD_VAL((const class clang::ObjCMethodDecl *), p0)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Str, X->getObjCEncodingForMethodDecl(p0))
        LOAD_VAL((bool), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Str, X->getObjCEncodingForMethodDecl(p0, p1))
      };
      break;
    }
    case currefl::getObjCEncodingForBlock: {
      ASSERT_TRAIT_IS_REFLPROP(getObjCEncodingForBlock)
      SET_PRIM_TYPE(const char *)
      SET_CALLBACK(Str) {
        LOAD_VAL_X(Str)
        LOAD_VAL((const class clang::BlockExpr *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Str, X->getObjCEncodingForBlock(p0))
      };
      break;
    }
    case currefl::getObjCEncodingForPropertyDecl: {
      ASSERT_TRAIT_IS_REFLPROP(getObjCEncodingForPropertyDecl)
      SET_PRIM_TYPE(const char *)
      SET_CALLBACK(Str) {
        LOAD_VAL_X(Str)
        LOAD_VAL((const class clang::ObjCPropertyDecl *), p0)
        LOAD_VAL((const class clang::Decl *), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Str, X->getObjCEncodingForPropertyDecl(p0, p1))
      };
      break;
    }
    case currefl::ProtocolCompatibleWithProtocol: {
      ASSERT_TRAIT_IS_REFLPROP(ProtocolCompatibleWithProtocol)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::ObjCProtocolDecl *), p0)
        LOAD_VAL((class clang::ObjCProtocolDecl *), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->ProtocolCompatibleWithProtocol(p0, p1))
      };
      break;
    }
    case currefl::getObjCPropertyImplDeclForPropertyDecl: {
      ASSERT_TRAIT_IS_REFLPROP(getObjCPropertyImplDeclForPropertyDecl)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ObjCPropertyDecl *), p0)
        LOAD_VAL((const class clang::Decl *), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getObjCPropertyImplDeclForPropertyDecl(p0, p1))
      };
      break;
    }
    case currefl::getObjCEncodingTypeSize: {
      ASSERT_TRAIT_IS_REFLPROP(getObjCEncodingTypeSize)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::QualType), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getObjCEncodingTypeSize(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getObjCIdDecl, Type, X->getObjCIdDecl() )
    case_REFLPROP_0ARGS( getObjCIdType, Type, X->getObjCIdType() )
    case_REFLPROP_0ARGS( getObjCSelDecl, Type, X->getObjCSelDecl() )
    case_REFLPROP_0ARGS( getObjCSelType, Type, X->getObjCSelType() )
    case_REFLPROP_0ARGS( getObjCClassDecl, Type, X->getObjCClassDecl() )
    case_REFLPROP_0ARGS( getObjCClassType, Type, X->getObjCClassType() )
    case_REFLPROP_0ARGS( getObjCProtocolDecl, Type, X->getObjCProtocolDecl() )
    case_REFLPROP_0ARGS( getBOOLDecl, Type, X->getBOOLDecl() )
    case_REFLPROP_0ARGS( getBOOLType, Type, X->getBOOLType() )
    case_REFLPROP_0ARGS( getObjCProtoType, Type, X->getObjCProtoType() )
    case_REFLPROP_0ARGS( getBuiltinVaListDecl, Type, X->getBuiltinVaListDecl() )
    case_REFLPROP_0ARGS( getBuiltinVaListType, Type, X->getBuiltinVaListType() )
    case_REFLPROP_0ARGS( getVaListTagDecl, Type, X->getVaListTagDecl() )
    case_REFLPROP_0ARGS( getBuiltinMSVaListDecl, Type, X->getBuiltinMSVaListDecl() )
    case_REFLPROP_0ARGS( getBuiltinMSVaListType, Type, X->getBuiltinMSVaListType() )
    case currefl::canBuiltinBeRedeclared: {
      ASSERT_TRAIT_IS_REFLPROP(canBuiltinBeRedeclared)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::FunctionDecl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->canBuiltinBeRedeclared(p0))
      };
      break;
    }
    case currefl::getCVRQualifiedType: {
      ASSERT_TRAIT_IS_REFLPROP(getCVRQualifiedType)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::QualType), p0)
        LOAD_VAL((unsigned int), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getCVRQualifiedType(p0, p1))
      };
      break;
    }
    case currefl::getQualifiedType: {
      ASSERT_TRAIT_IS_REFLPROP(getQualifiedType)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((struct clang::SplitQualType), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getQualifiedType(p0))
      };
      break;
    }
    case currefl::getQualifiedType1: {
      ASSERT_TRAIT_IS_REFLPROP(getQualifiedType1)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::QualType), p0)
        LOAD_VAL((class clang::Qualifiers), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getQualifiedType(p0, p1))
      };
      break;
    }
    case currefl::getQualifiedType2: {
      ASSERT_TRAIT_IS_REFLPROP(getQualifiedType2)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::Type *), p0)
        LOAD_VAL((class clang::Qualifiers), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getQualifiedType(p0, p1))
      };
      break;
    }
    case currefl::getUnqualifiedObjCPointerType: {
      ASSERT_TRAIT_IS_REFLPROP(getUnqualifiedObjCPointerType)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::QualType), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getUnqualifiedObjCPointerType(p0))
      };
      break;
    }
    case currefl::getFixedPointScale: {
      ASSERT_TRAIT_IS_REFLPROP(getFixedPointScale)
      SET_PRIM_TYPE(unsigned char)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::QualType), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getFixedPointScale(p0))
      };
      break;
    }
    case currefl::getFixedPointIBits: {
      ASSERT_TRAIT_IS_REFLPROP(getFixedPointIBits)
      SET_PRIM_TYPE(unsigned char)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::QualType), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getFixedPointIBits(p0))
      };
      break;
    }
    case currefl::getNameForTemplate: {
      ASSERT_TRAIT_IS_REFLPROP(getNameForTemplate)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::TemplateName), p0)
        LOAD_VAL((class clang::SourceLocation), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getNameForTemplate(p0, p1))
      };
      break;
    }
    case currefl::getOverloadedTemplateName: {
      ASSERT_TRAIT_IS_REFLPROP(getOverloadedTemplateName)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::UnresolvedSetIterator), p0)
        LOAD_VAL((class clang::UnresolvedSetIterator), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getOverloadedTemplateName(p0, p1))
      };
      break;
    }
    case currefl::getQualifiedTemplateName: {
      ASSERT_TRAIT_IS_REFLPROP(getQualifiedTemplateName)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::NestedNameSpecifier *), p0)
        LOAD_VAL((bool), p1)
        LOAD_VAL((class clang::TemplateDecl *), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getQualifiedTemplateName(p0, p1, p2))
      };
      break;
    }
    case currefl::getDependentTemplateName: {
      ASSERT_TRAIT_IS_REFLPROP(getDependentTemplateName)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::NestedNameSpecifier *), p0)
        LOAD_VAL((const class clang::IdentifierInfo *), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getDependentTemplateName(p0, p1))
      };
      break;
    }
    case currefl::getDependentTemplateName1: {
      ASSERT_TRAIT_IS_REFLPROP(getDependentTemplateName1)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::NestedNameSpecifier *), p0)
        LOAD_VAL((enum clang::OverloadedOperatorKind), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getDependentTemplateName(p0, p1))
      };
      break;
    }
    case currefl::getSubstTemplateTemplateParm: {
      ASSERT_TRAIT_IS_REFLPROP(getSubstTemplateTemplateParm)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::TemplateTemplateParmDecl *), p0)
        LOAD_VAL((class clang::TemplateName), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getSubstTemplateTemplateParm(p0, p1))
      };
      break;
    }
    case currefl::getSubstTemplateTemplateParmPack: {
      ASSERT_TRAIT_IS_REFLPROP(getSubstTemplateTemplateParmPack)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::TemplateTemplateParmDecl *), p0)
        LOAD_VAL((const class clang::TemplateArgument &), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getSubstTemplateTemplateParmPack(p0, p1))
      };
      break;
    }
    case currefl::getObjCGCAttrKind: {
      ASSERT_TRAIT_IS_REFLPROP(getObjCGCAttrKind)
      SET_PRIM_TYPE(enum clang::Qualifiers::GC)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::QualType), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getObjCGCAttrKind(p0))
      };
      break;
    }
    case currefl::isObjCNSObjectType: {
      ASSERT_TRAIT_IS_REFLPROP(isObjCNSObjectType)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::QualType), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isObjCNSObjectType(p0))
      };
      break;
    }
    case currefl::getTypeInfo: {
      ASSERT_TRAIT_IS_REFLPROP(getTypeInfo)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::Type *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getTypeInfo(p0))
      };
      break;
    }
    case currefl::getTypeInfo1: {
      ASSERT_TRAIT_IS_REFLPROP(getTypeInfo1)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::QualType), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getTypeInfo(p0))
      };
      break;
    }
    case currefl::getOpenMPDefaultSimdAlign: {
      ASSERT_TRAIT_IS_REFLPROP(getOpenMPDefaultSimdAlign)
      SET_PRIM_TYPE(unsigned int)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::QualType), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getOpenMPDefaultSimdAlign(p0))
      };
      break;
    }
    case currefl::getTypeSize: {
      ASSERT_TRAIT_IS_REFLPROP(getTypeSize)
      SET_PRIM_TYPE(unsigned long long)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::QualType), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getTypeSize(p0))
      };
      break;
    }
    case currefl::getTypeSize1: {
      ASSERT_TRAIT_IS_REFLPROP(getTypeSize1)
      SET_PRIM_TYPE(unsigned long long)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Type *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getTypeSize(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getCharWidth, Result, X->getCharWidth() )
    case currefl::toCharUnitsFromBits: {
      ASSERT_TRAIT_IS_REFLPROP(toCharUnitsFromBits)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((long long), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->toCharUnitsFromBits(p0))
      };
      break;
    }
    case currefl::toBits: {
      ASSERT_TRAIT_IS_REFLPROP(toBits)
      SET_PRIM_TYPE(long long)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::CharUnits), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->toBits(p0))
      };
      break;
    }
    case currefl::getTypeSizeInChars: {
      ASSERT_TRAIT_IS_REFLPROP(getTypeSizeInChars)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::QualType), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getTypeSizeInChars(p0))
      };
      break;
    }
    case currefl::getTypeSizeInChars1: {
      ASSERT_TRAIT_IS_REFLPROP(getTypeSizeInChars1)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::Type *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getTypeSizeInChars(p0))
      };
      break;
    }
    case currefl::getTypeAlign: {
      ASSERT_TRAIT_IS_REFLPROP(getTypeAlign)
      SET_PRIM_TYPE(unsigned int)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::QualType), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getTypeAlign(p0))
      };
      break;
    }
    case currefl::getTypeAlign1: {
      ASSERT_TRAIT_IS_REFLPROP(getTypeAlign1)
      SET_PRIM_TYPE(unsigned int)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Type *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getTypeAlign(p0))
      };
      break;
    }
    case currefl::getTypeUnadjustedAlign: {
      ASSERT_TRAIT_IS_REFLPROP(getTypeUnadjustedAlign)
      SET_PRIM_TYPE(unsigned int)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::QualType), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getTypeUnadjustedAlign(p0))
      };
      break;
    }
    case currefl::getTypeUnadjustedAlign1: {
      ASSERT_TRAIT_IS_REFLPROP(getTypeUnadjustedAlign1)
      SET_PRIM_TYPE(unsigned int)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Type *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getTypeUnadjustedAlign(p0))
      };
      break;
    }
    case currefl::getTypeAlignIfKnown: {
      ASSERT_TRAIT_IS_REFLPROP(getTypeAlignIfKnown)
      SET_PRIM_TYPE(unsigned int)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::QualType), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getTypeAlignIfKnown(p0))
      };
      break;
    }
    case currefl::getTypeAlignInChars: {
      ASSERT_TRAIT_IS_REFLPROP(getTypeAlignInChars)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::QualType), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getTypeAlignInChars(p0))
      };
      break;
    }
    case currefl::getTypeAlignInChars1: {
      ASSERT_TRAIT_IS_REFLPROP(getTypeAlignInChars1)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::Type *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getTypeAlignInChars(p0))
      };
      break;
    }
    case currefl::getTypeUnadjustedAlignInChars: {
      ASSERT_TRAIT_IS_REFLPROP(getTypeUnadjustedAlignInChars)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::QualType), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getTypeUnadjustedAlignInChars(p0))
      };
      break;
    }
    case currefl::getTypeUnadjustedAlignInChars1: {
      ASSERT_TRAIT_IS_REFLPROP(getTypeUnadjustedAlignInChars1)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::Type *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getTypeUnadjustedAlignInChars(p0))
      };
      break;
    }
    case currefl::isAlignmentRequired: {
      ASSERT_TRAIT_IS_REFLPROP(isAlignmentRequired)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Type *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isAlignmentRequired(p0))
      };
      break;
    }
    case currefl::isAlignmentRequired1: {
      ASSERT_TRAIT_IS_REFLPROP(isAlignmentRequired1)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::QualType), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isAlignmentRequired(p0))
      };
      break;
    }
    case currefl::getPreferredTypeAlign: {
      ASSERT_TRAIT_IS_REFLPROP(getPreferredTypeAlign)
      SET_PRIM_TYPE(unsigned int)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Type *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getPreferredTypeAlign(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getTargetDefaultAlignForAttributeAligned, Result, X->getTargetDefaultAlignForAttributeAligned() )
    case currefl::getAlignOfGlobalVar: {
      ASSERT_TRAIT_IS_REFLPROP(getAlignOfGlobalVar)
      SET_PRIM_TYPE(unsigned int)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::QualType), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getAlignOfGlobalVar(p0))
      };
      break;
    }
    case currefl::getAlignOfGlobalVarInChars: {
      ASSERT_TRAIT_IS_REFLPROP(getAlignOfGlobalVarInChars)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::QualType), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getAlignOfGlobalVarInChars(p0))
      };
      break;
    }
    case currefl::getDeclAlign: {
      ASSERT_TRAIT_IS_REFLPROP(getDeclAlign)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::Decl *), p0)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Type, X->getDeclAlign(p0))
        LOAD_VAL((bool), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getDeclAlign(p0, p1))
      };
      break;
    }
    case currefl::DumpRecordLayout: {
      ASSERT_TRAIT_IS_REFLPROP(DumpRecordLayout)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::RecordDecl *), p0)
        LOAD_VAL((class llvm::raw_ostream &), p1)
        IF_NO_MORE  VOID_REFLECTION(X->DumpRecordLayout((const class clang::RecordDecl *)p0, (class llvm::raw_ostream &)p1))
        LOAD_VAL((bool), p2)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->DumpRecordLayout((const class clang::RecordDecl *)p0, (class llvm::raw_ostream &)p1, (bool)p2))
      };
      break;
    }
    case currefl::getOffsetOfBaseWithVBPtr: {
      ASSERT_TRAIT_IS_REFLPROP(getOffsetOfBaseWithVBPtr)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::CXXRecordDecl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getOffsetOfBaseWithVBPtr(p0))
      };
      break;
    }
    case currefl::getFieldOffset: {
      ASSERT_TRAIT_IS_REFLPROP(getFieldOffset)
      SET_PRIM_TYPE(unsigned long long)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::ValueDecl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getFieldOffset(p0))
      };
      break;
    }
    case currefl::lookupFieldBitOffset: {
      ASSERT_TRAIT_IS_REFLPROP(lookupFieldBitOffset)
      SET_PRIM_TYPE(unsigned long long)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::ObjCInterfaceDecl *), p0)
        LOAD_VAL((const class clang::ObjCImplementationDecl *), p1)
        LOAD_VAL((const class clang::ObjCIvarDecl *), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->lookupFieldBitOffset(p0, p1, p2))
      };
      break;
    }
    case currefl::isNearlyEmpty: {
      ASSERT_TRAIT_IS_REFLPROP(isNearlyEmpty)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::CXXRecordDecl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isNearlyEmpty(p0))
      };
      break;
    }
    case currefl::CountNonClassIvars: {
      ASSERT_TRAIT_IS_REFLPROP(CountNonClassIvars)
      SET_PRIM_TYPE(unsigned int)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::ObjCInterfaceDecl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->CountNonClassIvars(p0))
      };
      break;
    }
    case currefl::hasUniqueObjectRepresentations: {
      ASSERT_TRAIT_IS_REFLPROP(hasUniqueObjectRepresentations)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::QualType), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->hasUniqueObjectRepresentations(p0))
      };
      break;
    }
    case currefl::getCanonicalType: {
      ASSERT_TRAIT_IS_REFLPROP(getCanonicalType)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::Type *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getCanonicalType(p0))
      };
      break;
    }
    case currefl::hasSameType: {
      ASSERT_TRAIT_IS_REFLPROP(hasSameType)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::QualType), p0)
        LOAD_VAL((class clang::QualType), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->hasSameType(p0, p1))
      };
      break;
    }
    case currefl::hasSameType1: {
      ASSERT_TRAIT_IS_REFLPROP(hasSameType1)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Type *), p0)
        LOAD_VAL((const class clang::Type *), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->hasSameType(p0, p1))
      };
      break;
    }
    case currefl::hasSameUnqualifiedType: {
      ASSERT_TRAIT_IS_REFLPROP(hasSameUnqualifiedType)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::QualType), p0)
        LOAD_VAL((class clang::QualType), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->hasSameUnqualifiedType(p0, p1))
      };
      break;
    }
    case currefl::hasSameNullabilityTypeQualifier: {
      ASSERT_TRAIT_IS_REFLPROP(hasSameNullabilityTypeQualifier)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::QualType), p0)
        LOAD_VAL((class clang::QualType), p1)
        LOAD_VAL((bool), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->hasSameNullabilityTypeQualifier(p0, p1, p2))
      };
      break;
    }
    case currefl::getCanonicalNestedNameSpecifier: {
      ASSERT_TRAIT_IS_REFLPROP(getCanonicalNestedNameSpecifier)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::NestedNameSpecifier *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getCanonicalNestedNameSpecifier(p0))
      };
      break;
    }
    case currefl::getDefaultCallingConvention: {
      ASSERT_TRAIT_IS_REFLPROP(getDefaultCallingConvention)
      SET_PRIM_TYPE(enum clang::CallingConv)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((bool), p0)
        LOAD_VAL((bool), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getDefaultCallingConvention(p0, p1))
      };
      break;
    }
    case currefl::getCanonicalTemplateName: {
      ASSERT_TRAIT_IS_REFLPROP(getCanonicalTemplateName)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::TemplateName), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getCanonicalTemplateName(p0))
      };
      break;
    }
    case currefl::getCanonicalTemplateArgument: {
      ASSERT_TRAIT_IS_REFLPROP(getCanonicalTemplateArgument)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::TemplateArgument &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getCanonicalTemplateArgument(p0))
      };
      break;
    }
    case currefl::getAsArrayType: {
      ASSERT_TRAIT_IS_REFLPROP(getAsArrayType)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::QualType), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getAsArrayType(p0))
      };
      break;
    }
    case currefl::getAsConstantArrayType: {
      ASSERT_TRAIT_IS_REFLPROP(getAsConstantArrayType)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::QualType), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getAsConstantArrayType(p0))
      };
      break;
    }
    case currefl::getAsVariableArrayType: {
      ASSERT_TRAIT_IS_REFLPROP(getAsVariableArrayType)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::QualType), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getAsVariableArrayType(p0))
      };
      break;
    }
    case currefl::getAsIncompleteArrayType: {
      ASSERT_TRAIT_IS_REFLPROP(getAsIncompleteArrayType)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::QualType), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getAsIncompleteArrayType(p0))
      };
      break;
    }
    case currefl::getAsDependentSizedArrayType: {
      ASSERT_TRAIT_IS_REFLPROP(getAsDependentSizedArrayType)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::QualType), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getAsDependentSizedArrayType(p0))
      };
      break;
    }
    case currefl::getBaseElementType: {
      ASSERT_TRAIT_IS_REFLPROP(getBaseElementType)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ArrayType *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getBaseElementType(p0))
      };
      break;
    }
    case currefl::getBaseElementType1: {
      ASSERT_TRAIT_IS_REFLPROP(getBaseElementType1)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::QualType), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getBaseElementType(p0))
      };
      break;
    }
    case currefl::getConstantArrayElementCount: {
      ASSERT_TRAIT_IS_REFLPROP(getConstantArrayElementCount)
      SET_PRIM_TYPE(unsigned long long)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::ConstantArrayType *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getConstantArrayElementCount(p0))
      };
      break;
    }
    case currefl::getAdjustedParameterType: {
      ASSERT_TRAIT_IS_REFLPROP(getAdjustedParameterType)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::QualType), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getAdjustedParameterType(p0))
      };
      break;
    }
    case currefl::getSignatureParameterType: {
      ASSERT_TRAIT_IS_REFLPROP(getSignatureParameterType)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::QualType), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getSignatureParameterType(p0))
      };
      break;
    }
    case currefl::getExceptionObjectType: {
      ASSERT_TRAIT_IS_REFLPROP(getExceptionObjectType)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::QualType), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getExceptionObjectType(p0))
      };
      break;
    }
    case currefl::getArrayDecayedType: {
      ASSERT_TRAIT_IS_REFLPROP(getArrayDecayedType)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::QualType), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getArrayDecayedType(p0))
      };
      break;
    }
    case currefl::getPromotedIntegerType: {
      ASSERT_TRAIT_IS_REFLPROP(getPromotedIntegerType)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::QualType), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getPromotedIntegerType(p0))
      };
      break;
    }
    case currefl::getInnerObjCOwnership: {
      ASSERT_TRAIT_IS_REFLPROP(getInnerObjCOwnership)
      SET_PRIM_TYPE(enum clang::Qualifiers::ObjCLifetime)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::QualType), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getInnerObjCOwnership(p0))
      };
      break;
    }
    case currefl::isPromotableBitField: {
      ASSERT_TRAIT_IS_REFLPROP(isPromotableBitField)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::Expr *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->isPromotableBitField(p0))
      };
      break;
    }
    case currefl::getIntegerTypeOrder: {
      ASSERT_TRAIT_IS_REFLPROP(getIntegerTypeOrder)
      SET_PRIM_TYPE(int)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::QualType), p0)
        LOAD_VAL((class clang::QualType), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getIntegerTypeOrder(p0, p1))
      };
      break;
    }
    case currefl::getFloatingTypeOrder: {
      ASSERT_TRAIT_IS_REFLPROP(getFloatingTypeOrder)
      SET_PRIM_TYPE(int)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::QualType), p0)
        LOAD_VAL((class clang::QualType), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getFloatingTypeOrder(p0, p1))
      };
      break;
    }
    case currefl::getFloatingTypeOfSizeWithinDomain: {
      ASSERT_TRAIT_IS_REFLPROP(getFloatingTypeOfSizeWithinDomain)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::QualType), p0)
        LOAD_VAL((class clang::QualType), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getFloatingTypeOfSizeWithinDomain(p0, p1))
      };
      break;
    }
    case currefl::getTargetAddressSpace: {
      ASSERT_TRAIT_IS_REFLPROP(getTargetAddressSpace)
      SET_PRIM_TYPE(unsigned int)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::QualType), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getTargetAddressSpace(p0))
      };
      break;
    }
    case currefl::getTargetAddressSpace1: {
      ASSERT_TRAIT_IS_REFLPROP(getTargetAddressSpace1)
      SET_PRIM_TYPE(unsigned int)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::Qualifiers), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getTargetAddressSpace(p0))
      };
      break;
    }
    case currefl::getTargetAddressSpace2: {
      ASSERT_TRAIT_IS_REFLPROP(getTargetAddressSpace2)
      SET_PRIM_TYPE(unsigned int)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::LangAS), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getTargetAddressSpace(p0))
      };
      break;
    }
    case currefl::getTargetNullPointerValue: {
      ASSERT_TRAIT_IS_REFLPROP(getTargetNullPointerValue)
      SET_PRIM_TYPE(unsigned long long)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::QualType), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getTargetNullPointerValue(p0))
      };
      break;
    }
    case currefl::addressSpaceMapManglingFor: {
      ASSERT_TRAIT_IS_REFLPROP(addressSpaceMapManglingFor)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::LangAS), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->addressSpaceMapManglingFor(p0))
      };
      break;
    }
    case currefl::isObjCIdType: {
      ASSERT_TRAIT_IS_REFLPROP(isObjCIdType)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::QualType), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isObjCIdType(p0))
      };
      break;
    }
    case currefl::isObjCClassType: {
      ASSERT_TRAIT_IS_REFLPROP(isObjCClassType)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::QualType), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isObjCClassType(p0))
      };
      break;
    }
    case currefl::isObjCSelType: {
      ASSERT_TRAIT_IS_REFLPROP(isObjCSelType)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::QualType), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isObjCSelType(p0))
      };
      break;
    }
    case currefl::getIntWidth: {
      ASSERT_TRAIT_IS_REFLPROP(getIntWidth)
      SET_PRIM_TYPE(unsigned int)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::QualType), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getIntWidth(p0))
      };
      break;
    }
    case currefl::getCorrespondingUnsignedType: {
      ASSERT_TRAIT_IS_REFLPROP(getCorrespondingUnsignedType)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::QualType), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getCorrespondingUnsignedType(p0))
      };
      break;
    }
    case currefl::getCorrespondingSaturatedType: {
      ASSERT_TRAIT_IS_REFLPROP(getCorrespondingSaturatedType)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::QualType), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getCorrespondingSaturatedType(p0))
      };
      break;
    }
    case currefl::MakeIntValue: {
      ASSERT_TRAIT_IS_REFLPROP(MakeIntValue)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned long long), p0)
        LOAD_VAL((class clang::QualType), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->MakeIntValue(p0, p1))
      };
      break;
    }
    case currefl::getObjCMethodRedeclaration: {
      ASSERT_TRAIT_IS_REFLPROP(getObjCMethodRedeclaration)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ObjCMethodDecl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getObjCMethodRedeclaration(p0))
      };
      break;
    }
    case currefl::getObjContainingInterface: {
      ASSERT_TRAIT_IS_REFLPROP(getObjContainingInterface)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::NamedDecl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getObjContainingInterface(p0))
      };
      break;
    }
    case currefl::CreateTypeSourceInfo: {
      ASSERT_TRAIT_IS_REFLPROP(CreateTypeSourceInfo)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::QualType), p0)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateTypeSourceInfo(p0))
        LOAD_VAL((unsigned int), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateTypeSourceInfo(p0, p1))
      };
      break;
    }
    case currefl::getTrivialTypeSourceInfo: {
      ASSERT_TRAIT_IS_REFLPROP(getTrivialTypeSourceInfo)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::QualType), p0)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Type, X->getTrivialTypeSourceInfo(p0))
        LOAD_VAL((class clang::SourceLocation), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getTrivialTypeSourceInfo(p0, p1))
      };
      break;
    }
    case currefl::GetGVALinkageForFunction: {
      ASSERT_TRAIT_IS_REFLPROP(GetGVALinkageForFunction)
      SET_PRIM_TYPE(enum clang::GVALinkage)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::FunctionDecl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->GetGVALinkageForFunction(p0))
      };
      break;
    }
    case currefl::getManglingNumber: {
      ASSERT_TRAIT_IS_REFLPROP(getManglingNumber)
      SET_PRIM_TYPE(unsigned int)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::NamedDecl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getManglingNumber(p0))
      };
      break;
    }
    case currefl::getStaticLocalNumber: {
      ASSERT_TRAIT_IS_REFLPROP(getStaticLocalNumber)
      SET_PRIM_TYPE(unsigned int)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::VarDecl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getStaticLocalNumber(p0))
      };
      break;
    }
    case currefl::getParameterIndex: {
      ASSERT_TRAIT_IS_REFLPROP(getParameterIndex)
      SET_PRIM_TYPE(unsigned int)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::ParmVarDecl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getParameterIndex(p0))
      };
      break;
    }
    case currefl::isMSStaticDataMemberInlineDefinition: {
      ASSERT_TRAIT_IS_REFLPROP(isMSStaticDataMemberInlineDefinition)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::VarDecl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isMSStaticDataMemberInlineDefinition(p0))
      };
      break;
    }
    case currefl::getInlineVariableDefinitionKind: {
      ASSERT_TRAIT_IS_REFLPROP(getInlineVariableDefinitionKind)
      SET_PRIM_TYPE(enum clang::ASTContext::InlineVariableDefinitionKind)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::VarDecl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getInlineVariableDefinitionKind(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__DeclAccessPair: {
# define CLASSNAME (clang::DeclAccessPair)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_MAYBEPTR(1, CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__DeclAccessPair;
  switch( (currefl::memnames)MemNum ) {
    case currefl::make: {
      ASSERT_TRAIT_IS_REFLPROP(make)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::NamedDecl *), p0)
        LOAD_VAL((enum clang::AccessSpecifier), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->make(p0, p1))
      };
      break;
    }
    case_REFLPROP_0ARGS( getDecl, Type, X->getDecl() )
    case_REFLPROP_0ARGS( getAccess, Result, X->getAccess() )
    case_REFLPROP_0ARGS( operator_arrow, Type, X->operator->() )
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__UnresolvedSetIterator: {
# define CLASSNAME (clang::UnresolvedSetIterator)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_MAYBEPTR(1, CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__UnresolvedSetIterator;
  switch( (currefl::memnames)MemNum ) {
    case currefl::operator_plus: {
      ASSERT_TRAIT_IS_REFLPROP(operator_plus)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((long), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->operator+(p0))
      };
      break;
    }
    case currefl::operator_plus1: {
      ASSERT_TRAIT_IS_REFLPROP(operator_plus1)
      SET_CALLBACK(Type) {
        LOAD_VAL((long), p0 )
        LOAD_VAL((const class clang::UnresolvedSetIterator &), p1 )
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, p0 + p1)
      };
      break;
    }
    case currefl::operator_minus: {
      ASSERT_TRAIT_IS_REFLPROP(operator_minus)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((long), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->operator-(p0))
      };
      break;
    }
    case currefl::operator_not_eq: {
      ASSERT_TRAIT_IS_REFLPROP(operator_not_eq)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::UnresolvedSetIterator &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->operator!=(p0))
      };
      break;
    }
    case currefl::operator_gr: {
      ASSERT_TRAIT_IS_REFLPROP(operator_gr)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::UnresolvedSetIterator &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->operator>(p0))
      };
      break;
    }
    case currefl::operator_less_eq: {
      ASSERT_TRAIT_IS_REFLPROP(operator_less_eq)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::UnresolvedSetIterator &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->operator<=(p0))
      };
      break;
    }
    case currefl::operator_gr_eq: {
      ASSERT_TRAIT_IS_REFLPROP(operator_gr_eq)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::UnresolvedSetIterator &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->operator>=(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( operator_arrow, Type, X->operator->() )
    case currefl::operator_minus1: {
      ASSERT_TRAIT_IS_REFLPROP(operator_minus1)
      SET_PRIM_TYPE(long)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::UnresolvedSetIterator &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->operator-(p0))
      };
      break;
    }
    case currefl::operator_eq_eq: {
      ASSERT_TRAIT_IS_REFLPROP(operator_eq_eq)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::UnresolvedSetIterator &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->operator==(p0))
      };
      break;
    }
    case currefl::operator_less: {
      ASSERT_TRAIT_IS_REFLPROP(operator_less)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::UnresolvedSetIterator &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->operator<(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( operator_star, Type, X->operator*() )
    case_REFLPROP_0ARGS( getDecl, Type, X->getDecl() )
    case currefl::setDecl: {
      ASSERT_TRAIT_IS_REFLPROP(setDecl)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::NamedDecl *), p0)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->setDecl((class clang::NamedDecl *)p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getAccess, Result, X->getAccess() )
    case_REFLPROP_0ARGS( getPair, Type, X->getPair() )
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__UnresolvedSetImpl: {
# define CLASSNAME (clang::UnresolvedSetImpl)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__UnresolvedSetImpl;
  switch( (currefl::memnames)MemNum ) {
    case currefl::_this_: {
      switch (TraitKind) {
        case RTK_range_nth:
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE
            BUILD_REFLECTION_CALL_RANGE_NTH(Type, *X)
          };
          break;
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE
            BUILD_REFLECTION_CALL_RANGE_SIZE(*X)
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << "_this_"
                 << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case_REFLPROP_0ARGS( empty, Result, X->empty() )
    case_REFLPROP_0ARGS( size, Result, X->size() )
    case currefl::operator_sub: {
      ASSERT_TRAIT_IS_REFLPROP(operator_sub)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->operator[](p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__Expr: {
# define CLASSNAME (clang::Expr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__Expr;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getType, Type, X->getType() )
    case_REFLPROP_0ARGS( isValueDependent, Result, X->isValueDependent() )
    case_REFLPROP_0ARGS( isTypeDependent, Result, X->isTypeDependent() )
    case_REFLPROP_0ARGS( isInstantiationDependent, Result, X->isInstantiationDependent() )
    case_REFLPROP_0ARGS( containsUnexpandedParameterPack, Result, X->containsUnexpandedParameterPack() )
    case_REFLPROP_0ARGS( getExprLoc, Type, X->getExprLoc() )
    case currefl::isUnusedResultAWarning: {
      ASSERT_TRAIT_IS_REFLPROP(isUnusedResultAWarning)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Expr *&), p0)
        LOAD_VAL((class clang::SourceLocation &), p1)
        LOAD_VAL((class clang::SourceRange &), p2)
        LOAD_VAL((class clang::SourceRange &), p3)
        LOAD_VAL((class clang::ASTContext &), p4)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isUnusedResultAWarning(p0, p1, p2, p3, p4))
      };
      break;
    }
    case_REFLPROP_0ARGS( isLValue, Result, X->isLValue() )
    case_REFLPROP_0ARGS( isRValue, Result, X->isRValue() )
    case_REFLPROP_0ARGS( isXValue, Result, X->isXValue() )
    case_REFLPROP_0ARGS( isGLValue, Result, X->isGLValue() )
    case currefl::ClassifyLValue: {
      ASSERT_TRAIT_IS_REFLPROP(ClassifyLValue)
      SET_PRIM_TYPE(enum clang::Expr::LValueClassification)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::ASTContext &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->ClassifyLValue(p0))
      };
      break;
    }
    case currefl::isModifiableLvalue: {
      ASSERT_TRAIT_IS_REFLPROP(isModifiableLvalue)
      SET_PRIM_TYPE(enum clang::Expr::isModifiableLvalueResult)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::ASTContext &), p0)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Result, X->isModifiableLvalue(p0))
        LOAD_VAL((class clang::SourceLocation *), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isModifiableLvalue(p0, p1))
      };
      break;
    }
    case currefl::Classify: {
      ASSERT_TRAIT_IS_REFLPROP(Classify)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Classify(p0))
      };
      break;
    }
    case currefl::ClassifyModifiable: {
      ASSERT_TRAIT_IS_REFLPROP(ClassifyModifiable)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((class clang::SourceLocation &), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->ClassifyModifiable(p0, p1))
      };
      break;
    }
    case currefl::getValueKindForType: {
      ASSERT_TRAIT_IS_REFLPROP(getValueKindForType)
      SET_PRIM_TYPE(enum clang::ExprValueKind)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::QualType), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getValueKindForType(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getValueKind, Result, X->getValueKind() )
    case_REFLPROP_0ARGS( getObjectKind, Result, X->getObjectKind() )
    case_REFLPROP_0ARGS( isOrdinaryOrBitFieldObject, Result, X->isOrdinaryOrBitFieldObject() )
    case_REFLPROP_0ARGS( refersToBitField, Result, X->refersToBitField() )
    case_REFLPROP_0ARGS( getSourceBitField, Type, X->getSourceBitField() )
    case_REFLPROP_0ARGS( getReferencedDeclOfCallee, Type, X->getReferencedDeclOfCallee() )
    case_REFLPROP_0ARGS( getObjCProperty, Type, X->getObjCProperty() )
    case_REFLPROP_0ARGS( isObjCSelfExpr, Result, X->isObjCSelfExpr() )
    case_REFLPROP_0ARGS( refersToVectorElement, Result, X->refersToVectorElement() )
    case_REFLPROP_0ARGS( refersToGlobalRegisterVar, Result, X->refersToGlobalRegisterVar() )
    case_REFLPROP_0ARGS( hasPlaceholderType, Result, X->hasPlaceholderType() )
    case currefl::hasPlaceholderType1: {
      ASSERT_TRAIT_IS_REFLPROP(hasPlaceholderType1)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::BuiltinType::Kind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->hasPlaceholderType(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( isKnownToHaveBooleanValue, Result, X->isKnownToHaveBooleanValue() )
    case currefl::isIntegerConstantExpr: {
      ASSERT_TRAIT_IS_REFLPROP(isIntegerConstantExpr)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::APSInt &), p0)
        LOAD_VAL((const class clang::ASTContext &), p1)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Result, X->isIntegerConstantExpr(p0, p1))
        LOAD_VAL((class clang::SourceLocation *), p2)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Result, X->isIntegerConstantExpr(p0, p1, p2))
        LOAD_VAL((bool), p3)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isIntegerConstantExpr(p0, p1, p2, p3))
      };
      break;
    }
    case currefl::isIntegerConstantExpr1: {
      ASSERT_TRAIT_IS_REFLPROP(isIntegerConstantExpr1)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::ASTContext &), p0)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Result, X->isIntegerConstantExpr(p0))
        LOAD_VAL((class clang::SourceLocation *), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isIntegerConstantExpr(p0, p1))
      };
      break;
    }
    case currefl::isCXX98IntegralConstantExpr: {
      ASSERT_TRAIT_IS_REFLPROP(isCXX98IntegralConstantExpr)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::ASTContext &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isCXX98IntegralConstantExpr(p0))
      };
      break;
    }
    case currefl::isCXX11ConstantExpr: {
      ASSERT_TRAIT_IS_REFLPROP(isCXX11ConstantExpr)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::ASTContext &), p0)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Result, X->isCXX11ConstantExpr(p0))
        LOAD_VAL((class clang::APValue *), p1)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Result, X->isCXX11ConstantExpr(p0, p1))
        LOAD_VAL((class clang::SourceLocation *), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isCXX11ConstantExpr(p0, p1, p2))
      };
      break;
    }
    case currefl::isConstantInitializer: {
      ASSERT_TRAIT_IS_REFLPROP(isConstantInitializer)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((bool), p1)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Result, X->isConstantInitializer(p0, p1))
        LOAD_VAL((const class clang::Expr **), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isConstantInitializer(p0, p1, p2))
      };
      break;
    }
    case currefl::EvaluateAsRValue: {
      ASSERT_TRAIT_IS_REFLPROP(EvaluateAsRValue)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((struct clang::Expr::EvalResult &), p0)
        LOAD_VAL((const class clang::ASTContext &), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->EvaluateAsRValue(p0, p1))
      };
      break;
    }
    case currefl::EvaluateAsInt: {
      ASSERT_TRAIT_IS_REFLPROP(EvaluateAsInt)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::APSInt &), p0)
        LOAD_VAL((const class clang::ASTContext &), p1)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Result, X->EvaluateAsInt(p0, p1))
        LOAD_VAL((enum clang::Expr::SideEffectsKind), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->EvaluateAsInt(p0, p1, p2))
      };
      break;
    }
    case currefl::EvaluateAsString: {
      ASSERT_TRAIT_IS_REFLPROP(EvaluateAsString)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::StringLiteral *&), p0)
        LOAD_VAL((const class clang::ASTContext &), p1)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Result, X->EvaluateAsString(p0, p1))
        LOAD_VAL((enum clang::Expr::SideEffectsKind), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->EvaluateAsString(p0, p1, p2))
      };
      break;
    }
    case currefl::EvaluateAsVoid: {
      ASSERT_TRAIT_IS_REFLPROP(EvaluateAsVoid)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((struct clang::Expr::EvalResult &), p0)
        LOAD_VAL((const class clang::ASTContext &), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->EvaluateAsVoid(p0, p1))
      };
      break;
    }
    case currefl::EvaluateAsFloat: {
      ASSERT_TRAIT_IS_REFLPROP(EvaluateAsFloat)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::APFloat &), p0)
        LOAD_VAL((const class clang::ASTContext &), p1)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Result, X->EvaluateAsFloat(p0, p1))
        LOAD_VAL((enum clang::Expr::SideEffectsKind), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->EvaluateAsFloat(p0, p1, p2))
      };
      break;
    }
    case currefl::isEvaluatable: {
      ASSERT_TRAIT_IS_REFLPROP(isEvaluatable)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::ASTContext &), p0)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Result, X->isEvaluatable(p0))
        LOAD_VAL((enum clang::Expr::SideEffectsKind), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isEvaluatable(p0, p1))
      };
      break;
    }
    case currefl::HasSideEffects: {
      ASSERT_TRAIT_IS_REFLPROP(HasSideEffects)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::ASTContext &), p0)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Result, X->HasSideEffects(p0))
        LOAD_VAL((bool), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->HasSideEffects(p0, p1))
      };
      break;
    }
    case currefl::hasNonTrivialCall: {
      ASSERT_TRAIT_IS_REFLPROP(hasNonTrivialCall)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::ASTContext &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->hasNonTrivialCall(p0))
      };
      break;
    }
    case currefl::EvaluateForOverflow: {
      ASSERT_TRAIT_IS_REFLPROP(EvaluateForOverflow)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::ASTContext &), p0)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->EvaluateForOverflow((const class clang::ASTContext &)p0))
      };
      break;
    }
    case currefl::EvaluateAsLValue: {
      ASSERT_TRAIT_IS_REFLPROP(EvaluateAsLValue)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((struct clang::Expr::EvalResult &), p0)
        LOAD_VAL((const class clang::ASTContext &), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->EvaluateAsLValue(p0, p1))
      };
      break;
    }
    case currefl::EvaluateAsConstantExpr: {
      ASSERT_TRAIT_IS_REFLPROP(EvaluateAsConstantExpr)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((struct clang::Expr::EvalResult &), p0)
        LOAD_VAL((enum clang::Expr::ConstExprUsage), p1)
        LOAD_VAL((const class clang::ASTContext &), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->EvaluateAsConstantExpr(p0, p1, p2))
      };
      break;
    }
    case currefl::isNullPointerConstant: {
      ASSERT_TRAIT_IS_REFLPROP(isNullPointerConstant)
      SET_PRIM_TYPE(enum clang::Expr::NullPointerConstantKind)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((enum clang::Expr::NullPointerConstantValueDependence), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isNullPointerConstant(p0, p1))
      };
      break;
    }
    case currefl::isOBJCGCCandidate: {
      ASSERT_TRAIT_IS_REFLPROP(isOBJCGCCandidate)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::ASTContext &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isOBJCGCCandidate(p0))
      };
      break;
    }
    case currefl::isBoundMemberFunction: {
      ASSERT_TRAIT_IS_REFLPROP(isBoundMemberFunction)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::ASTContext &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isBoundMemberFunction(p0))
      };
      break;
    }
    case currefl::findBoundMemberType: {
      ASSERT_TRAIT_IS_REFLPROP(findBoundMemberType)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::Expr *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->findBoundMemberType(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( IgnoreImplicit, Type, X->IgnoreImplicit() )
    case_REFLPROP_0ARGS( IgnoreConversionOperator, Type, X->IgnoreConversionOperator() )
    case_REFLPROP_0ARGS( IgnoreParenImpCasts, Type, X->IgnoreParenImpCasts() )
    case_REFLPROP_0ARGS( IgnoreParenLValueCasts, Type, X->IgnoreParenLValueCasts() )
    case_REFLPROP_0ARGS( ignoreParenBaseCasts, Type, X->ignoreParenBaseCasts() )
    case_REFLPROP_0ARGS( isDefaultArgument, Result, X->isDefaultArgument() )
    case currefl::isTemporaryObject: {
      ASSERT_TRAIT_IS_REFLPROP(isTemporaryObject)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((const class clang::CXXRecordDecl *), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isTemporaryObject(p0, p1))
      };
      break;
    }
    case_REFLPROP_0ARGS( isImplicitCXXThis, Result, X->isImplicitCXXThis() )
    case_REFLPROP_0ARGS( IgnoreImpCasts, Type, X->IgnoreImpCasts() )
    case_REFLPROP_0ARGS( IgnoreParens, Type, X->IgnoreParens() )
    case_REFLPROP_0ARGS( IgnoreParenCasts, Type, X->IgnoreParenCasts() )
    case_REFLPROP_0ARGS( IgnoreCasts, Type, X->IgnoreCasts() )
    case currefl::IgnoreParenNoopCasts: {
      ASSERT_TRAIT_IS_REFLPROP(IgnoreParenNoopCasts)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->IgnoreParenNoopCasts(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getBestDynamicClassType, Type, X->getBestDynamicClassType() )
    case_REFLPROP_0ARGS( getBestDynamicClassTypeExpr, Type, X->getBestDynamicClassTypeExpr() )
    case_REFLPROP_0ARGS( skipRValueSubobjectAdjustments, Type, X->skipRValueSubobjectAdjustments() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__Expr__Classification: {
# define CLASSNAME (clang::Expr::Classification)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_NEVERPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__Expr__Classification;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getKind, Result, X->getKind() )
    case_REFLPROP_0ARGS( getModifiable, Result, X->getModifiable() )
    case_REFLPROP_0ARGS( isLValue, Result, X->isLValue() )
    case_REFLPROP_0ARGS( isXValue, Result, X->isXValue() )
    case_REFLPROP_0ARGS( isGLValue, Result, X->isGLValue() )
    case_REFLPROP_0ARGS( isPRValue, Result, X->isPRValue() )
    case_REFLPROP_0ARGS( isRValue, Result, X->isRValue() )
    case_REFLPROP_0ARGS( isModifiable, Result, X->isModifiable() )
    case_REFLPROP_0ARGS( makeSimpleLValue, Type, X->makeSimpleLValue() )
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__Expr__EvalStatus: {
# define CLASSNAME (clang::Expr::EvalStatus)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__Expr__EvalStatus;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS(HasSideEffects, Result, X->HasSideEffects)
    case_REFLPROP_0ARGS(HasUndefinedBehavior, Result, X->HasUndefinedBehavior)
    case_REFLPROP_0ARGS( hasSideEffects, Result, X->hasSideEffects() )
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__Expr__EvalResult: {
# define CLASSNAME (clang::Expr::EvalResult)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__Expr__EvalResult;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( isGlobalLValue, Result, X->isGlobalLValue() )
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__OpaqueValueExpr: {
# define CLASSNAME (clang::OpaqueValueExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__OpaqueValueExpr;
  switch( (currefl::memnames)MemNum ) {
    case currefl::findInCopyConstruct: {
      ASSERT_TRAIT_IS_REFLPROP(findInCopyConstruct)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::Expr *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->findInCopyConstruct(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getLocation, Type, X->getLocation() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case_REFLPROP_0ARGS( getExprLoc, Type, X->getExprLoc() )
    case currefl::children: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->children())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->children())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::children))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case_REFLPROP_0ARGS( getSourceExpr, Type, X->getSourceExpr() )
    case_REFLPROP_0ARGS( isUnique, Result, X->isUnique() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__DeclRefExpr: {
# define CLASSNAME (clang::DeclRefExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__DeclRefExpr;
  switch( (currefl::memnames)MemNum ) {
    case currefl::Create: {
      ASSERT_TRAIT_IS_REFLPROP(Create)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((class clang::NestedNameSpecifierLoc), p1)
        LOAD_VAL((class clang::SourceLocation), p2)
        LOAD_VAL((class clang::ValueDecl *), p3)
        LOAD_VAL((bool), p4)
        LOAD_VAL((class clang::SourceLocation), p5)
        LOAD_VAL((class clang::QualType), p6)
        LOAD_VAL((enum clang::ExprValueKind), p7)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3, p4, p5, p6, p7))
        LOAD_VAL((class clang::NamedDecl *), p8)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3, p4, p5, p6, p7, p8))
        LOAD_VAL((const class clang::TemplateArgumentListInfo *), p9)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9))
      };
      break;
    }
    case currefl::Create1: {
      ASSERT_TRAIT_IS_REFLPROP(Create1)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((class clang::NestedNameSpecifierLoc), p1)
        LOAD_VAL((class clang::SourceLocation), p2)
        LOAD_VAL((class clang::ValueDecl *), p3)
        LOAD_VAL((bool), p4)
        LOAD_VAL((const struct clang::DeclarationNameInfo &), p5)
        LOAD_VAL((class clang::QualType), p6)
        LOAD_VAL((enum clang::ExprValueKind), p7)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3, p4, p5, p6, p7))
        LOAD_VAL((class clang::NamedDecl *), p8)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3, p4, p5, p6, p7, p8))
        LOAD_VAL((const class clang::TemplateArgumentListInfo *), p9)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9))
      };
      break;
    }
    case currefl::CreateEmpty: {
      ASSERT_TRAIT_IS_REFLPROP(CreateEmpty)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((bool), p1)
        LOAD_VAL((bool), p2)
        LOAD_VAL((bool), p3)
        LOAD_VAL((unsigned int), p4)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateEmpty(p0, p1, p2, p3, p4))
      };
      break;
    }
    case_REFLPROP_0ARGS( getDecl, Type, X->getDecl() )
    case_REFLPROP_0ARGS( getNameInfo, Type, X->getNameInfo() )
    case_REFLPROP_0ARGS( getLocation, Type, X->getLocation() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case_REFLPROP_0ARGS( hasQualifier, Result, X->hasQualifier() )
    case_REFLPROP_0ARGS( getQualifierLoc, Type, X->getQualifierLoc() )
    case_REFLPROP_0ARGS( getQualifier, Type, X->getQualifier() )
    case_REFLPROP_0ARGS( getFoundDecl, Type, X->getFoundDecl() )
    case_REFLPROP_0ARGS( hasTemplateKWAndArgsInfo, Result, X->hasTemplateKWAndArgsInfo() )
    case_REFLPROP_0ARGS( getTemplateKeywordLoc, Type, X->getTemplateKeywordLoc() )
    case_REFLPROP_0ARGS( getLAngleLoc, Type, X->getLAngleLoc() )
    case_REFLPROP_0ARGS( getRAngleLoc, Type, X->getRAngleLoc() )
    case_REFLPROP_0ARGS( hasTemplateKeyword, Result, X->hasTemplateKeyword() )
    case_REFLPROP_0ARGS( hasExplicitTemplateArgs, Result, X->hasExplicitTemplateArgs() )
    case currefl::copyTemplateArgumentsInto: {
      ASSERT_TRAIT_IS_REFLPROP(copyTemplateArgumentsInto)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::TemplateArgumentListInfo &), p0)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->copyTemplateArgumentsInto((class clang::TemplateArgumentListInfo &)p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getTemplateArgs, Type, X->getTemplateArgs() )
    case_REFLPROP_0ARGS( getNumTemplateArgs, Result, X->getNumTemplateArgs() )
    case currefl::template_arguments: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->template_arguments())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->template_arguments())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::template_arguments))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case_REFLPROP_0ARGS( hadMultipleCandidates, Result, X->hadMultipleCandidates() )
    case_REFLPROP_0ARGS( refersToEnclosingVariableOrCapture, Result, X->refersToEnclosingVariableOrCapture() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::children: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->children())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->children())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::children))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__PredefinedExpr: {
# define CLASSNAME (clang::PredefinedExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__PredefinedExpr;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getIdentType, Result, X->getIdentType() )
    case_REFLPROP_0ARGS( getLocation, Type, X->getLocation() )
    case_REFLPROP_0ARGS( getFunctionName, Type, X->getFunctionName() )
    case currefl::getIdentTypeName: {
      ASSERT_TRAIT_IS_REFLPROP(getIdentTypeName)
      SET_PRIM_TYPE(const char *)
      SET_CALLBACK(Str) {
        LOAD_VAL_X(Str)
        LOAD_VAL((enum clang::PredefinedExpr::IdentType), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Str, X->getIdentTypeName(p0))
      };
      break;
    }
    case currefl::ComputeName: {
      ASSERT_TRAIT_IS_REFLPROP(ComputeName)
      SET_PRIM_TYPE(const char *)
      SET_CALLBACK(Str) {
        LOAD_VAL_X(Str)
        LOAD_VAL((enum clang::PredefinedExpr::IdentType), p0)
        LOAD_VAL((const class clang::Decl *), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Str, X->ComputeName(p0, p1))
      };
      break;
    }
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::children: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->children())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->children())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::children))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__APIntStorage: {
# define CLASSNAME (clang::APIntStorage)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__APIntStorage;
  switch( (currefl::memnames)MemNum ) {
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__IntegerLiteral: {
# define CLASSNAME (clang::IntegerLiteral)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__IntegerLiteral;
  switch( (currefl::memnames)MemNum ) {
    case currefl::Create: {
      ASSERT_TRAIT_IS_REFLPROP(Create)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((const class llvm::APInt &), p1)
        LOAD_VAL((class clang::QualType), p2)
        LOAD_VAL((class clang::SourceLocation), p3)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3))
      };
      break;
    }
    case currefl::Create1: {
      ASSERT_TRAIT_IS_REFLPROP(Create1)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((struct clang::Stmt::EmptyShell), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1))
      };
      break;
    }
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case_REFLPROP_0ARGS( getLocation, Type, X->getLocation() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::children: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->children())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->children())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::children))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__FixedPointLiteral: {
# define CLASSNAME (clang::FixedPointLiteral)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__FixedPointLiteral;
  switch( (currefl::memnames)MemNum ) {
    case currefl::CreateFromRawInt: {
      ASSERT_TRAIT_IS_REFLPROP(CreateFromRawInt)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((const class llvm::APInt &), p1)
        LOAD_VAL((class clang::QualType), p2)
        LOAD_VAL((class clang::SourceLocation), p3)
        LOAD_VAL((unsigned int), p4)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateFromRawInt(p0, p1, p2, p3, p4))
      };
      break;
    }
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case_REFLPROP_0ARGS( getLocation, Type, X->getLocation() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::getValueAsString: {
      ASSERT_TRAIT_IS_REFLPROP(getValueAsString)
      SET_PRIM_TYPE(const char *)
      SET_CALLBACK(Str) {
        LOAD_VAL_X(Str)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Str, X->getValueAsString(p0))
      };
      break;
    }
    case currefl::children: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->children())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->children())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::children))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__CharacterLiteral: {
# define CLASSNAME (clang::CharacterLiteral)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__CharacterLiteral;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getLocation, Type, X->getLocation() )
    case_REFLPROP_0ARGS( getKind, Result, X->getKind() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case_REFLPROP_0ARGS( getValue, Result, X->getValue() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::children: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->children())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->children())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::children))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__FloatingLiteral: {
# define CLASSNAME (clang::FloatingLiteral)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__FloatingLiteral;
  switch( (currefl::memnames)MemNum ) {
    case currefl::Create: {
      ASSERT_TRAIT_IS_REFLPROP(Create)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((const class llvm::APFloat &), p1)
        LOAD_VAL((bool), p2)
        LOAD_VAL((class clang::QualType), p3)
        LOAD_VAL((class clang::SourceLocation), p4)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3, p4))
      };
      break;
    }
    case currefl::Create1: {
      ASSERT_TRAIT_IS_REFLPROP(Create1)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((struct clang::Stmt::EmptyShell), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1))
      };
      break;
    }
    case_REFLPROP_0ARGS( isExact, Result, X->isExact() )
    case_REFLPROP_0ARGS( getValueAsApproximateDouble, Result, X->getValueAsApproximateDouble() )
    case_REFLPROP_0ARGS( getLocation, Type, X->getLocation() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::children: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->children())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->children())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::children))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__ImaginaryLiteral: {
# define CLASSNAME (clang::ImaginaryLiteral)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__ImaginaryLiteral;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getSubExpr, Type, X->getSubExpr() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::children: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->children())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->children())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::children))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__StringLiteral: {
# define CLASSNAME (clang::StringLiteral)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__StringLiteral;
  switch( (currefl::memnames)MemNum ) {
    case currefl::CreateEmpty: {
      ASSERT_TRAIT_IS_REFLPROP(CreateEmpty)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateEmpty(p0, p1))
      };
      break;
    }
    case_REFLPROP_0ARGS( getString, Str, X->getString() )
    case_REFLPROP_0ARGS( getBytes, Str, X->getBytes() )
    case currefl::outputString: {
      ASSERT_TRAIT_IS_REFLPROP(outputString)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::raw_ostream &), p0)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->outputString((class llvm::raw_ostream &)p0))
      };
      break;
    }
    case currefl::getCodeUnit: {
      ASSERT_TRAIT_IS_REFLPROP(getCodeUnit)
      SET_PRIM_TYPE(unsigned int)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((unsigned long), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getCodeUnit(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getByteLength, Result, X->getByteLength() )
    case_REFLPROP_0ARGS( getLength, Result, X->getLength() )
    case_REFLPROP_0ARGS( getCharByteWidth, Result, X->getCharByteWidth() )
    case_REFLPROP_0ARGS( getKind, Result, X->getKind() )
    case_REFLPROP_0ARGS( isAscii, Result, X->isAscii() )
    case_REFLPROP_0ARGS( isWide, Result, X->isWide() )
    case_REFLPROP_0ARGS( isUTF8, Result, X->isUTF8() )
    case_REFLPROP_0ARGS( isUTF16, Result, X->isUTF16() )
    case_REFLPROP_0ARGS( isUTF32, Result, X->isUTF32() )
    case_REFLPROP_0ARGS( isPascal, Result, X->isPascal() )
    case_REFLPROP_0ARGS( containsNonAscii, Result, X->containsNonAscii() )
    case_REFLPROP_0ARGS( containsNonAsciiOrNull, Result, X->containsNonAsciiOrNull() )
    case_REFLPROP_0ARGS( getNumConcatenated, Result, X->getNumConcatenated() )
    case currefl::getStrTokenLoc: {
      ASSERT_TRAIT_IS_REFLPROP(getStrTokenLoc)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getStrTokenLoc(p0))
      };
      break;
    }
    case currefl::getLocationOfByte: {
      ASSERT_TRAIT_IS_REFLPROP(getLocationOfByte)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        LOAD_VAL((const class clang::SourceManager &), p1)
        LOAD_VAL((const class clang::LangOptions &), p2)
        LOAD_VAL((const class clang::TargetInfo &), p3)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Type, X->getLocationOfByte(p0, p1, p2, p3))
        LOAD_VAL((unsigned int *), p4)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Type, X->getLocationOfByte(p0, p1, p2, p3, p4))
        LOAD_VAL((unsigned int *), p5)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getLocationOfByte(p0, p1, p2, p3, p4, p5))
      };
      break;
    }
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::children: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->children())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->children())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::children))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__ParenExpr: {
# define CLASSNAME (clang::ParenExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__ParenExpr;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getSubExpr, Type, X->getSubExpr() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case_REFLPROP_0ARGS( getLParen, Type, X->getLParen() )
    case_REFLPROP_0ARGS( getRParen, Type, X->getRParen() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::children: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->children())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->children())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::children))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__UnaryOperator: {
# define CLASSNAME (clang::UnaryOperator)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__UnaryOperator;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getOpcode, Result, X->getOpcode() )
    case_REFLPROP_0ARGS( getSubExpr, Type, X->getSubExpr() )
    case_REFLPROP_0ARGS( getOperatorLoc, Type, X->getOperatorLoc() )
    case_REFLPROP_0ARGS( canOverflow, Result, X->canOverflow() )
    case currefl::isPostfix: {
      ASSERT_TRAIT_IS_REFLPROP(isPostfix)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::UnaryOperatorKind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isPostfix(p0))
      };
      break;
    }
    case currefl::isPrefix: {
      ASSERT_TRAIT_IS_REFLPROP(isPrefix)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::UnaryOperatorKind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isPrefix(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( isPrefix1, Result, X->isPrefix() )
    case_REFLPROP_0ARGS( isPostfix1, Result, X->isPostfix() )
    case currefl::isIncrementOp: {
      ASSERT_TRAIT_IS_REFLPROP(isIncrementOp)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::UnaryOperatorKind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isIncrementOp(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( isIncrementOp1, Result, X->isIncrementOp() )
    case currefl::isDecrementOp: {
      ASSERT_TRAIT_IS_REFLPROP(isDecrementOp)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::UnaryOperatorKind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isDecrementOp(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( isDecrementOp1, Result, X->isDecrementOp() )
    case currefl::isIncrementDecrementOp: {
      ASSERT_TRAIT_IS_REFLPROP(isIncrementDecrementOp)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::UnaryOperatorKind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isIncrementDecrementOp(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( isIncrementDecrementOp1, Result, X->isIncrementDecrementOp() )
    case currefl::isArithmeticOp: {
      ASSERT_TRAIT_IS_REFLPROP(isArithmeticOp)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::UnaryOperatorKind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isArithmeticOp(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( isArithmeticOp1, Result, X->isArithmeticOp() )
    case currefl::getOpcodeStr: {
      ASSERT_TRAIT_IS_REFLPROP(getOpcodeStr)
      SET_PRIM_TYPE(const char *)
      SET_CALLBACK(Str) {
        LOAD_VAL_X(Str)
        LOAD_VAL((enum clang::UnaryOperatorKind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Str, X->getOpcodeStr(p0))
      };
      break;
    }
    case currefl::getOverloadedOpcode: {
      ASSERT_TRAIT_IS_REFLPROP(getOverloadedOpcode)
      SET_PRIM_TYPE(enum clang::UnaryOperatorKind)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::OverloadedOperatorKind), p0)
        LOAD_VAL((bool), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getOverloadedOpcode(p0, p1))
      };
      break;
    }
    case currefl::getOverloadedOperator: {
      ASSERT_TRAIT_IS_REFLPROP(getOverloadedOperator)
      SET_PRIM_TYPE(enum clang::OverloadedOperatorKind)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::UnaryOperatorKind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getOverloadedOperator(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case_REFLPROP_0ARGS( getExprLoc, Type, X->getExprLoc() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::children: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->children())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->children())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::children))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__OffsetOfNode: {
# define CLASSNAME (clang::OffsetOfNode)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__OffsetOfNode;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getKind, Result, X->getKind() )
    case_REFLPROP_0ARGS( getArrayExprIndex, Result, X->getArrayExprIndex() )
    case_REFLPROP_0ARGS( getField, Type, X->getField() )
    case_REFLPROP_0ARGS( getFieldName, Type, X->getFieldName() )
    case_REFLPROP_0ARGS( getBase, Type, X->getBase() )
    case_REFLPROP_0ARGS( getSourceRange, Type, X->getSourceRange() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__OffsetOfExpr: {
# define CLASSNAME (clang::OffsetOfExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__OffsetOfExpr;
  switch( (currefl::memnames)MemNum ) {
    case currefl::CreateEmpty: {
      ASSERT_TRAIT_IS_REFLPROP(CreateEmpty)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        LOAD_VAL((unsigned int), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateEmpty(p0, p1, p2))
      };
      break;
    }
    case_REFLPROP_0ARGS( getOperatorLoc, Type, X->getOperatorLoc() )
    case_REFLPROP_0ARGS( getRParenLoc, Type, X->getRParenLoc() )
    case_REFLPROP_0ARGS( getTypeSourceInfo, Type, X->getTypeSourceInfo() )
    case currefl::getComponent: {
      ASSERT_TRAIT_IS_REFLPROP(getComponent)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getComponent(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getNumComponents, Result, X->getNumComponents() )
    case currefl::getIndexExpr: {
      ASSERT_TRAIT_IS_REFLPROP(getIndexExpr)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getIndexExpr(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getNumExpressions, Result, X->getNumExpressions() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::children: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->children())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->children())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::children))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__UnaryExprOrTypeTraitExpr: {
# define CLASSNAME (clang::UnaryExprOrTypeTraitExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__UnaryExprOrTypeTraitExpr;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getKind, Result, X->getKind() )
    case_REFLPROP_0ARGS( isArgumentType, Result, X->isArgumentType() )
    case_REFLPROP_0ARGS( getArgumentType, Type, X->getArgumentType() )
    case_REFLPROP_0ARGS( getArgumentTypeInfo, Type, X->getArgumentTypeInfo() )
    case_REFLPROP_0ARGS( getArgumentExpr, Type, X->getArgumentExpr() )
    case_REFLPROP_0ARGS( getTypeOfArgument, Type, X->getTypeOfArgument() )
    case_REFLPROP_0ARGS( getOperatorLoc, Type, X->getOperatorLoc() )
    case_REFLPROP_0ARGS( getRParenLoc, Type, X->getRParenLoc() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::children: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->children())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->children())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::children))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__ArraySubscriptExpr: {
# define CLASSNAME (clang::ArraySubscriptExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__ArraySubscriptExpr;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getLHS, Type, X->getLHS() )
    case_REFLPROP_0ARGS( getRHS, Type, X->getRHS() )
    case_REFLPROP_0ARGS( getBase, Type, X->getBase() )
    case_REFLPROP_0ARGS( getIdx, Type, X->getIdx() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case_REFLPROP_0ARGS( getRBracketLoc, Type, X->getRBracketLoc() )
    case_REFLPROP_0ARGS( getExprLoc, Type, X->getExprLoc() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::children: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->children())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->children())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::children))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__CallExpr: {
# define CLASSNAME (clang::CallExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__CallExpr;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getCallee, Type, X->getCallee() )
    case_REFLPROP_0ARGS( getCalleeDecl, Type, X->getCalleeDecl() )
    case_REFLPROP_0ARGS( getDirectCallee, Type, X->getDirectCallee() )
    case_REFLPROP_0ARGS( getNumArgs, Result, X->getNumArgs() )
    case_REFLPROP_0ARGS( getArgs, Type, X->getArgs() )
    case currefl::getArg: {
      ASSERT_TRAIT_IS_REFLPROP(getArg)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getArg(p0))
      };
      break;
    }
    case currefl::arguments: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->arguments())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->arguments())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::arguments))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case_REFLPROP_0ARGS( getNumCommas, Result, X->getNumCommas() )
    case_REFLPROP_0ARGS( getBuiltinCallee, Result, X->getBuiltinCallee() )
    case currefl::isUnevaluatedBuiltinCall: {
      ASSERT_TRAIT_IS_REFLPROP(isUnevaluatedBuiltinCall)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::ASTContext &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isUnevaluatedBuiltinCall(p0))
      };
      break;
    }
    case currefl::getCallReturnType: {
      ASSERT_TRAIT_IS_REFLPROP(getCallReturnType)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getCallReturnType(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getRParenLoc, Type, X->getRParenLoc() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case currefl::isBuiltinAssumeFalse: {
      ASSERT_TRAIT_IS_REFLPROP(isBuiltinAssumeFalse)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::ASTContext &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isBuiltinAssumeFalse(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( isCallToStdMove, Result, X->isCallToStdMove() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::children: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->children())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->children())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::children))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__MemberExpr: {
# define CLASSNAME (clang::MemberExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__MemberExpr;
  switch( (currefl::memnames)MemNum ) {
    case currefl::Create: {
      ASSERT_TRAIT_IS_REFLPROP(Create)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((class clang::Expr *), p1)
        LOAD_VAL((bool), p2)
        LOAD_VAL((class clang::SourceLocation), p3)
        LOAD_VAL((class clang::NestedNameSpecifierLoc), p4)
        LOAD_VAL((class clang::SourceLocation), p5)
        LOAD_VAL((class clang::ValueDecl *), p6)
        LOAD_VAL((class clang::DeclAccessPair), p7)
        LOAD_VAL((struct clang::DeclarationNameInfo), p8)
        LOAD_VAL((const class clang::TemplateArgumentListInfo *), p9)
        LOAD_VAL((class clang::QualType), p10)
        LOAD_VAL((enum clang::ExprValueKind), p11)
        LOAD_VAL((enum clang::ExprObjectKind), p12)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12))
      };
      break;
    }
    case_REFLPROP_0ARGS( getBase, Type, X->getBase() )
    case_REFLPROP_0ARGS( getMemberDecl, Type, X->getMemberDecl() )
    case_REFLPROP_0ARGS( getFoundDecl, Type, X->getFoundDecl() )
    case_REFLPROP_0ARGS( hasQualifier, Result, X->hasQualifier() )
    case_REFLPROP_0ARGS( getQualifierLoc, Type, X->getQualifierLoc() )
    case_REFLPROP_0ARGS( getQualifier, Type, X->getQualifier() )
    case_REFLPROP_0ARGS( getTemplateKeywordLoc, Type, X->getTemplateKeywordLoc() )
    case_REFLPROP_0ARGS( getLAngleLoc, Type, X->getLAngleLoc() )
    case_REFLPROP_0ARGS( getRAngleLoc, Type, X->getRAngleLoc() )
    case_REFLPROP_0ARGS( hasTemplateKeyword, Result, X->hasTemplateKeyword() )
    case_REFLPROP_0ARGS( hasExplicitTemplateArgs, Result, X->hasExplicitTemplateArgs() )
    case currefl::copyTemplateArgumentsInto: {
      ASSERT_TRAIT_IS_REFLPROP(copyTemplateArgumentsInto)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::TemplateArgumentListInfo &), p0)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->copyTemplateArgumentsInto((class clang::TemplateArgumentListInfo &)p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getTemplateArgs, Type, X->getTemplateArgs() )
    case_REFLPROP_0ARGS( getNumTemplateArgs, Result, X->getNumTemplateArgs() )
    case currefl::template_arguments: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->template_arguments())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->template_arguments())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::template_arguments))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case_REFLPROP_0ARGS( getMemberNameInfo, Type, X->getMemberNameInfo() )
    case_REFLPROP_0ARGS( getOperatorLoc, Type, X->getOperatorLoc() )
    case_REFLPROP_0ARGS( isArrow, Result, X->isArrow() )
    case_REFLPROP_0ARGS( getMemberLoc, Type, X->getMemberLoc() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case_REFLPROP_0ARGS( getExprLoc, Type, X->getExprLoc() )
    case_REFLPROP_0ARGS( isImplicitAccess, Result, X->isImplicitAccess() )
    case_REFLPROP_0ARGS( hadMultipleCandidates, Result, X->hadMultipleCandidates() )
    case currefl::performsVirtualDispatch: {
      ASSERT_TRAIT_IS_REFLPROP(performsVirtualDispatch)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::LangOptions &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->performsVirtualDispatch(p0))
      };
      break;
    }
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::children: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->children())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->children())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::children))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__CompoundLiteralExpr: {
# define CLASSNAME (clang::CompoundLiteralExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__CompoundLiteralExpr;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getInitializer, Type, X->getInitializer() )
    case_REFLPROP_0ARGS( isFileScope, Result, X->isFileScope() )
    case_REFLPROP_0ARGS( getLParenLoc, Type, X->getLParenLoc() )
    case_REFLPROP_0ARGS( getTypeSourceInfo, Type, X->getTypeSourceInfo() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::children: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->children())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->children())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::children))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__CastExpr: {
# define CLASSNAME (clang::CastExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__CastExpr;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getCastKind, Result, X->getCastKind() )
    case currefl::getCastKindName: {
      ASSERT_TRAIT_IS_REFLPROP(getCastKindName)
      SET_PRIM_TYPE(const char *)
      SET_CALLBACK(Str) {
        LOAD_VAL_X(Str)
        LOAD_VAL((enum clang::CastKind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Str, X->getCastKindName(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getCastKindName1, Str, X->getCastKindName() )
    case_REFLPROP_0ARGS( getSubExpr, Type, X->getSubExpr() )
    case_REFLPROP_0ARGS( getSubExprAsWritten, Type, X->getSubExprAsWritten() )
    case_REFLPROP_0ARGS( getConversionFunction, Type, X->getConversionFunction() )
    case_REFLPROP_0ARGS( path_empty, Result, X->path_empty() )
    case_REFLPROP_0ARGS( path_size, Result, X->path_size() )
    case_REFLPROP_0ARGS( getTargetUnionField, Type, X->getTargetUnionField() )
    case currefl::getTargetFieldForToUnionCast: {
      ASSERT_TRAIT_IS_REFLPROP(getTargetFieldForToUnionCast)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::QualType), p0)
        LOAD_VAL((class clang::QualType), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getTargetFieldForToUnionCast(p0, p1))
      };
      break;
    }
    case currefl::getTargetFieldForToUnionCast1: {
      ASSERT_TRAIT_IS_REFLPROP(getTargetFieldForToUnionCast1)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::RecordDecl *), p0)
        LOAD_VAL((class clang::QualType), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getTargetFieldForToUnionCast(p0, p1))
      };
      break;
    }
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::children: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->children())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->children())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::children))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__ImplicitCastExpr: {
# define CLASSNAME (clang::ImplicitCastExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__ImplicitCastExpr;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( isPartOfExplicitCast, Result, X->isPartOfExplicitCast() )
    case currefl::CreateEmpty: {
      ASSERT_TRAIT_IS_REFLPROP(CreateEmpty)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateEmpty(p0, p1))
      };
      break;
    }
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__ExplicitCastExpr: {
# define CLASSNAME (clang::ExplicitCastExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__ExplicitCastExpr;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getTypeInfoAsWritten, Type, X->getTypeInfoAsWritten() )
    case_REFLPROP_0ARGS( getTypeAsWritten, Type, X->getTypeAsWritten() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__CStyleCastExpr: {
# define CLASSNAME (clang::CStyleCastExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__CStyleCastExpr;
  switch( (currefl::memnames)MemNum ) {
    case currefl::CreateEmpty: {
      ASSERT_TRAIT_IS_REFLPROP(CreateEmpty)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateEmpty(p0, p1))
      };
      break;
    }
    case_REFLPROP_0ARGS( getLParenLoc, Type, X->getLParenLoc() )
    case_REFLPROP_0ARGS( getRParenLoc, Type, X->getRParenLoc() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__BinaryOperator: {
# define CLASSNAME (clang::BinaryOperator)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__BinaryOperator;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getExprLoc, Type, X->getExprLoc() )
    case_REFLPROP_0ARGS( getOperatorLoc, Type, X->getOperatorLoc() )
    case_REFLPROP_0ARGS( getOpcode, Result, X->getOpcode() )
    case_REFLPROP_0ARGS( getLHS, Type, X->getLHS() )
    case_REFLPROP_0ARGS( getRHS, Type, X->getRHS() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case currefl::getOpcodeStr: {
      ASSERT_TRAIT_IS_REFLPROP(getOpcodeStr)
      SET_PRIM_TYPE(const char *)
      SET_CALLBACK(Str) {
        LOAD_VAL_X(Str)
        LOAD_VAL((enum clang::BinaryOperatorKind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Str, X->getOpcodeStr(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getOpcodeStr1, Str, X->getOpcodeStr() )
    case currefl::getOverloadedOpcode: {
      ASSERT_TRAIT_IS_REFLPROP(getOverloadedOpcode)
      SET_PRIM_TYPE(enum clang::BinaryOperatorKind)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::OverloadedOperatorKind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getOverloadedOpcode(p0))
      };
      break;
    }
    case currefl::getOverloadedOperator: {
      ASSERT_TRAIT_IS_REFLPROP(getOverloadedOperator)
      SET_PRIM_TYPE(enum clang::OverloadedOperatorKind)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::BinaryOperatorKind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getOverloadedOperator(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( isPtrMemOp, Result, X->isPtrMemOp() )
    case currefl::isMultiplicativeOp: {
      ASSERT_TRAIT_IS_REFLPROP(isMultiplicativeOp)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::BinaryOperatorKind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isMultiplicativeOp(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( isMultiplicativeOp1, Result, X->isMultiplicativeOp() )
    case currefl::isAdditiveOp: {
      ASSERT_TRAIT_IS_REFLPROP(isAdditiveOp)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::BinaryOperatorKind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isAdditiveOp(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( isAdditiveOp1, Result, X->isAdditiveOp() )
    case currefl::isShiftOp: {
      ASSERT_TRAIT_IS_REFLPROP(isShiftOp)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::BinaryOperatorKind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isShiftOp(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( isShiftOp1, Result, X->isShiftOp() )
    case currefl::isBitwiseOp: {
      ASSERT_TRAIT_IS_REFLPROP(isBitwiseOp)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::BinaryOperatorKind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isBitwiseOp(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( isBitwiseOp1, Result, X->isBitwiseOp() )
    case currefl::isRelationalOp: {
      ASSERT_TRAIT_IS_REFLPROP(isRelationalOp)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::BinaryOperatorKind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isRelationalOp(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( isRelationalOp1, Result, X->isRelationalOp() )
    case currefl::isEqualityOp: {
      ASSERT_TRAIT_IS_REFLPROP(isEqualityOp)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::BinaryOperatorKind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isEqualityOp(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( isEqualityOp1, Result, X->isEqualityOp() )
    case currefl::isComparisonOp: {
      ASSERT_TRAIT_IS_REFLPROP(isComparisonOp)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::BinaryOperatorKind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isComparisonOp(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( isComparisonOp1, Result, X->isComparisonOp() )
    case currefl::negateComparisonOp: {
      ASSERT_TRAIT_IS_REFLPROP(negateComparisonOp)
      SET_PRIM_TYPE(enum clang::BinaryOperatorKind)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::BinaryOperatorKind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->negateComparisonOp(p0))
      };
      break;
    }
    case currefl::reverseComparisonOp: {
      ASSERT_TRAIT_IS_REFLPROP(reverseComparisonOp)
      SET_PRIM_TYPE(enum clang::BinaryOperatorKind)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::BinaryOperatorKind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->reverseComparisonOp(p0))
      };
      break;
    }
    case currefl::isLogicalOp: {
      ASSERT_TRAIT_IS_REFLPROP(isLogicalOp)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::BinaryOperatorKind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isLogicalOp(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( isLogicalOp1, Result, X->isLogicalOp() )
    case currefl::isAssignmentOp: {
      ASSERT_TRAIT_IS_REFLPROP(isAssignmentOp)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::BinaryOperatorKind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isAssignmentOp(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( isAssignmentOp1, Result, X->isAssignmentOp() )
    case currefl::isCompoundAssignmentOp: {
      ASSERT_TRAIT_IS_REFLPROP(isCompoundAssignmentOp)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::BinaryOperatorKind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isCompoundAssignmentOp(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( isCompoundAssignmentOp1, Result, X->isCompoundAssignmentOp() )
    case currefl::getOpForCompoundAssignment: {
      ASSERT_TRAIT_IS_REFLPROP(getOpForCompoundAssignment)
      SET_PRIM_TYPE(enum clang::BinaryOperatorKind)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::BinaryOperatorKind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getOpForCompoundAssignment(p0))
      };
      break;
    }
    case currefl::isShiftAssignOp: {
      ASSERT_TRAIT_IS_REFLPROP(isShiftAssignOp)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::BinaryOperatorKind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isShiftAssignOp(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( isShiftAssignOp1, Result, X->isShiftAssignOp() )
    case currefl::isNullPointerArithmeticExtension: {
      ASSERT_TRAIT_IS_REFLPROP(isNullPointerArithmeticExtension)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((enum clang::BinaryOperatorKind), p1)
        LOAD_VAL((class clang::Expr *), p2)
        LOAD_VAL((class clang::Expr *), p3)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isNullPointerArithmeticExtension(p0, p1, p2, p3))
      };
      break;
    }
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::children: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->children())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->children())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::children))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case_REFLPROP_0ARGS( getFPFeatures, Type, X->getFPFeatures() )
    case_REFLPROP_0ARGS( isFPContractableWithinStatement, Result, X->isFPContractableWithinStatement() )
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__CompoundAssignOperator: {
# define CLASSNAME (clang::CompoundAssignOperator)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__CompoundAssignOperator;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getComputationLHSType, Type, X->getComputationLHSType() )
    case_REFLPROP_0ARGS( getComputationResultType, Type, X->getComputationResultType() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__AbstractConditionalOperator: {
# define CLASSNAME (clang::AbstractConditionalOperator)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__AbstractConditionalOperator;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getCond, Type, X->getCond() )
    case_REFLPROP_0ARGS( getTrueExpr, Type, X->getTrueExpr() )
    case_REFLPROP_0ARGS( getFalseExpr, Type, X->getFalseExpr() )
    case_REFLPROP_0ARGS( getQuestionLoc, Type, X->getQuestionLoc() )
    case_REFLPROP_0ARGS( getColonLoc, Type, X->getColonLoc() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__ConditionalOperator: {
# define CLASSNAME (clang::ConditionalOperator)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__ConditionalOperator;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getCond, Type, X->getCond() )
    case_REFLPROP_0ARGS( getTrueExpr, Type, X->getTrueExpr() )
    case_REFLPROP_0ARGS( getFalseExpr, Type, X->getFalseExpr() )
    case_REFLPROP_0ARGS( getLHS, Type, X->getLHS() )
    case_REFLPROP_0ARGS( getRHS, Type, X->getRHS() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::children: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->children())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->children())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::children))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__BinaryConditionalOperator: {
# define CLASSNAME (clang::BinaryConditionalOperator)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__BinaryConditionalOperator;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getCommon, Type, X->getCommon() )
    case_REFLPROP_0ARGS( getOpaqueValue, Type, X->getOpaqueValue() )
    case_REFLPROP_0ARGS( getCond, Type, X->getCond() )
    case_REFLPROP_0ARGS( getTrueExpr, Type, X->getTrueExpr() )
    case_REFLPROP_0ARGS( getFalseExpr, Type, X->getFalseExpr() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::children: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->children())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->children())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::children))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__AddrLabelExpr: {
# define CLASSNAME (clang::AddrLabelExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__AddrLabelExpr;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getAmpAmpLoc, Type, X->getAmpAmpLoc() )
    case_REFLPROP_0ARGS( getLabelLoc, Type, X->getLabelLoc() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case_REFLPROP_0ARGS( getLabel, Type, X->getLabel() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::children: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->children())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->children())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::children))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__StmtExpr: {
# define CLASSNAME (clang::StmtExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__StmtExpr;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getSubStmt, Type, X->getSubStmt() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case_REFLPROP_0ARGS( getLParenLoc, Type, X->getLParenLoc() )
    case_REFLPROP_0ARGS( getRParenLoc, Type, X->getRParenLoc() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::children: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->children())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->children())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::children))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__ShuffleVectorExpr: {
# define CLASSNAME (clang::ShuffleVectorExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__ShuffleVectorExpr;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getBuiltinLoc, Type, X->getBuiltinLoc() )
    case_REFLPROP_0ARGS( getRParenLoc, Type, X->getRParenLoc() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getNumSubExprs, Result, X->getNumSubExprs() )
    case currefl::getExpr: {
      ASSERT_TRAIT_IS_REFLPROP(getExpr)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getExpr(p0))
      };
      break;
    }
    case currefl::getShuffleMaskIdx: {
      ASSERT_TRAIT_IS_REFLPROP(getShuffleMaskIdx)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getShuffleMaskIdx(p0, p1))
      };
      break;
    }
    case currefl::children: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->children())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->children())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::children))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__ConvertVectorExpr: {
# define CLASSNAME (clang::ConvertVectorExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__ConvertVectorExpr;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getSrcExpr, Type, X->getSrcExpr() )
    case_REFLPROP_0ARGS( getTypeSourceInfo, Type, X->getTypeSourceInfo() )
    case_REFLPROP_0ARGS( getBuiltinLoc, Type, X->getBuiltinLoc() )
    case_REFLPROP_0ARGS( getRParenLoc, Type, X->getRParenLoc() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::children: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->children())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->children())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::children))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__ChooseExpr: {
# define CLASSNAME (clang::ChooseExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__ChooseExpr;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( isConditionTrue, Result, X->isConditionTrue() )
    case_REFLPROP_0ARGS( isConditionDependent, Result, X->isConditionDependent() )
    case_REFLPROP_0ARGS( getChosenSubExpr, Type, X->getChosenSubExpr() )
    case_REFLPROP_0ARGS( getCond, Type, X->getCond() )
    case_REFLPROP_0ARGS( getLHS, Type, X->getLHS() )
    case_REFLPROP_0ARGS( getRHS, Type, X->getRHS() )
    case_REFLPROP_0ARGS( getBuiltinLoc, Type, X->getBuiltinLoc() )
    case_REFLPROP_0ARGS( getRParenLoc, Type, X->getRParenLoc() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::children: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->children())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->children())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::children))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__GNUNullExpr: {
# define CLASSNAME (clang::GNUNullExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__GNUNullExpr;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getTokenLocation, Type, X->getTokenLocation() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::children: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->children())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->children())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::children))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__VAArgExpr: {
# define CLASSNAME (clang::VAArgExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__VAArgExpr;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getSubExpr, Type, X->getSubExpr() )
    case_REFLPROP_0ARGS( isMicrosoftABI, Result, X->isMicrosoftABI() )
    case_REFLPROP_0ARGS( getWrittenTypeInfo, Type, X->getWrittenTypeInfo() )
    case_REFLPROP_0ARGS( getBuiltinLoc, Type, X->getBuiltinLoc() )
    case_REFLPROP_0ARGS( getRParenLoc, Type, X->getRParenLoc() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::children: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->children())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->children())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::children))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__InitListExpr: {
# define CLASSNAME (clang::InitListExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__InitListExpr;
  switch( (currefl::memnames)MemNum ) {
    case currefl::_this_: {
      switch (TraitKind) {
        case RTK_range_nth:
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE
            BUILD_REFLECTION_CALL_RANGE_NTH(Type, *X)
          };
          break;
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE
            BUILD_REFLECTION_CALL_RANGE_SIZE(*X)
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << "_this_"
                 << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case_REFLPROP_0ARGS( getNumInits, Result, X->getNumInits() )
    case_REFLPROP_0ARGS( getInits, Type, X->getInits() )
    case currefl::inits: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->inits())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->inits())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::inits))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case currefl::getInit: {
      ASSERT_TRAIT_IS_REFLPROP(getInit)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getInit(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getArrayFiller, Type, X->getArrayFiller() )
    case_REFLPROP_0ARGS( hasArrayFiller, Result, X->hasArrayFiller() )
    case_REFLPROP_0ARGS( getInitializedFieldInUnion, Type, X->getInitializedFieldInUnion() )
    case_REFLPROP_0ARGS( isExplicit, Result, X->isExplicit() )
    case_REFLPROP_0ARGS( isStringLiteralInit, Result, X->isStringLiteralInit() )
    case_REFLPROP_0ARGS( isTransparent, Result, X->isTransparent() )
    case currefl::isIdiomaticZeroInitializer: {
      ASSERT_TRAIT_IS_REFLPROP(isIdiomaticZeroInitializer)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::LangOptions &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isIdiomaticZeroInitializer(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getLBraceLoc, Type, X->getLBraceLoc() )
    case_REFLPROP_0ARGS( getRBraceLoc, Type, X->getRBraceLoc() )
    case_REFLPROP_0ARGS( isSemanticForm, Result, X->isSemanticForm() )
    case_REFLPROP_0ARGS( getSemanticForm, Type, X->getSemanticForm() )
    case_REFLPROP_0ARGS( isSyntacticForm, Result, X->isSyntacticForm() )
    case_REFLPROP_0ARGS( getSyntacticForm, Type, X->getSyntacticForm() )
    case_REFLPROP_0ARGS( hadArrayRangeDesignator, Result, X->hadArrayRangeDesignator() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::children: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->children())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->children())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::children))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__DesignatedInitExpr: {
# define CLASSNAME (clang::DesignatedInitExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__DesignatedInitExpr;
  switch( (currefl::memnames)MemNum ) {
    case currefl::CreateEmpty: {
      ASSERT_TRAIT_IS_REFLPROP(CreateEmpty)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateEmpty(p0, p1))
      };
      break;
    }
    case_REFLPROP_0ARGS( size, Result, X->size() )
    case currefl::designators: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->designators())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->designators())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::designators))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case currefl::getDesignator: {
      ASSERT_TRAIT_IS_REFLPROP(getDesignator)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getDesignator(p0))
      };
      break;
    }
    case currefl::getArrayIndex: {
      ASSERT_TRAIT_IS_REFLPROP(getArrayIndex)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::DesignatedInitExpr::Designator &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getArrayIndex(p0))
      };
      break;
    }
    case currefl::getArrayRangeStart: {
      ASSERT_TRAIT_IS_REFLPROP(getArrayRangeStart)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::DesignatedInitExpr::Designator &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getArrayRangeStart(p0))
      };
      break;
    }
    case currefl::getArrayRangeEnd: {
      ASSERT_TRAIT_IS_REFLPROP(getArrayRangeEnd)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::DesignatedInitExpr::Designator &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getArrayRangeEnd(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getEqualOrColonLoc, Type, X->getEqualOrColonLoc() )
    case_REFLPROP_0ARGS( usesGNUSyntax, Result, X->usesGNUSyntax() )
    case_REFLPROP_0ARGS( getInit, Type, X->getInit() )
    case_REFLPROP_0ARGS( getNumSubExprs, Result, X->getNumSubExprs() )
    case currefl::getSubExpr: {
      ASSERT_TRAIT_IS_REFLPROP(getSubExpr)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getSubExpr(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getDesignatorsSourceRange, Type, X->getDesignatorsSourceRange() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::children: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->children())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->children())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::children))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__DesignatedInitExpr__Designator: {
# define CLASSNAME (clang::DesignatedInitExpr::Designator)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_MAYBEPTR(1, CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__DesignatedInitExpr__Designator;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( isFieldDesignator, Result, X->isFieldDesignator() )
    case_REFLPROP_0ARGS( isArrayDesignator, Result, X->isArrayDesignator() )
    case_REFLPROP_0ARGS( isArrayRangeDesignator, Result, X->isArrayRangeDesignator() )
    case_REFLPROP_0ARGS( getFieldName, Type, X->getFieldName() )
    case_REFLPROP_0ARGS( getField, Type, X->getField() )
    case_REFLPROP_0ARGS( getDotLoc, Type, X->getDotLoc() )
    case_REFLPROP_0ARGS( getFieldLoc, Type, X->getFieldLoc() )
    case_REFLPROP_0ARGS( getLBracketLoc, Type, X->getLBracketLoc() )
    case_REFLPROP_0ARGS( getRBracketLoc, Type, X->getRBracketLoc() )
    case_REFLPROP_0ARGS( getEllipsisLoc, Type, X->getEllipsisLoc() )
    case_REFLPROP_0ARGS( getFirstExprIndex, Result, X->getFirstExprIndex() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case_REFLPROP_0ARGS( getSourceRange, Type, X->getSourceRange() )
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__NoInitExpr: {
# define CLASSNAME (clang::NoInitExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__NoInitExpr;
  switch( (currefl::memnames)MemNum ) {
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case currefl::children: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->children())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->children())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::children))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__DesignatedInitUpdateExpr: {
# define CLASSNAME (clang::DesignatedInitUpdateExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__DesignatedInitUpdateExpr;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getBase, Type, X->getBase() )
    case_REFLPROP_0ARGS( getUpdater, Type, X->getUpdater() )
    case currefl::children: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->children())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->children())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::children))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__ArrayInitLoopExpr: {
# define CLASSNAME (clang::ArrayInitLoopExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__ArrayInitLoopExpr;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getCommonExpr, Type, X->getCommonExpr() )
    case_REFLPROP_0ARGS( getSubExpr, Type, X->getSubExpr() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case currefl::children: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->children())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->children())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::children))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__ArrayInitIndexExpr: {
# define CLASSNAME (clang::ArrayInitIndexExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__ArrayInitIndexExpr;
  switch( (currefl::memnames)MemNum ) {
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case currefl::children: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->children())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->children())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::children))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__ImplicitValueInitExpr: {
# define CLASSNAME (clang::ImplicitValueInitExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__ImplicitValueInitExpr;
  switch( (currefl::memnames)MemNum ) {
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case currefl::children: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->children())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->children())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::children))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__ParenListExpr: {
# define CLASSNAME (clang::ParenListExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__ParenListExpr;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getNumExprs, Result, X->getNumExprs() )
    case currefl::getExpr: {
      ASSERT_TRAIT_IS_REFLPROP(getExpr)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getExpr(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getLParenLoc, Type, X->getLParenLoc() )
    case_REFLPROP_0ARGS( getRParenLoc, Type, X->getRParenLoc() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::children: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->children())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->children())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::children))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__GenericSelectionExpr: {
# define CLASSNAME (clang::GenericSelectionExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__GenericSelectionExpr;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getNumAssocs, Result, X->getNumAssocs() )
    case_REFLPROP_0ARGS( getGenericLoc, Type, X->getGenericLoc() )
    case_REFLPROP_0ARGS( getDefaultLoc, Type, X->getDefaultLoc() )
    case_REFLPROP_0ARGS( getRParenLoc, Type, X->getRParenLoc() )
    case currefl::getAssocExpr: {
      ASSERT_TRAIT_IS_REFLPROP(getAssocExpr)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getAssocExpr(p0))
      };
      break;
    }
    case currefl::getAssocExprs: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->getAssocExprs())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->getAssocExprs())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::getAssocExprs))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case currefl::getAssocTypeSourceInfo: {
      ASSERT_TRAIT_IS_REFLPROP(getAssocTypeSourceInfo)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getAssocTypeSourceInfo(p0))
      };
      break;
    }
    case currefl::getAssocTypeSourceInfos: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->getAssocTypeSourceInfos())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->getAssocTypeSourceInfos())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::getAssocTypeSourceInfos))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case currefl::getAssocType: {
      ASSERT_TRAIT_IS_REFLPROP(getAssocType)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getAssocType(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getControllingExpr, Type, X->getControllingExpr() )
    case_REFLPROP_0ARGS( isResultDependent, Result, X->isResultDependent() )
    case_REFLPROP_0ARGS( getResultIndex, Result, X->getResultIndex() )
    case_REFLPROP_0ARGS( getResultExpr, Type, X->getResultExpr() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::children: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->children())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->children())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::children))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__ExtVectorElementExpr: {
# define CLASSNAME (clang::ExtVectorElementExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__ExtVectorElementExpr;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getBase, Type, X->getBase() )
    case_REFLPROP_0ARGS( getAccessor, Type, X->getAccessor() )
    case_REFLPROP_0ARGS( getAccessorLoc, Type, X->getAccessorLoc() )
    case_REFLPROP_0ARGS( getNumElements, Result, X->getNumElements() )
    case_REFLPROP_0ARGS( containsDuplicateElements, Result, X->containsDuplicateElements() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case_REFLPROP_0ARGS( isArrow, Result, X->isArrow() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::children: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->children())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->children())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::children))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__BlockExpr: {
# define CLASSNAME (clang::BlockExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__BlockExpr;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getBlockDecl, Type, X->getBlockDecl() )
    case_REFLPROP_0ARGS( getCaretLocation, Type, X->getCaretLocation() )
    case_REFLPROP_0ARGS( getBody, Type, X->getBody() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case_REFLPROP_0ARGS( getFunctionType, Type, X->getFunctionType() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::children: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->children())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->children())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::children))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__AsTypeExpr: {
# define CLASSNAME (clang::AsTypeExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__AsTypeExpr;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getSrcExpr, Type, X->getSrcExpr() )
    case_REFLPROP_0ARGS( getBuiltinLoc, Type, X->getBuiltinLoc() )
    case_REFLPROP_0ARGS( getRParenLoc, Type, X->getRParenLoc() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::children: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->children())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->children())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::children))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__PseudoObjectExpr: {
# define CLASSNAME (clang::PseudoObjectExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__PseudoObjectExpr;
  switch( (currefl::memnames)MemNum ) {
    case currefl::Create: {
      ASSERT_TRAIT_IS_REFLPROP(Create)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((struct clang::Stmt::EmptyShell), p1)
        LOAD_VAL((unsigned int), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2))
      };
      break;
    }
    case_REFLPROP_0ARGS( getSyntacticForm, Type, X->getSyntacticForm() )
    case_REFLPROP_0ARGS( getResultExprIndex, Result, X->getResultExprIndex() )
    case_REFLPROP_0ARGS( getResultExpr, Type, X->getResultExpr() )
    case_REFLPROP_0ARGS( getNumSemanticExprs, Result, X->getNumSemanticExprs() )
    case currefl::semantics: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->semantics())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->semantics())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::semantics))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case currefl::getSemanticExpr: {
      ASSERT_TRAIT_IS_REFLPROP(getSemanticExpr)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getSemanticExpr(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getExprLoc, Type, X->getExprLoc() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case currefl::children: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->children())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->children())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::children))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__AtomicExpr: {
# define CLASSNAME (clang::AtomicExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__AtomicExpr;
  switch( (currefl::memnames)MemNum ) {
    case currefl::getNumSubExprs: {
      ASSERT_TRAIT_IS_REFLPROP(getNumSubExprs)
      SET_PRIM_TYPE(unsigned int)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::AtomicExpr::AtomicOp), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getNumSubExprs(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getPtr, Type, X->getPtr() )
    case_REFLPROP_0ARGS( getOrder, Type, X->getOrder() )
    case_REFLPROP_0ARGS( getScope, Type, X->getScope() )
    case_REFLPROP_0ARGS( getVal1, Type, X->getVal1() )
    case_REFLPROP_0ARGS( getOrderFail, Type, X->getOrderFail() )
    case_REFLPROP_0ARGS( getVal2, Type, X->getVal2() )
    case_REFLPROP_0ARGS( getWeak, Type, X->getWeak() )
    case_REFLPROP_0ARGS( getValueType, Type, X->getValueType() )
    case_REFLPROP_0ARGS( getOp, Result, X->getOp() )
    case_REFLPROP_0ARGS( getNumSubExprs1, Result, X->getNumSubExprs() )
    case_REFLPROP_0ARGS( getSubExprs, Type, X->getSubExprs() )
    case_REFLPROP_0ARGS( isVolatile, Result, X->isVolatile() )
    case_REFLPROP_0ARGS( isCmpXChg, Result, X->isCmpXChg() )
    case_REFLPROP_0ARGS( isOpenCL, Result, X->isOpenCL() )
    case_REFLPROP_0ARGS( getBuiltinLoc, Type, X->getBuiltinLoc() )
    case_REFLPROP_0ARGS( getRParenLoc, Type, X->getRParenLoc() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::children: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->children())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->children())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::children))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__TypoExpr: {
# define CLASSNAME (clang::TypoExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__TypoExpr;
  switch( (currefl::memnames)MemNum ) {
    case currefl::children: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->children())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->children())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::children))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__Attr: {
# define CLASSNAME (clang::Attr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__Attr;
  switch( (currefl::memnames)MemNum ) {
    case currefl::operator_new: {
      ASSERT_TRAIT_IS_REFLPROP(operator_new)
      SET_PRIM_TYPE(void *)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((unsigned long), p0)
        LOAD_VAL((class clang::ASTContext &), p1)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Result, X->operator new(p0, p1))
        LOAD_VAL((unsigned long), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->operator new(p0, p1, p2))
      };
      break;
    }
    case currefl::operator_delete: {
      ASSERT_TRAIT_IS_REFLPROP(operator_delete)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((void *), p0)
        LOAD_VAL((class clang::ASTContext &), p1)
        LOAD_VAL((unsigned long), p2)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->operator delete((void *)p0, (class clang::ASTContext &)p1, (size_t)p2))
      };
      break;
    }
    case_REFLPROP_0ARGS( getKind, Result, X->getKind() )
    case_REFLPROP_0ARGS( getSpellingListIndex, Result, X->getSpellingListIndex() )
    case_REFLPROP_0ARGS( getSpelling, Str, X->getSpelling() )
    case_REFLPROP_0ARGS( getLocation, Type, X->getLocation() )
    case_REFLPROP_0ARGS( getRange, Type, X->getRange() )
    case_REFLPROP_0ARGS( isInherited, Result, X->isInherited() )
    case_REFLPROP_0ARGS( isImplicit, Result, X->isImplicit() )
    case_REFLPROP_0ARGS( isPackExpansion, Result, X->isPackExpansion() )
    case currefl::clone: {
      ASSERT_TRAIT_IS_REFLPROP(clone)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->clone(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( isLateParsed, Result, X->isLateParsed() )
    case currefl::printPretty: {
      ASSERT_TRAIT_IS_REFLPROP(printPretty)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::raw_ostream &), p0)
        LOAD_VAL((const struct clang::PrintingPolicy &), p1)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->printPretty((class llvm::raw_ostream &)p0, (const struct clang::PrintingPolicy &)p1))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__InheritableAttr: {
# define CLASSNAME (clang::InheritableAttr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__InheritableAttr;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( shouldInheritEvenIfAlreadyPresent, Result, X->shouldInheritEvenIfAlreadyPresent() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Attr *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__ExternalSourceSymbolAttr: {
# define CLASSNAME (clang::ExternalSourceSymbolAttr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__ExternalSourceSymbolAttr;
  switch( (currefl::memnames)MemNum ) {
    case currefl::clone: {
      ASSERT_TRAIT_IS_REFLPROP(clone)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->clone(p0))
      };
      break;
    }
    case currefl::printPretty: {
      ASSERT_TRAIT_IS_REFLPROP(printPretty)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::raw_ostream &), p0)
        LOAD_VAL((const struct clang::PrintingPolicy &), p1)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->printPretty((class llvm::raw_ostream &)p0, (const struct clang::PrintingPolicy &)p1))
      };
      break;
    }
    case_REFLPROP_0ARGS( getSpelling, Str, X->getSpelling() )
    case_REFLPROP_0ARGS( getLanguage, Str, X->getLanguage() )
    case_REFLPROP_0ARGS( getLanguageLength, Result, X->getLanguageLength() )
    case_REFLPROP_0ARGS( getDefinedIn, Str, X->getDefinedIn() )
    case_REFLPROP_0ARGS( getDefinedInLength, Result, X->getDefinedInLength() )
    case_REFLPROP_0ARGS( getGeneratedDeclaration, Result, X->getGeneratedDeclaration() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Attr *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__MSInheritanceAttr: {
# define CLASSNAME (clang::MSInheritanceAttr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__MSInheritanceAttr;
  switch( (currefl::memnames)MemNum ) {
    case currefl::CreateImplicit: {
      ASSERT_TRAIT_IS_REFLPROP(CreateImplicit)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((enum clang::MSInheritanceAttr::Spelling), p1)
        LOAD_VAL((bool), p2)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateImplicit(p0, p1, p2))
        LOAD_VAL((class clang::SourceRange), p3)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateImplicit(p0, p1, p2, p3))
      };
      break;
    }
    case currefl::CreateImplicit1: {
      ASSERT_TRAIT_IS_REFLPROP(CreateImplicit1)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((enum clang::MSInheritanceAttr::Spelling), p1)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateImplicit(p0, p1))
        LOAD_VAL((class clang::SourceRange), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateImplicit(p0, p1, p2))
      };
      break;
    }
    case currefl::clone: {
      ASSERT_TRAIT_IS_REFLPROP(clone)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->clone(p0))
      };
      break;
    }
    case currefl::printPretty: {
      ASSERT_TRAIT_IS_REFLPROP(printPretty)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::raw_ostream &), p0)
        LOAD_VAL((const struct clang::PrintingPolicy &), p1)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->printPretty((class llvm::raw_ostream &)p0, (const struct clang::PrintingPolicy &)p1))
      };
      break;
    }
    case_REFLPROP_0ARGS( getSpelling, Str, X->getSpelling() )
    case_REFLPROP_0ARGS( getSemanticSpelling, Result, X->getSemanticSpelling() )
    case_REFLPROP_0ARGS( getBestCase, Result, X->getBestCase() )
    case currefl::hasVBPtrOffsetField: {
      ASSERT_TRAIT_IS_REFLPROP(hasVBPtrOffsetField)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::MSInheritanceAttr::Spelling), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->hasVBPtrOffsetField(p0))
      };
      break;
    }
    case currefl::hasNVOffsetField: {
      ASSERT_TRAIT_IS_REFLPROP(hasNVOffsetField)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((bool), p0)
        LOAD_VAL((enum clang::MSInheritanceAttr::Spelling), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->hasNVOffsetField(p0, p1))
      };
      break;
    }
    case currefl::hasVBTableOffsetField: {
      ASSERT_TRAIT_IS_REFLPROP(hasVBTableOffsetField)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::MSInheritanceAttr::Spelling), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->hasVBTableOffsetField(p0))
      };
      break;
    }
    case currefl::hasOnlyOneField: {
      ASSERT_TRAIT_IS_REFLPROP(hasOnlyOneField)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((bool), p0)
        LOAD_VAL((enum clang::MSInheritanceAttr::Spelling), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->hasOnlyOneField(p0, p1))
      };
      break;
    }
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Attr *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__MSVtorDispAttr: {
# define CLASSNAME (clang::MSVtorDispAttr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__MSVtorDispAttr;
  switch( (currefl::memnames)MemNum ) {
    case currefl::CreateImplicit: {
      ASSERT_TRAIT_IS_REFLPROP(CreateImplicit)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateImplicit(p0, p1))
        LOAD_VAL((class clang::SourceRange), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateImplicit(p0, p1, p2))
      };
      break;
    }
    case currefl::clone: {
      ASSERT_TRAIT_IS_REFLPROP(clone)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->clone(p0))
      };
      break;
    }
    case currefl::printPretty: {
      ASSERT_TRAIT_IS_REFLPROP(printPretty)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::raw_ostream &), p0)
        LOAD_VAL((const struct clang::PrintingPolicy &), p1)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->printPretty((class llvm::raw_ostream &)p0, (const struct clang::PrintingPolicy &)p1))
      };
      break;
    }
    case_REFLPROP_0ARGS( getSpelling, Str, X->getSpelling() )
    case_REFLPROP_0ARGS( getVdm, Result, X->getVdm() )
    case_REFLPROP_0ARGS( getVtorDispMode, Result, X->getVtorDispMode() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Attr *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__LambdaCapture: {
# define CLASSNAME (clang::LambdaCapture)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_MAYBEPTR(0, CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__LambdaCapture;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getCaptureKind, Result, X->getCaptureKind() )
    case_REFLPROP_0ARGS( capturesThis, Result, X->capturesThis() )
    case_REFLPROP_0ARGS( capturesVariable, Result, X->capturesVariable() )
    case_REFLPROP_0ARGS( capturesVLAType, Result, X->capturesVLAType() )
    case_REFLPROP_0ARGS( getCapturedVar, Type, X->getCapturedVar() )
    case_REFLPROP_0ARGS( isImplicit, Result, X->isImplicit() )
    case_REFLPROP_0ARGS( isExplicit, Result, X->isExplicit() )
    case_REFLPROP_0ARGS( getLocation, Type, X->getLocation() )
    case_REFLPROP_0ARGS( isPackExpansion, Result, X->isPackExpansion() )
    case_REFLPROP_0ARGS( getEllipsisLoc, Type, X->getEllipsisLoc() )
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__AccessSpecDecl: {
# define CLASSNAME (clang::AccessSpecDecl)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__AccessSpecDecl;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getAccessSpecifierLoc, Type, X->getAccessSpecifierLoc() )
    case_REFLPROP_0ARGS( getColonLoc, Type, X->getColonLoc() )
    case_REFLPROP_0ARGS( getSourceRange, Type, X->getSourceRange() )
    case currefl::Create: {
      ASSERT_TRAIT_IS_REFLPROP(Create)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((enum clang::AccessSpecifier), p1)
        LOAD_VAL((class clang::DeclContext *), p2)
        LOAD_VAL((class clang::SourceLocation), p3)
        LOAD_VAL((class clang::SourceLocation), p4)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3, p4))
      };
      break;
    }
    case currefl::CreateDeserialized: {
      ASSERT_TRAIT_IS_REFLPROP(CreateDeserialized)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateDeserialized(p0, p1))
      };
      break;
    }
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Decl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::classofKind: {
      ASSERT_TRAIT_IS_REFLPROP(classofKind)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::Decl::Kind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classofKind(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__CXXBaseSpecifier: {
# define CLASSNAME (clang::CXXBaseSpecifier)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_MAYBEPTR(1, CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__CXXBaseSpecifier;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getSourceRange, Type, X->getSourceRange() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case_REFLPROP_0ARGS( getBaseTypeLoc, Type, X->getBaseTypeLoc() )
    case_REFLPROP_0ARGS( isVirtual, Result, X->isVirtual() )
    case_REFLPROP_0ARGS( isBaseOfClass, Result, X->isBaseOfClass() )
    case_REFLPROP_0ARGS( isPackExpansion, Result, X->isPackExpansion() )
    case_REFLPROP_0ARGS( getInheritConstructors, Result, X->getInheritConstructors() )
    case_REFLPROP_0ARGS( getEllipsisLoc, Type, X->getEllipsisLoc() )
    case_REFLPROP_0ARGS( getAccessSpecifier, Result, X->getAccessSpecifier() )
    case_REFLPROP_0ARGS( getAccessSpecifierAsWritten, Result, X->getAccessSpecifierAsWritten() )
    case_REFLPROP_0ARGS( getType, Type, X->getType() )
    case_REFLPROP_0ARGS( getTypeSourceInfo, Type, X->getTypeSourceInfo() )
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__CXXRecordDecl: {
# define CLASSNAME (clang::CXXRecordDecl)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__CXXRecordDecl;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getCanonicalDecl, Type, X->getCanonicalDecl() )
    case_REFLPROP_0ARGS( getPreviousDecl, Type, X->getPreviousDecl() )
    case_REFLPROP_0ARGS( getMostRecentDecl, Type, X->getMostRecentDecl() )
    case_REFLPROP_0ARGS( getMostRecentNonInjectedDecl, Type, X->getMostRecentNonInjectedDecl() )
    case_REFLPROP_0ARGS( getDefinition, Type, X->getDefinition() )
    case_REFLPROP_0ARGS( hasDefinition, Result, X->hasDefinition() )
    case currefl::Create: {
      ASSERT_TRAIT_IS_REFLPROP(Create)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((enum clang::TagTypeKind), p1)
        LOAD_VAL((class clang::DeclContext *), p2)
        LOAD_VAL((class clang::SourceLocation), p3)
        LOAD_VAL((class clang::SourceLocation), p4)
        LOAD_VAL((class clang::IdentifierInfo *), p5)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3, p4, p5))
        LOAD_VAL((class clang::CXXRecordDecl *), p6)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3, p4, p5, p6))
        LOAD_VAL((bool), p7)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3, p4, p5, p6, p7))
      };
      break;
    }
    case currefl::CreateLambda: {
      ASSERT_TRAIT_IS_REFLPROP(CreateLambda)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((class clang::DeclContext *), p1)
        LOAD_VAL((class clang::TypeSourceInfo *), p2)
        LOAD_VAL((class clang::SourceLocation), p3)
        LOAD_VAL((bool), p4)
        LOAD_VAL((bool), p5)
        LOAD_VAL((enum clang::LambdaCaptureDefault), p6)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateLambda(p0, p1, p2, p3, p4, p5, p6))
      };
      break;
    }
    case currefl::CreateDeserialized: {
      ASSERT_TRAIT_IS_REFLPROP(CreateDeserialized)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateDeserialized(p0, p1))
      };
      break;
    }
    case_REFLPROP_0ARGS( isDynamicClass, Result, X->isDynamicClass() )
    case_REFLPROP_0ARGS( mayBeDynamicClass, Result, X->mayBeDynamicClass() )
    case_REFLPROP_0ARGS( mayBeNonDynamicClass, Result, X->mayBeNonDynamicClass() )
    case_REFLPROP_0ARGS( isParsingBaseSpecifiers, Result, X->isParsingBaseSpecifiers() )
    case_REFLPROP_0ARGS( isInstantiation, Result, X->isInstantiation() )
    case_REFLPROP_0ARGS( getODRHash, Result, X->getODRHash() )
    case_REFLPROP_0ARGS( getNumBases, Result, X->getNumBases() )
    case currefl::bases: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->bases())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->bases())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::bases))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case_REFLPROP_0ARGS( getNumVBases, Result, X->getNumVBases() )
    case currefl::vbases: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->vbases())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->vbases())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::vbases))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case_REFLPROP_0ARGS( hasAnyDependentBases, Result, X->hasAnyDependentBases() )
    case currefl::methods: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->methods())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->methods())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::methods))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case currefl::ctors: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->ctors())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->ctors())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::ctors))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case currefl::friends: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->friends())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->friends())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::friends))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case_REFLPROP_0ARGS( hasFriends, Result, X->hasFriends() )
    case_REFLPROP_0ARGS( defaultedCopyConstructorIsDeleted, Result, X->defaultedCopyConstructorIsDeleted() )
    case_REFLPROP_0ARGS( defaultedMoveConstructorIsDeleted, Result, X->defaultedMoveConstructorIsDeleted() )
    case_REFLPROP_0ARGS( defaultedDestructorIsDeleted, Result, X->defaultedDestructorIsDeleted() )
    case_REFLPROP_0ARGS( hasSimpleCopyConstructor, Result, X->hasSimpleCopyConstructor() )
    case_REFLPROP_0ARGS( hasSimpleMoveConstructor, Result, X->hasSimpleMoveConstructor() )
    case_REFLPROP_0ARGS( hasSimpleMoveAssignment, Result, X->hasSimpleMoveAssignment() )
    case_REFLPROP_0ARGS( hasSimpleDestructor, Result, X->hasSimpleDestructor() )
    case_REFLPROP_0ARGS( hasDefaultConstructor, Result, X->hasDefaultConstructor() )
    case_REFLPROP_0ARGS( needsImplicitDefaultConstructor, Result, X->needsImplicitDefaultConstructor() )
    case_REFLPROP_0ARGS( hasUserDeclaredConstructor, Result, X->hasUserDeclaredConstructor() )
    case_REFLPROP_0ARGS( hasUserProvidedDefaultConstructor, Result, X->hasUserProvidedDefaultConstructor() )
    case_REFLPROP_0ARGS( hasUserDeclaredCopyConstructor, Result, X->hasUserDeclaredCopyConstructor() )
    case_REFLPROP_0ARGS( needsImplicitCopyConstructor, Result, X->needsImplicitCopyConstructor() )
    case_REFLPROP_0ARGS( needsOverloadResolutionForCopyConstructor, Result, X->needsOverloadResolutionForCopyConstructor() )
    case_REFLPROP_0ARGS( implicitCopyConstructorHasConstParam, Result, X->implicitCopyConstructorHasConstParam() )
    case_REFLPROP_0ARGS( hasCopyConstructorWithConstParam, Result, X->hasCopyConstructorWithConstParam() )
    case_REFLPROP_0ARGS( hasUserDeclaredMoveOperation, Result, X->hasUserDeclaredMoveOperation() )
    case_REFLPROP_0ARGS( hasUserDeclaredMoveConstructor, Result, X->hasUserDeclaredMoveConstructor() )
    case_REFLPROP_0ARGS( hasMoveConstructor, Result, X->hasMoveConstructor() )
    case_REFLPROP_0ARGS( needsImplicitMoveConstructor, Result, X->needsImplicitMoveConstructor() )
    case_REFLPROP_0ARGS( needsOverloadResolutionForMoveConstructor, Result, X->needsOverloadResolutionForMoveConstructor() )
    case_REFLPROP_0ARGS( hasUserDeclaredCopyAssignment, Result, X->hasUserDeclaredCopyAssignment() )
    case_REFLPROP_0ARGS( needsImplicitCopyAssignment, Result, X->needsImplicitCopyAssignment() )
    case_REFLPROP_0ARGS( needsOverloadResolutionForCopyAssignment, Result, X->needsOverloadResolutionForCopyAssignment() )
    case_REFLPROP_0ARGS( implicitCopyAssignmentHasConstParam, Result, X->implicitCopyAssignmentHasConstParam() )
    case_REFLPROP_0ARGS( hasCopyAssignmentWithConstParam, Result, X->hasCopyAssignmentWithConstParam() )
    case_REFLPROP_0ARGS( hasUserDeclaredMoveAssignment, Result, X->hasUserDeclaredMoveAssignment() )
    case_REFLPROP_0ARGS( hasMoveAssignment, Result, X->hasMoveAssignment() )
    case_REFLPROP_0ARGS( needsImplicitMoveAssignment, Result, X->needsImplicitMoveAssignment() )
    case_REFLPROP_0ARGS( needsOverloadResolutionForMoveAssignment, Result, X->needsOverloadResolutionForMoveAssignment() )
    case_REFLPROP_0ARGS( hasUserDeclaredDestructor, Result, X->hasUserDeclaredDestructor() )
    case_REFLPROP_0ARGS( needsImplicitDestructor, Result, X->needsImplicitDestructor() )
    case_REFLPROP_0ARGS( needsOverloadResolutionForDestructor, Result, X->needsOverloadResolutionForDestructor() )
    case_REFLPROP_0ARGS( isLambda, Result, X->isLambda() )
    case_REFLPROP_0ARGS( isGenericLambda, Result, X->isGenericLambda() )
    case_REFLPROP_0ARGS( getLambdaCallOperator, Type, X->getLambdaCallOperator() )
    case_REFLPROP_0ARGS( getLambdaStaticInvoker, Type, X->getLambdaStaticInvoker() )
    case_REFLPROP_0ARGS( getGenericLambdaTemplateParameterList, Type, X->getGenericLambdaTemplateParameterList() )
    case_REFLPROP_0ARGS( getLambdaCaptureDefault, Result, X->getLambdaCaptureDefault() )
    case currefl::captures: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->captures())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->captures())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::captures))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case_REFLPROP_0ARGS( isAggregate, Result, X->isAggregate() )
    case_REFLPROP_0ARGS( hasInClassInitializer, Result, X->hasInClassInitializer() )
    case_REFLPROP_0ARGS( hasUninitializedReferenceMember, Result, X->hasUninitializedReferenceMember() )
    case_REFLPROP_0ARGS( isPOD, Result, X->isPOD() )
    case_REFLPROP_0ARGS( isCLike, Result, X->isCLike() )
    case_REFLPROP_0ARGS( isEmpty, Result, X->isEmpty() )
    case_REFLPROP_0ARGS( hasDirectFields, Result, X->hasDirectFields() )
    case_REFLPROP_0ARGS( isPolymorphic, Result, X->isPolymorphic() )
    case_REFLPROP_0ARGS( isAbstract, Result, X->isAbstract() )
    case_REFLPROP_0ARGS( isStandardLayout, Result, X->isStandardLayout() )
    case_REFLPROP_0ARGS( isCXX11StandardLayout, Result, X->isCXX11StandardLayout() )
    case_REFLPROP_0ARGS( hasMutableFields, Result, X->hasMutableFields() )
    case_REFLPROP_0ARGS( hasVariantMembers, Result, X->hasVariantMembers() )
    case_REFLPROP_0ARGS( hasTrivialDefaultConstructor, Result, X->hasTrivialDefaultConstructor() )
    case_REFLPROP_0ARGS( hasNonTrivialDefaultConstructor, Result, X->hasNonTrivialDefaultConstructor() )
    case_REFLPROP_0ARGS( hasConstexprNonCopyMoveConstructor, Result, X->hasConstexprNonCopyMoveConstructor() )
    case_REFLPROP_0ARGS( defaultedDefaultConstructorIsConstexpr, Result, X->defaultedDefaultConstructorIsConstexpr() )
    case_REFLPROP_0ARGS( hasConstexprDefaultConstructor, Result, X->hasConstexprDefaultConstructor() )
    case_REFLPROP_0ARGS( hasTrivialCopyConstructor, Result, X->hasTrivialCopyConstructor() )
    case_REFLPROP_0ARGS( hasTrivialCopyConstructorForCall, Result, X->hasTrivialCopyConstructorForCall() )
    case_REFLPROP_0ARGS( hasNonTrivialCopyConstructor, Result, X->hasNonTrivialCopyConstructor() )
    case_REFLPROP_0ARGS( hasNonTrivialCopyConstructorForCall, Result, X->hasNonTrivialCopyConstructorForCall() )
    case_REFLPROP_0ARGS( hasTrivialMoveConstructor, Result, X->hasTrivialMoveConstructor() )
    case_REFLPROP_0ARGS( hasTrivialMoveConstructorForCall, Result, X->hasTrivialMoveConstructorForCall() )
    case_REFLPROP_0ARGS( hasNonTrivialMoveConstructor, Result, X->hasNonTrivialMoveConstructor() )
    case_REFLPROP_0ARGS( hasNonTrivialMoveConstructorForCall, Result, X->hasNonTrivialMoveConstructorForCall() )
    case_REFLPROP_0ARGS( hasTrivialCopyAssignment, Result, X->hasTrivialCopyAssignment() )
    case_REFLPROP_0ARGS( hasNonTrivialCopyAssignment, Result, X->hasNonTrivialCopyAssignment() )
    case_REFLPROP_0ARGS( hasTrivialMoveAssignment, Result, X->hasTrivialMoveAssignment() )
    case_REFLPROP_0ARGS( hasNonTrivialMoveAssignment, Result, X->hasNonTrivialMoveAssignment() )
    case_REFLPROP_0ARGS( hasTrivialDestructor, Result, X->hasTrivialDestructor() )
    case_REFLPROP_0ARGS( hasTrivialDestructorForCall, Result, X->hasTrivialDestructorForCall() )
    case_REFLPROP_0ARGS( hasNonTrivialDestructor, Result, X->hasNonTrivialDestructor() )
    case_REFLPROP_0ARGS( hasNonTrivialDestructorForCall, Result, X->hasNonTrivialDestructorForCall() )
    case_REFLPROP_0ARGS( allowConstDefaultInit, Result, X->allowConstDefaultInit() )
    case_REFLPROP_0ARGS( hasIrrelevantDestructor, Result, X->hasIrrelevantDestructor() )
    case_REFLPROP_0ARGS( hasNonLiteralTypeFieldsOrBases, Result, X->hasNonLiteralTypeFieldsOrBases() )
    case_REFLPROP_0ARGS( hasInheritedConstructor, Result, X->hasInheritedConstructor() )
    case_REFLPROP_0ARGS( hasInheritedAssignment, Result, X->hasInheritedAssignment() )
    case_REFLPROP_0ARGS( isTriviallyCopyable, Result, X->isTriviallyCopyable() )
    case_REFLPROP_0ARGS( isTrivial, Result, X->isTrivial() )
    case_REFLPROP_0ARGS( isLiteral, Result, X->isLiteral() )
    case_REFLPROP_0ARGS( getInstantiatedFromMemberClass, Type, X->getInstantiatedFromMemberClass() )
    case_REFLPROP_0ARGS( getMemberSpecializationInfo, Type, X->getMemberSpecializationInfo() )
    case_REFLPROP_0ARGS( getDescribedClassTemplate, Type, X->getDescribedClassTemplate() )
    case_REFLPROP_0ARGS( getTemplateSpecializationKind, Result, X->getTemplateSpecializationKind() )
    case_REFLPROP_0ARGS( getTemplateInstantiationPattern, Type, X->getTemplateInstantiationPattern() )
    case_REFLPROP_0ARGS( getDestructor, Type, X->getDestructor() )
    case_REFLPROP_0ARGS( isAnyDestructorNoReturn, Result, X->isAnyDestructorNoReturn() )
    case_REFLPROP_0ARGS( isLocalClass, Type, X->isLocalClass() )
    case currefl::isCurrentInstantiation: {
      ASSERT_TRAIT_IS_REFLPROP(isCurrentInstantiation)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::DeclContext *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isCurrentInstantiation(p0))
      };
      break;
    }
    case currefl::isDerivedFrom: {
      ASSERT_TRAIT_IS_REFLPROP(isDerivedFrom)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::CXXRecordDecl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isDerivedFrom(p0))
      };
      break;
    }
    case currefl::isVirtuallyDerivedFrom: {
      ASSERT_TRAIT_IS_REFLPROP(isVirtuallyDerivedFrom)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::CXXRecordDecl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isVirtuallyDerivedFrom(p0))
      };
      break;
    }
    case currefl::isProvablyNotDerivedFrom: {
      ASSERT_TRAIT_IS_REFLPROP(isProvablyNotDerivedFrom)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::CXXRecordDecl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isProvablyNotDerivedFrom(p0))
      };
      break;
    }
    case currefl::viewInheritance: {
      ASSERT_TRAIT_IS_REFLPROP(viewInheritance)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::ASTContext &), p0)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->viewInheritance((class clang::ASTContext &)p0))
      };
      break;
    }
    case currefl::MergeAccess: {
      ASSERT_TRAIT_IS_REFLPROP(MergeAccess)
      SET_PRIM_TYPE(enum clang::AccessSpecifier)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::AccessSpecifier), p0)
        LOAD_VAL((enum clang::AccessSpecifier), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->MergeAccess(p0, p1))
      };
      break;
    }
    case_REFLPROP_0ARGS( mayBeAbstract, Result, X->mayBeAbstract() )
    case_REFLPROP_0ARGS( getLambdaManglingNumber, Result, X->getLambdaManglingNumber() )
    case_REFLPROP_0ARGS( getLambdaContextDecl, Type, X->getLambdaContextDecl() )
    case_REFLPROP_0ARGS( getMSInheritanceModel, Result, X->getMSInheritanceModel() )
    case_REFLPROP_0ARGS( calculateInheritanceModel, Result, X->calculateInheritanceModel() )
    case_REFLPROP_0ARGS( nullFieldOffsetIsZero, Result, X->nullFieldOffsetIsZero() )
    case_REFLPROP_0ARGS( getMSVtorDispMode, Result, X->getMSVtorDispMode() )
    case_REFLPROP_0ARGS( isDependentLambda, Result, X->isDependentLambda() )
    case_REFLPROP_0ARGS( getLambdaTypeInfo, Type, X->getLambdaTypeInfo() )
    case_REFLPROP_0ARGS( isInterfaceLike, Result, X->isInterfaceLike() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Decl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::classofKind: {
      ASSERT_TRAIT_IS_REFLPROP(classofKind)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::Decl::Kind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classofKind(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__CXXDeductionGuideDecl: {
# define CLASSNAME (clang::CXXDeductionGuideDecl)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__CXXDeductionGuideDecl;
  switch( (currefl::memnames)MemNum ) {
    case currefl::Create: {
      ASSERT_TRAIT_IS_REFLPROP(Create)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((class clang::DeclContext *), p1)
        LOAD_VAL((class clang::SourceLocation), p2)
        LOAD_VAL((bool), p3)
        LOAD_VAL((const struct clang::DeclarationNameInfo &), p4)
        LOAD_VAL((class clang::QualType), p5)
        LOAD_VAL((class clang::TypeSourceInfo *), p6)
        LOAD_VAL((class clang::SourceLocation), p7)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3, p4, p5, p6, p7))
      };
      break;
    }
    case currefl::CreateDeserialized: {
      ASSERT_TRAIT_IS_REFLPROP(CreateDeserialized)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateDeserialized(p0, p1))
      };
      break;
    }
    case_REFLPROP_0ARGS( isExplicit, Result, X->isExplicit() )
    case_REFLPROP_0ARGS( isExplicitSpecified, Result, X->isExplicitSpecified() )
    case_REFLPROP_0ARGS( getDeducedTemplate, Type, X->getDeducedTemplate() )
    case_REFLPROP_0ARGS( isCopyDeductionCandidate, Result, X->isCopyDeductionCandidate() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Decl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::classofKind: {
      ASSERT_TRAIT_IS_REFLPROP(classofKind)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::Decl::Kind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classofKind(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__CXXMethodDecl: {
# define CLASSNAME (clang::CXXMethodDecl)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__CXXMethodDecl;
  switch( (currefl::memnames)MemNum ) {
    case currefl::Create: {
      ASSERT_TRAIT_IS_REFLPROP(Create)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((class clang::CXXRecordDecl *), p1)
        LOAD_VAL((class clang::SourceLocation), p2)
        LOAD_VAL((const struct clang::DeclarationNameInfo &), p3)
        LOAD_VAL((class clang::QualType), p4)
        LOAD_VAL((class clang::TypeSourceInfo *), p5)
        LOAD_VAL((enum clang::StorageClass), p6)
        LOAD_VAL((bool), p7)
        LOAD_VAL((bool), p8)
        LOAD_VAL((class clang::SourceLocation), p9)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9))
      };
      break;
    }
    case currefl::CreateDeserialized: {
      ASSERT_TRAIT_IS_REFLPROP(CreateDeserialized)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateDeserialized(p0, p1))
      };
      break;
    }
    case_REFLPROP_0ARGS( isStatic, Result, X->isStatic() )
    case_REFLPROP_0ARGS( isInstance, Result, X->isInstance() )
    case currefl::isStaticOverloadedOperator: {
      ASSERT_TRAIT_IS_REFLPROP(isStaticOverloadedOperator)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::OverloadedOperatorKind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isStaticOverloadedOperator(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( isConst, Result, X->isConst() )
    case_REFLPROP_0ARGS( isVolatile, Result, X->isVolatile() )
    case_REFLPROP_0ARGS( isVirtual, Result, X->isVirtual() )
    case currefl::getDevirtualizedMethod: {
      ASSERT_TRAIT_IS_REFLPROP(getDevirtualizedMethod)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::Expr *), p0)
        LOAD_VAL((bool), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getDevirtualizedMethod(p0, p1))
      };
      break;
    }
    case_REFLPROP_0ARGS( isUsualDeallocationFunction, Result, X->isUsualDeallocationFunction() )
    case_REFLPROP_0ARGS( isCopyAssignmentOperator, Result, X->isCopyAssignmentOperator() )
    case_REFLPROP_0ARGS( isMoveAssignmentOperator, Result, X->isMoveAssignmentOperator() )
    case_REFLPROP_0ARGS( getCanonicalDecl, Type, X->getCanonicalDecl() )
    case_REFLPROP_0ARGS( getMostRecentDecl, Type, X->getMostRecentDecl() )
    case_REFLPROP_0ARGS( isUserProvided, Result, X->isUserProvided() )
    case_REFLPROP_0ARGS( size_overridden_methods, Result, X->size_overridden_methods() )
    case_REFLPROP_0ARGS( getParent, Type, X->getParent() )
    case currefl::getThisType: {
      ASSERT_TRAIT_IS_REFLPROP(getThisType)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getThisType(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getTypeQualifiers, Result, X->getTypeQualifiers() )
    case_REFLPROP_0ARGS( getRefQualifier, Result, X->getRefQualifier() )
    case_REFLPROP_0ARGS( hasInlineBody, Result, X->hasInlineBody() )
    case_REFLPROP_0ARGS( isLambdaStaticInvoker, Result, X->isLambdaStaticInvoker() )
    case currefl::getCorrespondingMethodInClass: {
      ASSERT_TRAIT_IS_REFLPROP(getCorrespondingMethodInClass)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::CXXRecordDecl *), p0)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Type, X->getCorrespondingMethodInClass(p0))
        LOAD_VAL((bool), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getCorrespondingMethodInClass(p0, p1))
      };
      break;
    }
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Decl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::classofKind: {
      ASSERT_TRAIT_IS_REFLPROP(classofKind)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::Decl::Kind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classofKind(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__CXXCtorInitializer: {
# define CLASSNAME (clang::CXXCtorInitializer)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__CXXCtorInitializer;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( isBaseInitializer, Result, X->isBaseInitializer() )
    case_REFLPROP_0ARGS( isMemberInitializer, Result, X->isMemberInitializer() )
    case_REFLPROP_0ARGS( isAnyMemberInitializer, Result, X->isAnyMemberInitializer() )
    case_REFLPROP_0ARGS( isIndirectMemberInitializer, Result, X->isIndirectMemberInitializer() )
    case_REFLPROP_0ARGS( isInClassMemberInitializer, Result, X->isInClassMemberInitializer() )
    case_REFLPROP_0ARGS( isDelegatingInitializer, Result, X->isDelegatingInitializer() )
    case_REFLPROP_0ARGS( isPackExpansion, Result, X->isPackExpansion() )
    case_REFLPROP_0ARGS( getEllipsisLoc, Type, X->getEllipsisLoc() )
    case_REFLPROP_0ARGS( getBaseClassLoc, Type, X->getBaseClassLoc() )
    case_REFLPROP_0ARGS( getBaseClass, Type, X->getBaseClass() )
    case_REFLPROP_0ARGS( isBaseVirtual, Result, X->isBaseVirtual() )
    case_REFLPROP_0ARGS( getTypeSourceInfo, Type, X->getTypeSourceInfo() )
    case_REFLPROP_0ARGS( getMember, Type, X->getMember() )
    case_REFLPROP_0ARGS( getAnyMember, Type, X->getAnyMember() )
    case_REFLPROP_0ARGS( getIndirectMember, Type, X->getIndirectMember() )
    case_REFLPROP_0ARGS( getMemberLocation, Type, X->getMemberLocation() )
    case_REFLPROP_0ARGS( getSourceLocation, Type, X->getSourceLocation() )
    case_REFLPROP_0ARGS( getSourceRange, Type, X->getSourceRange() )
    case_REFLPROP_0ARGS( isWritten, Result, X->isWritten() )
    case_REFLPROP_0ARGS( getSourceOrder, Result, X->getSourceOrder() )
    case_REFLPROP_0ARGS( getLParenLoc, Type, X->getLParenLoc() )
    case_REFLPROP_0ARGS( getRParenLoc, Type, X->getRParenLoc() )
    case_REFLPROP_0ARGS( getInit, Type, X->getInit() )
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__InheritedConstructor: {
# define CLASSNAME (clang::InheritedConstructor)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_NEVERPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__InheritedConstructor;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( operator_bool, Result, X->operator bool() )
    case_REFLPROP_0ARGS( getShadowDecl, Type, X->getShadowDecl() )
    case_REFLPROP_0ARGS( getConstructor, Type, X->getConstructor() )
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__CXXConstructorDecl: {
# define CLASSNAME (clang::CXXConstructorDecl)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__CXXConstructorDecl;
  switch( (currefl::memnames)MemNum ) {
    case currefl::CreateDeserialized: {
      ASSERT_TRAIT_IS_REFLPROP(CreateDeserialized)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        LOAD_VAL((bool), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateDeserialized(p0, p1, p2))
      };
      break;
    }
    case currefl::Create: {
      ASSERT_TRAIT_IS_REFLPROP(Create)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((class clang::CXXRecordDecl *), p1)
        LOAD_VAL((class clang::SourceLocation), p2)
        LOAD_VAL((const struct clang::DeclarationNameInfo &), p3)
        LOAD_VAL((class clang::QualType), p4)
        LOAD_VAL((class clang::TypeSourceInfo *), p5)
        LOAD_VAL((bool), p6)
        LOAD_VAL((bool), p7)
        LOAD_VAL((bool), p8)
        LOAD_VAL((bool), p9)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9))
        LOAD_VAL((class clang::InheritedConstructor), p10)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10))
      };
      break;
    }
    case currefl::inits: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->inits())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->inits())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::inits))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case_REFLPROP_0ARGS( getNumCtorInitializers, Result, X->getNumCtorInitializers() )
    case_REFLPROP_0ARGS( isExplicitSpecified, Result, X->isExplicitSpecified() )
    case_REFLPROP_0ARGS( isExplicit, Result, X->isExplicit() )
    case_REFLPROP_0ARGS( isDelegatingConstructor, Result, X->isDelegatingConstructor() )
    case_REFLPROP_0ARGS( getTargetConstructor, Type, X->getTargetConstructor() )
    case_REFLPROP_0ARGS( isDefaultConstructor, Result, X->isDefaultConstructor() )
    case_REFLPROP_0ARGS( isCopyConstructor, Result, X->isCopyConstructor() )
    case_REFLPROP_0ARGS( isMoveConstructor, Result, X->isMoveConstructor() )
    case_REFLPROP_0ARGS( isCopyOrMoveConstructor, Result, X->isCopyOrMoveConstructor() )
    case currefl::isConvertingConstructor: {
      ASSERT_TRAIT_IS_REFLPROP(isConvertingConstructor)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((bool), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isConvertingConstructor(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( isSpecializationCopyingObject, Result, X->isSpecializationCopyingObject() )
    case_REFLPROP_0ARGS( isInheritingConstructor, Result, X->isInheritingConstructor() )
    case_REFLPROP_0ARGS( getInheritedConstructor, Type, X->getInheritedConstructor() )
    case_REFLPROP_0ARGS( getCanonicalDecl, Type, X->getCanonicalDecl() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Decl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::classofKind: {
      ASSERT_TRAIT_IS_REFLPROP(classofKind)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::Decl::Kind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classofKind(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__CXXDestructorDecl: {
# define CLASSNAME (clang::CXXDestructorDecl)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__CXXDestructorDecl;
  switch( (currefl::memnames)MemNum ) {
    case currefl::Create: {
      ASSERT_TRAIT_IS_REFLPROP(Create)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((class clang::CXXRecordDecl *), p1)
        LOAD_VAL((class clang::SourceLocation), p2)
        LOAD_VAL((const struct clang::DeclarationNameInfo &), p3)
        LOAD_VAL((class clang::QualType), p4)
        LOAD_VAL((class clang::TypeSourceInfo *), p5)
        LOAD_VAL((bool), p6)
        LOAD_VAL((bool), p7)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3, p4, p5, p6, p7))
      };
      break;
    }
    case currefl::CreateDeserialized: {
      ASSERT_TRAIT_IS_REFLPROP(CreateDeserialized)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateDeserialized(p0, p1))
      };
      break;
    }
    case_REFLPROP_0ARGS( getOperatorDelete, Type, X->getOperatorDelete() )
    case_REFLPROP_0ARGS( getOperatorDeleteThisArg, Type, X->getOperatorDeleteThisArg() )
    case_REFLPROP_0ARGS( getCanonicalDecl, Type, X->getCanonicalDecl() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Decl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::classofKind: {
      ASSERT_TRAIT_IS_REFLPROP(classofKind)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::Decl::Kind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classofKind(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__CXXConversionDecl: {
# define CLASSNAME (clang::CXXConversionDecl)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__CXXConversionDecl;
  switch( (currefl::memnames)MemNum ) {
    case currefl::Create: {
      ASSERT_TRAIT_IS_REFLPROP(Create)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((class clang::CXXRecordDecl *), p1)
        LOAD_VAL((class clang::SourceLocation), p2)
        LOAD_VAL((const struct clang::DeclarationNameInfo &), p3)
        LOAD_VAL((class clang::QualType), p4)
        LOAD_VAL((class clang::TypeSourceInfo *), p5)
        LOAD_VAL((bool), p6)
        LOAD_VAL((bool), p7)
        LOAD_VAL((bool), p8)
        LOAD_VAL((class clang::SourceLocation), p9)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9))
      };
      break;
    }
    case currefl::CreateDeserialized: {
      ASSERT_TRAIT_IS_REFLPROP(CreateDeserialized)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateDeserialized(p0, p1))
      };
      break;
    }
    case_REFLPROP_0ARGS( isExplicitSpecified, Result, X->isExplicitSpecified() )
    case_REFLPROP_0ARGS( isExplicit, Result, X->isExplicit() )
    case_REFLPROP_0ARGS( getConversionType, Type, X->getConversionType() )
    case_REFLPROP_0ARGS( isLambdaToBlockPointerConversion, Result, X->isLambdaToBlockPointerConversion() )
    case_REFLPROP_0ARGS( getCanonicalDecl, Type, X->getCanonicalDecl() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Decl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::classofKind: {
      ASSERT_TRAIT_IS_REFLPROP(classofKind)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::Decl::Kind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classofKind(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__LinkageSpecDecl: {
# define CLASSNAME (clang::LinkageSpecDecl)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__LinkageSpecDecl;
  switch( (currefl::memnames)MemNum ) {
    case currefl::Create: {
      ASSERT_TRAIT_IS_REFLPROP(Create)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((class clang::DeclContext *), p1)
        LOAD_VAL((class clang::SourceLocation), p2)
        LOAD_VAL((class clang::SourceLocation), p3)
        LOAD_VAL((enum clang::LinkageSpecDecl::LanguageIDs), p4)
        LOAD_VAL((bool), p5)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3, p4, p5))
      };
      break;
    }
    case currefl::CreateDeserialized: {
      ASSERT_TRAIT_IS_REFLPROP(CreateDeserialized)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateDeserialized(p0, p1))
      };
      break;
    }
    case_REFLPROP_0ARGS( getLanguage, Result, X->getLanguage() )
    case_REFLPROP_0ARGS( hasBraces, Result, X->hasBraces() )
    case_REFLPROP_0ARGS( getExternLoc, Type, X->getExternLoc() )
    case_REFLPROP_0ARGS( getRBraceLoc, Type, X->getRBraceLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case_REFLPROP_0ARGS( getSourceRange, Type, X->getSourceRange() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Decl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::classofKind: {
      ASSERT_TRAIT_IS_REFLPROP(classofKind)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::Decl::Kind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classofKind(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__UsingDirectiveDecl: {
# define CLASSNAME (clang::UsingDirectiveDecl)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__UsingDirectiveDecl;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getQualifierLoc, Type, X->getQualifierLoc() )
    case_REFLPROP_0ARGS( getQualifier, Type, X->getQualifier() )
    case_REFLPROP_0ARGS( getNominatedNamespaceAsWritten, Type, X->getNominatedNamespaceAsWritten() )
    case_REFLPROP_0ARGS( getNominatedNamespace, Type, X->getNominatedNamespace() )
    case_REFLPROP_0ARGS( getCommonAncestor, Type, X->getCommonAncestor() )
    case_REFLPROP_0ARGS( getUsingLoc, Type, X->getUsingLoc() )
    case_REFLPROP_0ARGS( getNamespaceKeyLocation, Type, X->getNamespaceKeyLocation() )
    case_REFLPROP_0ARGS( getIdentLocation, Type, X->getIdentLocation() )
    case currefl::Create: {
      ASSERT_TRAIT_IS_REFLPROP(Create)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((class clang::DeclContext *), p1)
        LOAD_VAL((class clang::SourceLocation), p2)
        LOAD_VAL((class clang::SourceLocation), p3)
        LOAD_VAL((class clang::NestedNameSpecifierLoc), p4)
        LOAD_VAL((class clang::SourceLocation), p5)
        LOAD_VAL((class clang::NamedDecl *), p6)
        LOAD_VAL((class clang::DeclContext *), p7)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3, p4, p5, p6, p7))
      };
      break;
    }
    case currefl::CreateDeserialized: {
      ASSERT_TRAIT_IS_REFLPROP(CreateDeserialized)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateDeserialized(p0, p1))
      };
      break;
    }
    case_REFLPROP_0ARGS( getSourceRange, Type, X->getSourceRange() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Decl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::classofKind: {
      ASSERT_TRAIT_IS_REFLPROP(classofKind)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::Decl::Kind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classofKind(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__NamespaceAliasDecl: {
# define CLASSNAME (clang::NamespaceAliasDecl)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__NamespaceAliasDecl;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getPreviousDecl, Type, X->getPreviousDecl() )
    case_REFLPROP_0ARGS( getFirstDecl, Type, X->getFirstDecl() )
    case_REFLPROP_0ARGS( getMostRecentDecl, Type, X->getMostRecentDecl() )
    case currefl::Create: {
      ASSERT_TRAIT_IS_REFLPROP(Create)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((class clang::DeclContext *), p1)
        LOAD_VAL((class clang::SourceLocation), p2)
        LOAD_VAL((class clang::SourceLocation), p3)
        LOAD_VAL((class clang::IdentifierInfo *), p4)
        LOAD_VAL((class clang::NestedNameSpecifierLoc), p5)
        LOAD_VAL((class clang::SourceLocation), p6)
        LOAD_VAL((class clang::NamedDecl *), p7)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3, p4, p5, p6, p7))
      };
      break;
    }
    case currefl::CreateDeserialized: {
      ASSERT_TRAIT_IS_REFLPROP(CreateDeserialized)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateDeserialized(p0, p1))
      };
      break;
    }
    case_REFLPROP_0ARGS( getCanonicalDecl, Type, X->getCanonicalDecl() )
    case_REFLPROP_0ARGS( getQualifierLoc, Type, X->getQualifierLoc() )
    case_REFLPROP_0ARGS( getQualifier, Type, X->getQualifier() )
    case_REFLPROP_0ARGS( getNamespace, Type, X->getNamespace() )
    case_REFLPROP_0ARGS( getAliasLoc, Type, X->getAliasLoc() )
    case_REFLPROP_0ARGS( getNamespaceLoc, Type, X->getNamespaceLoc() )
    case_REFLPROP_0ARGS( getTargetNameLoc, Type, X->getTargetNameLoc() )
    case_REFLPROP_0ARGS( getAliasedNamespace, Type, X->getAliasedNamespace() )
    case_REFLPROP_0ARGS( getSourceRange, Type, X->getSourceRange() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Decl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::classofKind: {
      ASSERT_TRAIT_IS_REFLPROP(classofKind)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::Decl::Kind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classofKind(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__UsingShadowDecl: {
# define CLASSNAME (clang::UsingShadowDecl)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__UsingShadowDecl;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getPreviousDecl, Type, X->getPreviousDecl() )
    case_REFLPROP_0ARGS( getFirstDecl, Type, X->getFirstDecl() )
    case_REFLPROP_0ARGS( getMostRecentDecl, Type, X->getMostRecentDecl() )
    case currefl::Create: {
      ASSERT_TRAIT_IS_REFLPROP(Create)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((class clang::DeclContext *), p1)
        LOAD_VAL((class clang::SourceLocation), p2)
        LOAD_VAL((class clang::UsingDecl *), p3)
        LOAD_VAL((class clang::NamedDecl *), p4)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3, p4))
      };
      break;
    }
    case currefl::CreateDeserialized: {
      ASSERT_TRAIT_IS_REFLPROP(CreateDeserialized)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateDeserialized(p0, p1))
      };
      break;
    }
    case_REFLPROP_0ARGS( getCanonicalDecl, Type, X->getCanonicalDecl() )
    case_REFLPROP_0ARGS( getTargetDecl, Type, X->getTargetDecl() )
    case_REFLPROP_0ARGS( getUsingDecl, Type, X->getUsingDecl() )
    case_REFLPROP_0ARGS( getNextUsingShadowDecl, Type, X->getNextUsingShadowDecl() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Decl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::classofKind: {
      ASSERT_TRAIT_IS_REFLPROP(classofKind)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::Decl::Kind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classofKind(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__ConstructorUsingShadowDecl: {
# define CLASSNAME (clang::ConstructorUsingShadowDecl)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__ConstructorUsingShadowDecl;
  switch( (currefl::memnames)MemNum ) {
    case currefl::Create: {
      ASSERT_TRAIT_IS_REFLPROP(Create)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((class clang::DeclContext *), p1)
        LOAD_VAL((class clang::SourceLocation), p2)
        LOAD_VAL((class clang::UsingDecl *), p3)
        LOAD_VAL((class clang::NamedDecl *), p4)
        LOAD_VAL((bool), p5)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3, p4, p5))
      };
      break;
    }
    case currefl::CreateDeserialized: {
      ASSERT_TRAIT_IS_REFLPROP(CreateDeserialized)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateDeserialized(p0, p1))
      };
      break;
    }
    case_REFLPROP_0ARGS( getParent, Type, X->getParent() )
    case_REFLPROP_0ARGS( getNominatedBaseClassShadowDecl, Type, X->getNominatedBaseClassShadowDecl() )
    case_REFLPROP_0ARGS( getConstructedBaseClassShadowDecl, Type, X->getConstructedBaseClassShadowDecl() )
    case_REFLPROP_0ARGS( getNominatedBaseClass, Type, X->getNominatedBaseClass() )
    case_REFLPROP_0ARGS( getConstructedBaseClass, Type, X->getConstructedBaseClass() )
    case_REFLPROP_0ARGS( constructsVirtualBase, Result, X->constructsVirtualBase() )
    case_REFLPROP_0ARGS( getConstructor, Type, X->getConstructor() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Decl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::classofKind: {
      ASSERT_TRAIT_IS_REFLPROP(classofKind)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::Decl::Kind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classofKind(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__UsingDecl: {
# define CLASSNAME (clang::UsingDecl)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__UsingDecl;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getFirstDecl, Type, X->getFirstDecl() )
    case_REFLPROP_0ARGS( getUsingLoc, Type, X->getUsingLoc() )
    case_REFLPROP_0ARGS( getQualifierLoc, Type, X->getQualifierLoc() )
    case_REFLPROP_0ARGS( getQualifier, Type, X->getQualifier() )
    case_REFLPROP_0ARGS( getNameInfo, Type, X->getNameInfo() )
    case_REFLPROP_0ARGS( isAccessDeclaration, Result, X->isAccessDeclaration() )
    case_REFLPROP_0ARGS( hasTypename, Result, X->hasTypename() )
    case currefl::shadows: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->shadows())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->shadows())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::shadows))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case_REFLPROP_0ARGS( shadow_size, Result, X->shadow_size() )
    case currefl::Create: {
      ASSERT_TRAIT_IS_REFLPROP(Create)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((class clang::DeclContext *), p1)
        LOAD_VAL((class clang::SourceLocation), p2)
        LOAD_VAL((class clang::NestedNameSpecifierLoc), p3)
        LOAD_VAL((const struct clang::DeclarationNameInfo &), p4)
        LOAD_VAL((bool), p5)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3, p4, p5))
      };
      break;
    }
    case currefl::CreateDeserialized: {
      ASSERT_TRAIT_IS_REFLPROP(CreateDeserialized)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateDeserialized(p0, p1))
      };
      break;
    }
    case_REFLPROP_0ARGS( getSourceRange, Type, X->getSourceRange() )
    case_REFLPROP_0ARGS( getCanonicalDecl, Type, X->getCanonicalDecl() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Decl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::classofKind: {
      ASSERT_TRAIT_IS_REFLPROP(classofKind)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::Decl::Kind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classofKind(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__UsingPackDecl: {
# define CLASSNAME (clang::UsingPackDecl)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__UsingPackDecl;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getFirstDecl, Type, X->getFirstDecl() )
    case_REFLPROP_0ARGS( getInstantiatedFromUsingDecl, Type, X->getInstantiatedFromUsingDecl() )
    case currefl::expansions: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->expansions())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->expansions())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::expansions))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case currefl::CreateDeserialized: {
      ASSERT_TRAIT_IS_REFLPROP(CreateDeserialized)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        LOAD_VAL((unsigned int), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateDeserialized(p0, p1, p2))
      };
      break;
    }
    case_REFLPROP_0ARGS( getSourceRange, Type, X->getSourceRange() )
    case_REFLPROP_0ARGS( getCanonicalDecl, Type, X->getCanonicalDecl() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Decl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::classofKind: {
      ASSERT_TRAIT_IS_REFLPROP(classofKind)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::Decl::Kind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classofKind(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__UnresolvedUsingValueDecl: {
# define CLASSNAME (clang::UnresolvedUsingValueDecl)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__UnresolvedUsingValueDecl;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getFirstDecl, Type, X->getFirstDecl() )
    case_REFLPROP_0ARGS( getUsingLoc, Type, X->getUsingLoc() )
    case_REFLPROP_0ARGS( isAccessDeclaration, Result, X->isAccessDeclaration() )
    case_REFLPROP_0ARGS( getQualifierLoc, Type, X->getQualifierLoc() )
    case_REFLPROP_0ARGS( getQualifier, Type, X->getQualifier() )
    case_REFLPROP_0ARGS( getNameInfo, Type, X->getNameInfo() )
    case_REFLPROP_0ARGS( isPackExpansion, Result, X->isPackExpansion() )
    case_REFLPROP_0ARGS( getEllipsisLoc, Type, X->getEllipsisLoc() )
    case currefl::Create: {
      ASSERT_TRAIT_IS_REFLPROP(Create)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((class clang::DeclContext *), p1)
        LOAD_VAL((class clang::SourceLocation), p2)
        LOAD_VAL((class clang::NestedNameSpecifierLoc), p3)
        LOAD_VAL((const struct clang::DeclarationNameInfo &), p4)
        LOAD_VAL((class clang::SourceLocation), p5)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3, p4, p5))
      };
      break;
    }
    case currefl::CreateDeserialized: {
      ASSERT_TRAIT_IS_REFLPROP(CreateDeserialized)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateDeserialized(p0, p1))
      };
      break;
    }
    case_REFLPROP_0ARGS( getSourceRange, Type, X->getSourceRange() )
    case_REFLPROP_0ARGS( getCanonicalDecl, Type, X->getCanonicalDecl() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Decl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::classofKind: {
      ASSERT_TRAIT_IS_REFLPROP(classofKind)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::Decl::Kind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classofKind(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__UnresolvedUsingTypenameDecl: {
# define CLASSNAME (clang::UnresolvedUsingTypenameDecl)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__UnresolvedUsingTypenameDecl;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getFirstDecl, Type, X->getFirstDecl() )
    case_REFLPROP_0ARGS( getUsingLoc, Type, X->getUsingLoc() )
    case_REFLPROP_0ARGS( getTypenameLoc, Type, X->getTypenameLoc() )
    case_REFLPROP_0ARGS( getQualifierLoc, Type, X->getQualifierLoc() )
    case_REFLPROP_0ARGS( getQualifier, Type, X->getQualifier() )
    case_REFLPROP_0ARGS( getNameInfo, Type, X->getNameInfo() )
    case_REFLPROP_0ARGS( isPackExpansion, Result, X->isPackExpansion() )
    case_REFLPROP_0ARGS( getEllipsisLoc, Type, X->getEllipsisLoc() )
    case currefl::Create: {
      ASSERT_TRAIT_IS_REFLPROP(Create)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((class clang::DeclContext *), p1)
        LOAD_VAL((class clang::SourceLocation), p2)
        LOAD_VAL((class clang::SourceLocation), p3)
        LOAD_VAL((class clang::NestedNameSpecifierLoc), p4)
        LOAD_VAL((class clang::SourceLocation), p5)
        LOAD_VAL((class clang::DeclarationName), p6)
        LOAD_VAL((class clang::SourceLocation), p7)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3, p4, p5, p6, p7))
      };
      break;
    }
    case currefl::CreateDeserialized: {
      ASSERT_TRAIT_IS_REFLPROP(CreateDeserialized)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateDeserialized(p0, p1))
      };
      break;
    }
    case_REFLPROP_0ARGS( getCanonicalDecl, Type, X->getCanonicalDecl() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Decl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::classofKind: {
      ASSERT_TRAIT_IS_REFLPROP(classofKind)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::Decl::Kind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classofKind(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__StaticAssertDecl: {
# define CLASSNAME (clang::StaticAssertDecl)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__StaticAssertDecl;
  switch( (currefl::memnames)MemNum ) {
    case currefl::Create: {
      ASSERT_TRAIT_IS_REFLPROP(Create)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((class clang::DeclContext *), p1)
        LOAD_VAL((class clang::SourceLocation), p2)
        LOAD_VAL((class clang::Expr *), p3)
        LOAD_VAL((class clang::StringLiteral *), p4)
        LOAD_VAL((class clang::SourceLocation), p5)
        LOAD_VAL((bool), p6)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3, p4, p5, p6))
      };
      break;
    }
    case currefl::CreateDeserialized: {
      ASSERT_TRAIT_IS_REFLPROP(CreateDeserialized)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateDeserialized(p0, p1))
      };
      break;
    }
    case_REFLPROP_0ARGS( getAssertExpr, Type, X->getAssertExpr() )
    case_REFLPROP_0ARGS( getMessage, Type, X->getMessage() )
    case_REFLPROP_0ARGS( isFailed, Result, X->isFailed() )
    case_REFLPROP_0ARGS( getRParenLoc, Type, X->getRParenLoc() )
    case_REFLPROP_0ARGS( getSourceRange, Type, X->getSourceRange() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Decl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::classofKind: {
      ASSERT_TRAIT_IS_REFLPROP(classofKind)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::Decl::Kind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classofKind(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__BindingDecl: {
# define CLASSNAME (clang::BindingDecl)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__BindingDecl;
  switch( (currefl::memnames)MemNum ) {
    case currefl::Create: {
      ASSERT_TRAIT_IS_REFLPROP(Create)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((class clang::DeclContext *), p1)
        LOAD_VAL((class clang::SourceLocation), p2)
        LOAD_VAL((class clang::IdentifierInfo *), p3)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3))
      };
      break;
    }
    case currefl::CreateDeserialized: {
      ASSERT_TRAIT_IS_REFLPROP(CreateDeserialized)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateDeserialized(p0, p1))
      };
      break;
    }
    case_REFLPROP_0ARGS( getBinding, Type, X->getBinding() )
    case_REFLPROP_0ARGS( getHoldingVar, Type, X->getHoldingVar() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Decl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::classofKind: {
      ASSERT_TRAIT_IS_REFLPROP(classofKind)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::Decl::Kind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classofKind(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__DecompositionDecl: {
# define CLASSNAME (clang::DecompositionDecl)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__DecompositionDecl;
  switch( (currefl::memnames)MemNum ) {
    case currefl::CreateDeserialized: {
      ASSERT_TRAIT_IS_REFLPROP(CreateDeserialized)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        LOAD_VAL((unsigned int), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateDeserialized(p0, p1, p2))
      };
      break;
    }
    case currefl::bindings: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->bindings())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->bindings())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::bindings))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case currefl::printName: {
      ASSERT_TRAIT_IS_REFLPROP(printName)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::raw_ostream &), p0)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->printName((class llvm::raw_ostream &)p0))
      };
      break;
    }
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Decl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::classofKind: {
      ASSERT_TRAIT_IS_REFLPROP(classofKind)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::Decl::Kind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classofKind(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__MSPropertyDecl: {
# define CLASSNAME (clang::MSPropertyDecl)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__MSPropertyDecl;
  switch( (currefl::memnames)MemNum ) {
    case currefl::Create: {
      ASSERT_TRAIT_IS_REFLPROP(Create)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((class clang::DeclContext *), p1)
        LOAD_VAL((class clang::SourceLocation), p2)
        LOAD_VAL((class clang::DeclarationName), p3)
        LOAD_VAL((class clang::QualType), p4)
        LOAD_VAL((class clang::TypeSourceInfo *), p5)
        LOAD_VAL((class clang::SourceLocation), p6)
        LOAD_VAL((class clang::IdentifierInfo *), p7)
        LOAD_VAL((class clang::IdentifierInfo *), p8)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3, p4, p5, p6, p7, p8))
      };
      break;
    }
    case currefl::CreateDeserialized: {
      ASSERT_TRAIT_IS_REFLPROP(CreateDeserialized)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateDeserialized(p0, p1))
      };
      break;
    }
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Decl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( hasGetter, Result, X->hasGetter() )
    case_REFLPROP_0ARGS( getGetterId, Type, X->getGetterId() )
    case_REFLPROP_0ARGS( hasSetter, Result, X->hasSetter() )
    case_REFLPROP_0ARGS( getSetterId, Type, X->getSetterId() )
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__ConstexprDecl: {
# define CLASSNAME (clang::ConstexprDecl)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__ConstexprDecl;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getLambdaExpr, Type, X->getLambdaExpr() )
    case_REFLPROP_0ARGS( isDependent, Result, X->isDependent() )
    case currefl::CreateDeserialized: {
      ASSERT_TRAIT_IS_REFLPROP(CreateDeserialized)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateDeserialized(p0, p1))
      };
      break;
    }
    case_REFLPROP_0ARGS( hasFunctionRepresentation, Result, X->hasFunctionRepresentation() )
    case_REFLPROP_0ARGS( hasLambdaRepresentation, Result, X->hasLambdaRepresentation() )
    case_REFLPROP_0ARGS( getFunctionDecl, Type, X->getFunctionDecl() )
    case_REFLPROP_0ARGS( getClosureDecl, Type, X->getClosureDecl() )
    case_REFLPROP_0ARGS( getClosureCallOperator, Type, X->getClosureCallOperator() )
    case_REFLPROP_0ARGS( hasBody, Result, X->hasBody() )
    case_REFLPROP_0ARGS( getBody, Type, X->getBody() )
    case_REFLPROP_0ARGS( getCallExpr, Type, X->getCallExpr() )
    case_REFLPROP_0ARGS( getSourceRange, Type, X->getSourceRange() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Decl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::classofKind: {
      ASSERT_TRAIT_IS_REFLPROP(classofKind)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::Decl::Kind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classofKind(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__TemplateParameterList: {
# define CLASSNAME (clang::TemplateParameterList)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__TemplateParameterList;
  switch( (currefl::memnames)MemNum ) {
    case currefl::_this_: {
      switch (TraitKind) {
        case RTK_range_nth:
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE
            BUILD_REFLECTION_CALL_RANGE_NTH(Type, *X)
          };
          break;
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE
            BUILD_REFLECTION_CALL_RANGE_SIZE(*X)
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << "_this_"
                 << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case_REFLPROP_0ARGS( size, Result, X->size() )
    case currefl::asArray: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->asArray())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->asArray())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::asArray))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case currefl::getParam: {
      ASSERT_TRAIT_IS_REFLPROP(getParam)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getParam(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getMinRequiredArguments, Result, X->getMinRequiredArguments() )
    case_REFLPROP_0ARGS( getDepth, Result, X->getDepth() )
    case_REFLPROP_0ARGS( containsUnexpandedParameterPack, Result, X->containsUnexpandedParameterPack() )
    case_REFLPROP_0ARGS( getRequiresClause, Type, X->getRequiresClause() )
    case_REFLPROP_0ARGS( getTemplateLoc, Type, X->getTemplateLoc() )
    case_REFLPROP_0ARGS( getLAngleLoc, Type, X->getLAngleLoc() )
    case_REFLPROP_0ARGS( getRAngleLoc, Type, X->getRAngleLoc() )
    case_REFLPROP_0ARGS( getSourceRange, Type, X->getSourceRange() )
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__TemplateArgumentList: {
# define CLASSNAME (clang::TemplateArgumentList)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__TemplateArgumentList;
  switch( (currefl::memnames)MemNum ) {
    case currefl::get: {
      ASSERT_TRAIT_IS_REFLPROP(get)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->get(p0))
      };
      break;
    }
    case currefl::operator_sub: {
      ASSERT_TRAIT_IS_REFLPROP(operator_sub)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->operator[](p0))
      };
      break;
    }
    case currefl::asArray: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->asArray())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->asArray())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::asArray))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case_REFLPROP_0ARGS( size, Result, X->size() )
    case_REFLPROP_0ARGS( data, Type, X->data() )
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__TemplateDecl: {
# define CLASSNAME (clang::TemplateDecl)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__TemplateDecl;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getTemplateParameters, Type, X->getTemplateParameters() )
    case_REFLPROP_0ARGS( getRequiresClause, Type, X->getRequiresClause() )
    case_REFLPROP_0ARGS( getAssociatedConstraints, Type, X->getAssociatedConstraints() )
    case_REFLPROP_0ARGS( getTemplatedDecl, Type, X->getTemplatedDecl() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Decl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::classofKind: {
      ASSERT_TRAIT_IS_REFLPROP(classofKind)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::Decl::Kind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classofKind(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getSourceRange, Type, X->getSourceRange() )
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__FunctionTemplateSpecializationInfo: {
# define CLASSNAME (clang::FunctionTemplateSpecializationInfo)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__FunctionTemplateSpecializationInfo;
  switch( (currefl::memnames)MemNum ) {
    case currefl::Create: {
      ASSERT_TRAIT_IS_REFLPROP(Create)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((class clang::FunctionDecl *), p1)
        LOAD_VAL((class clang::FunctionTemplateDecl *), p2)
        LOAD_VAL((enum clang::TemplateSpecializationKind), p3)
        LOAD_VAL((const class clang::TemplateArgumentList *), p4)
        LOAD_VAL((const class clang::TemplateArgumentListInfo *), p5)
        LOAD_VAL((class clang::SourceLocation), p6)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3, p4, p5, p6))
      };
      break;
    }
    case_REFLPROP_0ARGS(Function, Type, X->Function)
    case_REFLPROP_0ARGS(TemplateArguments, Type, X->TemplateArguments)
    case_REFLPROP_0ARGS(TemplateArgumentsAsWritten, Type, X->TemplateArgumentsAsWritten)
    case_REFLPROP_0ARGS(PointOfInstantiation, Type, X->PointOfInstantiation)
    case_REFLPROP_0ARGS( getTemplate, Type, X->getTemplate() )
    case_REFLPROP_0ARGS( getTemplateSpecializationKind, Result, X->getTemplateSpecializationKind() )
    case_REFLPROP_0ARGS( isExplicitSpecialization, Result, X->isExplicitSpecialization() )
    case_REFLPROP_0ARGS( isExplicitInstantiationOrSpecialization, Result, X->isExplicitInstantiationOrSpecialization() )
    case_REFLPROP_0ARGS( getPointOfInstantiation, Type, X->getPointOfInstantiation() )
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__MemberSpecializationInfo: {
# define CLASSNAME (clang::MemberSpecializationInfo)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__MemberSpecializationInfo;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getInstantiatedFrom, Type, X->getInstantiatedFrom() )
    case_REFLPROP_0ARGS( getTemplateSpecializationKind, Result, X->getTemplateSpecializationKind() )
    case_REFLPROP_0ARGS( isExplicitSpecialization, Result, X->isExplicitSpecialization() )
    case_REFLPROP_0ARGS( getPointOfInstantiation, Type, X->getPointOfInstantiation() )
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__DependentFunctionTemplateSpecializationInfo: {
# define CLASSNAME (clang::DependentFunctionTemplateSpecializationInfo)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__DependentFunctionTemplateSpecializationInfo;
  switch( (currefl::memnames)MemNum ) {
    case currefl::Create: {
      ASSERT_TRAIT_IS_REFLPROP(Create)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((const class clang::UnresolvedSetImpl &), p1)
        LOAD_VAL((const class clang::TemplateArgumentListInfo &), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2))
      };
      break;
    }
    case_REFLPROP_0ARGS( getNumTemplates, Result, X->getNumTemplates() )
    case currefl::getTemplate: {
      ASSERT_TRAIT_IS_REFLPROP(getTemplate)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getTemplate(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getTemplateArgs, Type, X->getTemplateArgs() )
    case_REFLPROP_0ARGS( getNumTemplateArgs, Result, X->getNumTemplateArgs() )
    case currefl::getTemplateArg: {
      ASSERT_TRAIT_IS_REFLPROP(getTemplateArg)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getTemplateArg(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getLAngleLoc, Type, X->getLAngleLoc() )
    case_REFLPROP_0ARGS( getRAngleLoc, Type, X->getRAngleLoc() )
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__RedeclarableTemplateDecl: {
# define CLASSNAME (clang::RedeclarableTemplateDecl)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__RedeclarableTemplateDecl;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getPreviousDecl, Type, X->getPreviousDecl() )
    case_REFLPROP_0ARGS( getFirstDecl, Type, X->getFirstDecl() )
    case_REFLPROP_0ARGS( getMostRecentDecl, Type, X->getMostRecentDecl() )
    case_REFLPROP_0ARGS( getCanonicalDecl, Type, X->getCanonicalDecl() )
    case_REFLPROP_0ARGS( isMemberSpecialization, Result, X->isMemberSpecialization() )
    case_REFLPROP_0ARGS( getInstantiatedFromMemberTemplate, Type, X->getInstantiatedFromMemberTemplate() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Decl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::classofKind: {
      ASSERT_TRAIT_IS_REFLPROP(classofKind)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::Decl::Kind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classofKind(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__FunctionTemplateDecl: {
# define CLASSNAME (clang::FunctionTemplateDecl)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__FunctionTemplateDecl;
  switch( (currefl::memnames)MemNum ) {
    case currefl::LoadLazySpecializations: {
      ASSERT_TRAIT_IS_REFLPROP(LoadLazySpecializations)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        ASSERT_NO_MORE  VOID_REFLECTION(X->LoadLazySpecializations())
      };
      break;
    }
    case_REFLPROP_0ARGS( getTemplatedDecl, Type, X->getTemplatedDecl() )
    case_REFLPROP_0ARGS( isThisDeclarationADefinition, Result, X->isThisDeclarationADefinition() )
    case_REFLPROP_0ARGS( getCanonicalDecl, Type, X->getCanonicalDecl() )
    case_REFLPROP_0ARGS( getPreviousDecl, Type, X->getPreviousDecl() )
    case_REFLPROP_0ARGS( getMostRecentDecl, Type, X->getMostRecentDecl() )
    case_REFLPROP_0ARGS( getInstantiatedFromMemberTemplate, Type, X->getInstantiatedFromMemberTemplate() )
    case currefl::specializations: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->specializations())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->specializations())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::specializations))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case currefl::Create: {
      ASSERT_TRAIT_IS_REFLPROP(Create)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((class clang::DeclContext *), p1)
        LOAD_VAL((class clang::SourceLocation), p2)
        LOAD_VAL((class clang::DeclarationName), p3)
        LOAD_VAL((class clang::TemplateParameterList *), p4)
        LOAD_VAL((class clang::NamedDecl *), p5)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3, p4, p5))
      };
      break;
    }
    case currefl::CreateDeserialized: {
      ASSERT_TRAIT_IS_REFLPROP(CreateDeserialized)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateDeserialized(p0, p1))
      };
      break;
    }
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Decl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::classofKind: {
      ASSERT_TRAIT_IS_REFLPROP(classofKind)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::Decl::Kind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classofKind(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__TemplateTypeParmDecl: {
# define CLASSNAME (clang::TemplateTypeParmDecl)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__TemplateTypeParmDecl;
  switch( (currefl::memnames)MemNum ) {
    case currefl::Create: {
      ASSERT_TRAIT_IS_REFLPROP(Create)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((class clang::DeclContext *), p1)
        LOAD_VAL((class clang::SourceLocation), p2)
        LOAD_VAL((class clang::SourceLocation), p3)
        LOAD_VAL((unsigned int), p4)
        LOAD_VAL((unsigned int), p5)
        LOAD_VAL((class clang::IdentifierInfo *), p6)
        LOAD_VAL((bool), p7)
        LOAD_VAL((bool), p8)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3, p4, p5, p6, p7, p8))
      };
      break;
    }
    case currefl::CreateDeserialized: {
      ASSERT_TRAIT_IS_REFLPROP(CreateDeserialized)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateDeserialized(p0, p1))
      };
      break;
    }
    case_REFLPROP_0ARGS( wasDeclaredWithTypename, Result, X->wasDeclaredWithTypename() )
    case_REFLPROP_0ARGS( hasDefaultArgument, Result, X->hasDefaultArgument() )
    case_REFLPROP_0ARGS( getDefaultArgument, Type, X->getDefaultArgument() )
    case_REFLPROP_0ARGS( getDefaultArgumentInfo, Type, X->getDefaultArgumentInfo() )
    case_REFLPROP_0ARGS( getDefaultArgumentLoc, Type, X->getDefaultArgumentLoc() )
    case_REFLPROP_0ARGS( defaultArgumentWasInherited, Result, X->defaultArgumentWasInherited() )
    case_REFLPROP_0ARGS( getDepth, Result, X->getDepth() )
    case_REFLPROP_0ARGS( getIndex, Result, X->getIndex() )
    case_REFLPROP_0ARGS( isParameterPack, Result, X->isParameterPack() )
    case_REFLPROP_0ARGS( getSourceRange, Type, X->getSourceRange() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Decl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::classofKind: {
      ASSERT_TRAIT_IS_REFLPROP(classofKind)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::Decl::Kind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classofKind(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__NonTypeTemplateParmDecl: {
# define CLASSNAME (clang::NonTypeTemplateParmDecl)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__NonTypeTemplateParmDecl;
  switch( (currefl::memnames)MemNum ) {
    case currefl::Create: {
      ASSERT_TRAIT_IS_REFLPROP(Create)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((class clang::DeclContext *), p1)
        LOAD_VAL((class clang::SourceLocation), p2)
        LOAD_VAL((class clang::SourceLocation), p3)
        LOAD_VAL((unsigned int), p4)
        LOAD_VAL((unsigned int), p5)
        LOAD_VAL((class clang::IdentifierInfo *), p6)
        LOAD_VAL((class clang::QualType), p7)
        LOAD_VAL((bool), p8)
        LOAD_VAL((class clang::TypeSourceInfo *), p9)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9))
      };
      break;
    }
    case currefl::CreateDeserialized: {
      ASSERT_TRAIT_IS_REFLPROP(CreateDeserialized)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateDeserialized(p0, p1))
      };
      break;
    }
    case currefl::CreateDeserialized1: {
      ASSERT_TRAIT_IS_REFLPROP(CreateDeserialized1)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        LOAD_VAL((unsigned int), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateDeserialized(p0, p1, p2))
      };
      break;
    }
    case_REFLPROP_0ARGS( getSourceRange, Type, X->getSourceRange() )
    case_REFLPROP_0ARGS( hasDefaultArgument, Result, X->hasDefaultArgument() )
    case_REFLPROP_0ARGS( getDefaultArgument, Type, X->getDefaultArgument() )
    case_REFLPROP_0ARGS( getDefaultArgumentLoc, Type, X->getDefaultArgumentLoc() )
    case_REFLPROP_0ARGS( defaultArgumentWasInherited, Result, X->defaultArgumentWasInherited() )
    case_REFLPROP_0ARGS( isParameterPack, Result, X->isParameterPack() )
    case_REFLPROP_0ARGS( isPackExpansion, Result, X->isPackExpansion() )
    case_REFLPROP_0ARGS( isExpandedParameterPack, Result, X->isExpandedParameterPack() )
    case_REFLPROP_0ARGS( getNumExpansionTypes, Result, X->getNumExpansionTypes() )
    case currefl::getExpansionType: {
      ASSERT_TRAIT_IS_REFLPROP(getExpansionType)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getExpansionType(p0))
      };
      break;
    }
    case currefl::getExpansionTypeSourceInfo: {
      ASSERT_TRAIT_IS_REFLPROP(getExpansionTypeSourceInfo)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getExpansionTypeSourceInfo(p0))
      };
      break;
    }
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Decl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::classofKind: {
      ASSERT_TRAIT_IS_REFLPROP(classofKind)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::Decl::Kind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classofKind(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__TemplateTemplateParmDecl: {
# define CLASSNAME (clang::TemplateTemplateParmDecl)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__TemplateTemplateParmDecl;
  switch( (currefl::memnames)MemNum ) {
    case currefl::Create: {
      ASSERT_TRAIT_IS_REFLPROP(Create)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((class clang::DeclContext *), p1)
        LOAD_VAL((class clang::SourceLocation), p2)
        LOAD_VAL((unsigned int), p3)
        LOAD_VAL((unsigned int), p4)
        LOAD_VAL((bool), p5)
        LOAD_VAL((class clang::IdentifierInfo *), p6)
        LOAD_VAL((class clang::TemplateParameterList *), p7)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3, p4, p5, p6, p7))
      };
      break;
    }
    case currefl::CreateDeserialized: {
      ASSERT_TRAIT_IS_REFLPROP(CreateDeserialized)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateDeserialized(p0, p1))
      };
      break;
    }
    case currefl::CreateDeserialized1: {
      ASSERT_TRAIT_IS_REFLPROP(CreateDeserialized1)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        LOAD_VAL((unsigned int), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateDeserialized(p0, p1, p2))
      };
      break;
    }
    case_REFLPROP_0ARGS( isParameterPack, Result, X->isParameterPack() )
    case_REFLPROP_0ARGS( isPackExpansion, Result, X->isPackExpansion() )
    case_REFLPROP_0ARGS( isExpandedParameterPack, Result, X->isExpandedParameterPack() )
    case_REFLPROP_0ARGS( getNumExpansionTemplateParameters, Result, X->getNumExpansionTemplateParameters() )
    case currefl::getExpansionTemplateParameters: {
      ASSERT_TRAIT_IS_REFLPROP(getExpansionTemplateParameters)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getExpansionTemplateParameters(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( hasDefaultArgument, Result, X->hasDefaultArgument() )
    case_REFLPROP_0ARGS( getDefaultArgument, Type, X->getDefaultArgument() )
    case_REFLPROP_0ARGS( getDefaultArgumentLoc, Type, X->getDefaultArgumentLoc() )
    case_REFLPROP_0ARGS( defaultArgumentWasInherited, Result, X->defaultArgumentWasInherited() )
    case_REFLPROP_0ARGS( getSourceRange, Type, X->getSourceRange() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Decl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::classofKind: {
      ASSERT_TRAIT_IS_REFLPROP(classofKind)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::Decl::Kind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classofKind(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__BuiltinTemplateDecl: {
# define CLASSNAME (clang::BuiltinTemplateDecl)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__BuiltinTemplateDecl;
  switch( (currefl::memnames)MemNum ) {
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Decl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::classofKind: {
      ASSERT_TRAIT_IS_REFLPROP(classofKind)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::Decl::Kind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classofKind(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getSourceRange, Type, X->getSourceRange() )
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__ClassTemplateSpecializationDecl: {
# define CLASSNAME (clang::ClassTemplateSpecializationDecl)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__ClassTemplateSpecializationDecl;
  switch( (currefl::memnames)MemNum ) {
    case currefl::CreateDeserialized: {
      ASSERT_TRAIT_IS_REFLPROP(CreateDeserialized)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateDeserialized(p0, p1))
      };
      break;
    }
    case currefl::getNameForDiagnostic: {
      ASSERT_TRAIT_IS_REFLPROP(getNameForDiagnostic)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::raw_ostream &), p0)
        LOAD_VAL((const struct clang::PrintingPolicy &), p1)
        LOAD_VAL((bool), p2)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->getNameForDiagnostic((class llvm::raw_ostream &)p0, (const struct clang::PrintingPolicy &)p1, (bool)p2))
      };
      break;
    }
    case_REFLPROP_0ARGS( getSpecializedTemplate, Type, X->getSpecializedTemplate() )
    case_REFLPROP_0ARGS( getTemplateArgs, Type, X->getTemplateArgs() )
    case_REFLPROP_0ARGS( getSpecializationKind, Result, X->getSpecializationKind() )
    case_REFLPROP_0ARGS( isExplicitSpecialization, Result, X->isExplicitSpecialization() )
    case_REFLPROP_0ARGS( isExplicitInstantiationOrSpecialization, Result, X->isExplicitInstantiationOrSpecialization() )
    case_REFLPROP_0ARGS( getPointOfInstantiation, Type, X->getPointOfInstantiation() )
    case_REFLPROP_0ARGS( getTemplateInstantiationArgs, Type, X->getTemplateInstantiationArgs() )
    case_REFLPROP_0ARGS( getTypeAsWritten, Type, X->getTypeAsWritten() )
    case_REFLPROP_0ARGS( getExternLoc, Type, X->getExternLoc() )
    case_REFLPROP_0ARGS( getTemplateKeywordLoc, Type, X->getTemplateKeywordLoc() )
    case_REFLPROP_0ARGS( getSourceRange, Type, X->getSourceRange() )
    case currefl::Profile: {
      ASSERT_TRAIT_IS_REFLPROP(Profile)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::FoldingSetNodeID &), p0)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->Profile((llvm::FoldingSetNodeID &)p0))
      };
      break;
    }
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Decl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::classofKind: {
      ASSERT_TRAIT_IS_REFLPROP(classofKind)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::Decl::Kind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classofKind(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__ClassTemplatePartialSpecializationDecl: {
# define CLASSNAME (clang::ClassTemplatePartialSpecializationDecl)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__ClassTemplatePartialSpecializationDecl;
  switch( (currefl::memnames)MemNum ) {
    case currefl::CreateDeserialized: {
      ASSERT_TRAIT_IS_REFLPROP(CreateDeserialized)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateDeserialized(p0, p1))
      };
      break;
    }
    case_REFLPROP_0ARGS( getTemplateParameters, Type, X->getTemplateParameters() )
    case_REFLPROP_0ARGS( getTemplateArgsAsWritten, Type, X->getTemplateArgsAsWritten() )
    case_REFLPROP_0ARGS( getInstantiatedFromMember, Type, X->getInstantiatedFromMember() )
    case_REFLPROP_0ARGS( getInstantiatedFromMemberTemplate, Type, X->getInstantiatedFromMemberTemplate() )
    case_REFLPROP_0ARGS( getInjectedSpecializationType, Type, X->getInjectedSpecializationType() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Decl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::classofKind: {
      ASSERT_TRAIT_IS_REFLPROP(classofKind)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::Decl::Kind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classofKind(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__ClassTemplateDecl: {
# define CLASSNAME (clang::ClassTemplateDecl)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__ClassTemplateDecl;
  switch( (currefl::memnames)MemNum ) {
    case currefl::LoadLazySpecializations: {
      ASSERT_TRAIT_IS_REFLPROP(LoadLazySpecializations)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        ASSERT_NO_MORE  VOID_REFLECTION(X->LoadLazySpecializations())
      };
      break;
    }
    case_REFLPROP_0ARGS( getTemplatedDecl, Type, X->getTemplatedDecl() )
    case_REFLPROP_0ARGS( isThisDeclarationADefinition, Result, X->isThisDeclarationADefinition() )
    case currefl::Create: {
      ASSERT_TRAIT_IS_REFLPROP(Create)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((class clang::DeclContext *), p1)
        LOAD_VAL((class clang::SourceLocation), p2)
        LOAD_VAL((class clang::DeclarationName), p3)
        LOAD_VAL((class clang::TemplateParameterList *), p4)
        LOAD_VAL((class clang::NamedDecl *), p5)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3, p4, p5))
        LOAD_VAL((class clang::Expr *), p6)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3, p4, p5, p6))
      };
      break;
    }
    case currefl::CreateDeserialized: {
      ASSERT_TRAIT_IS_REFLPROP(CreateDeserialized)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateDeserialized(p0, p1))
      };
      break;
    }
    case_REFLPROP_0ARGS( getCanonicalDecl, Type, X->getCanonicalDecl() )
    case_REFLPROP_0ARGS( getPreviousDecl, Type, X->getPreviousDecl() )
    case_REFLPROP_0ARGS( getMostRecentDecl, Type, X->getMostRecentDecl() )
    case_REFLPROP_0ARGS( getInstantiatedFromMemberTemplate, Type, X->getInstantiatedFromMemberTemplate() )
    case currefl::specializations: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->specializations())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->specializations())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::specializations))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Decl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::classofKind: {
      ASSERT_TRAIT_IS_REFLPROP(classofKind)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::Decl::Kind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classofKind(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__FriendTemplateDecl: {
# define CLASSNAME (clang::FriendTemplateDecl)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__FriendTemplateDecl;
  switch( (currefl::memnames)MemNum ) {
    case currefl::CreateDeserialized: {
      ASSERT_TRAIT_IS_REFLPROP(CreateDeserialized)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateDeserialized(p0, p1))
      };
      break;
    }
    case_REFLPROP_0ARGS( getFriendType, Type, X->getFriendType() )
    case_REFLPROP_0ARGS( getFriendDecl, Type, X->getFriendDecl() )
    case_REFLPROP_0ARGS( getFriendLoc, Type, X->getFriendLoc() )
    case currefl::getTemplateParameterList: {
      ASSERT_TRAIT_IS_REFLPROP(getTemplateParameterList)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getTemplateParameterList(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getNumTemplateParameters, Result, X->getNumTemplateParameters() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Decl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::classofKind: {
      ASSERT_TRAIT_IS_REFLPROP(classofKind)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::Decl::Kind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classofKind(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__TypeAliasTemplateDecl: {
# define CLASSNAME (clang::TypeAliasTemplateDecl)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__TypeAliasTemplateDecl;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getTemplatedDecl, Type, X->getTemplatedDecl() )
    case_REFLPROP_0ARGS( getCanonicalDecl, Type, X->getCanonicalDecl() )
    case_REFLPROP_0ARGS( getPreviousDecl, Type, X->getPreviousDecl() )
    case_REFLPROP_0ARGS( getInstantiatedFromMemberTemplate, Type, X->getInstantiatedFromMemberTemplate() )
    case currefl::Create: {
      ASSERT_TRAIT_IS_REFLPROP(Create)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((class clang::DeclContext *), p1)
        LOAD_VAL((class clang::SourceLocation), p2)
        LOAD_VAL((class clang::DeclarationName), p3)
        LOAD_VAL((class clang::TemplateParameterList *), p4)
        LOAD_VAL((class clang::NamedDecl *), p5)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3, p4, p5))
      };
      break;
    }
    case currefl::CreateDeserialized: {
      ASSERT_TRAIT_IS_REFLPROP(CreateDeserialized)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateDeserialized(p0, p1))
      };
      break;
    }
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Decl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::classofKind: {
      ASSERT_TRAIT_IS_REFLPROP(classofKind)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::Decl::Kind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classofKind(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__ClassScopeFunctionSpecializationDecl: {
# define CLASSNAME (clang::ClassScopeFunctionSpecializationDecl)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__ClassScopeFunctionSpecializationDecl;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getSpecialization, Type, X->getSpecialization() )
    case_REFLPROP_0ARGS( hasExplicitTemplateArgs, Result, X->hasExplicitTemplateArgs() )
    case_REFLPROP_0ARGS( templateArgs, Type, X->templateArgs() )
    case currefl::Create: {
      ASSERT_TRAIT_IS_REFLPROP(Create)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((class clang::DeclContext *), p1)
        LOAD_VAL((class clang::SourceLocation), p2)
        LOAD_VAL((class clang::CXXMethodDecl *), p3)
        LOAD_VAL((bool), p4)
        LOAD_VAL((class clang::TemplateArgumentListInfo), p5)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3, p4, p5))
      };
      break;
    }
    case currefl::CreateDeserialized: {
      ASSERT_TRAIT_IS_REFLPROP(CreateDeserialized)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateDeserialized(p0, p1))
      };
      break;
    }
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Decl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::classofKind: {
      ASSERT_TRAIT_IS_REFLPROP(classofKind)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::Decl::Kind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classofKind(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__VarTemplateSpecializationDecl: {
# define CLASSNAME (clang::VarTemplateSpecializationDecl)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__VarTemplateSpecializationDecl;
  switch( (currefl::memnames)MemNum ) {
    case currefl::CreateDeserialized: {
      ASSERT_TRAIT_IS_REFLPROP(CreateDeserialized)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateDeserialized(p0, p1))
      };
      break;
    }
    case currefl::getNameForDiagnostic: {
      ASSERT_TRAIT_IS_REFLPROP(getNameForDiagnostic)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::raw_ostream &), p0)
        LOAD_VAL((const struct clang::PrintingPolicy &), p1)
        LOAD_VAL((bool), p2)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->getNameForDiagnostic((class llvm::raw_ostream &)p0, (const struct clang::PrintingPolicy &)p1, (bool)p2))
      };
      break;
    }
    case_REFLPROP_0ARGS( getSpecializedTemplate, Type, X->getSpecializedTemplate() )
    case_REFLPROP_0ARGS( getTemplateArgs, Type, X->getTemplateArgs() )
    case_REFLPROP_0ARGS( getTemplateArgsInfo, Type, X->getTemplateArgsInfo() )
    case_REFLPROP_0ARGS( getSpecializationKind, Result, X->getSpecializationKind() )
    case_REFLPROP_0ARGS( isExplicitSpecialization, Result, X->isExplicitSpecialization() )
    case_REFLPROP_0ARGS( isExplicitInstantiationOrSpecialization, Result, X->isExplicitInstantiationOrSpecialization() )
    case_REFLPROP_0ARGS( getPointOfInstantiation, Type, X->getPointOfInstantiation() )
    case_REFLPROP_0ARGS( getTemplateInstantiationArgs, Type, X->getTemplateInstantiationArgs() )
    case_REFLPROP_0ARGS( getTypeAsWritten, Type, X->getTypeAsWritten() )
    case_REFLPROP_0ARGS( getExternLoc, Type, X->getExternLoc() )
    case_REFLPROP_0ARGS( getTemplateKeywordLoc, Type, X->getTemplateKeywordLoc() )
    case currefl::Profile: {
      ASSERT_TRAIT_IS_REFLPROP(Profile)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class llvm::FoldingSetNodeID &), p0)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->Profile((llvm::FoldingSetNodeID &)p0))
      };
      break;
    }
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Decl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::classofKind: {
      ASSERT_TRAIT_IS_REFLPROP(classofKind)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::Decl::Kind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classofKind(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__VarTemplatePartialSpecializationDecl: {
# define CLASSNAME (clang::VarTemplatePartialSpecializationDecl)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__VarTemplatePartialSpecializationDecl;
  switch( (currefl::memnames)MemNum ) {
    case currefl::CreateDeserialized: {
      ASSERT_TRAIT_IS_REFLPROP(CreateDeserialized)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateDeserialized(p0, p1))
      };
      break;
    }
    case_REFLPROP_0ARGS( getTemplateParameters, Type, X->getTemplateParameters() )
    case_REFLPROP_0ARGS( getTemplateArgsAsWritten, Type, X->getTemplateArgsAsWritten() )
    case_REFLPROP_0ARGS( getInstantiatedFromMember, Type, X->getInstantiatedFromMember() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Decl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::classofKind: {
      ASSERT_TRAIT_IS_REFLPROP(classofKind)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::Decl::Kind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classofKind(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__VarTemplateDecl: {
# define CLASSNAME (clang::VarTemplateDecl)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__VarTemplateDecl;
  switch( (currefl::memnames)MemNum ) {
    case currefl::LoadLazySpecializations: {
      ASSERT_TRAIT_IS_REFLPROP(LoadLazySpecializations)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        ASSERT_NO_MORE  VOID_REFLECTION(X->LoadLazySpecializations())
      };
      break;
    }
    case_REFLPROP_0ARGS( getTemplatedDecl, Type, X->getTemplatedDecl() )
    case_REFLPROP_0ARGS( isThisDeclarationADefinition, Result, X->isThisDeclarationADefinition() )
    case currefl::Create: {
      ASSERT_TRAIT_IS_REFLPROP(Create)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((class clang::DeclContext *), p1)
        LOAD_VAL((class clang::SourceLocation), p2)
        LOAD_VAL((class clang::DeclarationName), p3)
        LOAD_VAL((class clang::TemplateParameterList *), p4)
        LOAD_VAL((class clang::VarDecl *), p5)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3, p4, p5))
      };
      break;
    }
    case currefl::CreateDeserialized: {
      ASSERT_TRAIT_IS_REFLPROP(CreateDeserialized)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateDeserialized(p0, p1))
      };
      break;
    }
    case_REFLPROP_0ARGS( getCanonicalDecl, Type, X->getCanonicalDecl() )
    case_REFLPROP_0ARGS( getPreviousDecl, Type, X->getPreviousDecl() )
    case_REFLPROP_0ARGS( getMostRecentDecl, Type, X->getMostRecentDecl() )
    case_REFLPROP_0ARGS( getInstantiatedFromMemberTemplate, Type, X->getInstantiatedFromMemberTemplate() )
    case currefl::specializations: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->specializations())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->specializations())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::specializations))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Decl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::classofKind: {
      ASSERT_TRAIT_IS_REFLPROP(classofKind)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::Decl::Kind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classofKind(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__FriendDecl: {
# define CLASSNAME (clang::FriendDecl)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__FriendDecl;
  switch( (currefl::memnames)MemNum ) {
    case currefl::CreateDeserialized: {
      ASSERT_TRAIT_IS_REFLPROP(CreateDeserialized)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        LOAD_VAL((unsigned int), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateDeserialized(p0, p1, p2))
      };
      break;
    }
    case_REFLPROP_0ARGS( getFriendType, Type, X->getFriendType() )
    case_REFLPROP_0ARGS( getFriendTypeNumTemplateParameterLists, Result, X->getFriendTypeNumTemplateParameterLists() )
    case currefl::getFriendTypeTemplateParameterList: {
      ASSERT_TRAIT_IS_REFLPROP(getFriendTypeTemplateParameterList)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getFriendTypeTemplateParameterList(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getFriendDecl, Type, X->getFriendDecl() )
    case_REFLPROP_0ARGS( getFriendLoc, Type, X->getFriendLoc() )
    case_REFLPROP_0ARGS( getSourceRange, Type, X->getSourceRange() )
    case_REFLPROP_0ARGS( isUnsupportedFriend, Result, X->isUnsupportedFriend() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Decl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::classofKind: {
      ASSERT_TRAIT_IS_REFLPROP(classofKind)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::Decl::Kind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classofKind(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__ObjCListBase: {
# define CLASSNAME (clang::ObjCListBase)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__ObjCListBase;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( size, Result, X->size() )
    case_REFLPROP_0ARGS( empty, Result, X->empty() )
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__ObjCProtocolList: {
# define CLASSNAME (clang::ObjCProtocolList)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__ObjCProtocolList;
  switch( (currefl::memnames)MemNum ) {
    case currefl::_this_: {
      switch (TraitKind) {
        case RTK_range_nth:
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE
            BUILD_REFLECTION_CALL_RANGE_NTH(Type, *X)
          };
          break;
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE
            BUILD_REFLECTION_CALL_RANGE_SIZE(*X)
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << "_this_"
                 << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case currefl::operator_sub: {
      ASSERT_TRAIT_IS_REFLPROP(operator_sub)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->operator[](p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__ObjCMethodDecl: {
# define CLASSNAME (clang::ObjCMethodDecl)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__ObjCMethodDecl;
  switch( (currefl::memnames)MemNum ) {
    case currefl::Create: {
      ASSERT_TRAIT_IS_REFLPROP(Create)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((class clang::SourceLocation), p1)
        LOAD_VAL((class clang::SourceLocation), p2)
        LOAD_VAL((class clang::Selector), p3)
        LOAD_VAL((class clang::QualType), p4)
        LOAD_VAL((class clang::TypeSourceInfo *), p5)
        LOAD_VAL((class clang::DeclContext *), p6)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3, p4, p5, p6))
        LOAD_VAL((bool), p7)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3, p4, p5, p6, p7))
        LOAD_VAL((bool), p8)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3, p4, p5, p6, p7, p8))
        LOAD_VAL((bool), p9)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9))
        LOAD_VAL((bool), p10)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10))
        LOAD_VAL((bool), p11)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11))
        LOAD_VAL((enum clang::ObjCMethodDecl::ImplementationControl), p12)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12))
        LOAD_VAL((bool), p13)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13))
      };
      break;
    }
    case currefl::CreateDeserialized: {
      ASSERT_TRAIT_IS_REFLPROP(CreateDeserialized)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateDeserialized(p0, p1))
      };
      break;
    }
    case_REFLPROP_0ARGS( getCanonicalDecl, Type, X->getCanonicalDecl() )
    case_REFLPROP_0ARGS( getObjCDeclQualifier, Result, X->getObjCDeclQualifier() )
    case_REFLPROP_0ARGS( hasRelatedResultType, Result, X->hasRelatedResultType() )
    case_REFLPROP_0ARGS( isRedeclaration, Result, X->isRedeclaration() )
    case_REFLPROP_0ARGS( getDeclaratorEndLoc, Type, X->getDeclaratorEndLoc() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case_REFLPROP_0ARGS( getSourceRange, Type, X->getSourceRange() )
    case_REFLPROP_0ARGS( getSelectorStartLoc, Type, X->getSelectorStartLoc() )
    case currefl::getSelectorLoc: {
      ASSERT_TRAIT_IS_REFLPROP(getSelectorLoc)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getSelectorLoc(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getNumSelectorLocs, Result, X->getNumSelectorLocs() )
    case_REFLPROP_0ARGS( getClassInterface, Type, X->getClassInterface() )
    case_REFLPROP_0ARGS( getSelector, Type, X->getSelector() )
    case_REFLPROP_0ARGS( getReturnType, Type, X->getReturnType() )
    case_REFLPROP_0ARGS( getReturnTypeSourceRange, Type, X->getReturnTypeSourceRange() )
    case_REFLPROP_0ARGS( getSendResultType, Type, X->getSendResultType() )
    case currefl::getSendResultType1: {
      ASSERT_TRAIT_IS_REFLPROP(getSendResultType1)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::QualType), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getSendResultType(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getReturnTypeSourceInfo, Type, X->getReturnTypeSourceInfo() )
    case_REFLPROP_0ARGS( param_size, Result, X->param_size() )
    case currefl::parameters: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->parameters())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->parameters())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::parameters))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case_REFLPROP_0ARGS( getSelfDecl, Type, X->getSelfDecl() )
    case_REFLPROP_0ARGS( getCmdDecl, Type, X->getCmdDecl() )
    case_REFLPROP_0ARGS( getMethodFamily, Result, X->getMethodFamily() )
    case_REFLPROP_0ARGS( isInstanceMethod, Result, X->isInstanceMethod() )
    case_REFLPROP_0ARGS( isVariadic, Result, X->isVariadic() )
    case_REFLPROP_0ARGS( isClassMethod, Result, X->isClassMethod() )
    case_REFLPROP_0ARGS( isPropertyAccessor, Result, X->isPropertyAccessor() )
    case_REFLPROP_0ARGS( isDefined, Result, X->isDefined() )
    case_REFLPROP_0ARGS( isOverriding, Result, X->isOverriding() )
    case_REFLPROP_0ARGS( hasSkippedBody, Result, X->hasSkippedBody() )
    case currefl::findPropertyDecl: {
      ASSERT_TRAIT_IS_REFLPROP(findPropertyDecl)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Type, X->findPropertyDecl())
        LOAD_VAL((bool), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->findPropertyDecl(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getImplementationControl, Result, X->getImplementationControl() )
    case_REFLPROP_0ARGS( isOptional, Result, X->isOptional() )
    case_REFLPROP_0ARGS( isThisDeclarationADesignatedInitializer, Result, X->isThisDeclarationADesignatedInitializer() )
    case currefl::isDesignatedInitializerForTheInterface: {
      ASSERT_TRAIT_IS_REFLPROP(isDesignatedInitializerForTheInterface)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Result, X->isDesignatedInitializerForTheInterface())
        LOAD_VAL((const class clang::ObjCMethodDecl **), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isDesignatedInitializerForTheInterface(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( hasBody, Result, X->hasBody() )
    case_REFLPROP_0ARGS( getBody, Type, X->getBody() )
    case_REFLPROP_0ARGS( isThisDeclarationADefinition, Result, X->isThisDeclarationADefinition() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Decl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::classofKind: {
      ASSERT_TRAIT_IS_REFLPROP(classofKind)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::Decl::Kind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classofKind(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__ObjCTypeParamDecl: {
# define CLASSNAME (clang::ObjCTypeParamDecl)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__ObjCTypeParamDecl;
  switch( (currefl::memnames)MemNum ) {
    case currefl::Create: {
      ASSERT_TRAIT_IS_REFLPROP(Create)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((class clang::DeclContext *), p1)
        LOAD_VAL((enum clang::ObjCTypeParamVariance), p2)
        LOAD_VAL((class clang::SourceLocation), p3)
        LOAD_VAL((unsigned int), p4)
        LOAD_VAL((class clang::SourceLocation), p5)
        LOAD_VAL((class clang::IdentifierInfo *), p6)
        LOAD_VAL((class clang::SourceLocation), p7)
        LOAD_VAL((class clang::TypeSourceInfo *), p8)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3, p4, p5, p6, p7, p8))
      };
      break;
    }
    case currefl::CreateDeserialized: {
      ASSERT_TRAIT_IS_REFLPROP(CreateDeserialized)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateDeserialized(p0, p1))
      };
      break;
    }
    case_REFLPROP_0ARGS( getSourceRange, Type, X->getSourceRange() )
    case_REFLPROP_0ARGS( getVariance, Result, X->getVariance() )
    case_REFLPROP_0ARGS( getVarianceLoc, Type, X->getVarianceLoc() )
    case_REFLPROP_0ARGS( getIndex, Result, X->getIndex() )
    case_REFLPROP_0ARGS( hasExplicitBound, Result, X->hasExplicitBound() )
    case_REFLPROP_0ARGS( getColonLoc, Type, X->getColonLoc() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Decl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::classofKind: {
      ASSERT_TRAIT_IS_REFLPROP(classofKind)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::Decl::Kind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classofKind(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__ObjCTypeParamList: {
# define CLASSNAME (clang::ObjCTypeParamList)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__ObjCTypeParamList;
  switch( (currefl::memnames)MemNum ) {
    case currefl::_this_: {
      switch (TraitKind) {
        case RTK_range_nth:
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE
            BUILD_REFLECTION_CALL_RANGE_NTH(Type, *X)
          };
          break;
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE
            BUILD_REFLECTION_CALL_RANGE_SIZE(*X)
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << "_this_"
                 << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case_REFLPROP_0ARGS( size, Result, X->size() )
    case_REFLPROP_0ARGS( front, Type, X->front() )
    case_REFLPROP_0ARGS( back, Type, X->back() )
    case_REFLPROP_0ARGS( getLAngleLoc, Type, X->getLAngleLoc() )
    case_REFLPROP_0ARGS( getRAngleLoc, Type, X->getRAngleLoc() )
    case_REFLPROP_0ARGS( getSourceRange, Type, X->getSourceRange() )
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__ObjCPropertyDecl: {
# define CLASSNAME (clang::ObjCPropertyDecl)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__ObjCPropertyDecl;
  switch( (currefl::memnames)MemNum ) {
    case currefl::Create: {
      ASSERT_TRAIT_IS_REFLPROP(Create)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((class clang::DeclContext *), p1)
        LOAD_VAL((class clang::SourceLocation), p2)
        LOAD_VAL((class clang::IdentifierInfo *), p3)
        LOAD_VAL((class clang::SourceLocation), p4)
        LOAD_VAL((class clang::SourceLocation), p5)
        LOAD_VAL((class clang::QualType), p6)
        LOAD_VAL((class clang::TypeSourceInfo *), p7)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3, p4, p5, p6, p7))
        LOAD_VAL((enum clang::ObjCPropertyDecl::PropertyControl), p8)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3, p4, p5, p6, p7, p8))
      };
      break;
    }
    case currefl::CreateDeserialized: {
      ASSERT_TRAIT_IS_REFLPROP(CreateDeserialized)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateDeserialized(p0, p1))
      };
      break;
    }
    case_REFLPROP_0ARGS( getAtLoc, Type, X->getAtLoc() )
    case_REFLPROP_0ARGS( getLParenLoc, Type, X->getLParenLoc() )
    case_REFLPROP_0ARGS( getTypeSourceInfo, Type, X->getTypeSourceInfo() )
    case_REFLPROP_0ARGS( getType, Type, X->getType() )
    case currefl::getUsageType: {
      ASSERT_TRAIT_IS_REFLPROP(getUsageType)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::QualType), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getUsageType(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getPropertyAttributes, Result, X->getPropertyAttributes() )
    case_REFLPROP_0ARGS( getPropertyAttributesAsWritten, Result, X->getPropertyAttributesAsWritten() )
    case_REFLPROP_0ARGS( isReadOnly, Result, X->isReadOnly() )
    case_REFLPROP_0ARGS( isAtomic, Result, X->isAtomic() )
    case_REFLPROP_0ARGS( isRetaining, Result, X->isRetaining() )
    case_REFLPROP_0ARGS( isInstanceProperty, Result, X->isInstanceProperty() )
    case_REFLPROP_0ARGS( isClassProperty, Result, X->isClassProperty() )
    case_REFLPROP_0ARGS( getQueryKind, Result, X->getQueryKind() )
    case currefl::getQueryKind1: {
      ASSERT_TRAIT_IS_REFLPROP(getQueryKind1)
      SET_PRIM_TYPE(enum clang::ObjCPropertyQueryKind)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((bool), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->getQueryKind(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getSetterKind, Result, X->getSetterKind() )
    case_REFLPROP_0ARGS( getGetterName, Type, X->getGetterName() )
    case_REFLPROP_0ARGS( getGetterNameLoc, Type, X->getGetterNameLoc() )
    case_REFLPROP_0ARGS( getSetterName, Type, X->getSetterName() )
    case_REFLPROP_0ARGS( getSetterNameLoc, Type, X->getSetterNameLoc() )
    case_REFLPROP_0ARGS( getGetterMethodDecl, Type, X->getGetterMethodDecl() )
    case_REFLPROP_0ARGS( getSetterMethodDecl, Type, X->getSetterMethodDecl() )
    case_REFLPROP_0ARGS( getPropertyImplementation, Result, X->getPropertyImplementation() )
    case_REFLPROP_0ARGS( isOptional, Result, X->isOptional() )
    case_REFLPROP_0ARGS( getPropertyIvarDecl, Type, X->getPropertyIvarDecl() )
    case_REFLPROP_0ARGS( getSourceRange, Type, X->getSourceRange() )
    case currefl::getDefaultSynthIvarName: {
      ASSERT_TRAIT_IS_REFLPROP(getDefaultSynthIvarName)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getDefaultSynthIvarName(p0))
      };
      break;
    }
    case currefl::findPropertyDecl: {
      ASSERT_TRAIT_IS_REFLPROP(findPropertyDecl)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::DeclContext *), p0)
        LOAD_VAL((const class clang::IdentifierInfo *), p1)
        LOAD_VAL((enum clang::ObjCPropertyQueryKind), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->findPropertyDecl(p0, p1, p2))
      };
      break;
    }
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Decl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::classofKind: {
      ASSERT_TRAIT_IS_REFLPROP(classofKind)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::Decl::Kind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classofKind(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__ObjCContainerDecl: {
# define CLASSNAME (clang::ObjCContainerDecl)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__ObjCContainerDecl;
  switch( (currefl::memnames)MemNum ) {
    case currefl::properties: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->properties())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->properties())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::properties))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case currefl::instance_properties: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->instance_properties())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->instance_properties())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::instance_properties))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case currefl::class_properties: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->class_properties())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->class_properties())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::class_properties))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case currefl::methods: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->methods())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->methods())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::methods))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case currefl::instance_methods: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->instance_methods())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->instance_methods())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::instance_methods))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case currefl::class_methods: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->class_methods())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->class_methods())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::class_methods))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case currefl::getMethod: {
      ASSERT_TRAIT_IS_REFLPROP(getMethod)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::Selector), p0)
        LOAD_VAL((bool), p1)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Type, X->getMethod(p0, p1))
        LOAD_VAL((bool), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getMethod(p0, p1, p2))
      };
      break;
    }
    case currefl::getInstanceMethod: {
      ASSERT_TRAIT_IS_REFLPROP(getInstanceMethod)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::Selector), p0)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Type, X->getInstanceMethod(p0))
        LOAD_VAL((bool), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getInstanceMethod(p0, p1))
      };
      break;
    }
    case currefl::getClassMethod: {
      ASSERT_TRAIT_IS_REFLPROP(getClassMethod)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::Selector), p0)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Type, X->getClassMethod(p0))
        LOAD_VAL((bool), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getClassMethod(p0, p1))
      };
      break;
    }
    case currefl::HasUserDeclaredSetterMethod: {
      ASSERT_TRAIT_IS_REFLPROP(HasUserDeclaredSetterMethod)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::ObjCPropertyDecl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->HasUserDeclaredSetterMethod(p0))
      };
      break;
    }
    case currefl::getIvarDecl: {
      ASSERT_TRAIT_IS_REFLPROP(getIvarDecl)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::IdentifierInfo *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getIvarDecl(p0))
      };
      break;
    }
    case currefl::FindPropertyDeclaration: {
      ASSERT_TRAIT_IS_REFLPROP(FindPropertyDeclaration)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::IdentifierInfo *), p0)
        LOAD_VAL((enum clang::ObjCPropertyQueryKind), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->FindPropertyDeclaration(p0, p1))
      };
      break;
    }
    case_REFLPROP_0ARGS( getAtStartLoc, Type, X->getAtStartLoc() )
    case_REFLPROP_0ARGS( getAtEndRange, Type, X->getAtEndRange() )
    case_REFLPROP_0ARGS( getSourceRange, Type, X->getSourceRange() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Decl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::classofKind: {
      ASSERT_TRAIT_IS_REFLPROP(classofKind)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::Decl::Kind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classofKind(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__ObjCInterfaceDecl: {
# define CLASSNAME (clang::ObjCInterfaceDecl)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__ObjCInterfaceDecl;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getPreviousDecl, Type, X->getPreviousDecl() )
    case_REFLPROP_0ARGS( getFirstDecl, Type, X->getFirstDecl() )
    case_REFLPROP_0ARGS( getMostRecentDecl, Type, X->getMostRecentDecl() )
    case currefl::Create: {
      ASSERT_TRAIT_IS_REFLPROP(Create)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((class clang::DeclContext *), p1)
        LOAD_VAL((class clang::SourceLocation), p2)
        LOAD_VAL((class clang::IdentifierInfo *), p3)
        LOAD_VAL((class clang::ObjCTypeParamList *), p4)
        LOAD_VAL((class clang::ObjCInterfaceDecl *), p5)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3, p4, p5))
        LOAD_VAL((class clang::SourceLocation), p6)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3, p4, p5, p6))
        LOAD_VAL((bool), p7)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3, p4, p5, p6, p7))
      };
      break;
    }
    case currefl::CreateDeserialized: {
      ASSERT_TRAIT_IS_REFLPROP(CreateDeserialized)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateDeserialized(p0, p1))
      };
      break;
    }
    case_REFLPROP_0ARGS( getTypeParamList, Type, X->getTypeParamList() )
    case_REFLPROP_0ARGS( getTypeParamListAsWritten, Type, X->getTypeParamListAsWritten() )
    case_REFLPROP_0ARGS( getSourceRange, Type, X->getSourceRange() )
    case_REFLPROP_0ARGS( hasDesignatedInitializers, Result, X->hasDesignatedInitializers() )
    case_REFLPROP_0ARGS( declaresOrInheritsDesignatedInitializers, Result, X->declaresOrInheritsDesignatedInitializers() )
    case_REFLPROP_0ARGS( getReferencedProtocols, Type, X->getReferencedProtocols() )
    case_REFLPROP_0ARGS( getImplementation, Type, X->getImplementation() )
    case currefl::FindCategoryDeclaration: {
      ASSERT_TRAIT_IS_REFLPROP(FindCategoryDeclaration)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::IdentifierInfo *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->FindCategoryDeclaration(p0))
      };
      break;
    }
    case currefl::getCategoryInstanceMethod: {
      ASSERT_TRAIT_IS_REFLPROP(getCategoryInstanceMethod)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::Selector), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getCategoryInstanceMethod(p0))
      };
      break;
    }
    case currefl::getCategoryClassMethod: {
      ASSERT_TRAIT_IS_REFLPROP(getCategoryClassMethod)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::Selector), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getCategoryClassMethod(p0))
      };
      break;
    }
    case currefl::getCategoryMethod: {
      ASSERT_TRAIT_IS_REFLPROP(getCategoryMethod)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::Selector), p0)
        LOAD_VAL((bool), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getCategoryMethod(p0, p1))
      };
      break;
    }
    case currefl::protocols: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->protocols())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->protocols())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::protocols))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case currefl::protocol_locs: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->protocol_locs())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->protocol_locs())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::protocol_locs))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case currefl::all_referenced_protocols: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->all_referenced_protocols())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->all_referenced_protocols())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::all_referenced_protocols))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case currefl::ivars: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->ivars())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->ivars())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::ivars))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case_REFLPROP_0ARGS( ivar_size, Result, X->ivar_size() )
    case_REFLPROP_0ARGS( ivar_empty, Result, X->ivar_empty() )
    case_REFLPROP_0ARGS( getObjCRuntimeNameAsString, Str, X->getObjCRuntimeNameAsString() )
    case currefl::isDesignatedInitializer: {
      ASSERT_TRAIT_IS_REFLPROP(isDesignatedInitializer)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::Selector), p0)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Result, X->isDesignatedInitializer(p0))
        LOAD_VAL((const class clang::ObjCMethodDecl **), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isDesignatedInitializer(p0, p1))
      };
      break;
    }
    case_REFLPROP_0ARGS( isThisDeclarationADefinition, Result, X->isThisDeclarationADefinition() )
    case_REFLPROP_0ARGS( hasDefinition, Result, X->hasDefinition() )
    case_REFLPROP_0ARGS( getDefinition, Type, X->getDefinition() )
    case_REFLPROP_0ARGS( getSuperClassType, Type, X->getSuperClassType() )
    case_REFLPROP_0ARGS( getSuperClassTInfo, Type, X->getSuperClassTInfo() )
    case_REFLPROP_0ARGS( getSuperClass, Type, X->getSuperClass() )
    case currefl::visible_categories: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->visible_categories())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->visible_categories())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::visible_categories))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case_REFLPROP_0ARGS( visible_categories_empty, Result, X->visible_categories_empty() )
    case currefl::known_categories: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->known_categories())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->known_categories())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::known_categories))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case_REFLPROP_0ARGS( known_categories_empty, Result, X->known_categories_empty() )
    case currefl::visible_extensions: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->visible_extensions())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->visible_extensions())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::visible_extensions))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case_REFLPROP_0ARGS( visible_extensions_empty, Result, X->visible_extensions_empty() )
    case currefl::known_extensions: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->known_extensions())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->known_extensions())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::known_extensions))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case_REFLPROP_0ARGS( known_extensions_empty, Result, X->known_extensions_empty() )
    case_REFLPROP_0ARGS( getCategoryListRaw, Type, X->getCategoryListRaw() )
    case currefl::FindPropertyVisibleInPrimaryClass: {
      ASSERT_TRAIT_IS_REFLPROP(FindPropertyVisibleInPrimaryClass)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::IdentifierInfo *), p0)
        LOAD_VAL((enum clang::ObjCPropertyQueryKind), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->FindPropertyVisibleInPrimaryClass(p0, p1))
      };
      break;
    }
    case currefl::isSuperClassOf: {
      ASSERT_TRAIT_IS_REFLPROP(isSuperClassOf)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::ObjCInterfaceDecl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isSuperClassOf(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( isArcWeakrefUnavailable, Result, X->isArcWeakrefUnavailable() )
    case_REFLPROP_0ARGS( isObjCRequiresPropertyDefs, Type, X->isObjCRequiresPropertyDefs() )
    case currefl::lookupMethod: {
      ASSERT_TRAIT_IS_REFLPROP(lookupMethod)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::Selector), p0)
        LOAD_VAL((bool), p1)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Type, X->lookupMethod(p0, p1))
        LOAD_VAL((bool), p2)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Type, X->lookupMethod(p0, p1, p2))
        LOAD_VAL((bool), p3)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Type, X->lookupMethod(p0, p1, p2, p3))
        LOAD_VAL((const class clang::ObjCCategoryDecl *), p4)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->lookupMethod(p0, p1, p2, p3, p4))
      };
      break;
    }
    case currefl::lookupInstanceMethod: {
      ASSERT_TRAIT_IS_REFLPROP(lookupInstanceMethod)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::Selector), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->lookupInstanceMethod(p0))
      };
      break;
    }
    case currefl::lookupClassMethod: {
      ASSERT_TRAIT_IS_REFLPROP(lookupClassMethod)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::Selector), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->lookupClassMethod(p0))
      };
      break;
    }
    case currefl::lookupPrivateMethod: {
      ASSERT_TRAIT_IS_REFLPROP(lookupPrivateMethod)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::Selector &), p0)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Type, X->lookupPrivateMethod(p0))
        LOAD_VAL((bool), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->lookupPrivateMethod(p0, p1))
      };
      break;
    }
    case currefl::lookupPropertyAccessor: {
      ASSERT_TRAIT_IS_REFLPROP(lookupPropertyAccessor)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::Selector), p0)
        LOAD_VAL((const class clang::ObjCCategoryDecl *), p1)
        LOAD_VAL((bool), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->lookupPropertyAccessor(p0, p1, p2))
      };
      break;
    }
    case_REFLPROP_0ARGS( getEndOfDefinitionLoc, Type, X->getEndOfDefinitionLoc() )
    case_REFLPROP_0ARGS( getSuperClassLoc, Type, X->getSuperClassLoc() )
    case_REFLPROP_0ARGS( isImplicitInterfaceDecl, Result, X->isImplicitInterfaceDecl() )
    case_REFLPROP_0ARGS( getCanonicalDecl, Type, X->getCanonicalDecl() )
    case_REFLPROP_0ARGS( getTypeForDecl, Type, X->getTypeForDecl() )
    case currefl::setTypeForDecl: {
      ASSERT_TRAIT_IS_REFLPROP(setTypeForDecl)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Type *), p0)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->setTypeForDecl((const class clang::Type *)p0))
      };
      break;
    }
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Decl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::classofKind: {
      ASSERT_TRAIT_IS_REFLPROP(classofKind)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::Decl::Kind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classofKind(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__ObjCIvarDecl: {
# define CLASSNAME (clang::ObjCIvarDecl)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__ObjCIvarDecl;
  switch( (currefl::memnames)MemNum ) {
    case currefl::Create: {
      ASSERT_TRAIT_IS_REFLPROP(Create)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((class clang::ObjCContainerDecl *), p1)
        LOAD_VAL((class clang::SourceLocation), p2)
        LOAD_VAL((class clang::SourceLocation), p3)
        LOAD_VAL((class clang::IdentifierInfo *), p4)
        LOAD_VAL((class clang::QualType), p5)
        LOAD_VAL((class clang::TypeSourceInfo *), p6)
        LOAD_VAL((enum clang::ObjCIvarDecl::AccessControl), p7)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3, p4, p5, p6, p7))
        LOAD_VAL((class clang::Expr *), p8)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3, p4, p5, p6, p7, p8))
        LOAD_VAL((bool), p9)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9))
      };
      break;
    }
    case currefl::CreateDeserialized: {
      ASSERT_TRAIT_IS_REFLPROP(CreateDeserialized)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateDeserialized(p0, p1))
      };
      break;
    }
    case_REFLPROP_0ARGS( getContainingInterface, Type, X->getContainingInterface() )
    case_REFLPROP_0ARGS( getNextIvar, Type, X->getNextIvar() )
    case_REFLPROP_0ARGS( getAccessControl, Result, X->getAccessControl() )
    case_REFLPROP_0ARGS( getCanonicalAccessControl, Result, X->getCanonicalAccessControl() )
    case_REFLPROP_0ARGS( getSynthesize, Result, X->getSynthesize() )
    case currefl::getUsageType: {
      ASSERT_TRAIT_IS_REFLPROP(getUsageType)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::QualType), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getUsageType(p0))
      };
      break;
    }
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Decl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::classofKind: {
      ASSERT_TRAIT_IS_REFLPROP(classofKind)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::Decl::Kind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classofKind(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__ObjCAtDefsFieldDecl: {
# define CLASSNAME (clang::ObjCAtDefsFieldDecl)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__ObjCAtDefsFieldDecl;
  switch( (currefl::memnames)MemNum ) {
    case currefl::Create: {
      ASSERT_TRAIT_IS_REFLPROP(Create)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((class clang::DeclContext *), p1)
        LOAD_VAL((class clang::SourceLocation), p2)
        LOAD_VAL((class clang::SourceLocation), p3)
        LOAD_VAL((class clang::IdentifierInfo *), p4)
        LOAD_VAL((class clang::QualType), p5)
        LOAD_VAL((class clang::Expr *), p6)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3, p4, p5, p6))
      };
      break;
    }
    case currefl::CreateDeserialized: {
      ASSERT_TRAIT_IS_REFLPROP(CreateDeserialized)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateDeserialized(p0, p1))
      };
      break;
    }
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Decl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::classofKind: {
      ASSERT_TRAIT_IS_REFLPROP(classofKind)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::Decl::Kind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classofKind(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__ObjCProtocolDecl: {
# define CLASSNAME (clang::ObjCProtocolDecl)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__ObjCProtocolDecl;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getPreviousDecl, Type, X->getPreviousDecl() )
    case_REFLPROP_0ARGS( getFirstDecl, Type, X->getFirstDecl() )
    case_REFLPROP_0ARGS( getMostRecentDecl, Type, X->getMostRecentDecl() )
    case currefl::Create: {
      ASSERT_TRAIT_IS_REFLPROP(Create)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((class clang::DeclContext *), p1)
        LOAD_VAL((class clang::IdentifierInfo *), p2)
        LOAD_VAL((class clang::SourceLocation), p3)
        LOAD_VAL((class clang::SourceLocation), p4)
        LOAD_VAL((class clang::ObjCProtocolDecl *), p5)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3, p4, p5))
      };
      break;
    }
    case currefl::CreateDeserialized: {
      ASSERT_TRAIT_IS_REFLPROP(CreateDeserialized)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateDeserialized(p0, p1))
      };
      break;
    }
    case_REFLPROP_0ARGS( getReferencedProtocols, Type, X->getReferencedProtocols() )
    case currefl::protocols: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->protocols())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->protocols())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::protocols))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case currefl::protocol_locs: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->protocol_locs())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->protocol_locs())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::protocol_locs))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case_REFLPROP_0ARGS( protocol_size, Result, X->protocol_size() )
    case currefl::lookupMethod: {
      ASSERT_TRAIT_IS_REFLPROP(lookupMethod)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::Selector), p0)
        LOAD_VAL((bool), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->lookupMethod(p0, p1))
      };
      break;
    }
    case currefl::lookupInstanceMethod: {
      ASSERT_TRAIT_IS_REFLPROP(lookupInstanceMethod)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::Selector), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->lookupInstanceMethod(p0))
      };
      break;
    }
    case currefl::lookupClassMethod: {
      ASSERT_TRAIT_IS_REFLPROP(lookupClassMethod)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::Selector), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->lookupClassMethod(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( hasDefinition, Result, X->hasDefinition() )
    case_REFLPROP_0ARGS( getDefinition, Type, X->getDefinition() )
    case_REFLPROP_0ARGS( isThisDeclarationADefinition, Result, X->isThisDeclarationADefinition() )
    case_REFLPROP_0ARGS( getObjCRuntimeNameAsString, Str, X->getObjCRuntimeNameAsString() )
    case_REFLPROP_0ARGS( getSourceRange, Type, X->getSourceRange() )
    case_REFLPROP_0ARGS( getCanonicalDecl, Type, X->getCanonicalDecl() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Decl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::classofKind: {
      ASSERT_TRAIT_IS_REFLPROP(classofKind)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::Decl::Kind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classofKind(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__ObjCCategoryDecl: {
# define CLASSNAME (clang::ObjCCategoryDecl)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__ObjCCategoryDecl;
  switch( (currefl::memnames)MemNum ) {
    case currefl::Create: {
      ASSERT_TRAIT_IS_REFLPROP(Create)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((class clang::DeclContext *), p1)
        LOAD_VAL((class clang::SourceLocation), p2)
        LOAD_VAL((class clang::SourceLocation), p3)
        LOAD_VAL((class clang::SourceLocation), p4)
        LOAD_VAL((class clang::IdentifierInfo *), p5)
        LOAD_VAL((class clang::ObjCInterfaceDecl *), p6)
        LOAD_VAL((class clang::ObjCTypeParamList *), p7)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3, p4, p5, p6, p7))
        LOAD_VAL((class clang::SourceLocation), p8)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3, p4, p5, p6, p7, p8))
        LOAD_VAL((class clang::SourceLocation), p9)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9))
      };
      break;
    }
    case currefl::CreateDeserialized: {
      ASSERT_TRAIT_IS_REFLPROP(CreateDeserialized)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateDeserialized(p0, p1))
      };
      break;
    }
    case_REFLPROP_0ARGS( getClassInterface, Type, X->getClassInterface() )
    case_REFLPROP_0ARGS( getTypeParamList, Type, X->getTypeParamList() )
    case_REFLPROP_0ARGS( getImplementation, Type, X->getImplementation() )
    case_REFLPROP_0ARGS( getReferencedProtocols, Type, X->getReferencedProtocols() )
    case currefl::protocols: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->protocols())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->protocols())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::protocols))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case_REFLPROP_0ARGS( protocol_size, Result, X->protocol_size() )
    case currefl::protocol_locs: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->protocol_locs())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->protocol_locs())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::protocol_locs))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case_REFLPROP_0ARGS( getNextClassCategory, Type, X->getNextClassCategory() )
    case_REFLPROP_0ARGS( getNextClassCategoryRaw, Type, X->getNextClassCategoryRaw() )
    case_REFLPROP_0ARGS( IsClassExtension, Result, X->IsClassExtension() )
    case currefl::ivars: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->ivars())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->ivars())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::ivars))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case_REFLPROP_0ARGS( ivar_size, Result, X->ivar_size() )
    case_REFLPROP_0ARGS( ivar_empty, Result, X->ivar_empty() )
    case_REFLPROP_0ARGS( getCategoryNameLoc, Type, X->getCategoryNameLoc() )
    case_REFLPROP_0ARGS( getIvarLBraceLoc, Type, X->getIvarLBraceLoc() )
    case_REFLPROP_0ARGS( getIvarRBraceLoc, Type, X->getIvarRBraceLoc() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Decl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::classofKind: {
      ASSERT_TRAIT_IS_REFLPROP(classofKind)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::Decl::Kind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classofKind(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__ObjCImplDecl: {
# define CLASSNAME (clang::ObjCImplDecl)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__ObjCImplDecl;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getClassInterface, Type, X->getClassInterface() )
    case currefl::FindPropertyImplDecl: {
      ASSERT_TRAIT_IS_REFLPROP(FindPropertyImplDecl)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::IdentifierInfo *), p0)
        LOAD_VAL((enum clang::ObjCPropertyQueryKind), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->FindPropertyImplDecl(p0, p1))
      };
      break;
    }
    case currefl::FindPropertyImplIvarDecl: {
      ASSERT_TRAIT_IS_REFLPROP(FindPropertyImplIvarDecl)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::IdentifierInfo *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->FindPropertyImplIvarDecl(p0))
      };
      break;
    }
    case currefl::property_impls: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->property_impls())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->property_impls())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::property_impls))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Decl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::classofKind: {
      ASSERT_TRAIT_IS_REFLPROP(classofKind)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::Decl::Kind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classofKind(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__ObjCCategoryImplDecl: {
# define CLASSNAME (clang::ObjCCategoryImplDecl)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__ObjCCategoryImplDecl;
  switch( (currefl::memnames)MemNum ) {
    case currefl::Create: {
      ASSERT_TRAIT_IS_REFLPROP(Create)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((class clang::DeclContext *), p1)
        LOAD_VAL((class clang::IdentifierInfo *), p2)
        LOAD_VAL((class clang::ObjCInterfaceDecl *), p3)
        LOAD_VAL((class clang::SourceLocation), p4)
        LOAD_VAL((class clang::SourceLocation), p5)
        LOAD_VAL((class clang::SourceLocation), p6)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3, p4, p5, p6))
      };
      break;
    }
    case currefl::CreateDeserialized: {
      ASSERT_TRAIT_IS_REFLPROP(CreateDeserialized)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateDeserialized(p0, p1))
      };
      break;
    }
    case_REFLPROP_0ARGS( getCategoryDecl, Type, X->getCategoryDecl() )
    case_REFLPROP_0ARGS( getCategoryNameLoc, Type, X->getCategoryNameLoc() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Decl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::classofKind: {
      ASSERT_TRAIT_IS_REFLPROP(classofKind)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::Decl::Kind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classofKind(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__ObjCImplementationDecl: {
# define CLASSNAME (clang::ObjCImplementationDecl)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__ObjCImplementationDecl;
  switch( (currefl::memnames)MemNum ) {
    case currefl::Create: {
      ASSERT_TRAIT_IS_REFLPROP(Create)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((class clang::DeclContext *), p1)
        LOAD_VAL((class clang::ObjCInterfaceDecl *), p2)
        LOAD_VAL((class clang::ObjCInterfaceDecl *), p3)
        LOAD_VAL((class clang::SourceLocation), p4)
        LOAD_VAL((class clang::SourceLocation), p5)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3, p4, p5))
        LOAD_VAL((class clang::SourceLocation), p6)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3, p4, p5, p6))
        LOAD_VAL((class clang::SourceLocation), p7)
        IF_NO_MORE  BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3, p4, p5, p6, p7))
        LOAD_VAL((class clang::SourceLocation), p8)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3, p4, p5, p6, p7, p8))
      };
      break;
    }
    case currefl::CreateDeserialized: {
      ASSERT_TRAIT_IS_REFLPROP(CreateDeserialized)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateDeserialized(p0, p1))
      };
      break;
    }
    case currefl::inits: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->inits())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->inits())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::inits))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case_REFLPROP_0ARGS( getNumIvarInitializers, Result, X->getNumIvarInitializers() )
    case_REFLPROP_0ARGS( hasNonZeroConstructors, Result, X->hasNonZeroConstructors() )
    case_REFLPROP_0ARGS( hasDestructors, Result, X->hasDestructors() )
    case_REFLPROP_0ARGS( getIdentifier, Type, X->getIdentifier() )
    case_REFLPROP_0ARGS( getName, Str, X->getName() )
    case_REFLPROP_0ARGS( getNameAsString, Str, X->getNameAsString() )
    case_REFLPROP_0ARGS( getObjCRuntimeNameAsString, Str, X->getObjCRuntimeNameAsString() )
    case_REFLPROP_0ARGS( getSuperClass, Type, X->getSuperClass() )
    case_REFLPROP_0ARGS( getSuperClassLoc, Type, X->getSuperClassLoc() )
    case_REFLPROP_0ARGS( getIvarLBraceLoc, Type, X->getIvarLBraceLoc() )
    case_REFLPROP_0ARGS( getIvarRBraceLoc, Type, X->getIvarRBraceLoc() )
    case currefl::ivars: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->ivars())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->ivars())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::ivars))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case_REFLPROP_0ARGS( ivar_size, Result, X->ivar_size() )
    case_REFLPROP_0ARGS( ivar_empty, Result, X->ivar_empty() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Decl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::classofKind: {
      ASSERT_TRAIT_IS_REFLPROP(classofKind)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::Decl::Kind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classofKind(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__ObjCCompatibleAliasDecl: {
# define CLASSNAME (clang::ObjCCompatibleAliasDecl)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__ObjCCompatibleAliasDecl;
  switch( (currefl::memnames)MemNum ) {
    case currefl::Create: {
      ASSERT_TRAIT_IS_REFLPROP(Create)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((class clang::DeclContext *), p1)
        LOAD_VAL((class clang::SourceLocation), p2)
        LOAD_VAL((class clang::IdentifierInfo *), p3)
        LOAD_VAL((class clang::ObjCInterfaceDecl *), p4)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3, p4))
      };
      break;
    }
    case currefl::CreateDeserialized: {
      ASSERT_TRAIT_IS_REFLPROP(CreateDeserialized)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateDeserialized(p0, p1))
      };
      break;
    }
    case_REFLPROP_0ARGS( getClassInterface, Type, X->getClassInterface() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Decl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::classofKind: {
      ASSERT_TRAIT_IS_REFLPROP(classofKind)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::Decl::Kind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classofKind(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__ObjCPropertyImplDecl: {
# define CLASSNAME (clang::ObjCPropertyImplDecl)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__ObjCPropertyImplDecl;
  switch( (currefl::memnames)MemNum ) {
    case currefl::Create: {
      ASSERT_TRAIT_IS_REFLPROP(Create)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((class clang::DeclContext *), p1)
        LOAD_VAL((class clang::SourceLocation), p2)
        LOAD_VAL((class clang::SourceLocation), p3)
        LOAD_VAL((class clang::ObjCPropertyDecl *), p4)
        LOAD_VAL((enum clang::ObjCPropertyImplDecl::Kind), p5)
        LOAD_VAL((class clang::ObjCIvarDecl *), p6)
        LOAD_VAL((class clang::SourceLocation), p7)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3, p4, p5, p6, p7))
      };
      break;
    }
    case currefl::CreateDeserialized: {
      ASSERT_TRAIT_IS_REFLPROP(CreateDeserialized)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateDeserialized(p0, p1))
      };
      break;
    }
    case_REFLPROP_0ARGS( getSourceRange, Type, X->getSourceRange() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getPropertyDecl, Type, X->getPropertyDecl() )
    case_REFLPROP_0ARGS( getPropertyImplementation, Result, X->getPropertyImplementation() )
    case_REFLPROP_0ARGS( getPropertyIvarDecl, Type, X->getPropertyIvarDecl() )
    case_REFLPROP_0ARGS( getPropertyIvarDeclLoc, Type, X->getPropertyIvarDeclLoc() )
    case_REFLPROP_0ARGS( isIvarNameSpecified, Result, X->isIvarNameSpecified() )
    case_REFLPROP_0ARGS( getGetterCXXConstructor, Type, X->getGetterCXXConstructor() )
    case_REFLPROP_0ARGS( getSetterCXXAssignment, Type, X->getSetterCXXAssignment() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Decl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::classofKind: {
      ASSERT_TRAIT_IS_REFLPROP(classofKind)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::Decl::Kind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classofKind(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__OMPThreadPrivateDecl: {
# define CLASSNAME (clang::OMPThreadPrivateDecl)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__OMPThreadPrivateDecl;
  switch( (currefl::memnames)MemNum ) {
    case currefl::CreateDeserialized: {
      ASSERT_TRAIT_IS_REFLPROP(CreateDeserialized)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        LOAD_VAL((unsigned int), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateDeserialized(p0, p1, p2))
      };
      break;
    }
    case_REFLPROP_0ARGS( varlist_size, Result, X->varlist_size() )
    case_REFLPROP_0ARGS( varlist_empty, Result, X->varlist_empty() )
    case currefl::varlists: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->varlists())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->varlists())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::varlists))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Decl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::classofKind: {
      ASSERT_TRAIT_IS_REFLPROP(classofKind)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::Decl::Kind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classofKind(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__OMPDeclareReductionDecl: {
# define CLASSNAME (clang::OMPDeclareReductionDecl)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__OMPDeclareReductionDecl;
  switch( (currefl::memnames)MemNum ) {
    case currefl::Create: {
      ASSERT_TRAIT_IS_REFLPROP(Create)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((class clang::DeclContext *), p1)
        LOAD_VAL((class clang::SourceLocation), p2)
        LOAD_VAL((class clang::DeclarationName), p3)
        LOAD_VAL((class clang::QualType), p4)
        LOAD_VAL((class clang::OMPDeclareReductionDecl *), p5)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3, p4, p5))
      };
      break;
    }
    case currefl::CreateDeserialized: {
      ASSERT_TRAIT_IS_REFLPROP(CreateDeserialized)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateDeserialized(p0, p1))
      };
      break;
    }
    case_REFLPROP_0ARGS( getCombiner, Type, X->getCombiner() )
    case_REFLPROP_0ARGS( getInitializer, Type, X->getInitializer() )
    case_REFLPROP_0ARGS( getInitializerKind, Result, X->getInitializerKind() )
    case_REFLPROP_0ARGS( getPrevDeclInScope, Type, X->getPrevDeclInScope() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Decl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::classofKind: {
      ASSERT_TRAIT_IS_REFLPROP(classofKind)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::Decl::Kind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classofKind(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__OMPCapturedExprDecl: {
# define CLASSNAME (clang::OMPCapturedExprDecl)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__OMPCapturedExprDecl;
  switch( (currefl::memnames)MemNum ) {
    case currefl::Create: {
      ASSERT_TRAIT_IS_REFLPROP(Create)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((class clang::DeclContext *), p1)
        LOAD_VAL((class clang::IdentifierInfo *), p2)
        LOAD_VAL((class clang::QualType), p3)
        LOAD_VAL((class clang::SourceLocation), p4)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3, p4))
      };
      break;
    }
    case currefl::CreateDeserialized: {
      ASSERT_TRAIT_IS_REFLPROP(CreateDeserialized)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateDeserialized(p0, p1))
      };
      break;
    }
    case_REFLPROP_0ARGS( getSourceRange, Type, X->getSourceRange() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Decl *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::classofKind: {
      ASSERT_TRAIT_IS_REFLPROP(classofKind)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::Decl::Kind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classofKind(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__CXXOperatorCallExpr: {
# define CLASSNAME (clang::CXXOperatorCallExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__CXXOperatorCallExpr;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getOperator, Result, X->getOperator() )
    case currefl::isAssignmentOp: {
      ASSERT_TRAIT_IS_REFLPROP(isAssignmentOp)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((enum clang::OverloadedOperatorKind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isAssignmentOp(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( isAssignmentOp1, Result, X->isAssignmentOp() )
    case_REFLPROP_0ARGS( isInfixBinaryOp, Result, X->isInfixBinaryOp() )
    case_REFLPROP_0ARGS( getOperatorLoc, Type, X->getOperatorLoc() )
    case_REFLPROP_0ARGS( getExprLoc, Type, X->getExprLoc() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case_REFLPROP_0ARGS( getSourceRange, Type, X->getSourceRange() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getFPFeatures, Type, X->getFPFeatures() )
    case_REFLPROP_0ARGS( isFPContractableWithinStatement, Result, X->isFPContractableWithinStatement() )
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__CXXMemberCallExpr: {
# define CLASSNAME (clang::CXXMemberCallExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__CXXMemberCallExpr;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getImplicitObjectArgument, Type, X->getImplicitObjectArgument() )
    case_REFLPROP_0ARGS( getMethodDecl, Type, X->getMethodDecl() )
    case_REFLPROP_0ARGS( getRecordDecl, Type, X->getRecordDecl() )
    case_REFLPROP_0ARGS( getExprLoc, Type, X->getExprLoc() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__CUDAKernelCallExpr: {
# define CLASSNAME (clang::CUDAKernelCallExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__CUDAKernelCallExpr;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getConfig, Type, X->getConfig() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__CXXNamedCastExpr: {
# define CLASSNAME (clang::CXXNamedCastExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__CXXNamedCastExpr;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getCastName, Str, X->getCastName() )
    case_REFLPROP_0ARGS( getOperatorLoc, Type, X->getOperatorLoc() )
    case_REFLPROP_0ARGS( getRParenLoc, Type, X->getRParenLoc() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case_REFLPROP_0ARGS( getAngleBrackets, Type, X->getAngleBrackets() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__CXXStaticCastExpr: {
# define CLASSNAME (clang::CXXStaticCastExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__CXXStaticCastExpr;
  switch( (currefl::memnames)MemNum ) {
    case currefl::CreateEmpty: {
      ASSERT_TRAIT_IS_REFLPROP(CreateEmpty)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateEmpty(p0, p1))
      };
      break;
    }
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__CXXDynamicCastExpr: {
# define CLASSNAME (clang::CXXDynamicCastExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__CXXDynamicCastExpr;
  switch( (currefl::memnames)MemNum ) {
    case currefl::CreateEmpty: {
      ASSERT_TRAIT_IS_REFLPROP(CreateEmpty)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateEmpty(p0, p1))
      };
      break;
    }
    case_REFLPROP_0ARGS( isAlwaysNull, Result, X->isAlwaysNull() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__CXXReinterpretCastExpr: {
# define CLASSNAME (clang::CXXReinterpretCastExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__CXXReinterpretCastExpr;
  switch( (currefl::memnames)MemNum ) {
    case currefl::CreateEmpty: {
      ASSERT_TRAIT_IS_REFLPROP(CreateEmpty)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateEmpty(p0, p1))
      };
      break;
    }
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__CXXConstCastExpr: {
# define CLASSNAME (clang::CXXConstCastExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__CXXConstCastExpr;
  switch( (currefl::memnames)MemNum ) {
    case currefl::Create: {
      ASSERT_TRAIT_IS_REFLPROP(Create)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((class clang::QualType), p1)
        LOAD_VAL((enum clang::ExprValueKind), p2)
        LOAD_VAL((class clang::Expr *), p3)
        LOAD_VAL((class clang::TypeSourceInfo *), p4)
        LOAD_VAL((class clang::SourceLocation), p5)
        LOAD_VAL((class clang::SourceLocation), p6)
        LOAD_VAL((class clang::SourceRange), p7)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3, p4, p5, p6, p7))
      };
      break;
    }
    case currefl::CreateEmpty: {
      ASSERT_TRAIT_IS_REFLPROP(CreateEmpty)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateEmpty(p0))
      };
      break;
    }
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__UserDefinedLiteral: {
# define CLASSNAME (clang::UserDefinedLiteral)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__UserDefinedLiteral;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getLiteralOperatorKind, Result, X->getLiteralOperatorKind() )
    case_REFLPROP_0ARGS( getCookedLiteral, Type, X->getCookedLiteral() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case_REFLPROP_0ARGS( getUDSuffixLoc, Type, X->getUDSuffixLoc() )
    case_REFLPROP_0ARGS( getUDSuffix, Type, X->getUDSuffix() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__CXXBoolLiteralExpr: {
# define CLASSNAME (clang::CXXBoolLiteralExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__CXXBoolLiteralExpr;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getValue, Result, X->getValue() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case_REFLPROP_0ARGS( getLocation, Type, X->getLocation() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__CXXNullPtrLiteralExpr: {
# define CLASSNAME (clang::CXXNullPtrLiteralExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__CXXNullPtrLiteralExpr;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case_REFLPROP_0ARGS( getLocation, Type, X->getLocation() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__CXXStdInitializerListExpr: {
# define CLASSNAME (clang::CXXStdInitializerListExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__CXXStdInitializerListExpr;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getSubExpr, Type, X->getSubExpr() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case_REFLPROP_0ARGS( getSourceRange, Type, X->getSourceRange() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__CXXTypeidExpr: {
# define CLASSNAME (clang::CXXTypeidExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__CXXTypeidExpr;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( isPotentiallyEvaluated, Result, X->isPotentiallyEvaluated() )
    case_REFLPROP_0ARGS( isTypeOperand, Result, X->isTypeOperand() )
    case currefl::getTypeOperand: {
      ASSERT_TRAIT_IS_REFLPROP(getTypeOperand)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getTypeOperand(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getTypeOperandSourceInfo, Type, X->getTypeOperandSourceInfo() )
    case_REFLPROP_0ARGS( getExprOperand, Type, X->getExprOperand() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case_REFLPROP_0ARGS( getSourceRange, Type, X->getSourceRange() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__MSPropertyRefExpr: {
# define CLASSNAME (clang::MSPropertyRefExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__MSPropertyRefExpr;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getSourceRange, Type, X->getSourceRange() )
    case_REFLPROP_0ARGS( isImplicitAccess, Result, X->isImplicitAccess() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getBaseExpr, Type, X->getBaseExpr() )
    case_REFLPROP_0ARGS( getPropertyDecl, Type, X->getPropertyDecl() )
    case_REFLPROP_0ARGS( isArrow, Result, X->isArrow() )
    case_REFLPROP_0ARGS( getMemberLoc, Type, X->getMemberLoc() )
    case_REFLPROP_0ARGS( getQualifierLoc, Type, X->getQualifierLoc() )
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__MSPropertySubscriptExpr: {
# define CLASSNAME (clang::MSPropertySubscriptExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__MSPropertySubscriptExpr;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getBase, Type, X->getBase() )
    case_REFLPROP_0ARGS( getIdx, Type, X->getIdx() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case_REFLPROP_0ARGS( getRBracketLoc, Type, X->getRBracketLoc() )
    case_REFLPROP_0ARGS( getExprLoc, Type, X->getExprLoc() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__CXXUuidofExpr: {
# define CLASSNAME (clang::CXXUuidofExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__CXXUuidofExpr;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( isTypeOperand, Result, X->isTypeOperand() )
    case currefl::getTypeOperand: {
      ASSERT_TRAIT_IS_REFLPROP(getTypeOperand)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getTypeOperand(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getTypeOperandSourceInfo, Type, X->getTypeOperandSourceInfo() )
    case_REFLPROP_0ARGS( getExprOperand, Type, X->getExprOperand() )
    case_REFLPROP_0ARGS( getUuidStr, Str, X->getUuidStr() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case_REFLPROP_0ARGS( getSourceRange, Type, X->getSourceRange() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__CXXThisExpr: {
# define CLASSNAME (clang::CXXThisExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__CXXThisExpr;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getLocation, Type, X->getLocation() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case_REFLPROP_0ARGS( isImplicit, Result, X->isImplicit() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__CXXThrowExpr: {
# define CLASSNAME (clang::CXXThrowExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__CXXThrowExpr;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getSubExpr, Type, X->getSubExpr() )
    case_REFLPROP_0ARGS( getThrowLoc, Type, X->getThrowLoc() )
    case_REFLPROP_0ARGS( isThrownVariableInScope, Result, X->isThrownVariableInScope() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__CXXDefaultArgExpr: {
# define CLASSNAME (clang::CXXDefaultArgExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__CXXDefaultArgExpr;
  switch( (currefl::memnames)MemNum ) {
    case currefl::Create: {
      ASSERT_TRAIT_IS_REFLPROP(Create)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((class clang::SourceLocation), p1)
        LOAD_VAL((class clang::ParmVarDecl *), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2))
      };
      break;
    }
    case_REFLPROP_0ARGS( getParam, Type, X->getParam() )
    case_REFLPROP_0ARGS( getExpr, Type, X->getExpr() )
    case_REFLPROP_0ARGS( getUsedLocation, Type, X->getUsedLocation() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case_REFLPROP_0ARGS( getExprLoc, Type, X->getExprLoc() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__CXXDefaultInitExpr: {
# define CLASSNAME (clang::CXXDefaultInitExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__CXXDefaultInitExpr;
  switch( (currefl::memnames)MemNum ) {
    case currefl::Create: {
      ASSERT_TRAIT_IS_REFLPROP(Create)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((class clang::SourceLocation), p1)
        LOAD_VAL((class clang::FieldDecl *), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2))
      };
      break;
    }
    case_REFLPROP_0ARGS( getField, Type, X->getField() )
    case_REFLPROP_0ARGS( getExpr, Type, X->getExpr() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__CXXTemporary: {
# define CLASSNAME (clang::CXXTemporary)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__CXXTemporary;
  switch( (currefl::memnames)MemNum ) {
    case currefl::Create: {
      ASSERT_TRAIT_IS_REFLPROP(Create)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((const class clang::CXXDestructorDecl *), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1))
      };
      break;
    }
    case_REFLPROP_0ARGS( getDestructor, Type, X->getDestructor() )
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__CXXBindTemporaryExpr: {
# define CLASSNAME (clang::CXXBindTemporaryExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__CXXBindTemporaryExpr;
  switch( (currefl::memnames)MemNum ) {
    case currefl::Create: {
      ASSERT_TRAIT_IS_REFLPROP(Create)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((class clang::CXXTemporary *), p1)
        LOAD_VAL((class clang::Expr *), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2))
      };
      break;
    }
    case_REFLPROP_0ARGS( getTemporary, Type, X->getTemporary() )
    case_REFLPROP_0ARGS( getSubExpr, Type, X->getSubExpr() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__CXXConstructExpr: {
# define CLASSNAME (clang::CXXConstructExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__CXXConstructExpr;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getConstructor, Type, X->getConstructor() )
    case_REFLPROP_0ARGS( getLocation, Type, X->getLocation() )
    case_REFLPROP_0ARGS( isElidable, Result, X->isElidable() )
    case_REFLPROP_0ARGS( hadMultipleCandidates, Result, X->hadMultipleCandidates() )
    case_REFLPROP_0ARGS( isListInitialization, Result, X->isListInitialization() )
    case_REFLPROP_0ARGS( isStdInitListInitialization, Result, X->isStdInitListInitialization() )
    case_REFLPROP_0ARGS( requiresZeroInitialization, Result, X->requiresZeroInitialization() )
    case_REFLPROP_0ARGS( getConstructionKind, Result, X->getConstructionKind() )
    case currefl::arguments: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->arguments())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->arguments())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::arguments))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case_REFLPROP_0ARGS( getArgs, Type, X->getArgs() )
    case_REFLPROP_0ARGS( getNumArgs, Result, X->getNumArgs() )
    case currefl::getArg: {
      ASSERT_TRAIT_IS_REFLPROP(getArg)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getArg(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case_REFLPROP_0ARGS( getParenOrBraceRange, Type, X->getParenOrBraceRange() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__CXXInheritedCtorInitExpr: {
# define CLASSNAME (clang::CXXInheritedCtorInitExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__CXXInheritedCtorInitExpr;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getConstructor, Type, X->getConstructor() )
    case_REFLPROP_0ARGS( constructsVBase, Result, X->constructsVBase() )
    case_REFLPROP_0ARGS( getConstructionKind, Result, X->getConstructionKind() )
    case_REFLPROP_0ARGS( inheritedFromVBase, Result, X->inheritedFromVBase() )
    case_REFLPROP_0ARGS( getLocation, Type, X->getLocation() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__CXXFunctionalCastExpr: {
# define CLASSNAME (clang::CXXFunctionalCastExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__CXXFunctionalCastExpr;
  switch( (currefl::memnames)MemNum ) {
    case currefl::CreateEmpty: {
      ASSERT_TRAIT_IS_REFLPROP(CreateEmpty)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateEmpty(p0, p1))
      };
      break;
    }
    case_REFLPROP_0ARGS( getLParenLoc, Type, X->getLParenLoc() )
    case_REFLPROP_0ARGS( getRParenLoc, Type, X->getRParenLoc() )
    case_REFLPROP_0ARGS( isListInitialization, Result, X->isListInitialization() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__CXXTemporaryObjectExpr: {
# define CLASSNAME (clang::CXXTemporaryObjectExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__CXXTemporaryObjectExpr;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getTypeSourceInfo, Type, X->getTypeSourceInfo() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__LambdaExpr: {
# define CLASSNAME (clang::LambdaExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__LambdaExpr;
  switch( (currefl::memnames)MemNum ) {
    case currefl::CreateDeserialized: {
      ASSERT_TRAIT_IS_REFLPROP(CreateDeserialized)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateDeserialized(p0, p1))
      };
      break;
    }
    case_REFLPROP_0ARGS( getCaptureDefault, Result, X->getCaptureDefault() )
    case_REFLPROP_0ARGS( getCaptureDefaultLoc, Type, X->getCaptureDefaultLoc() )
    case currefl::isInitCapture: {
      ASSERT_TRAIT_IS_REFLPROP(isInitCapture)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::LambdaCapture *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isInitCapture(p0))
      };
      break;
    }
    case currefl::captures: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->captures())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->captures())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::captures))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case_REFLPROP_0ARGS( capture_size, Result, X->capture_size() )
    case currefl::explicit_captures: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->explicit_captures())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->explicit_captures())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::explicit_captures))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case currefl::implicit_captures: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->implicit_captures())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->implicit_captures())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::implicit_captures))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case currefl::capture_inits: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->capture_inits())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->capture_inits())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::capture_inits))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case_REFLPROP_0ARGS( getIntroducerRange, Type, X->getIntroducerRange() )
    case_REFLPROP_0ARGS( getLambdaClass, Type, X->getLambdaClass() )
    case_REFLPROP_0ARGS( getCallOperator, Type, X->getCallOperator() )
    case_REFLPROP_0ARGS( getTemplateParameterList, Type, X->getTemplateParameterList() )
    case_REFLPROP_0ARGS( isGenericLambda, Result, X->isGenericLambda() )
    case_REFLPROP_0ARGS( getBody, Type, X->getBody() )
    case_REFLPROP_0ARGS( isMutable, Result, X->isMutable() )
    case_REFLPROP_0ARGS( hasExplicitParameters, Result, X->hasExplicitParameters() )
    case_REFLPROP_0ARGS( hasExplicitResultType, Result, X->hasExplicitResultType() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__CXXScalarValueInitExpr: {
# define CLASSNAME (clang::CXXScalarValueInitExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__CXXScalarValueInitExpr;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getTypeSourceInfo, Type, X->getTypeSourceInfo() )
    case_REFLPROP_0ARGS( getRParenLoc, Type, X->getRParenLoc() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__CXXNewExpr: {
# define CLASSNAME (clang::CXXNewExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__CXXNewExpr;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getAllocatedType, Type, X->getAllocatedType() )
    case_REFLPROP_0ARGS( getAllocatedTypeSourceInfo, Type, X->getAllocatedTypeSourceInfo() )
    case currefl::shouldNullCheckAllocation: {
      ASSERT_TRAIT_IS_REFLPROP(shouldNullCheckAllocation)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::ASTContext &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->shouldNullCheckAllocation(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getOperatorNew, Type, X->getOperatorNew() )
    case_REFLPROP_0ARGS( getOperatorDelete, Type, X->getOperatorDelete() )
    case_REFLPROP_0ARGS( isArray, Result, X->isArray() )
    case_REFLPROP_0ARGS( getArraySize, Type, X->getArraySize() )
    case_REFLPROP_0ARGS( getNumPlacementArgs, Result, X->getNumPlacementArgs() )
    case currefl::getPlacementArg: {
      ASSERT_TRAIT_IS_REFLPROP(getPlacementArg)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getPlacementArg(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( isParenTypeId, Result, X->isParenTypeId() )
    case_REFLPROP_0ARGS( getTypeIdParens, Type, X->getTypeIdParens() )
    case_REFLPROP_0ARGS( isGlobalNew, Result, X->isGlobalNew() )
    case_REFLPROP_0ARGS( hasInitializer, Result, X->hasInitializer() )
    case_REFLPROP_0ARGS( getInitializationStyle, Result, X->getInitializationStyle() )
    case_REFLPROP_0ARGS( getInitializer, Type, X->getInitializer() )
    case_REFLPROP_0ARGS( getConstructExpr, Type, X->getConstructExpr() )
    case_REFLPROP_0ARGS( passAlignment, Result, X->passAlignment() )
    case_REFLPROP_0ARGS( doesUsualArrayDeleteWantSize, Result, X->doesUsualArrayDeleteWantSize() )
    case currefl::placement_arguments: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->placement_arguments())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->placement_arguments())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::placement_arguments))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case_REFLPROP_0ARGS( getStartLoc, Type, X->getStartLoc() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case_REFLPROP_0ARGS( getDirectInitRange, Type, X->getDirectInitRange() )
    case_REFLPROP_0ARGS( getSourceRange, Type, X->getSourceRange() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__CXXDeleteExpr: {
# define CLASSNAME (clang::CXXDeleteExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__CXXDeleteExpr;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( isGlobalDelete, Result, X->isGlobalDelete() )
    case_REFLPROP_0ARGS( isArrayForm, Result, X->isArrayForm() )
    case_REFLPROP_0ARGS( isArrayFormAsWritten, Result, X->isArrayFormAsWritten() )
    case_REFLPROP_0ARGS( doesUsualArrayDeleteWantSize, Result, X->doesUsualArrayDeleteWantSize() )
    case_REFLPROP_0ARGS( getOperatorDelete, Type, X->getOperatorDelete() )
    case_REFLPROP_0ARGS( getArgument, Type, X->getArgument() )
    case_REFLPROP_0ARGS( getDestroyedType, Type, X->getDestroyedType() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__CXXPseudoDestructorExpr: {
# define CLASSNAME (clang::CXXPseudoDestructorExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__CXXPseudoDestructorExpr;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getBase, Type, X->getBase() )
    case_REFLPROP_0ARGS( hasQualifier, Result, X->hasQualifier() )
    case_REFLPROP_0ARGS( getQualifierLoc, Type, X->getQualifierLoc() )
    case_REFLPROP_0ARGS( getQualifier, Type, X->getQualifier() )
    case_REFLPROP_0ARGS( isArrow, Result, X->isArrow() )
    case_REFLPROP_0ARGS( getOperatorLoc, Type, X->getOperatorLoc() )
    case_REFLPROP_0ARGS( getScopeTypeInfo, Type, X->getScopeTypeInfo() )
    case_REFLPROP_0ARGS( getColonColonLoc, Type, X->getColonColonLoc() )
    case_REFLPROP_0ARGS( getTildeLoc, Type, X->getTildeLoc() )
    case_REFLPROP_0ARGS( getDestroyedTypeInfo, Type, X->getDestroyedTypeInfo() )
    case_REFLPROP_0ARGS( getDestroyedTypeIdentifier, Type, X->getDestroyedTypeIdentifier() )
    case_REFLPROP_0ARGS( getDestroyedType, Type, X->getDestroyedType() )
    case_REFLPROP_0ARGS( getDestroyedTypeLoc, Type, X->getDestroyedTypeLoc() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__TypeTraitExpr: {
# define CLASSNAME (clang::TypeTraitExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__TypeTraitExpr;
  switch( (currefl::memnames)MemNum ) {
    case currefl::CreateDeserialized: {
      ASSERT_TRAIT_IS_REFLPROP(CreateDeserialized)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateDeserialized(p0, p1))
      };
      break;
    }
    case_REFLPROP_0ARGS( getTrait, Result, X->getTrait() )
    case_REFLPROP_0ARGS( getValue, Result, X->getValue() )
    case_REFLPROP_0ARGS( getNumArgs, Result, X->getNumArgs() )
    case currefl::getArg: {
      ASSERT_TRAIT_IS_REFLPROP(getArg)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getArg(p0))
      };
      break;
    }
    case currefl::getArgs: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->getArgs())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->getArgs())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::getArgs))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__ArrayTypeTraitExpr: {
# define CLASSNAME (clang::ArrayTypeTraitExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__ArrayTypeTraitExpr;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case_REFLPROP_0ARGS( getTrait, Result, X->getTrait() )
    case_REFLPROP_0ARGS( getQueriedType, Type, X->getQueriedType() )
    case_REFLPROP_0ARGS( getQueriedTypeSourceInfo, Type, X->getQueriedTypeSourceInfo() )
    case_REFLPROP_0ARGS( getValue, Result, X->getValue() )
    case_REFLPROP_0ARGS( getDimensionExpression, Type, X->getDimensionExpression() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__ExpressionTraitExpr: {
# define CLASSNAME (clang::ExpressionTraitExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__ExpressionTraitExpr;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case_REFLPROP_0ARGS( getTrait, Result, X->getTrait() )
    case_REFLPROP_0ARGS( getQueriedExpression, Type, X->getQueriedExpression() )
    case_REFLPROP_0ARGS( getValue, Result, X->getValue() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__OverloadExpr: {
# define CLASSNAME (clang::OverloadExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__OverloadExpr;
  switch( (currefl::memnames)MemNum ) {
    case currefl::find: {
      ASSERT_TRAIT_IS_REFLPROP(find)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::Expr *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->find(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getNamingClass, Type, X->getNamingClass() )
    case currefl::decls: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->decls())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->decls())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::decls))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case_REFLPROP_0ARGS( getNumDecls, Result, X->getNumDecls() )
    case_REFLPROP_0ARGS( getNameInfo, Type, X->getNameInfo() )
    case_REFLPROP_0ARGS( getName, Type, X->getName() )
    case_REFLPROP_0ARGS( getNameLoc, Type, X->getNameLoc() )
    case_REFLPROP_0ARGS( getQualifier, Type, X->getQualifier() )
    case_REFLPROP_0ARGS( getQualifierLoc, Type, X->getQualifierLoc() )
    case_REFLPROP_0ARGS( getTemplateKeywordLoc, Type, X->getTemplateKeywordLoc() )
    case_REFLPROP_0ARGS( getLAngleLoc, Type, X->getLAngleLoc() )
    case_REFLPROP_0ARGS( getRAngleLoc, Type, X->getRAngleLoc() )
    case_REFLPROP_0ARGS( hasTemplateKeyword, Result, X->hasTemplateKeyword() )
    case_REFLPROP_0ARGS( hasExplicitTemplateArgs, Result, X->hasExplicitTemplateArgs() )
    case_REFLPROP_0ARGS( getTemplateArgs, Type, X->getTemplateArgs() )
    case_REFLPROP_0ARGS( getNumTemplateArgs, Result, X->getNumTemplateArgs() )
    case currefl::template_arguments: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->template_arguments())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->template_arguments())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::template_arguments))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case currefl::copyTemplateArgumentsInto: {
      ASSERT_TRAIT_IS_REFLPROP(copyTemplateArgumentsInto)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::TemplateArgumentListInfo &), p0)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->copyTemplateArgumentsInto((class clang::TemplateArgumentListInfo &)p0))
      };
      break;
    }
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__OverloadExpr__FindResult: {
# define CLASSNAME (clang::OverloadExpr::FindResult)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_NEVERPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__OverloadExpr__FindResult;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS(Expression, Type, X->Expression)
    case_REFLPROP_0ARGS(IsAddressOfOperand, Result, X->IsAddressOfOperand)
    case_REFLPROP_0ARGS(HasFormOfMemberPointer, Result, X->HasFormOfMemberPointer)
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__UnresolvedLookupExpr: {
# define CLASSNAME (clang::UnresolvedLookupExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__UnresolvedLookupExpr;
  switch( (currefl::memnames)MemNum ) {
    case currefl::Create: {
      ASSERT_TRAIT_IS_REFLPROP(Create)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((class clang::CXXRecordDecl *), p1)
        LOAD_VAL((class clang::NestedNameSpecifierLoc), p2)
        LOAD_VAL((const struct clang::DeclarationNameInfo &), p3)
        LOAD_VAL((bool), p4)
        LOAD_VAL((bool), p5)
        LOAD_VAL((class clang::UnresolvedSetIterator), p6)
        LOAD_VAL((class clang::UnresolvedSetIterator), p7)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3, p4, p5, p6, p7))
      };
      break;
    }
    case currefl::Create1: {
      ASSERT_TRAIT_IS_REFLPROP(Create1)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((class clang::CXXRecordDecl *), p1)
        LOAD_VAL((class clang::NestedNameSpecifierLoc), p2)
        LOAD_VAL((class clang::SourceLocation), p3)
        LOAD_VAL((const struct clang::DeclarationNameInfo &), p4)
        LOAD_VAL((bool), p5)
        LOAD_VAL((const class clang::TemplateArgumentListInfo *), p6)
        LOAD_VAL((class clang::UnresolvedSetIterator), p7)
        LOAD_VAL((class clang::UnresolvedSetIterator), p8)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3, p4, p5, p6, p7, p8))
      };
      break;
    }
    case currefl::CreateEmpty: {
      ASSERT_TRAIT_IS_REFLPROP(CreateEmpty)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((bool), p1)
        LOAD_VAL((unsigned int), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateEmpty(p0, p1, p2))
      };
      break;
    }
    case_REFLPROP_0ARGS( requiresADL, Result, X->requiresADL() )
    case_REFLPROP_0ARGS( isOverloaded, Result, X->isOverloaded() )
    case_REFLPROP_0ARGS( getNamingClass, Type, X->getNamingClass() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__DependentScopeDeclRefExpr: {
# define CLASSNAME (clang::DependentScopeDeclRefExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__DependentScopeDeclRefExpr;
  switch( (currefl::memnames)MemNum ) {
    case currefl::Create: {
      ASSERT_TRAIT_IS_REFLPROP(Create)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((class clang::NestedNameSpecifierLoc), p1)
        LOAD_VAL((class clang::SourceLocation), p2)
        LOAD_VAL((const struct clang::DeclarationNameInfo &), p3)
        LOAD_VAL((const class clang::TemplateArgumentListInfo *), p4)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3, p4))
      };
      break;
    }
    case currefl::CreateEmpty: {
      ASSERT_TRAIT_IS_REFLPROP(CreateEmpty)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((bool), p1)
        LOAD_VAL((unsigned int), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateEmpty(p0, p1, p2))
      };
      break;
    }
    case_REFLPROP_0ARGS( getNameInfo, Type, X->getNameInfo() )
    case_REFLPROP_0ARGS( getDeclName, Type, X->getDeclName() )
    case_REFLPROP_0ARGS( getLocation, Type, X->getLocation() )
    case_REFLPROP_0ARGS( getQualifierLoc, Type, X->getQualifierLoc() )
    case_REFLPROP_0ARGS( getQualifier, Type, X->getQualifier() )
    case_REFLPROP_0ARGS( getTemplateKeywordLoc, Type, X->getTemplateKeywordLoc() )
    case_REFLPROP_0ARGS( getLAngleLoc, Type, X->getLAngleLoc() )
    case_REFLPROP_0ARGS( getRAngleLoc, Type, X->getRAngleLoc() )
    case_REFLPROP_0ARGS( hasTemplateKeyword, Result, X->hasTemplateKeyword() )
    case_REFLPROP_0ARGS( hasExplicitTemplateArgs, Result, X->hasExplicitTemplateArgs() )
    case currefl::copyTemplateArgumentsInto: {
      ASSERT_TRAIT_IS_REFLPROP(copyTemplateArgumentsInto)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::TemplateArgumentListInfo &), p0)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->copyTemplateArgumentsInto((class clang::TemplateArgumentListInfo &)p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getTemplateArgs, Type, X->getTemplateArgs() )
    case_REFLPROP_0ARGS( getNumTemplateArgs, Result, X->getNumTemplateArgs() )
    case currefl::template_arguments: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->template_arguments())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->template_arguments())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::template_arguments))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__ExprWithCleanups: {
# define CLASSNAME (clang::ExprWithCleanups)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__ExprWithCleanups;
  switch( (currefl::memnames)MemNum ) {
    case currefl::Create: {
      ASSERT_TRAIT_IS_REFLPROP(Create)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((struct clang::Stmt::EmptyShell), p1)
        LOAD_VAL((unsigned int), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2))
      };
      break;
    }
    case currefl::getObjects: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->getObjects())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->getObjects())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::getObjects))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case_REFLPROP_0ARGS( getNumObjects, Result, X->getNumObjects() )
    case currefl::getObject: {
      ASSERT_TRAIT_IS_REFLPROP(getObject)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getObject(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getSubExpr, Type, X->getSubExpr() )
    case_REFLPROP_0ARGS( cleanupsHaveSideEffects, Result, X->cleanupsHaveSideEffects() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__CXXUnresolvedConstructExpr: {
# define CLASSNAME (clang::CXXUnresolvedConstructExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__CXXUnresolvedConstructExpr;
  switch( (currefl::memnames)MemNum ) {
    case currefl::CreateEmpty: {
      ASSERT_TRAIT_IS_REFLPROP(CreateEmpty)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateEmpty(p0, p1))
      };
      break;
    }
    case_REFLPROP_0ARGS( getTypeAsWritten, Type, X->getTypeAsWritten() )
    case_REFLPROP_0ARGS( getTypeSourceInfo, Type, X->getTypeSourceInfo() )
    case_REFLPROP_0ARGS( getLParenLoc, Type, X->getLParenLoc() )
    case_REFLPROP_0ARGS( getRParenLoc, Type, X->getRParenLoc() )
    case_REFLPROP_0ARGS( isListInitialization, Result, X->isListInitialization() )
    case_REFLPROP_0ARGS( arg_size, Result, X->arg_size() )
    case currefl::getArg: {
      ASSERT_TRAIT_IS_REFLPROP(getArg)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getArg(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__CXXDependentScopeMemberExpr: {
# define CLASSNAME (clang::CXXDependentScopeMemberExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__CXXDependentScopeMemberExpr;
  switch( (currefl::memnames)MemNum ) {
    case currefl::Create: {
      ASSERT_TRAIT_IS_REFLPROP(Create)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((class clang::Expr *), p1)
        LOAD_VAL((class clang::QualType), p2)
        LOAD_VAL((bool), p3)
        LOAD_VAL((class clang::SourceLocation), p4)
        LOAD_VAL((class clang::NestedNameSpecifierLoc), p5)
        LOAD_VAL((class clang::SourceLocation), p6)
        LOAD_VAL((class clang::NamedDecl *), p7)
        LOAD_VAL((struct clang::DeclarationNameInfo), p8)
        LOAD_VAL((const class clang::TemplateArgumentListInfo *), p9)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9))
      };
      break;
    }
    case currefl::CreateEmpty: {
      ASSERT_TRAIT_IS_REFLPROP(CreateEmpty)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((bool), p1)
        LOAD_VAL((unsigned int), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateEmpty(p0, p1, p2))
      };
      break;
    }
    case_REFLPROP_0ARGS( isImplicitAccess, Result, X->isImplicitAccess() )
    case_REFLPROP_0ARGS( getBase, Type, X->getBase() )
    case_REFLPROP_0ARGS( getBaseType, Type, X->getBaseType() )
    case_REFLPROP_0ARGS( isArrow, Result, X->isArrow() )
    case_REFLPROP_0ARGS( getOperatorLoc, Type, X->getOperatorLoc() )
    case_REFLPROP_0ARGS( getQualifier, Type, X->getQualifier() )
    case_REFLPROP_0ARGS( getQualifierLoc, Type, X->getQualifierLoc() )
    case_REFLPROP_0ARGS( getFirstQualifierFoundInScope, Type, X->getFirstQualifierFoundInScope() )
    case_REFLPROP_0ARGS( getMemberNameInfo, Type, X->getMemberNameInfo() )
    case_REFLPROP_0ARGS( getMember, Type, X->getMember() )
    case_REFLPROP_0ARGS( getMemberLoc, Type, X->getMemberLoc() )
    case_REFLPROP_0ARGS( getTemplateKeywordLoc, Type, X->getTemplateKeywordLoc() )
    case_REFLPROP_0ARGS( getLAngleLoc, Type, X->getLAngleLoc() )
    case_REFLPROP_0ARGS( getRAngleLoc, Type, X->getRAngleLoc() )
    case_REFLPROP_0ARGS( hasTemplateKeyword, Result, X->hasTemplateKeyword() )
    case_REFLPROP_0ARGS( hasExplicitTemplateArgs, Result, X->hasExplicitTemplateArgs() )
    case currefl::copyTemplateArgumentsInto: {
      ASSERT_TRAIT_IS_REFLPROP(copyTemplateArgumentsInto)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::TemplateArgumentListInfo &), p0)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->copyTemplateArgumentsInto((class clang::TemplateArgumentListInfo &)p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getTemplateArgs, Type, X->getTemplateArgs() )
    case_REFLPROP_0ARGS( getNumTemplateArgs, Result, X->getNumTemplateArgs() )
    case currefl::template_arguments: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->template_arguments())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->template_arguments())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::template_arguments))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__UnresolvedMemberExpr: {
# define CLASSNAME (clang::UnresolvedMemberExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__UnresolvedMemberExpr;
  switch( (currefl::memnames)MemNum ) {
    case currefl::Create: {
      ASSERT_TRAIT_IS_REFLPROP(Create)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((bool), p1)
        LOAD_VAL((class clang::Expr *), p2)
        LOAD_VAL((class clang::QualType), p3)
        LOAD_VAL((bool), p4)
        LOAD_VAL((class clang::SourceLocation), p5)
        LOAD_VAL((class clang::NestedNameSpecifierLoc), p6)
        LOAD_VAL((class clang::SourceLocation), p7)
        LOAD_VAL((const struct clang::DeclarationNameInfo &), p8)
        LOAD_VAL((const class clang::TemplateArgumentListInfo *), p9)
        LOAD_VAL((class clang::UnresolvedSetIterator), p10)
        LOAD_VAL((class clang::UnresolvedSetIterator), p11)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11))
      };
      break;
    }
    case currefl::CreateEmpty: {
      ASSERT_TRAIT_IS_REFLPROP(CreateEmpty)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((bool), p1)
        LOAD_VAL((unsigned int), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateEmpty(p0, p1, p2))
      };
      break;
    }
    case_REFLPROP_0ARGS( isImplicitAccess, Result, X->isImplicitAccess() )
    case_REFLPROP_0ARGS( getBase, Type, X->getBase() )
    case_REFLPROP_0ARGS( getBaseType, Type, X->getBaseType() )
    case_REFLPROP_0ARGS( hasUnresolvedUsing, Result, X->hasUnresolvedUsing() )
    case_REFLPROP_0ARGS( isArrow, Result, X->isArrow() )
    case_REFLPROP_0ARGS( getOperatorLoc, Type, X->getOperatorLoc() )
    case_REFLPROP_0ARGS( getNamingClass, Type, X->getNamingClass() )
    case_REFLPROP_0ARGS( getMemberNameInfo, Type, X->getMemberNameInfo() )
    case_REFLPROP_0ARGS( getMemberName, Type, X->getMemberName() )
    case_REFLPROP_0ARGS( getMemberLoc, Type, X->getMemberLoc() )
    case_REFLPROP_0ARGS( getExprLoc, Type, X->getExprLoc() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__CXXNoexceptExpr: {
# define CLASSNAME (clang::CXXNoexceptExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__CXXNoexceptExpr;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getOperand, Type, X->getOperand() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case_REFLPROP_0ARGS( getSourceRange, Type, X->getSourceRange() )
    case_REFLPROP_0ARGS( getValue, Result, X->getValue() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__PackExpansionExpr: {
# define CLASSNAME (clang::PackExpansionExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__PackExpansionExpr;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getPattern, Type, X->getPattern() )
    case_REFLPROP_0ARGS( getEllipsisLoc, Type, X->getEllipsisLoc() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__SizeOfPackExpr: {
# define CLASSNAME (clang::SizeOfPackExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__SizeOfPackExpr;
  switch( (currefl::memnames)MemNum ) {
    case currefl::CreateDeserialized: {
      ASSERT_TRAIT_IS_REFLPROP(CreateDeserialized)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateDeserialized(p0, p1))
      };
      break;
    }
    case_REFLPROP_0ARGS( getOperatorLoc, Type, X->getOperatorLoc() )
    case_REFLPROP_0ARGS( getPackLoc, Type, X->getPackLoc() )
    case_REFLPROP_0ARGS( getRParenLoc, Type, X->getRParenLoc() )
    case_REFLPROP_0ARGS( getPack, Type, X->getPack() )
    case_REFLPROP_0ARGS( getPackLength, Result, X->getPackLength() )
    case_REFLPROP_0ARGS( isPartiallySubstituted, Result, X->isPartiallySubstituted() )
    case currefl::getPartialArguments: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->getPartialArguments())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->getPartialArguments())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::getPartialArguments))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__SubstNonTypeTemplateParmExpr: {
# define CLASSNAME (clang::SubstNonTypeTemplateParmExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__SubstNonTypeTemplateParmExpr;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getNameLoc, Type, X->getNameLoc() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case_REFLPROP_0ARGS( getReplacement, Type, X->getReplacement() )
    case_REFLPROP_0ARGS( getParameter, Type, X->getParameter() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__SubstNonTypeTemplateParmPackExpr: {
# define CLASSNAME (clang::SubstNonTypeTemplateParmPackExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__SubstNonTypeTemplateParmPackExpr;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getParameterPack, Type, X->getParameterPack() )
    case_REFLPROP_0ARGS( getParameterPackLocation, Type, X->getParameterPackLocation() )
    case_REFLPROP_0ARGS( getArgumentPack, Type, X->getArgumentPack() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__FunctionParmPackExpr: {
# define CLASSNAME (clang::FunctionParmPackExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__FunctionParmPackExpr;
  switch( (currefl::memnames)MemNum ) {
    case currefl::_this_: {
      switch (TraitKind) {
        case RTK_range_nth:
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE
            BUILD_REFLECTION_CALL_RANGE_NTH(Type, *X)
          };
          break;
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE
            BUILD_REFLECTION_CALL_RANGE_SIZE(*X)
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << "_this_"
                 << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case currefl::CreateEmpty: {
      ASSERT_TRAIT_IS_REFLPROP(CreateEmpty)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateEmpty(p0, p1))
      };
      break;
    }
    case_REFLPROP_0ARGS( getParameterPack, Type, X->getParameterPack() )
    case_REFLPROP_0ARGS( getParameterPackLocation, Type, X->getParameterPackLocation() )
    case_REFLPROP_0ARGS( getNumExpansions, Result, X->getNumExpansions() )
    case currefl::getExpansion: {
      ASSERT_TRAIT_IS_REFLPROP(getExpansion)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getExpansion(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__MaterializeTemporaryExpr: {
# define CLASSNAME (clang::MaterializeTemporaryExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__MaterializeTemporaryExpr;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getTemporary, Type, X->getTemporary() )
    case_REFLPROP_0ARGS( GetTemporaryExpr, Type, X->GetTemporaryExpr() )
    case_REFLPROP_0ARGS( getStorageDuration, Result, X->getStorageDuration() )
    case_REFLPROP_0ARGS( getExtendingDecl, Type, X->getExtendingDecl() )
    case_REFLPROP_0ARGS( getManglingNumber, Result, X->getManglingNumber() )
    case_REFLPROP_0ARGS( isBoundToLvalueReference, Result, X->isBoundToLvalueReference() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__CXXFoldExpr: {
# define CLASSNAME (clang::CXXFoldExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__CXXFoldExpr;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getLHS, Type, X->getLHS() )
    case_REFLPROP_0ARGS( getRHS, Type, X->getRHS() )
    case_REFLPROP_0ARGS( isRightFold, Result, X->isRightFold() )
    case_REFLPROP_0ARGS( isLeftFold, Result, X->isLeftFold() )
    case_REFLPROP_0ARGS( getPattern, Type, X->getPattern() )
    case_REFLPROP_0ARGS( getInit, Type, X->getInit() )
    case_REFLPROP_0ARGS( getEllipsisLoc, Type, X->getEllipsisLoc() )
    case_REFLPROP_0ARGS( getOperator, Result, X->getOperator() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__CoroutineSuspendExpr: {
# define CLASSNAME (clang::CoroutineSuspendExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__CoroutineSuspendExpr;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getKeywordLoc, Type, X->getKeywordLoc() )
    case_REFLPROP_0ARGS( getCommonExpr, Type, X->getCommonExpr() )
    case_REFLPROP_0ARGS( getOpaqueValue, Type, X->getOpaqueValue() )
    case_REFLPROP_0ARGS( getReadyExpr, Type, X->getReadyExpr() )
    case_REFLPROP_0ARGS( getSuspendExpr, Type, X->getSuspendExpr() )
    case_REFLPROP_0ARGS( getResumeExpr, Type, X->getResumeExpr() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__CoawaitExpr: {
# define CLASSNAME (clang::CoawaitExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__CoawaitExpr;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getOperand, Type, X->getOperand() )
    case_REFLPROP_0ARGS( isImplicit, Result, X->isImplicit() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__DependentCoawaitExpr: {
# define CLASSNAME (clang::DependentCoawaitExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__DependentCoawaitExpr;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getOperand, Type, X->getOperand() )
    case_REFLPROP_0ARGS( getOperatorCoawaitLookup, Type, X->getOperatorCoawaitLookup() )
    case_REFLPROP_0ARGS( getKeywordLoc, Type, X->getKeywordLoc() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__CoyieldExpr: {
# define CLASSNAME (clang::CoyieldExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__CoyieldExpr;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getOperand, Type, X->getOperand() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__ReflectionExpr: {
# define CLASSNAME (clang::ReflectionExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__ReflectionExpr;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( isReflexpr, Result, X->isReflexpr() )
    case_REFLPROP_0ARGS( hasTypeOperand, Result, X->hasTypeOperand() )
    case_REFLPROP_0ARGS( hasExpressionOperand, Result, X->hasExpressionOperand() )
    case_REFLPROP_0ARGS( getTypeOperand, Type, X->getTypeOperand() )
    case_REFLPROP_0ARGS( getExpressionOperand, Type, X->getExpressionOperand() )
    case_REFLPROP_0ARGS( getOperatorLoc, Type, X->getOperatorLoc() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__CompilerMessageExpr: {
# define CLASSNAME (clang::CompilerMessageExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__CompilerMessageExpr;
  switch( (currefl::memnames)MemNum ) {
    case currefl::Create: {
      ASSERT_TRAIT_IS_REFLPROP(Create)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((class clang::Expr *), p1)
        LOAD_VAL((class clang::SourceLocation), p2)
        LOAD_VAL((class clang::SourceLocation), p3)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3))
      };
      break;
    }
    case currefl::CreateEmpty: {
      ASSERT_TRAIT_IS_REFLPROP(CreateEmpty)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((struct clang::Stmt::EmptyShell), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateEmpty(p0, p1))
      };
      break;
    }
    case_REFLPROP_0ARGS( getMessage, Type, X->getMessage() )
    case_REFLPROP_0ARGS( getKWLoc, Type, X->getKWLoc() )
    case_REFLPROP_0ARGS( getRParenLoc, Type, X->getRParenLoc() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__CompilerDiagnosticExpr: {
# define CLASSNAME (clang::CompilerDiagnosticExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__CompilerDiagnosticExpr;
  switch( (currefl::memnames)MemNum ) {
    case currefl::CreateEmpty: {
      ASSERT_TRAIT_IS_REFLPROP(CreateEmpty)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateEmpty(p0, p1))
      };
      break;
    }
    case_REFLPROP_0ARGS( getKWLoc, Type, X->getKWLoc() )
    case_REFLPROP_0ARGS( getRParenLoc, Type, X->getRParenLoc() )
    case_REFLPROP_0ARGS( arg_size, Result, X->arg_size() )
    case currefl::getArgs: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->getArgs())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->getArgs())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::getArgs))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case currefl::getArg: {
      ASSERT_TRAIT_IS_REFLPROP(getArg)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getArg(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( isError, Result, X->isError() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__CXXMetaparseExpr: {
# define CLASSNAME (clang::CXXMetaparseExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__CXXMetaparseExpr;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getExprSrcCode, Type, X->getExprSrcCode() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__ReflectionTraitExpr: {
# define CLASSNAME (clang::ReflectionTraitExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__ReflectionTraitExpr;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getTraitKind, Result, X->getTraitKind() )
    case_REFLPROP_0ARGS( getNumArgs, Result, X->getNumArgs() )
    case currefl::getArg: {
      ASSERT_TRAIT_IS_REFLPROP(getArg)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getArg(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getArgs, Type, X->getArgs() )
    case_REFLPROP_0ARGS( getKWLoc, Type, X->getKWLoc() )
    case_REFLPROP_0ARGS( getRParenLoc, Type, X->getRParenLoc() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getASTContext_p, Type, X->getASTContext_p() )
    case_REFLPROP_0ARGS( getObjKind, Result, X->getObjKind() )
    case_REFLPROP_0ARGS( callbacksAreSet, Result, X->callbacksAreSet() )
    case_REFLPROP_0ARGS( readyToConvertToStringLiteral, Result, X->readyToConvertToStringLiteral() )
    case_REFLPROP_0ARGS( getMemNum, Result, X->getMemNum() )
    case_REFLPROP_0ARGS( isPtr, Result, X->isPtr() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__ReflectNewExpr: {
# define CLASSNAME (clang::ReflectNewExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__ReflectNewExpr;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getNumArgs, Result, X->getNumArgs() )
    case currefl::getArg: {
      ASSERT_TRAIT_IS_REFLPROP(getArg)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getArg(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getArgs, Type, X->getArgs() )
    case_REFLPROP_0ARGS( getObjKind, Result, X->getObjKind() )
    case_REFLPROP_0ARGS( getTraitLoc, Type, X->getTraitLoc() )
    case_REFLPROP_0ARGS( getRParenLoc, Type, X->getRParenLoc() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__ReflectDeleteExpr: {
# define CLASSNAME (clang::ReflectDeleteExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__ReflectDeleteExpr;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getNumArgs, Result, X->getNumArgs() )
    case currefl::getArg: {
      ASSERT_TRAIT_IS_REFLPROP(getArg)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getArg(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getArgs, Type, X->getArgs() )
    case_REFLPROP_0ARGS( getObjKind, Result, X->getObjKind() )
    case_REFLPROP_0ARGS( getTraitLoc, Type, X->getTraitLoc() )
    case_REFLPROP_0ARGS( getRParenLoc, Type, X->getRParenLoc() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__CXXConstantExpr: {
# define CLASSNAME (clang::CXXConstantExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__CXXConstantExpr;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getExpression, Type, X->getExpression() )
    case_REFLPROP_0ARGS( getValue, Type, X->getValue() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case currefl::children: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->children())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->children())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::children))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__CXXDependentIdExpr: {
# define CLASSNAME (clang::CXXDependentIdExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__CXXDependentIdExpr;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getNameInfo, Type, X->getNameInfo() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getSourceRange, Type, X->getSourceRange() )
    case currefl::children: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->children())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->children())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::children))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__CXXConcatenateExpr: {
# define CLASSNAME (clang::CXXConcatenateExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__CXXConcatenateExpr;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getNumOperands, Result, X->getNumOperands() )
    case currefl::getOperand: {
      ASSERT_TRAIT_IS_REFLPROP(getOperand)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned long), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getOperand(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getOperands, Type, X->getOperands() )
    case currefl::children: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->children())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->children())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::children))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case_REFLPROP_0ARGS( getIntroLoc, Type, X->getIntroLoc() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__ObjCStringLiteral: {
# define CLASSNAME (clang::ObjCStringLiteral)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__ObjCStringLiteral;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getString, Type, X->getString() )
    case_REFLPROP_0ARGS( getAtLoc, Type, X->getAtLoc() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__ObjCBoolLiteralExpr: {
# define CLASSNAME (clang::ObjCBoolLiteralExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__ObjCBoolLiteralExpr;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getValue, Result, X->getValue() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case_REFLPROP_0ARGS( getLocation, Type, X->getLocation() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__ObjCBoxedExpr: {
# define CLASSNAME (clang::ObjCBoxedExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__ObjCBoxedExpr;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getSubExpr, Type, X->getSubExpr() )
    case_REFLPROP_0ARGS( getBoxingMethod, Type, X->getBoxingMethod() )
    case_REFLPROP_0ARGS( getAtLoc, Type, X->getAtLoc() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case_REFLPROP_0ARGS( getSourceRange, Type, X->getSourceRange() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__ObjCArrayLiteral: {
# define CLASSNAME (clang::ObjCArrayLiteral)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__ObjCArrayLiteral;
  switch( (currefl::memnames)MemNum ) {
    case currefl::CreateEmpty: {
      ASSERT_TRAIT_IS_REFLPROP(CreateEmpty)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateEmpty(p0, p1))
      };
      break;
    }
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case_REFLPROP_0ARGS( getSourceRange, Type, X->getSourceRange() )
    case_REFLPROP_0ARGS( getElements, Type, X->getElements() )
    case_REFLPROP_0ARGS( getNumElements, Result, X->getNumElements() )
    case currefl::getElement: {
      ASSERT_TRAIT_IS_REFLPROP(getElement)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getElement(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getArrayWithObjectsMethod, Type, X->getArrayWithObjectsMethod() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__ObjCDictionaryElement: {
# define CLASSNAME (clang::ObjCDictionaryElement)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_NEVERPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__ObjCDictionaryElement;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS(Key, Type, X->Key)
    case_REFLPROP_0ARGS(Value, Type, X->Value)
    case_REFLPROP_0ARGS(EllipsisLoc, Type, X->EllipsisLoc)
    case_REFLPROP_0ARGS( isPackExpansion, Result, X->isPackExpansion() )
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__ObjCDictionaryLiteral: {
# define CLASSNAME (clang::ObjCDictionaryLiteral)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__ObjCDictionaryLiteral;
  switch( (currefl::memnames)MemNum ) {
    case currefl::CreateEmpty: {
      ASSERT_TRAIT_IS_REFLPROP(CreateEmpty)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        LOAD_VAL((bool), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateEmpty(p0, p1, p2))
      };
      break;
    }
    case_REFLPROP_0ARGS( getNumElements, Result, X->getNumElements() )
    case currefl::getKeyValueElement: {
      ASSERT_TRAIT_IS_REFLPROP(getKeyValueElement)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getKeyValueElement(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getDictWithObjectsMethod, Type, X->getDictWithObjectsMethod() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case_REFLPROP_0ARGS( getSourceRange, Type, X->getSourceRange() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__ObjCEncodeExpr: {
# define CLASSNAME (clang::ObjCEncodeExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__ObjCEncodeExpr;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getAtLoc, Type, X->getAtLoc() )
    case_REFLPROP_0ARGS( getRParenLoc, Type, X->getRParenLoc() )
    case_REFLPROP_0ARGS( getEncodedType, Type, X->getEncodedType() )
    case_REFLPROP_0ARGS( getEncodedTypeSourceInfo, Type, X->getEncodedTypeSourceInfo() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__ObjCSelectorExpr: {
# define CLASSNAME (clang::ObjCSelectorExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__ObjCSelectorExpr;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getSelector, Type, X->getSelector() )
    case_REFLPROP_0ARGS( getAtLoc, Type, X->getAtLoc() )
    case_REFLPROP_0ARGS( getRParenLoc, Type, X->getRParenLoc() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case_REFLPROP_0ARGS( getNumArgs, Result, X->getNumArgs() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__ObjCProtocolExpr: {
# define CLASSNAME (clang::ObjCProtocolExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__ObjCProtocolExpr;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getProtocol, Type, X->getProtocol() )
    case_REFLPROP_0ARGS( getProtocolIdLoc, Type, X->getProtocolIdLoc() )
    case_REFLPROP_0ARGS( getAtLoc, Type, X->getAtLoc() )
    case_REFLPROP_0ARGS( getRParenLoc, Type, X->getRParenLoc() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__ObjCIvarRefExpr: {
# define CLASSNAME (clang::ObjCIvarRefExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__ObjCIvarRefExpr;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getDecl, Type, X->getDecl() )
    case_REFLPROP_0ARGS( getBase, Type, X->getBase() )
    case_REFLPROP_0ARGS( isArrow, Result, X->isArrow() )
    case_REFLPROP_0ARGS( isFreeIvar, Result, X->isFreeIvar() )
    case_REFLPROP_0ARGS( getLocation, Type, X->getLocation() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case_REFLPROP_0ARGS( getOpLoc, Type, X->getOpLoc() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__ObjCPropertyRefExpr: {
# define CLASSNAME (clang::ObjCPropertyRefExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__ObjCPropertyRefExpr;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( isImplicitProperty, Result, X->isImplicitProperty() )
    case_REFLPROP_0ARGS( isExplicitProperty, Result, X->isExplicitProperty() )
    case_REFLPROP_0ARGS( getExplicitProperty, Type, X->getExplicitProperty() )
    case_REFLPROP_0ARGS( getImplicitPropertyGetter, Type, X->getImplicitPropertyGetter() )
    case_REFLPROP_0ARGS( getImplicitPropertySetter, Type, X->getImplicitPropertySetter() )
    case_REFLPROP_0ARGS( getGetterSelector, Type, X->getGetterSelector() )
    case_REFLPROP_0ARGS( getSetterSelector, Type, X->getSetterSelector() )
    case_REFLPROP_0ARGS( isMessagingGetter, Result, X->isMessagingGetter() )
    case_REFLPROP_0ARGS( isMessagingSetter, Result, X->isMessagingSetter() )
    case_REFLPROP_0ARGS( getBase, Type, X->getBase() )
    case_REFLPROP_0ARGS( getLocation, Type, X->getLocation() )
    case_REFLPROP_0ARGS( getReceiverLocation, Type, X->getReceiverLocation() )
    case_REFLPROP_0ARGS( getSuperReceiverType, Type, X->getSuperReceiverType() )
    case_REFLPROP_0ARGS( getClassReceiver, Type, X->getClassReceiver() )
    case_REFLPROP_0ARGS( isObjectReceiver, Result, X->isObjectReceiver() )
    case_REFLPROP_0ARGS( isSuperReceiver, Result, X->isSuperReceiver() )
    case_REFLPROP_0ARGS( isClassReceiver, Result, X->isClassReceiver() )
    case currefl::getReceiverType: {
      ASSERT_TRAIT_IS_REFLPROP(getReceiverType)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getReceiverType(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__ObjCSubscriptRefExpr: {
# define CLASSNAME (clang::ObjCSubscriptRefExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__ObjCSubscriptRefExpr;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getRBracket, Type, X->getRBracket() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case_REFLPROP_0ARGS( getBaseExpr, Type, X->getBaseExpr() )
    case_REFLPROP_0ARGS( getKeyExpr, Type, X->getKeyExpr() )
    case_REFLPROP_0ARGS( getAtIndexMethodDecl, Type, X->getAtIndexMethodDecl() )
    case_REFLPROP_0ARGS( setAtIndexMethodDecl, Type, X->setAtIndexMethodDecl() )
    case_REFLPROP_0ARGS( isArraySubscriptRefExpr, Result, X->isArraySubscriptRefExpr() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__ObjCMessageExpr: {
# define CLASSNAME (clang::ObjCMessageExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__ObjCMessageExpr;
  switch( (currefl::memnames)MemNum ) {
    case currefl::CreateEmpty: {
      ASSERT_TRAIT_IS_REFLPROP(CreateEmpty)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        LOAD_VAL((unsigned int), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateEmpty(p0, p1, p2))
      };
      break;
    }
    case_REFLPROP_0ARGS( isImplicit, Result, X->isImplicit() )
    case_REFLPROP_0ARGS( getReceiverKind, Result, X->getReceiverKind() )
    case_REFLPROP_0ARGS( getReceiverRange, Type, X->getReceiverRange() )
    case_REFLPROP_0ARGS( isInstanceMessage, Result, X->isInstanceMessage() )
    case_REFLPROP_0ARGS( isClassMessage, Result, X->isClassMessage() )
    case_REFLPROP_0ARGS( getInstanceReceiver, Type, X->getInstanceReceiver() )
    case_REFLPROP_0ARGS( getClassReceiver, Type, X->getClassReceiver() )
    case_REFLPROP_0ARGS( getClassReceiverTypeInfo, Type, X->getClassReceiverTypeInfo() )
    case_REFLPROP_0ARGS( getSuperLoc, Type, X->getSuperLoc() )
    case_REFLPROP_0ARGS( getReceiverType, Type, X->getReceiverType() )
    case_REFLPROP_0ARGS( getReceiverInterface, Type, X->getReceiverInterface() )
    case_REFLPROP_0ARGS( getSuperType, Type, X->getSuperType() )
    case_REFLPROP_0ARGS( getSelector, Type, X->getSelector() )
    case_REFLPROP_0ARGS( getMethodDecl, Type, X->getMethodDecl() )
    case_REFLPROP_0ARGS( getMethodFamily, Result, X->getMethodFamily() )
    case_REFLPROP_0ARGS( getNumArgs, Result, X->getNumArgs() )
    case_REFLPROP_0ARGS( getArgs, Type, X->getArgs() )
    case currefl::getArg: {
      ASSERT_TRAIT_IS_REFLPROP(getArg)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getArg(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( isDelegateInitCall, Result, X->isDelegateInitCall() )
    case_REFLPROP_0ARGS( getLeftLoc, Type, X->getLeftLoc() )
    case_REFLPROP_0ARGS( getRightLoc, Type, X->getRightLoc() )
    case_REFLPROP_0ARGS( getSelectorStartLoc, Type, X->getSelectorStartLoc() )
    case currefl::getSelectorLoc: {
      ASSERT_TRAIT_IS_REFLPROP(getSelectorLoc)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getSelectorLoc(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getNumSelectorLocs, Result, X->getNumSelectorLocs() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case currefl::arguments: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->arguments())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->arguments())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::arguments))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__ObjCIsaExpr: {
# define CLASSNAME (clang::ObjCIsaExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__ObjCIsaExpr;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getBase, Type, X->getBase() )
    case_REFLPROP_0ARGS( isArrow, Result, X->isArrow() )
    case_REFLPROP_0ARGS( getIsaMemberLoc, Type, X->getIsaMemberLoc() )
    case_REFLPROP_0ARGS( getOpLoc, Type, X->getOpLoc() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getBaseLocEnd, Type, X->getBaseLocEnd() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case_REFLPROP_0ARGS( getExprLoc, Type, X->getExprLoc() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__ObjCIndirectCopyRestoreExpr: {
# define CLASSNAME (clang::ObjCIndirectCopyRestoreExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__ObjCIndirectCopyRestoreExpr;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getSubExpr, Type, X->getSubExpr() )
    case_REFLPROP_0ARGS( shouldCopy, Result, X->shouldCopy() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case_REFLPROP_0ARGS( getExprLoc, Type, X->getExprLoc() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__ObjCBridgedCastExpr: {
# define CLASSNAME (clang::ObjCBridgedCastExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__ObjCBridgedCastExpr;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getLParenLoc, Type, X->getLParenLoc() )
    case_REFLPROP_0ARGS( getBridgeKind, Result, X->getBridgeKind() )
    case_REFLPROP_0ARGS( getBridgeKindName, Str, X->getBridgeKindName() )
    case_REFLPROP_0ARGS( getBridgeKeywordLoc, Type, X->getBridgeKeywordLoc() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__ObjCAvailabilityCheckExpr: {
# define CLASSNAME (clang::ObjCAvailabilityCheckExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__ObjCAvailabilityCheckExpr;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case_REFLPROP_0ARGS( getSourceRange, Type, X->getSourceRange() )
    case_REFLPROP_0ARGS( hasVersion, Result, X->hasVersion() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__OMPArraySectionExpr: {
# define CLASSNAME (clang::OMPArraySectionExpr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__OMPArraySectionExpr;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getBase, Type, X->getBase() )
    case currefl::getBaseOriginalType: {
      ASSERT_TRAIT_IS_REFLPROP(getBaseOriginalType)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::Expr *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getBaseOriginalType(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getLowerBound, Type, X->getLowerBound() )
    case_REFLPROP_0ARGS( getLength, Type, X->getLength() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case_REFLPROP_0ARGS( getColonLoc, Type, X->getColonLoc() )
    case_REFLPROP_0ARGS( getRBracketLoc, Type, X->getRBracketLoc() )
    case_REFLPROP_0ARGS( getExprLoc, Type, X->getExprLoc() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__CXXCatchStmt: {
# define CLASSNAME (clang::CXXCatchStmt)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__CXXCatchStmt;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case_REFLPROP_0ARGS( getCatchLoc, Type, X->getCatchLoc() )
    case_REFLPROP_0ARGS( getExceptionDecl, Type, X->getExceptionDecl() )
    case_REFLPROP_0ARGS( getCaughtType, Type, X->getCaughtType() )
    case_REFLPROP_0ARGS( getHandlerBlock, Type, X->getHandlerBlock() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__CXXTryStmt: {
# define CLASSNAME (clang::CXXTryStmt)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__CXXTryStmt;
  switch( (currefl::memnames)MemNum ) {
    case currefl::Create: {
      ASSERT_TRAIT_IS_REFLPROP(Create)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((struct clang::Stmt::EmptyShell), p1)
        LOAD_VAL((unsigned int), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2))
      };
      break;
    }
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getTryLoc, Type, X->getTryLoc() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case_REFLPROP_0ARGS( getTryBlock, Type, X->getTryBlock() )
    case_REFLPROP_0ARGS( getNumHandlers, Result, X->getNumHandlers() )
    case currefl::getHandler: {
      ASSERT_TRAIT_IS_REFLPROP(getHandler)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getHandler(p0))
      };
      break;
    }
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__CXXForRangeStmt: {
# define CLASSNAME (clang::CXXForRangeStmt)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__CXXForRangeStmt;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getLoopVariable, Type, X->getLoopVariable() )
    case_REFLPROP_0ARGS( getRangeInit, Type, X->getRangeInit() )
    case_REFLPROP_0ARGS( getRangeStmt, Type, X->getRangeStmt() )
    case_REFLPROP_0ARGS( getBeginStmt, Type, X->getBeginStmt() )
    case_REFLPROP_0ARGS( getEndStmt, Type, X->getEndStmt() )
    case_REFLPROP_0ARGS( getCond, Type, X->getCond() )
    case_REFLPROP_0ARGS( getInc, Type, X->getInc() )
    case_REFLPROP_0ARGS( getLoopVarStmt, Type, X->getLoopVarStmt() )
    case_REFLPROP_0ARGS( getBody, Type, X->getBody() )
    case_REFLPROP_0ARGS( getForLoc, Type, X->getForLoc() )
    case_REFLPROP_0ARGS( getCoawaitLoc, Type, X->getCoawaitLoc() )
    case_REFLPROP_0ARGS( getColonLoc, Type, X->getColonLoc() )
    case_REFLPROP_0ARGS( getRParenLoc, Type, X->getRParenLoc() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__CXXExpansionStmt: {
# define CLASSNAME (clang::CXXExpansionStmt)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__CXXExpansionStmt;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getRangeVarStmt, Type, X->getRangeVarStmt() )
    case_REFLPROP_0ARGS( getRangeVariable, Type, X->getRangeVariable() )
    case_REFLPROP_0ARGS( getLoopVarStmt, Type, X->getLoopVarStmt() )
    case_REFLPROP_0ARGS( getLoopVariable, Type, X->getLoopVariable() )
    case_REFLPROP_0ARGS( getBody, Type, X->getBody() )
    case_REFLPROP_0ARGS( getSize, Result, X->getSize() )
    case currefl::getInstantiatedStatements: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->getInstantiatedStatements())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->getInstantiatedStatements())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::getInstantiatedStatements))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case_REFLPROP_0ARGS( getForLoc, Type, X->getForLoc() )
    case_REFLPROP_0ARGS( getEllipsisLoc, Type, X->getEllipsisLoc() )
    case_REFLPROP_0ARGS( getColonLoc, Type, X->getColonLoc() )
    case_REFLPROP_0ARGS( getRParenLoc, Type, X->getRParenLoc() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__CXXTupleExpansionStmt: {
# define CLASSNAME (clang::CXXTupleExpansionStmt)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__CXXTupleExpansionStmt;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getRangeVarStmt, Type, X->getRangeVarStmt() )
    case_REFLPROP_0ARGS( getRangeInit, Type, X->getRangeInit() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__CXXPackExpansionStmt: {
# define CLASSNAME (clang::CXXPackExpansionStmt)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__CXXPackExpansionStmt;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getUnexpandedPack, Type, X->getUnexpandedPack() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__MSDependentExistsStmt: {
# define CLASSNAME (clang::MSDependentExistsStmt)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__MSDependentExistsStmt;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getKeywordLoc, Type, X->getKeywordLoc() )
    case_REFLPROP_0ARGS( isIfExists, Result, X->isIfExists() )
    case_REFLPROP_0ARGS( isIfNotExists, Result, X->isIfNotExists() )
    case_REFLPROP_0ARGS( getQualifierLoc, Type, X->getQualifierLoc() )
    case_REFLPROP_0ARGS( getNameInfo, Type, X->getNameInfo() )
    case_REFLPROP_0ARGS( getSubStmt, Type, X->getSubStmt() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__CoroutineBodyStmt: {
# define CLASSNAME (clang::CoroutineBodyStmt)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__CoroutineBodyStmt;
  switch( (currefl::memnames)MemNum ) {
    case currefl::Create: {
      ASSERT_TRAIT_IS_REFLPROP(Create)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((const struct clang::CoroutineBodyStmt::CtorArgs &), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1))
      };
      break;
    }
    case currefl::Create1: {
      ASSERT_TRAIT_IS_REFLPROP(Create1)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((struct clang::Stmt::EmptyShell), p1)
        LOAD_VAL((unsigned int), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2))
      };
      break;
    }
    case_REFLPROP_0ARGS( hasDependentPromiseType, Result, X->hasDependentPromiseType() )
    case_REFLPROP_0ARGS( getBody, Type, X->getBody() )
    case_REFLPROP_0ARGS( getPromiseDeclStmt, Type, X->getPromiseDeclStmt() )
    case_REFLPROP_0ARGS( getPromiseDecl, Type, X->getPromiseDecl() )
    case_REFLPROP_0ARGS( getInitSuspendStmt, Type, X->getInitSuspendStmt() )
    case_REFLPROP_0ARGS( getFinalSuspendStmt, Type, X->getFinalSuspendStmt() )
    case_REFLPROP_0ARGS( getExceptionHandler, Type, X->getExceptionHandler() )
    case_REFLPROP_0ARGS( getFallthroughHandler, Type, X->getFallthroughHandler() )
    case_REFLPROP_0ARGS( getAllocate, Type, X->getAllocate() )
    case_REFLPROP_0ARGS( getDeallocate, Type, X->getDeallocate() )
    case_REFLPROP_0ARGS( getReturnValueInit, Type, X->getReturnValueInit() )
    case_REFLPROP_0ARGS( getResultDecl, Type, X->getResultDecl() )
    case_REFLPROP_0ARGS( getReturnStmt, Type, X->getReturnStmt() )
    case_REFLPROP_0ARGS( getReturnStmtOnAllocFailure, Type, X->getReturnStmtOnAllocFailure() )
    case currefl::getParamMoves: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->getParamMoves())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->getParamMoves())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::getParamMoves))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__CoroutineBodyStmt__CtorArgs: {
# define CLASSNAME (clang::CoroutineBodyStmt::CtorArgs)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__CoroutineBodyStmt__CtorArgs;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS(Body, Type, X->Body)
    case_REFLPROP_0ARGS(Promise, Type, X->Promise)
    case_REFLPROP_0ARGS(InitialSuspend, Type, X->InitialSuspend)
    case_REFLPROP_0ARGS(FinalSuspend, Type, X->FinalSuspend)
    case_REFLPROP_0ARGS(OnException, Type, X->OnException)
    case_REFLPROP_0ARGS(OnFallthrough, Type, X->OnFallthrough)
    case_REFLPROP_0ARGS(Allocate, Type, X->Allocate)
    case_REFLPROP_0ARGS(Deallocate, Type, X->Deallocate)
    case_REFLPROP_0ARGS(ReturnValue, Type, X->ReturnValue)
    case_REFLPROP_0ARGS(ResultDecl, Type, X->ResultDecl)
    case_REFLPROP_0ARGS(ReturnStmt, Type, X->ReturnStmt)
    case_REFLPROP_0ARGS(ReturnStmtOnAllocFailure, Type, X->ReturnStmtOnAllocFailure)
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__CoreturnStmt: {
# define CLASSNAME (clang::CoreturnStmt)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__CoreturnStmt;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getKeywordLoc, Type, X->getKeywordLoc() )
    case_REFLPROP_0ARGS( getOperand, Type, X->getOperand() )
    case_REFLPROP_0ARGS( getPromiseCall, Type, X->getPromiseCall() )
    case_REFLPROP_0ARGS( isImplicit, Result, X->isImplicit() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__CXXQueueMetaparseStmt: {
# define CLASSNAME (clang::CXXQueueMetaparseStmt)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__CXXQueueMetaparseStmt;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getNewSrcCode, Type, X->getNewSrcCode() )
    case_REFLPROP_0ARGS( getIntroLoc, Type, X->getIntroLoc() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__ObjCForCollectionStmt: {
# define CLASSNAME (clang::ObjCForCollectionStmt)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__ObjCForCollectionStmt;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getElement, Type, X->getElement() )
    case_REFLPROP_0ARGS( getCollection, Type, X->getCollection() )
    case_REFLPROP_0ARGS( getBody, Type, X->getBody() )
    case_REFLPROP_0ARGS( getForLoc, Type, X->getForLoc() )
    case_REFLPROP_0ARGS( getRParenLoc, Type, X->getRParenLoc() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__ObjCAtCatchStmt: {
# define CLASSNAME (clang::ObjCAtCatchStmt)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__ObjCAtCatchStmt;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getCatchBody, Type, X->getCatchBody() )
    case_REFLPROP_0ARGS( getCatchParamDecl, Type, X->getCatchParamDecl() )
    case_REFLPROP_0ARGS( getAtCatchLoc, Type, X->getAtCatchLoc() )
    case_REFLPROP_0ARGS( getRParenLoc, Type, X->getRParenLoc() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case_REFLPROP_0ARGS( hasEllipsis, Result, X->hasEllipsis() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__ObjCAtFinallyStmt: {
# define CLASSNAME (clang::ObjCAtFinallyStmt)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__ObjCAtFinallyStmt;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getFinallyBody, Type, X->getFinallyBody() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case_REFLPROP_0ARGS( getAtFinallyLoc, Type, X->getAtFinallyLoc() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__ObjCAtTryStmt: {
# define CLASSNAME (clang::ObjCAtTryStmt)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__ObjCAtTryStmt;
  switch( (currefl::memnames)MemNum ) {
    case currefl::Create: {
      ASSERT_TRAIT_IS_REFLPROP(Create)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((class clang::SourceLocation), p1)
        LOAD_VAL((class clang::Stmt *), p2)
        LOAD_VAL((class clang::Stmt **), p3)
        LOAD_VAL((unsigned int), p4)
        LOAD_VAL((class clang::Stmt *), p5)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3, p4, p5))
      };
      break;
    }
    case currefl::CreateEmpty: {
      ASSERT_TRAIT_IS_REFLPROP(CreateEmpty)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        LOAD_VAL((bool), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateEmpty(p0, p1, p2))
      };
      break;
    }
    case_REFLPROP_0ARGS( getAtTryLoc, Type, X->getAtTryLoc() )
    case_REFLPROP_0ARGS( getTryBody, Type, X->getTryBody() )
    case_REFLPROP_0ARGS( getNumCatchStmts, Result, X->getNumCatchStmts() )
    case currefl::getCatchStmt: {
      ASSERT_TRAIT_IS_REFLPROP(getCatchStmt)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getCatchStmt(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getFinallyStmt, Type, X->getFinallyStmt() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__ObjCAtSynchronizedStmt: {
# define CLASSNAME (clang::ObjCAtSynchronizedStmt)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__ObjCAtSynchronizedStmt;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getAtSynchronizedLoc, Type, X->getAtSynchronizedLoc() )
    case_REFLPROP_0ARGS( getSynchBody, Type, X->getSynchBody() )
    case_REFLPROP_0ARGS( getSynchExpr, Type, X->getSynchExpr() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__ObjCAtThrowStmt: {
# define CLASSNAME (clang::ObjCAtThrowStmt)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__ObjCAtThrowStmt;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getThrowExpr, Type, X->getThrowExpr() )
    case_REFLPROP_0ARGS( getThrowLoc, Type, X->getThrowLoc() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__ObjCAutoreleasePoolStmt: {
# define CLASSNAME (clang::ObjCAutoreleasePoolStmt)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__ObjCAutoreleasePoolStmt;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getSubStmt, Type, X->getSubStmt() )
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case_REFLPROP_0ARGS( getAtLoc, Type, X->getAtLoc() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__OMPClause: {
# define CLASSNAME (clang::OMPClause)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__OMPClause;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case_REFLPROP_0ARGS( getClauseKind, Result, X->getClauseKind() )
    case_REFLPROP_0ARGS( isImplicit, Result, X->isImplicit() )
    case currefl::children: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->children())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->children())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::children))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::OMPClause *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__OMPExecutableDirective: {
# define CLASSNAME (clang::OMPExecutableDirective)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__OMPExecutableDirective;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getLocStart, Type, X->getLocStart() )
    case_REFLPROP_0ARGS( getBeginLoc, Type, X->getBeginLoc() )
    case_REFLPROP_0ARGS( getLocEnd, Type, X->getLocEnd() )
    case_REFLPROP_0ARGS( getEndLoc, Type, X->getEndLoc() )
    case_REFLPROP_0ARGS( getNumClauses, Result, X->getNumClauses() )
    case currefl::getClause: {
      ASSERT_TRAIT_IS_REFLPROP(getClause)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getClause(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( hasAssociatedStmt, Result, X->hasAssociatedStmt() )
    case_REFLPROP_0ARGS( getAssociatedStmt, Type, X->getAssociatedStmt() )
    case currefl::getCapturedStmt: {
      ASSERT_TRAIT_IS_REFLPROP(getCapturedStmt)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((enum clang::OpenMPDirectiveKind), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->getCapturedStmt(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getInnermostCapturedStmt, Type, X->getInnermostCapturedStmt() )
    case_REFLPROP_0ARGS( getDirectiveKind, Result, X->getDirectiveKind() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
    case currefl::clauses: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->clauses())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->clauses())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::clauses))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__OMPParallelDirective: {
# define CLASSNAME (clang::OMPParallelDirective)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__OMPParallelDirective;
  switch( (currefl::memnames)MemNum ) {
    case currefl::CreateEmpty: {
      ASSERT_TRAIT_IS_REFLPROP(CreateEmpty)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        LOAD_VAL((struct clang::Stmt::EmptyShell), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateEmpty(p0, p1, p2))
      };
      break;
    }
    case_REFLPROP_0ARGS( hasCancel, Result, X->hasCancel() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__OMPLoopDirective: {
# define CLASSNAME (clang::OMPLoopDirective)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__OMPLoopDirective;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( getCollapsedNumber, Result, X->getCollapsedNumber() )
    case_REFLPROP_0ARGS( getIterationVariable, Type, X->getIterationVariable() )
    case_REFLPROP_0ARGS( getLastIteration, Type, X->getLastIteration() )
    case_REFLPROP_0ARGS( getCalcLastIteration, Type, X->getCalcLastIteration() )
    case_REFLPROP_0ARGS( getPreCond, Type, X->getPreCond() )
    case_REFLPROP_0ARGS( getCond, Type, X->getCond() )
    case_REFLPROP_0ARGS( getInit, Type, X->getInit() )
    case_REFLPROP_0ARGS( getInc, Type, X->getInc() )
    case_REFLPROP_0ARGS( getPreInits, Type, X->getPreInits() )
    case_REFLPROP_0ARGS( getIsLastIterVariable, Type, X->getIsLastIterVariable() )
    case_REFLPROP_0ARGS( getLowerBoundVariable, Type, X->getLowerBoundVariable() )
    case_REFLPROP_0ARGS( getUpperBoundVariable, Type, X->getUpperBoundVariable() )
    case_REFLPROP_0ARGS( getStrideVariable, Type, X->getStrideVariable() )
    case_REFLPROP_0ARGS( getEnsureUpperBound, Type, X->getEnsureUpperBound() )
    case_REFLPROP_0ARGS( getNextLowerBound, Type, X->getNextLowerBound() )
    case_REFLPROP_0ARGS( getNextUpperBound, Type, X->getNextUpperBound() )
    case_REFLPROP_0ARGS( getNumIterations, Type, X->getNumIterations() )
    case_REFLPROP_0ARGS( getPrevLowerBoundVariable, Type, X->getPrevLowerBoundVariable() )
    case_REFLPROP_0ARGS( getPrevUpperBoundVariable, Type, X->getPrevUpperBoundVariable() )
    case_REFLPROP_0ARGS( getDistInc, Type, X->getDistInc() )
    case_REFLPROP_0ARGS( getPrevEnsureUpperBound, Type, X->getPrevEnsureUpperBound() )
    case_REFLPROP_0ARGS( getCombinedLowerBoundVariable, Type, X->getCombinedLowerBoundVariable() )
    case_REFLPROP_0ARGS( getCombinedUpperBoundVariable, Type, X->getCombinedUpperBoundVariable() )
    case_REFLPROP_0ARGS( getCombinedEnsureUpperBound, Type, X->getCombinedEnsureUpperBound() )
    case_REFLPROP_0ARGS( getCombinedInit, Type, X->getCombinedInit() )
    case_REFLPROP_0ARGS( getCombinedCond, Type, X->getCombinedCond() )
    case_REFLPROP_0ARGS( getCombinedNextLowerBound, Type, X->getCombinedNextLowerBound() )
    case_REFLPROP_0ARGS( getCombinedNextUpperBound, Type, X->getCombinedNextUpperBound() )
    case_REFLPROP_0ARGS( getBody, Type, X->getBody() )
    case currefl::counters: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->counters())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->counters())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::counters))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case currefl::private_counters: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->private_counters())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->private_counters())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::private_counters))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case currefl::inits: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->inits())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->inits())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::inits))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case currefl::updates: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->updates())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->updates())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::updates))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case currefl::finals: {
      switch (TraitKind) {
        case RTK_range_nth: {
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_NTH(Type, X->finals())
          };
          break;
        }
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE  BUILD_REFLECTION_CALL_RANGE_SIZE(X->finals())
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << ("(iterator_range/ArrayRef-returning) Mem num "
                    + std::to_string(currefl::finals))
                  << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__OMPSimdDirective: {
# define CLASSNAME (clang::OMPSimdDirective)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__OMPSimdDirective;
  switch( (currefl::memnames)MemNum ) {
    case currefl::CreateEmpty: {
      ASSERT_TRAIT_IS_REFLPROP(CreateEmpty)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        LOAD_VAL((unsigned int), p2)
        LOAD_VAL((struct clang::Stmt::EmptyShell), p3)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateEmpty(p0, p1, p2, p3))
      };
      break;
    }
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__OMPForDirective: {
# define CLASSNAME (clang::OMPForDirective)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__OMPForDirective;
  switch( (currefl::memnames)MemNum ) {
    case currefl::CreateEmpty: {
      ASSERT_TRAIT_IS_REFLPROP(CreateEmpty)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        LOAD_VAL((unsigned int), p2)
        LOAD_VAL((struct clang::Stmt::EmptyShell), p3)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateEmpty(p0, p1, p2, p3))
      };
      break;
    }
    case_REFLPROP_0ARGS( hasCancel, Result, X->hasCancel() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__OMPForSimdDirective: {
# define CLASSNAME (clang::OMPForSimdDirective)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__OMPForSimdDirective;
  switch( (currefl::memnames)MemNum ) {
    case currefl::CreateEmpty: {
      ASSERT_TRAIT_IS_REFLPROP(CreateEmpty)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        LOAD_VAL((unsigned int), p2)
        LOAD_VAL((struct clang::Stmt::EmptyShell), p3)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateEmpty(p0, p1, p2, p3))
      };
      break;
    }
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__OMPSectionsDirective: {
# define CLASSNAME (clang::OMPSectionsDirective)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__OMPSectionsDirective;
  switch( (currefl::memnames)MemNum ) {
    case currefl::CreateEmpty: {
      ASSERT_TRAIT_IS_REFLPROP(CreateEmpty)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        LOAD_VAL((struct clang::Stmt::EmptyShell), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateEmpty(p0, p1, p2))
      };
      break;
    }
    case_REFLPROP_0ARGS( hasCancel, Result, X->hasCancel() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__OMPSectionDirective: {
# define CLASSNAME (clang::OMPSectionDirective)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__OMPSectionDirective;
  switch( (currefl::memnames)MemNum ) {
    case currefl::Create: {
      ASSERT_TRAIT_IS_REFLPROP(Create)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((class clang::SourceLocation), p1)
        LOAD_VAL((class clang::SourceLocation), p2)
        LOAD_VAL((class clang::Stmt *), p3)
        LOAD_VAL((bool), p4)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3, p4))
      };
      break;
    }
    case currefl::CreateEmpty: {
      ASSERT_TRAIT_IS_REFLPROP(CreateEmpty)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((struct clang::Stmt::EmptyShell), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateEmpty(p0, p1))
      };
      break;
    }
    case_REFLPROP_0ARGS( hasCancel, Result, X->hasCancel() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__OMPSingleDirective: {
# define CLASSNAME (clang::OMPSingleDirective)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__OMPSingleDirective;
  switch( (currefl::memnames)MemNum ) {
    case currefl::CreateEmpty: {
      ASSERT_TRAIT_IS_REFLPROP(CreateEmpty)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        LOAD_VAL((struct clang::Stmt::EmptyShell), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateEmpty(p0, p1, p2))
      };
      break;
    }
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__OMPMasterDirective: {
# define CLASSNAME (clang::OMPMasterDirective)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__OMPMasterDirective;
  switch( (currefl::memnames)MemNum ) {
    case currefl::Create: {
      ASSERT_TRAIT_IS_REFLPROP(Create)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((class clang::SourceLocation), p1)
        LOAD_VAL((class clang::SourceLocation), p2)
        LOAD_VAL((class clang::Stmt *), p3)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3))
      };
      break;
    }
    case currefl::CreateEmpty: {
      ASSERT_TRAIT_IS_REFLPROP(CreateEmpty)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((struct clang::Stmt::EmptyShell), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateEmpty(p0, p1))
      };
      break;
    }
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__OMPCriticalDirective: {
# define CLASSNAME (clang::OMPCriticalDirective)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__OMPCriticalDirective;
  switch( (currefl::memnames)MemNum ) {
    case currefl::CreateEmpty: {
      ASSERT_TRAIT_IS_REFLPROP(CreateEmpty)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        LOAD_VAL((struct clang::Stmt::EmptyShell), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateEmpty(p0, p1, p2))
      };
      break;
    }
    case_REFLPROP_0ARGS( getDirectiveName, Type, X->getDirectiveName() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__OMPParallelForDirective: {
# define CLASSNAME (clang::OMPParallelForDirective)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__OMPParallelForDirective;
  switch( (currefl::memnames)MemNum ) {
    case currefl::CreateEmpty: {
      ASSERT_TRAIT_IS_REFLPROP(CreateEmpty)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        LOAD_VAL((unsigned int), p2)
        LOAD_VAL((struct clang::Stmt::EmptyShell), p3)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateEmpty(p0, p1, p2, p3))
      };
      break;
    }
    case_REFLPROP_0ARGS( hasCancel, Result, X->hasCancel() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__OMPParallelForSimdDirective: {
# define CLASSNAME (clang::OMPParallelForSimdDirective)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__OMPParallelForSimdDirective;
  switch( (currefl::memnames)MemNum ) {
    case currefl::CreateEmpty: {
      ASSERT_TRAIT_IS_REFLPROP(CreateEmpty)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        LOAD_VAL((unsigned int), p2)
        LOAD_VAL((struct clang::Stmt::EmptyShell), p3)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateEmpty(p0, p1, p2, p3))
      };
      break;
    }
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__OMPParallelSectionsDirective: {
# define CLASSNAME (clang::OMPParallelSectionsDirective)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__OMPParallelSectionsDirective;
  switch( (currefl::memnames)MemNum ) {
    case currefl::CreateEmpty: {
      ASSERT_TRAIT_IS_REFLPROP(CreateEmpty)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        LOAD_VAL((struct clang::Stmt::EmptyShell), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateEmpty(p0, p1, p2))
      };
      break;
    }
    case_REFLPROP_0ARGS( hasCancel, Result, X->hasCancel() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__OMPTaskDirective: {
# define CLASSNAME (clang::OMPTaskDirective)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__OMPTaskDirective;
  switch( (currefl::memnames)MemNum ) {
    case currefl::CreateEmpty: {
      ASSERT_TRAIT_IS_REFLPROP(CreateEmpty)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        LOAD_VAL((struct clang::Stmt::EmptyShell), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateEmpty(p0, p1, p2))
      };
      break;
    }
    case_REFLPROP_0ARGS( hasCancel, Result, X->hasCancel() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__OMPTaskyieldDirective: {
# define CLASSNAME (clang::OMPTaskyieldDirective)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__OMPTaskyieldDirective;
  switch( (currefl::memnames)MemNum ) {
    case currefl::Create: {
      ASSERT_TRAIT_IS_REFLPROP(Create)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((class clang::SourceLocation), p1)
        LOAD_VAL((class clang::SourceLocation), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2))
      };
      break;
    }
    case currefl::CreateEmpty: {
      ASSERT_TRAIT_IS_REFLPROP(CreateEmpty)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((struct clang::Stmt::EmptyShell), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateEmpty(p0, p1))
      };
      break;
    }
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__OMPBarrierDirective: {
# define CLASSNAME (clang::OMPBarrierDirective)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__OMPBarrierDirective;
  switch( (currefl::memnames)MemNum ) {
    case currefl::Create: {
      ASSERT_TRAIT_IS_REFLPROP(Create)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((class clang::SourceLocation), p1)
        LOAD_VAL((class clang::SourceLocation), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2))
      };
      break;
    }
    case currefl::CreateEmpty: {
      ASSERT_TRAIT_IS_REFLPROP(CreateEmpty)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((struct clang::Stmt::EmptyShell), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateEmpty(p0, p1))
      };
      break;
    }
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__OMPTaskwaitDirective: {
# define CLASSNAME (clang::OMPTaskwaitDirective)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__OMPTaskwaitDirective;
  switch( (currefl::memnames)MemNum ) {
    case currefl::Create: {
      ASSERT_TRAIT_IS_REFLPROP(Create)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((class clang::SourceLocation), p1)
        LOAD_VAL((class clang::SourceLocation), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2))
      };
      break;
    }
    case currefl::CreateEmpty: {
      ASSERT_TRAIT_IS_REFLPROP(CreateEmpty)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((struct clang::Stmt::EmptyShell), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateEmpty(p0, p1))
      };
      break;
    }
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__OMPTaskgroupDirective: {
# define CLASSNAME (clang::OMPTaskgroupDirective)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__OMPTaskgroupDirective;
  switch( (currefl::memnames)MemNum ) {
    case currefl::CreateEmpty: {
      ASSERT_TRAIT_IS_REFLPROP(CreateEmpty)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        LOAD_VAL((struct clang::Stmt::EmptyShell), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateEmpty(p0, p1, p2))
      };
      break;
    }
    case_REFLPROP_0ARGS( getReductionRef, Type, X->getReductionRef() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__OMPFlushDirective: {
# define CLASSNAME (clang::OMPFlushDirective)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__OMPFlushDirective;
  switch( (currefl::memnames)MemNum ) {
    case currefl::CreateEmpty: {
      ASSERT_TRAIT_IS_REFLPROP(CreateEmpty)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        LOAD_VAL((struct clang::Stmt::EmptyShell), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateEmpty(p0, p1, p2))
      };
      break;
    }
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__OMPOrderedDirective: {
# define CLASSNAME (clang::OMPOrderedDirective)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__OMPOrderedDirective;
  switch( (currefl::memnames)MemNum ) {
    case currefl::CreateEmpty: {
      ASSERT_TRAIT_IS_REFLPROP(CreateEmpty)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        LOAD_VAL((struct clang::Stmt::EmptyShell), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateEmpty(p0, p1, p2))
      };
      break;
    }
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__OMPAtomicDirective: {
# define CLASSNAME (clang::OMPAtomicDirective)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__OMPAtomicDirective;
  switch( (currefl::memnames)MemNum ) {
    case currefl::CreateEmpty: {
      ASSERT_TRAIT_IS_REFLPROP(CreateEmpty)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        LOAD_VAL((struct clang::Stmt::EmptyShell), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateEmpty(p0, p1, p2))
      };
      break;
    }
    case_REFLPROP_0ARGS( getX, Type, X->getX() )
    case_REFLPROP_0ARGS( getUpdateExpr, Type, X->getUpdateExpr() )
    case_REFLPROP_0ARGS( isXLHSInRHSPart, Result, X->isXLHSInRHSPart() )
    case_REFLPROP_0ARGS( isPostfixUpdate, Result, X->isPostfixUpdate() )
    case_REFLPROP_0ARGS( getV, Type, X->getV() )
    case_REFLPROP_0ARGS( getExpr, Type, X->getExpr() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__OMPTargetDirective: {
# define CLASSNAME (clang::OMPTargetDirective)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__OMPTargetDirective;
  switch( (currefl::memnames)MemNum ) {
    case currefl::CreateEmpty: {
      ASSERT_TRAIT_IS_REFLPROP(CreateEmpty)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        LOAD_VAL((struct clang::Stmt::EmptyShell), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateEmpty(p0, p1, p2))
      };
      break;
    }
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__OMPTargetDataDirective: {
# define CLASSNAME (clang::OMPTargetDataDirective)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__OMPTargetDataDirective;
  switch( (currefl::memnames)MemNum ) {
    case currefl::CreateEmpty: {
      ASSERT_TRAIT_IS_REFLPROP(CreateEmpty)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        LOAD_VAL((struct clang::Stmt::EmptyShell), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateEmpty(p0, p1, p2))
      };
      break;
    }
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__OMPTargetEnterDataDirective: {
# define CLASSNAME (clang::OMPTargetEnterDataDirective)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__OMPTargetEnterDataDirective;
  switch( (currefl::memnames)MemNum ) {
    case currefl::CreateEmpty: {
      ASSERT_TRAIT_IS_REFLPROP(CreateEmpty)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        LOAD_VAL((struct clang::Stmt::EmptyShell), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateEmpty(p0, p1, p2))
      };
      break;
    }
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__OMPTargetExitDataDirective: {
# define CLASSNAME (clang::OMPTargetExitDataDirective)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__OMPTargetExitDataDirective;
  switch( (currefl::memnames)MemNum ) {
    case currefl::CreateEmpty: {
      ASSERT_TRAIT_IS_REFLPROP(CreateEmpty)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        LOAD_VAL((struct clang::Stmt::EmptyShell), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateEmpty(p0, p1, p2))
      };
      break;
    }
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__OMPTargetParallelDirective: {
# define CLASSNAME (clang::OMPTargetParallelDirective)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__OMPTargetParallelDirective;
  switch( (currefl::memnames)MemNum ) {
    case currefl::CreateEmpty: {
      ASSERT_TRAIT_IS_REFLPROP(CreateEmpty)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        LOAD_VAL((struct clang::Stmt::EmptyShell), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateEmpty(p0, p1, p2))
      };
      break;
    }
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__OMPTargetParallelForDirective: {
# define CLASSNAME (clang::OMPTargetParallelForDirective)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__OMPTargetParallelForDirective;
  switch( (currefl::memnames)MemNum ) {
    case currefl::CreateEmpty: {
      ASSERT_TRAIT_IS_REFLPROP(CreateEmpty)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        LOAD_VAL((unsigned int), p2)
        LOAD_VAL((struct clang::Stmt::EmptyShell), p3)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateEmpty(p0, p1, p2, p3))
      };
      break;
    }
    case_REFLPROP_0ARGS( hasCancel, Result, X->hasCancel() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__OMPTeamsDirective: {
# define CLASSNAME (clang::OMPTeamsDirective)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__OMPTeamsDirective;
  switch( (currefl::memnames)MemNum ) {
    case currefl::CreateEmpty: {
      ASSERT_TRAIT_IS_REFLPROP(CreateEmpty)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        LOAD_VAL((struct clang::Stmt::EmptyShell), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateEmpty(p0, p1, p2))
      };
      break;
    }
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__OMPCancellationPointDirective: {
# define CLASSNAME (clang::OMPCancellationPointDirective)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__OMPCancellationPointDirective;
  switch( (currefl::memnames)MemNum ) {
    case currefl::Create: {
      ASSERT_TRAIT_IS_REFLPROP(Create)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((class clang::SourceLocation), p1)
        LOAD_VAL((class clang::SourceLocation), p2)
        LOAD_VAL((enum clang::OpenMPDirectiveKind), p3)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3))
      };
      break;
    }
    case currefl::CreateEmpty: {
      ASSERT_TRAIT_IS_REFLPROP(CreateEmpty)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((struct clang::Stmt::EmptyShell), p1)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateEmpty(p0, p1))
      };
      break;
    }
    case_REFLPROP_0ARGS( getCancelRegion, Result, X->getCancelRegion() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__OMPCancelDirective: {
# define CLASSNAME (clang::OMPCancelDirective)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__OMPCancelDirective;
  switch( (currefl::memnames)MemNum ) {
    case currefl::CreateEmpty: {
      ASSERT_TRAIT_IS_REFLPROP(CreateEmpty)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        LOAD_VAL((struct clang::Stmt::EmptyShell), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateEmpty(p0, p1, p2))
      };
      break;
    }
    case_REFLPROP_0ARGS( getCancelRegion, Result, X->getCancelRegion() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__OMPTaskLoopDirective: {
# define CLASSNAME (clang::OMPTaskLoopDirective)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__OMPTaskLoopDirective;
  switch( (currefl::memnames)MemNum ) {
    case currefl::CreateEmpty: {
      ASSERT_TRAIT_IS_REFLPROP(CreateEmpty)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        LOAD_VAL((unsigned int), p2)
        LOAD_VAL((struct clang::Stmt::EmptyShell), p3)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateEmpty(p0, p1, p2, p3))
      };
      break;
    }
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__OMPTaskLoopSimdDirective: {
# define CLASSNAME (clang::OMPTaskLoopSimdDirective)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__OMPTaskLoopSimdDirective;
  switch( (currefl::memnames)MemNum ) {
    case currefl::CreateEmpty: {
      ASSERT_TRAIT_IS_REFLPROP(CreateEmpty)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        LOAD_VAL((unsigned int), p2)
        LOAD_VAL((struct clang::Stmt::EmptyShell), p3)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateEmpty(p0, p1, p2, p3))
      };
      break;
    }
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__OMPDistributeDirective: {
# define CLASSNAME (clang::OMPDistributeDirective)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__OMPDistributeDirective;
  switch( (currefl::memnames)MemNum ) {
    case currefl::CreateEmpty: {
      ASSERT_TRAIT_IS_REFLPROP(CreateEmpty)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        LOAD_VAL((unsigned int), p2)
        LOAD_VAL((struct clang::Stmt::EmptyShell), p3)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateEmpty(p0, p1, p2, p3))
      };
      break;
    }
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__OMPTargetUpdateDirective: {
# define CLASSNAME (clang::OMPTargetUpdateDirective)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__OMPTargetUpdateDirective;
  switch( (currefl::memnames)MemNum ) {
    case currefl::CreateEmpty: {
      ASSERT_TRAIT_IS_REFLPROP(CreateEmpty)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        LOAD_VAL((struct clang::Stmt::EmptyShell), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateEmpty(p0, p1, p2))
      };
      break;
    }
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__OMPDistributeParallelForDirective: {
# define CLASSNAME (clang::OMPDistributeParallelForDirective)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__OMPDistributeParallelForDirective;
  switch( (currefl::memnames)MemNum ) {
    case currefl::CreateEmpty: {
      ASSERT_TRAIT_IS_REFLPROP(CreateEmpty)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        LOAD_VAL((unsigned int), p2)
        LOAD_VAL((struct clang::Stmt::EmptyShell), p3)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateEmpty(p0, p1, p2, p3))
      };
      break;
    }
    case_REFLPROP_0ARGS( hasCancel, Result, X->hasCancel() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__OMPDistributeParallelForSimdDirective: {
# define CLASSNAME (clang::OMPDistributeParallelForSimdDirective)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__OMPDistributeParallelForSimdDirective;
  switch( (currefl::memnames)MemNum ) {
    case currefl::CreateEmpty: {
      ASSERT_TRAIT_IS_REFLPROP(CreateEmpty)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        LOAD_VAL((unsigned int), p2)
        LOAD_VAL((struct clang::Stmt::EmptyShell), p3)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateEmpty(p0, p1, p2, p3))
      };
      break;
    }
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__OMPDistributeSimdDirective: {
# define CLASSNAME (clang::OMPDistributeSimdDirective)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__OMPDistributeSimdDirective;
  switch( (currefl::memnames)MemNum ) {
    case currefl::CreateEmpty: {
      ASSERT_TRAIT_IS_REFLPROP(CreateEmpty)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        LOAD_VAL((unsigned int), p2)
        LOAD_VAL((struct clang::Stmt::EmptyShell), p3)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateEmpty(p0, p1, p2, p3))
      };
      break;
    }
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__OMPTargetParallelForSimdDirective: {
# define CLASSNAME (clang::OMPTargetParallelForSimdDirective)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__OMPTargetParallelForSimdDirective;
  switch( (currefl::memnames)MemNum ) {
    case currefl::CreateEmpty: {
      ASSERT_TRAIT_IS_REFLPROP(CreateEmpty)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        LOAD_VAL((unsigned int), p2)
        LOAD_VAL((struct clang::Stmt::EmptyShell), p3)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateEmpty(p0, p1, p2, p3))
      };
      break;
    }
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__OMPTargetSimdDirective: {
# define CLASSNAME (clang::OMPTargetSimdDirective)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__OMPTargetSimdDirective;
  switch( (currefl::memnames)MemNum ) {
    case currefl::CreateEmpty: {
      ASSERT_TRAIT_IS_REFLPROP(CreateEmpty)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        LOAD_VAL((unsigned int), p2)
        LOAD_VAL((struct clang::Stmt::EmptyShell), p3)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateEmpty(p0, p1, p2, p3))
      };
      break;
    }
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__OMPTeamsDistributeDirective: {
# define CLASSNAME (clang::OMPTeamsDistributeDirective)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__OMPTeamsDistributeDirective;
  switch( (currefl::memnames)MemNum ) {
    case currefl::CreateEmpty: {
      ASSERT_TRAIT_IS_REFLPROP(CreateEmpty)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        LOAD_VAL((unsigned int), p2)
        LOAD_VAL((struct clang::Stmt::EmptyShell), p3)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateEmpty(p0, p1, p2, p3))
      };
      break;
    }
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__OMPTeamsDistributeSimdDirective: {
# define CLASSNAME (clang::OMPTeamsDistributeSimdDirective)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__OMPTeamsDistributeSimdDirective;
  switch( (currefl::memnames)MemNum ) {
    case currefl::CreateEmpty: {
      ASSERT_TRAIT_IS_REFLPROP(CreateEmpty)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        LOAD_VAL((unsigned int), p2)
        LOAD_VAL((struct clang::Stmt::EmptyShell), p3)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateEmpty(p0, p1, p2, p3))
      };
      break;
    }
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__OMPTeamsDistributeParallelForSimdDirective: {
# define CLASSNAME (clang::OMPTeamsDistributeParallelForSimdDirective)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__OMPTeamsDistributeParallelForSimdDirective;
  switch( (currefl::memnames)MemNum ) {
    case currefl::CreateEmpty: {
      ASSERT_TRAIT_IS_REFLPROP(CreateEmpty)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        LOAD_VAL((unsigned int), p2)
        LOAD_VAL((struct clang::Stmt::EmptyShell), p3)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateEmpty(p0, p1, p2, p3))
      };
      break;
    }
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__OMPTeamsDistributeParallelForDirective: {
# define CLASSNAME (clang::OMPTeamsDistributeParallelForDirective)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__OMPTeamsDistributeParallelForDirective;
  switch( (currefl::memnames)MemNum ) {
    case currefl::CreateEmpty: {
      ASSERT_TRAIT_IS_REFLPROP(CreateEmpty)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        LOAD_VAL((unsigned int), p2)
        LOAD_VAL((struct clang::Stmt::EmptyShell), p3)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateEmpty(p0, p1, p2, p3))
      };
      break;
    }
    case_REFLPROP_0ARGS( hasCancel, Result, X->hasCancel() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__OMPTargetTeamsDirective: {
# define CLASSNAME (clang::OMPTargetTeamsDirective)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__OMPTargetTeamsDirective;
  switch( (currefl::memnames)MemNum ) {
    case currefl::CreateEmpty: {
      ASSERT_TRAIT_IS_REFLPROP(CreateEmpty)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        LOAD_VAL((struct clang::Stmt::EmptyShell), p2)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateEmpty(p0, p1, p2))
      };
      break;
    }
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__OMPTargetTeamsDistributeDirective: {
# define CLASSNAME (clang::OMPTargetTeamsDistributeDirective)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__OMPTargetTeamsDistributeDirective;
  switch( (currefl::memnames)MemNum ) {
    case currefl::CreateEmpty: {
      ASSERT_TRAIT_IS_REFLPROP(CreateEmpty)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        LOAD_VAL((unsigned int), p2)
        LOAD_VAL((struct clang::Stmt::EmptyShell), p3)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateEmpty(p0, p1, p2, p3))
      };
      break;
    }
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__OMPTargetTeamsDistributeParallelForDirective: {
# define CLASSNAME (clang::OMPTargetTeamsDistributeParallelForDirective)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__OMPTargetTeamsDistributeParallelForDirective;
  switch( (currefl::memnames)MemNum ) {
    case currefl::CreateEmpty: {
      ASSERT_TRAIT_IS_REFLPROP(CreateEmpty)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        LOAD_VAL((unsigned int), p2)
        LOAD_VAL((struct clang::Stmt::EmptyShell), p3)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateEmpty(p0, p1, p2, p3))
      };
      break;
    }
    case_REFLPROP_0ARGS( hasCancel, Result, X->hasCancel() )
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__OMPTargetTeamsDistributeParallelForSimdDirective: {
# define CLASSNAME (clang::OMPTargetTeamsDistributeParallelForSimdDirective)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__OMPTargetTeamsDistributeParallelForSimdDirective;
  switch( (currefl::memnames)MemNum ) {
    case currefl::CreateEmpty: {
      ASSERT_TRAIT_IS_REFLPROP(CreateEmpty)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        LOAD_VAL((unsigned int), p2)
        LOAD_VAL((struct clang::Stmt::EmptyShell), p3)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateEmpty(p0, p1, p2, p3))
      };
      break;
    }
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__OMPTargetTeamsDistributeSimdDirective: {
# define CLASSNAME (clang::OMPTargetTeamsDistributeSimdDirective)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  HANDLE_RTK_CAST_TRAIT(X)
  namespace currefl = refl::clang__OMPTargetTeamsDistributeSimdDirective;
  switch( (currefl::memnames)MemNum ) {
    case currefl::CreateEmpty: {
      ASSERT_TRAIT_IS_REFLPROP(CreateEmpty)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((const class clang::ASTContext &), p0)
        LOAD_VAL((unsigned int), p1)
        LOAD_VAL((unsigned int), p2)
        LOAD_VAL((struct clang::Stmt::EmptyShell), p3)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->CreateEmpty(p0, p1, p2, p3))
      };
      break;
    }
    case currefl::classof: {
      ASSERT_TRAIT_IS_REFLPROP(classof)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::Stmt *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->classof(p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__StoredDeclsMap: {
# define CLASSNAME (clang::StoredDeclsMap)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__StoredDeclsMap;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS( empty, Result, X->empty() )
    case_REFLPROP_0ARGS( size, Result, X->size() )
    case currefl::count: {
      ASSERT_TRAIT_IS_REFLPROP(count)
      SET_PRIM_TYPE(unsigned int)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const class clang::DeclarationName &), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->count(p0))
      };
      break;
    }
    case currefl::isPointerIntoBucketsArray: {
      ASSERT_TRAIT_IS_REFLPROP(isPointerIntoBucketsArray)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const void *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->isPointerIntoBucketsArray(p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( getPointerIntoBucketsArray, Result, X->getPointerIntoBucketsArray() )
    case_REFLPROP_0ARGS( getMemorySize, Result, X->getMemorySize() )
    case currefl::DestroyAll: {
      ASSERT_TRAIT_IS_REFLPROP(DestroyAll)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((class clang::StoredDeclsMap *), p0)
        LOAD_VAL((bool), p1)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->DestroyAll((class clang::StoredDeclsMap *)p0, (bool)p1))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_clang__DependentDiagnostic: {
# define CLASSNAME (clang::DependentDiagnostic)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::clang__DependentDiagnostic;
  switch( (currefl::memnames)MemNum ) {
    case currefl::Create: {
      ASSERT_TRAIT_IS_REFLPROP(Create)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((class clang::ASTContext &), p0)
        LOAD_VAL((class clang::DeclContext *), p1)
        LOAD_VAL((enum clang::DependentDiagnostic::AccessNonce), p2)
        LOAD_VAL((class clang::SourceLocation), p3)
        LOAD_VAL((bool), p4)
        LOAD_VAL((enum clang::AccessSpecifier), p5)
        LOAD_VAL((class clang::NamedDecl *), p6)
        LOAD_VAL((class clang::CXXRecordDecl *), p7)
        LOAD_VAL((class clang::QualType), p8)
        LOAD_VAL((const class clang::PartialDiagnostic &), p9)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->Create(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9))
      };
      break;
    }
    case_REFLPROP_0ARGS( getKind, Result, X->getKind() )
    case_REFLPROP_0ARGS( isAccessToMember, Result, X->isAccessToMember() )
    case_REFLPROP_0ARGS( getAccess, Result, X->getAccess() )
    case_REFLPROP_0ARGS( getAccessLoc, Type, X->getAccessLoc() )
    case_REFLPROP_0ARGS( getAccessTarget, Type, X->getAccessTarget() )
    case_REFLPROP_0ARGS( getAccessNamingClass, Type, X->getAccessNamingClass() )
    case_REFLPROP_0ARGS( getAccessBaseObjectType, Type, X->getAccessBaseObjectType() )
    case_REFLPROP_0ARGS( getDiagnostic, Type, X->getDiagnostic() )
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_reflcontainers__VectorStr: {
# define CLASSNAME (reflcontainers::VectorStr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::reflcontainers__VectorStr;
  switch( (currefl::memnames)MemNum ) {
    case currefl::_this_: {
      switch (TraitKind) {
        case RTK_range_nth:
          SET_PRIM_TYPE(std::remove_reference<decltype(
            *DV(PP_REMOVE_PARENS(CLASSNAME)).begin() )>::type)
          SET_CALLBACK(Str) {
            LOAD_VAL_X(Str)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE
            BUILD_REFLECTION_CALL_RANGE_NTH(Str, *X)
          };
          break;
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE
            BUILD_REFLECTION_CALL_RANGE_SIZE(*X)
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << "_this_"
                 << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case_REFLPROP_0ARGS( clone, Result, X->clone() )
    case_REFLPROP_0ARGS( size, Result, X->size() )
    case_REFLPROP_0ARGS( empty, Result, X->empty() )
    case currefl::clear: {
      ASSERT_TRAIT_IS_REFLPROP(clear)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        ASSERT_NO_MORE  VOID_REFLECTION(X->clear())
      };
      break;
    }
    case currefl::resize: {
      ASSERT_TRAIT_IS_REFLPROP(resize)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((unsigned long), p0)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->resize((std::size_t)p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( capacity, Result, X->capacity() )
    case currefl::reserve: {
      ASSERT_TRAIT_IS_REFLPROP(reserve)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((unsigned long), p0)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->reserve((std::size_t)p0))
      };
      break;
    }
    case currefl::shrink_to_fit: {
      ASSERT_TRAIT_IS_REFLPROP(shrink_to_fit)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        ASSERT_NO_MORE  VOID_REFLECTION(X->shrink_to_fit())
      };
      break;
    }
    case currefl::push_back: {
      ASSERT_TRAIT_IS_REFLPROP(push_back)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const char *), p0)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->push_back((class llvm::StringRef)p0))
      };
      break;
    }
    case currefl::pop_back: {
      ASSERT_TRAIT_IS_REFLPROP(pop_back)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        ASSERT_NO_MORE  VOID_REFLECTION(X->pop_back())
      };
      break;
    }
    case currefl::dealloc: {
      ASSERT_TRAIT_IS_REFLPROP(dealloc)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        ASSERT_NO_MORE  VOID_REFLECTION(X->dealloc())
      };
      break;
    }
    case currefl::at: {
      ASSERT_TRAIT_IS_REFLPROP(at)
      SET_PRIM_TYPE(const char *)
      SET_CALLBACK(Str) {
        LOAD_VAL_X(Str)
        LOAD_VAL((unsigned long), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Str, X->at(p0))
      };
      break;
    }
    case currefl::assign: {
      ASSERT_TRAIT_IS_REFLPROP(assign)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((unsigned long), p0)
        LOAD_VAL((const char *), p1)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->assign((std::size_t)p0, (class llvm::StringRef)p1))
      };
      break;
    }
    case_REFLPROP_0ARGS( front, Str, X->front() )
    case_REFLPROP_0ARGS( back, Str, X->back() )
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_reflcontainers__VectorInt: {
# define CLASSNAME (reflcontainers::VectorInt)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::reflcontainers__VectorInt;
  switch( (currefl::memnames)MemNum ) {
    case currefl::_this_: {
      switch (TraitKind) {
        case RTK_range_nth:
          SET_PRIM_TYPE(std::remove_reference<decltype(
            *DV(PP_REMOVE_PARENS(CLASSNAME)).begin() )>::type)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE
            BUILD_REFLECTION_CALL_RANGE_NTH(Result, *X)
          };
          break;
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE
            BUILD_REFLECTION_CALL_RANGE_SIZE(*X)
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << "_this_"
                 << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case_REFLPROP_0ARGS( clone, Result, X->clone() )
    case_REFLPROP_0ARGS( size, Result, X->size() )
    case_REFLPROP_0ARGS( empty, Result, X->empty() )
    case currefl::clear: {
      ASSERT_TRAIT_IS_REFLPROP(clear)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        ASSERT_NO_MORE  VOID_REFLECTION(X->clear())
      };
      break;
    }
    case currefl::resize: {
      ASSERT_TRAIT_IS_REFLPROP(resize)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((unsigned long), p0)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->resize((std::size_t)p0))
      };
      break;
    }
    case_REFLPROP_0ARGS( capacity, Result, X->capacity() )
    case currefl::reserve: {
      ASSERT_TRAIT_IS_REFLPROP(reserve)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((unsigned long), p0)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->reserve((std::size_t)p0))
      };
      break;
    }
    case currefl::shrink_to_fit: {
      ASSERT_TRAIT_IS_REFLPROP(shrink_to_fit)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        ASSERT_NO_MORE  VOID_REFLECTION(X->shrink_to_fit())
      };
      break;
    }
    case currefl::push_back: {
      ASSERT_TRAIT_IS_REFLPROP(push_back)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((long), p0)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->push_back((long)p0))
      };
      break;
    }
    case currefl::pop_back: {
      ASSERT_TRAIT_IS_REFLPROP(pop_back)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        ASSERT_NO_MORE  VOID_REFLECTION(X->pop_back())
      };
      break;
    }
    case currefl::dealloc: {
      ASSERT_TRAIT_IS_REFLPROP(dealloc)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        ASSERT_NO_MORE  VOID_REFLECTION(X->dealloc())
      };
      break;
    }
    case currefl::at: {
      ASSERT_TRAIT_IS_REFLPROP(at)
      SET_PRIM_TYPE(long)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((unsigned long), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->at(p0))
      };
      break;
    }
    case currefl::assign: {
      ASSERT_TRAIT_IS_REFLPROP(assign)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((unsigned long), p0)
        LOAD_VAL((long), p1)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->assign((std::size_t)p0, (long)p1))
      };
      break;
    }
    case_REFLPROP_0ARGS( front, Result, X->front() )
    case_REFLPROP_0ARGS( back, Result, X->back() )
    case currefl::assign1: {
      ASSERT_TRAIT_IS_REFLPROP(assign1)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((unsigned long), p0)
        LOAD_VAL((void *), p1)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->assign((std::size_t)p0, (void *)p1))
      };
      break;
    }
    case currefl::push_back1: {
      ASSERT_TRAIT_IS_REFLPROP(push_back1)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((void *), p0)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->push_back((void *)p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_reflcontainers__SetInt: {
# define CLASSNAME (reflcontainers::SetInt)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::reflcontainers__SetInt;
  switch( (currefl::memnames)MemNum ) {
    case currefl::_this_: {
      switch (TraitKind) {
        case RTK_range_nth:
          SET_PRIM_TYPE(std::remove_reference<decltype(
            *DV(PP_REMOVE_PARENS(CLASSNAME)).begin() )>::type)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE
            BUILD_REFLECTION_CALL_RANGE_NTH(Result, *X)
          };
          break;
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE
            BUILD_REFLECTION_CALL_RANGE_SIZE(*X)
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << "_this_"
                 << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case_REFLPROP_0ARGS( clone, Result, X->clone() )
    case_REFLPROP_0ARGS( size, Result, X->size() )
    case_REFLPROP_0ARGS( empty, Result, X->empty() )
    case currefl::clear: {
      ASSERT_TRAIT_IS_REFLPROP(clear)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        ASSERT_NO_MORE  VOID_REFLECTION(X->clear())
      };
      break;
    }
    case currefl::contains: {
      ASSERT_TRAIT_IS_REFLPROP(contains)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((long), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->contains(p0))
      };
      break;
    }
    case currefl::insert: {
      ASSERT_TRAIT_IS_REFLPROP(insert)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((long), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->insert(p0))
      };
      break;
    }
    case currefl::erase: {
      ASSERT_TRAIT_IS_REFLPROP(erase)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((long), p0)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->erase((long)p0))
      };
      break;
    }
    case currefl::at_ith: {
      ASSERT_TRAIT_IS_REFLPROP(at_ith)
      SET_PRIM_TYPE(long)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->at_ith(p0))
      };
      break;
    }
    case currefl::dealloc: {
      ASSERT_TRAIT_IS_REFLPROP(dealloc)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        ASSERT_NO_MORE  VOID_REFLECTION(X->dealloc())
      };
      break;
    }
    case currefl::contains1: {
      ASSERT_TRAIT_IS_REFLPROP(contains1)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((void *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->contains(p0))
      };
      break;
    }
    case currefl::insert1: {
      ASSERT_TRAIT_IS_REFLPROP(insert1)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((void *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->insert(p0))
      };
      break;
    }
    case currefl::erase1: {
      ASSERT_TRAIT_IS_REFLPROP(erase1)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((void *), p0)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->erase((void *)p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_reflcontainers__SetStr: {
# define CLASSNAME (reflcontainers::SetStr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::reflcontainers__SetStr;
  switch( (currefl::memnames)MemNum ) {
    case currefl::_this_: {
      switch (TraitKind) {
        case RTK_range_nth:
          SET_PRIM_TYPE(std::remove_reference<decltype(
            *DV(PP_REMOVE_PARENS(CLASSNAME)).begin() )>::type)
          SET_CALLBACK(Str) {
            LOAD_VAL_X(Str)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE
            BUILD_REFLECTION_CALL_RANGE_NTH(Str, *X)
          };
          break;
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE
            BUILD_REFLECTION_CALL_RANGE_SIZE(*X)
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << "_this_"
                 << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case_REFLPROP_0ARGS( clone, Result, X->clone() )
    case_REFLPROP_0ARGS( size, Result, X->size() )
    case_REFLPROP_0ARGS( empty, Result, X->empty() )
    case currefl::clear: {
      ASSERT_TRAIT_IS_REFLPROP(clear)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        ASSERT_NO_MORE  VOID_REFLECTION(X->clear())
      };
      break;
    }
    case currefl::contains: {
      ASSERT_TRAIT_IS_REFLPROP(contains)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const char *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->contains(p0))
      };
      break;
    }
    case currefl::insert: {
      ASSERT_TRAIT_IS_REFLPROP(insert)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const char *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->insert(p0))
      };
      break;
    }
    case currefl::erase: {
      ASSERT_TRAIT_IS_REFLPROP(erase)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const char *), p0)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->erase((class llvm::StringRef)p0))
      };
      break;
    }
    case currefl::at_ith: {
      ASSERT_TRAIT_IS_REFLPROP(at_ith)
      SET_PRIM_TYPE(const char *)
      SET_CALLBACK(Str) {
        LOAD_VAL_X(Str)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Str, X->at_ith(p0))
      };
      break;
    }
    case currefl::dealloc: {
      ASSERT_TRAIT_IS_REFLPROP(dealloc)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        ASSERT_NO_MORE  VOID_REFLECTION(X->dealloc())
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_reflcontainers__IntIntPair: {
# define CLASSNAME (reflcontainers::IntIntPair)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_NEVERPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::reflcontainers__IntIntPair;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS(first, Result, X->first)
    case_REFLPROP_0ARGS(second, Result, X->second)
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_reflcontainers__IntStrPair: {
# define CLASSNAME (reflcontainers::IntStrPair)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_NEVERPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::reflcontainers__IntStrPair;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS(first, Result, X->first)
    case_REFLPROP_0ARGS(second, Str, X->second)
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_reflcontainers__StrIntPair: {
# define CLASSNAME (reflcontainers::StrIntPair)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_NEVERPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::reflcontainers__StrIntPair;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS(first, Str, X->first)
    case_REFLPROP_0ARGS(second, Result, X->second)
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_reflcontainers__StrStrPair: {
# define CLASSNAME (reflcontainers::StrStrPair)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_NEVERPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::reflcontainers__StrStrPair;
  switch( (currefl::memnames)MemNum ) {
    case_REFLPROP_0ARGS(first, Str, X->first)
    case_REFLPROP_0ARGS(second, Str, X->second)
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_reflcontainers__MapIntStr: {
# define CLASSNAME (reflcontainers::MapIntStr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::reflcontainers__MapIntStr;
  switch( (currefl::memnames)MemNum ) {
    case currefl::_this_: {
      switch (TraitKind) {
        case RTK_range_nth:
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE
            BUILD_REFLECTION_CALL_RANGE_NTH(Type, *X)
          };
          break;
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE
            BUILD_REFLECTION_CALL_RANGE_SIZE(*X)
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << "_this_"
                 << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case_REFLPROP_0ARGS( clone, Result, X->clone() )
    case_REFLPROP_0ARGS( size, Result, X->size() )
    case_REFLPROP_0ARGS( empty, Result, X->empty() )
    case currefl::clear: {
      ASSERT_TRAIT_IS_REFLPROP(clear)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        ASSERT_NO_MORE  VOID_REFLECTION(X->clear())
      };
      break;
    }
    case currefl::at_ith: {
      ASSERT_TRAIT_IS_REFLPROP(at_ith)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->at_ith(p0))
      };
      break;
    }
    case currefl::at_ith_key: {
      ASSERT_TRAIT_IS_REFLPROP(at_ith_key)
      SET_PRIM_TYPE(long)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->at_ith_key(p0))
      };
      break;
    }
    case currefl::at_ith_val: {
      ASSERT_TRAIT_IS_REFLPROP(at_ith_val)
      SET_PRIM_TYPE(const char *)
      SET_CALLBACK(Str) {
        LOAD_VAL_X(Str)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Str, X->at_ith_val(p0))
      };
      break;
    }
    case currefl::dealloc: {
      ASSERT_TRAIT_IS_REFLPROP(dealloc)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        ASSERT_NO_MORE  VOID_REFLECTION(X->dealloc())
      };
      break;
    }
    case currefl::contains: {
      ASSERT_TRAIT_IS_REFLPROP(contains)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((long), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->contains(p0))
      };
      break;
    }
    case currefl::at: {
      ASSERT_TRAIT_IS_REFLPROP(at)
      SET_PRIM_TYPE(const char *)
      SET_CALLBACK(Str) {
        LOAD_VAL_X(Str)
        LOAD_VAL((long), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Str, X->at(p0))
      };
      break;
    }
    case currefl::assign: {
      ASSERT_TRAIT_IS_REFLPROP(assign)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((long), p0)
        LOAD_VAL((const char *), p1)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->assign((long)p0, (class llvm::StringRef)p1))
      };
      break;
    }
    case currefl::erase: {
      ASSERT_TRAIT_IS_REFLPROP(erase)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((long), p0)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->erase((long)p0))
      };
      break;
    }
    case currefl::erase1: {
      ASSERT_TRAIT_IS_REFLPROP(erase1)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((void *), p0)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->erase((void *)p0))
      };
      break;
    }
    case currefl::contains1: {
      ASSERT_TRAIT_IS_REFLPROP(contains1)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((void *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->contains(p0))
      };
      break;
    }
    case currefl::at1: {
      ASSERT_TRAIT_IS_REFLPROP(at1)
      SET_PRIM_TYPE(const char *)
      SET_CALLBACK(Str) {
        LOAD_VAL_X(Str)
        LOAD_VAL((void *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Str, X->at(p0))
      };
      break;
    }
    case currefl::assign1: {
      ASSERT_TRAIT_IS_REFLPROP(assign1)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((void *), p0)
        LOAD_VAL((const char *), p1)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->assign((void *)p0, (reflcontainers::MapIntStr::val_t)p1))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_reflcontainers__MapStrInt: {
# define CLASSNAME (reflcontainers::MapStrInt)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::reflcontainers__MapStrInt;
  switch( (currefl::memnames)MemNum ) {
    case currefl::_this_: {
      switch (TraitKind) {
        case RTK_range_nth:
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE
            BUILD_REFLECTION_CALL_RANGE_NTH(Type, *X)
          };
          break;
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE
            BUILD_REFLECTION_CALL_RANGE_SIZE(*X)
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << "_this_"
                 << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case_REFLPROP_0ARGS( clone, Result, X->clone() )
    case_REFLPROP_0ARGS( size, Result, X->size() )
    case_REFLPROP_0ARGS( empty, Result, X->empty() )
    case currefl::clear: {
      ASSERT_TRAIT_IS_REFLPROP(clear)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        ASSERT_NO_MORE  VOID_REFLECTION(X->clear())
      };
      break;
    }
    case currefl::at_ith: {
      ASSERT_TRAIT_IS_REFLPROP(at_ith)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->at_ith(p0))
      };
      break;
    }
    case currefl::at_ith_key: {
      ASSERT_TRAIT_IS_REFLPROP(at_ith_key)
      SET_PRIM_TYPE(const char *)
      SET_CALLBACK(Str) {
        LOAD_VAL_X(Str)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Str, X->at_ith_key(p0))
      };
      break;
    }
    case currefl::at_ith_val: {
      ASSERT_TRAIT_IS_REFLPROP(at_ith_val)
      SET_PRIM_TYPE(long)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->at_ith_val(p0))
      };
      break;
    }
    case currefl::dealloc: {
      ASSERT_TRAIT_IS_REFLPROP(dealloc)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        ASSERT_NO_MORE  VOID_REFLECTION(X->dealloc())
      };
      break;
    }
    case currefl::contains: {
      ASSERT_TRAIT_IS_REFLPROP(contains)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const char *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->contains(p0))
      };
      break;
    }
    case currefl::at: {
      ASSERT_TRAIT_IS_REFLPROP(at)
      SET_PRIM_TYPE(long)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const char *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->at(p0))
      };
      break;
    }
    case currefl::assign: {
      ASSERT_TRAIT_IS_REFLPROP(assign)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const char *), p0)
        LOAD_VAL((long), p1)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->assign((class llvm::StringRef)p0, (long)p1))
      };
      break;
    }
    case currefl::erase: {
      ASSERT_TRAIT_IS_REFLPROP(erase)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const char *), p0)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->erase((class llvm::StringRef)p0))
      };
      break;
    }
    case currefl::assign1: {
      ASSERT_TRAIT_IS_REFLPROP(assign1)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const char *), p0)
        LOAD_VAL((void *), p1)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->assign((reflcontainers::MapStrInt::key_t)p0, (void *)p1))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_reflcontainers__MapStrStr: {
# define CLASSNAME (reflcontainers::MapStrStr)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::reflcontainers__MapStrStr;
  switch( (currefl::memnames)MemNum ) {
    case currefl::_this_: {
      switch (TraitKind) {
        case RTK_range_nth:
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE
            BUILD_REFLECTION_CALL_RANGE_NTH(Type, *X)
          };
          break;
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE
            BUILD_REFLECTION_CALL_RANGE_SIZE(*X)
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << "_this_"
                 << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case_REFLPROP_0ARGS( clone, Result, X->clone() )
    case_REFLPROP_0ARGS( size, Result, X->size() )
    case_REFLPROP_0ARGS( empty, Result, X->empty() )
    case currefl::clear: {
      ASSERT_TRAIT_IS_REFLPROP(clear)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        ASSERT_NO_MORE  VOID_REFLECTION(X->clear())
      };
      break;
    }
    case currefl::at_ith: {
      ASSERT_TRAIT_IS_REFLPROP(at_ith)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->at_ith(p0))
      };
      break;
    }
    case currefl::at_ith_key: {
      ASSERT_TRAIT_IS_REFLPROP(at_ith_key)
      SET_PRIM_TYPE(const char *)
      SET_CALLBACK(Str) {
        LOAD_VAL_X(Str)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Str, X->at_ith_key(p0))
      };
      break;
    }
    case currefl::at_ith_val: {
      ASSERT_TRAIT_IS_REFLPROP(at_ith_val)
      SET_PRIM_TYPE(const char *)
      SET_CALLBACK(Str) {
        LOAD_VAL_X(Str)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Str, X->at_ith_val(p0))
      };
      break;
    }
    case currefl::dealloc: {
      ASSERT_TRAIT_IS_REFLPROP(dealloc)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        ASSERT_NO_MORE  VOID_REFLECTION(X->dealloc())
      };
      break;
    }
    case currefl::contains: {
      ASSERT_TRAIT_IS_REFLPROP(contains)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const char *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->contains(p0))
      };
      break;
    }
    case currefl::at: {
      ASSERT_TRAIT_IS_REFLPROP(at)
      SET_PRIM_TYPE(const char *)
      SET_CALLBACK(Str) {
        LOAD_VAL_X(Str)
        LOAD_VAL((const char *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Str, X->at(p0))
      };
      break;
    }
    case currefl::assign: {
      ASSERT_TRAIT_IS_REFLPROP(assign)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const char *), p0)
        LOAD_VAL((const char *), p1)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->assign((class llvm::StringRef)p0, (class llvm::StringRef)p1))
      };
      break;
    }
    case currefl::erase: {
      ASSERT_TRAIT_IS_REFLPROP(erase)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((const char *), p0)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->erase((class llvm::StringRef)p0))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

case RK_reflcontainers__MapIntInt: {
# define CLASSNAME (reflcontainers::MapIntInt)
# define LOAD_VAL_X(MP_ResultOrTypeOrStr)  LOADX_ALWAYSPTR(CLASSNAME, MP_ResultOrTypeOrStr)
  if (TraitKind == RTK_cast)
    Diag(KWLoc, diag::err_reflcast_nonpointer);
  namespace currefl = refl::reflcontainers__MapIntInt;
  switch( (currefl::memnames)MemNum ) {
    case currefl::_this_: {
      switch (TraitKind) {
        case RTK_range_nth:
          SET_CALLBACK(Type) {
            LOAD_VAL_X(Type)
            LOAD_VAL((std::size_t), N)
            ASSERT_NO_MORE
            BUILD_REFLECTION_CALL_RANGE_NTH(Type, *X)
          };
          break;
        case RTK_range_size:
          SET_PRIM_TYPE(std::size_t)
          SET_CALLBACK(Result) {
            LOAD_VAL_X(Result)
            ASSERT_NO_MORE
            BUILD_REFLECTION_CALL_RANGE_SIZE(*X)
          };
          break;
        default:
          Diag(KWLoc, diag::err_refl_not_supported)
                 << "_this_"
                 << to_string(TraitKind);
          return ExprError();
      }
      break;
    }
    case_REFLPROP_0ARGS( clone, Result, X->clone() )
    case_REFLPROP_0ARGS( size, Result, X->size() )
    case_REFLPROP_0ARGS( empty, Result, X->empty() )
    case currefl::clear: {
      ASSERT_TRAIT_IS_REFLPROP(clear)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        ASSERT_NO_MORE  VOID_REFLECTION(X->clear())
      };
      break;
    }
    case currefl::at_ith: {
      ASSERT_TRAIT_IS_REFLPROP(at_ith)
      SET_CALLBACK(Type) {
        LOAD_VAL_X(Type)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Type, X->at_ith(p0))
      };
      break;
    }
    case currefl::at_ith_key: {
      ASSERT_TRAIT_IS_REFLPROP(at_ith_key)
      SET_PRIM_TYPE(long)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->at_ith_key(p0))
      };
      break;
    }
    case currefl::at_ith_val: {
      ASSERT_TRAIT_IS_REFLPROP(at_ith_val)
      SET_PRIM_TYPE(long)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((unsigned int), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->at_ith_val(p0))
      };
      break;
    }
    case currefl::dealloc: {
      ASSERT_TRAIT_IS_REFLPROP(dealloc)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        ASSERT_NO_MORE  VOID_REFLECTION(X->dealloc())
      };
      break;
    }
    case currefl::contains: {
      ASSERT_TRAIT_IS_REFLPROP(contains)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((long), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->contains(p0))
      };
      break;
    }
    case currefl::at: {
      ASSERT_TRAIT_IS_REFLPROP(at)
      SET_PRIM_TYPE(long)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((long), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->at(p0))
      };
      break;
    }
    case currefl::assign: {
      ASSERT_TRAIT_IS_REFLPROP(assign)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((long), p0)
        LOAD_VAL((long), p1)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->assign((long)p0, (long)p1))
      };
      break;
    }
    case currefl::erase: {
      ASSERT_TRAIT_IS_REFLPROP(erase)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((long), p0)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->erase((long)p0))
      };
      break;
    }
    case currefl::erase1: {
      ASSERT_TRAIT_IS_REFLPROP(erase1)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((void *), p0)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->erase((void *)p0))
      };
      break;
    }
    case currefl::contains1: {
      ASSERT_TRAIT_IS_REFLPROP(contains1)
      SET_PRIM_TYPE(bool)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((void *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->contains(p0))
      };
      break;
    }
    case currefl::at1: {
      ASSERT_TRAIT_IS_REFLPROP(at1)
      SET_PRIM_TYPE(long)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((void *), p0)
        ASSERT_NO_MORE
        BUILD_REFLECTION_CALL_NORMAL(Result, X->at(p0))
      };
      break;
    }
    case currefl::assign1: {
      ASSERT_TRAIT_IS_REFLPROP(assign1)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((void *), p0)
        LOAD_VAL((long), p1)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->assign((void *)p0, (reflcontainers::MapIntInt::val_t)p1))
      };
      break;
    }
    case currefl::assign2: {
      ASSERT_TRAIT_IS_REFLPROP(assign2)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((long), p0)
        LOAD_VAL((void *), p1)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->assign((reflcontainers::MapIntInt::key_t)p0, (void *)p1))
      };
      break;
    }
    case currefl::assign3: {
      ASSERT_TRAIT_IS_REFLPROP(assign3)
      SET_PRIM_TYPE(void)
      SET_CALLBACK(Result) {
        LOAD_VAL_X(Result)
        LOAD_VAL((void *), p0)
        LOAD_VAL((void *), p1)
        ASSERT_NO_MORE
        VOID_REFLECTION(X->assign((void *)p0, (void *)p1))
      };
      break;
    }
  }
# undef CLASSNAME
# undef LOAD_VAL_X
  break;
}

