case reflenums::RK_llvm__APInt:
  switch (static_cast<reflenums::llvm__APInt::memnames>(MemNum)) {
    case reflenums::llvm__APInt:::
      return toClientReflType<>(C);
    case reflenums::llvm__APInt:::
      return toClientReflType<>(C);
    case reflenums::llvm__APInt:::
      return toClientReflType<>(C);
    case reflenums::llvm__APInt:::
      return toClientReflType<>(C);
    case reflenums::llvm__APInt:::
      return toClientReflType<>(C);
    case reflenums::llvm__APInt:::
      return toClientReflType<>(C);
    case reflenums::llvm__APInt:::
      return toClientReflType<>(C);
    case reflenums::llvm__APInt:::
      return toClientReflType<>(C);
    case reflenums::llvm__APInt:::
      return toClientReflType<>(C);
    case reflenums::llvm__APInt:::
      return toClientReflType<>(C);
    case reflenums::llvm__APInt:::
      return toClientReflType<>(C);
    case reflenums::llvm__APInt:::
      return toClientReflType<>(C);
    case reflenums::llvm__APInt:::
      return toClientReflType<>(C);
    case reflenums::llvm__APInt:::
      return toClientReflType<>(C);
    case reflenums::llvm__APInt:::
      return toClientReflType<>(C);
    case reflenums::llvm__APInt:::
      return toClientReflType<>(C);
    case reflenums::llvm__APInt:::
      return toClientReflType<>(C);
    case reflenums::llvm__APInt:::
      return toClientReflType<>(C);
    case reflenums::llvm__APInt:::
      return toClientReflType<>(C);
    case reflenums::llvm__APInt:::
      return toClientReflType<>(C);
    case reflenums::llvm__APInt:::
      return toClientReflType<>(C);
    case reflenums::llvm__APInt:::
      return toClientReflType<>(C);
    case reflenums::llvm__APInt:::
      return toClientReflType<>(C);
    case reflenums::llvm__APInt:::
      return toClientReflType<>(C);
    case reflenums::llvm__APInt:::
      return toClientReflType<>(C);
    case reflenums::llvm__APInt:::
      return toClientReflType<>(C);
    case reflenums::llvm__APInt:::
      return toClientReflType<>(C);
    case reflenums::llvm__APInt:::
      return toClientReflType<>(C);
    case reflenums::llvm__APInt:::
      return toClientReflType<>(C);
    case reflenums::llvm__APInt:::
      return toClientReflType<>(C);
    case reflenums::llvm__APInt:::
      return toClientReflType<>(C);
    case reflenums::llvm__APInt:::
      return toClientReflType<>(C);
    case reflenums::llvm__APInt:::
      return toClientReflType<>(C);
    case reflenums::llvm__APInt:::
      return toClientReflType<>(C);
    case reflenums::llvm__APInt:::
      return toClientReflType<>(C);
    case reflenums::llvm__APInt:::
      return toClientReflType<>(C);
    case reflenums::llvm__APInt:::
      return toClientReflType<>(C);
    case reflenums::llvm__APInt:::
      return toClientReflType<>(C);
    case reflenums::llvm__APInt:::
      return toClientReflType<>(C);
    case reflenums::llvm__APInt:::
      return toClientReflType<>(C);
    case reflenums::llvm__APInt:::
      return toClientReflType<>(C);
    case reflenums::llvm__APInt:::
      return toClientReflType<>(C);
    case reflenums::llvm__APInt:::
      return toClientReflType<>(C);
    case reflenums::llvm__APInt:::
      return toClientReflType<>(C);
    case reflenums::llvm__APInt:::
      return toClientReflType<>(C);
    case reflenums::llvm__APInt:::
      return toClientReflType<>(C);
    case reflenums::llvm__APInt:::
      return toClientReflType<>(C);
    case reflenums::llvm__APInt:::
      return toClientReflType<>(C);
    case reflenums::llvm__APInt:::
      return toClientReflType<>(C);
    case reflenums::llvm__APInt:::
      return toClientReflType<>(C);
    case reflenums::llvm__APInt:::
      return toClientReflType<>(C);
    case reflenums::llvm__APInt:::
      return toClientReflType<>(C);
    case reflenums::llvm__APInt:::
      return toClientReflType<>(C);
    case reflenums::llvm__APInt::needsCleanup:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::Profile:
      return toClientReflType<void>(C);
    case reflenums::llvm__APInt::isNegative:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::isNonNegative:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::isSignBitSet:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::isSignBitClear:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::isStrictlyPositive:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::isAllOnesValue:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::isNullValue:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::isOneValue:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::isMaxValue:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::isMaxSignedValue:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::isMinValue:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::isMinSignedValue:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::isIntN:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::isSignedIntN:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::isPowerOf2:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::isSignMask:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::getBoolValue:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::getLimitedValue:
      return toClientReflType<unsigned long long>(C);
    case reflenums::llvm__APInt::isSplat:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::isMask:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::isMask1:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::isShiftedMask:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::isShiftedMask:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::isShiftedMask:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::isShiftedMask:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::isShiftedMask:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::isShiftedMask:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::isShiftedMask:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::isShiftedMask:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::isShiftedMask:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::isShiftedMask:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::isShiftedMask:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::isShiftedMask:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::isShiftedMask:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::isShiftedMask:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::isShiftedMask:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::isShiftedMask:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::isSameValue:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::isSameValue:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::getRawData:
      return toClientReflType<const unsigned long long *>(C);
    case reflenums::llvm__APInt::getRawData:
      return toClientReflType<const unsigned long long *>(C);
    case reflenums::llvm__APInt::getRawData:
      return toClientReflType<const unsigned long long *>(C);
    case reflenums::llvm__APInt::getRawData:
      return toClientReflType<const unsigned long long *>(C);
    case reflenums::llvm__APInt::getRawData:
      return toClientReflType<const unsigned long long *>(C);
    case reflenums::llvm__APInt::operator_not:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::operator_not:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::operator_not:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::operator_not:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::operator_not:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::operator_not:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::operator_not:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::operator_not:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::operator_not:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::operator_not:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::operator_not:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::operator_not:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::operator_not:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::operator_not:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::operator_not:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::operator_not:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::operator_not:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::operator_not:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::operator_not:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::operator_not:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::operator_not:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::operator_not:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::operator_not:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::operator_not:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::operator_not:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::operator_not:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::operator_not:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::operator_not:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::operator_not:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::operator_not:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::operator_not:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::operator_not:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::operator_not:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::operator_not:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::operator_not:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::operator_not:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::operator_not:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::operator_not:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::operator_not:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::operator_not:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::urem:
      return toClientReflType<unsigned long long>(C);
    case reflenums::llvm__APInt::urem:
      return toClientReflType<unsigned long long>(C);
    case reflenums::llvm__APInt::srem:
      return toClientReflType<long long>(C);
    case reflenums::llvm__APInt::udivrem:
      return toClientReflType<void>(C);
    case reflenums::llvm__APInt::udivrem:
      return toClientReflType<void>(C);
    case reflenums::llvm__APInt::sdivrem:
      return toClientReflType<void>(C);
    case reflenums::llvm__APInt::sdivrem:
      return toClientReflType<void>(C);
    case reflenums::llvm__APInt::sdivrem:
      return toClientReflType<void>(C);
    case reflenums::llvm__APInt::sdivrem:
      return toClientReflType<void>(C);
    case reflenums::llvm__APInt::sdivrem:
      return toClientReflType<void>(C);
    case reflenums::llvm__APInt::sdivrem:
      return toClientReflType<void>(C);
    case reflenums::llvm__APInt::sdivrem:
      return toClientReflType<void>(C);
    case reflenums::llvm__APInt::sdivrem:
      return toClientReflType<void>(C);
    case reflenums::llvm__APInt::sdivrem:
      return toClientReflType<void>(C);
    case reflenums::llvm__APInt::sdivrem:
      return toClientReflType<void>(C);
    case reflenums::llvm__APInt::sdivrem:
      return toClientReflType<void>(C);
    case reflenums::llvm__APInt::operator_sub:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::operator_eq_eq:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::operator_eq_eq1:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::eq:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::operator_not_eq:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::operator_not_eq1:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::ne:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::ult:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::ult1:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::slt:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::slt1:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::ule:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::ule1:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::sle:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::sle1:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::ugt:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::ugt1:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::sgt:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::sgt1:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::uge:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::uge1:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::sge:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::sge1:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::intersects:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::isSubsetOf:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::isSubsetOf:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::isSubsetOf:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::isSubsetOf:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::isSubsetOf:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::isSubsetOf:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::isSubsetOf:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::isSubsetOf:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::isSubsetOf:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::isSubsetOf:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::isSubsetOf:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::isSubsetOf:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::isSubsetOf:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::isSubsetOf:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::isSubsetOf:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::isSubsetOf:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::isSubsetOf:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::isSubsetOf:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::isSubsetOf:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::isSubsetOf:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::isSubsetOf:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::isSubsetOf:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::isSubsetOf:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::getBitWidth:
      return toClientReflType<unsigned int>(C);
    case reflenums::llvm__APInt::getNumWords:
      return toClientReflType<unsigned int>(C);
    case reflenums::llvm__APInt::getNumWords1:
      return toClientReflType<unsigned int>(C);
    case reflenums::llvm__APInt::getActiveBits:
      return toClientReflType<unsigned int>(C);
    case reflenums::llvm__APInt::getActiveWords:
      return toClientReflType<unsigned int>(C);
    case reflenums::llvm__APInt::getMinSignedBits:
      return toClientReflType<unsigned int>(C);
    case reflenums::llvm__APInt::getZExtValue:
      return toClientReflType<unsigned long long>(C);
    case reflenums::llvm__APInt::getSExtValue:
      return toClientReflType<long long>(C);
    case reflenums::llvm__APInt::getBitsNeeded:
      return toClientReflType<unsigned int>(C);
    case reflenums::llvm__APInt::countLeadingZeros:
      return toClientReflType<unsigned int>(C);
    case reflenums::llvm__APInt::countLeadingOnes:
      return toClientReflType<unsigned int>(C);
    case reflenums::llvm__APInt::getNumSignBits:
      return toClientReflType<unsigned int>(C);
    case reflenums::llvm__APInt::countTrailingZeros:
      return toClientReflType<unsigned int>(C);
    case reflenums::llvm__APInt::countTrailingOnes:
      return toClientReflType<unsigned int>(C);
    case reflenums::llvm__APInt::countPopulation:
      return toClientReflType<unsigned int>(C);
    case reflenums::llvm__APInt::print:
      return toClientReflType<void>(C);
    case reflenums::llvm__APInt::print:
      return toClientReflType<void>(C);
    case reflenums::llvm__APInt::print:
      return toClientReflType<void>(C);
    case reflenums::llvm__APInt::print:
      return toClientReflType<void>(C);
    case reflenums::llvm__APInt::toString:
      return toClientReflType<const char *>(C);
    case reflenums::llvm__APInt::toString:
      return toClientReflType<const char *>(C);
    case reflenums::llvm__APInt::toString:
      return toClientReflType<const char *>(C);
    case reflenums::llvm__APInt::roundToDouble:
      return toClientReflType<double>(C);
    case reflenums::llvm__APInt::roundToDouble1:
      return toClientReflType<double>(C);
    case reflenums::llvm__APInt::signedRoundToDouble:
      return toClientReflType<double>(C);
    case reflenums::llvm__APInt::bitsToDouble:
      return toClientReflType<double>(C);
    case reflenums::llvm__APInt::bitsToFloat:
      return toClientReflType<float>(C);
    case reflenums::llvm__APInt::bitsToFloat:
      return toClientReflType<float>(C);
    case reflenums::llvm__APInt::bitsToFloat:
      return toClientReflType<float>(C);
    case reflenums::llvm__APInt::logBase2:
      return toClientReflType<unsigned int>(C);
    case reflenums::llvm__APInt::ceilLogBase2:
      return toClientReflType<unsigned int>(C);
    case reflenums::llvm__APInt::nearestLogBase2:
      return toClientReflType<unsigned int>(C);
    case reflenums::llvm__APInt::exactLogBase2:
      return toClientReflType<int>(C);
    case reflenums::llvm__APInt::exactLogBase2:
      return toClientReflType<int>(C);
    case reflenums::llvm__APInt::exactLogBase2:
      return toClientReflType<int>(C);
    case reflenums::llvm__APInt::exactLogBase2:
      return toClientReflType<int>(C);
    case reflenums::llvm__APInt::exactLogBase2:
      return toClientReflType<int>(C);
    case reflenums::llvm__APInt::magic:
      return toClientReflType<struct llvm::APInt::ms>(C);
    case reflenums::llvm__APInt::magic:
      return toClientReflType<struct llvm::APInt::ms>(C);
    case reflenums::llvm__APInt::magicu:
      return toClientReflType<struct llvm::APInt::mu>(C);
    case reflenums::llvm__APInt::tcSet:
      return toClientReflType<void>(C);
    case reflenums::llvm__APInt::tcAssign:
      return toClientReflType<void>(C);
    case reflenums::llvm__APInt::tcIsZero:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt::tcExtractBit:
      return toClientReflType<int>(C);
    case reflenums::llvm__APInt::tcExtract:
      return toClientReflType<void>(C);
    case reflenums::llvm__APInt::tcSetBit:
      return toClientReflType<void>(C);
    case reflenums::llvm__APInt::tcClearBit:
      return toClientReflType<void>(C);
    case reflenums::llvm__APInt::tcLSB:
      return toClientReflType<unsigned int>(C);
    case reflenums::llvm__APInt::tcMSB:
      return toClientReflType<unsigned int>(C);
    case reflenums::llvm__APInt::tcNegate:
      return toClientReflType<void>(C);
    case reflenums::llvm__APInt::tcAdd:
      return toClientReflType<unsigned long long>(C);
    case reflenums::llvm__APInt::tcAddPart:
      return toClientReflType<unsigned long long>(C);
    case reflenums::llvm__APInt::tcSubtract:
      return toClientReflType<unsigned long long>(C);
    case reflenums::llvm__APInt::tcSubtractPart:
      return toClientReflType<unsigned long long>(C);
    case reflenums::llvm__APInt::tcMultiplyPart:
      return toClientReflType<int>(C);
    case reflenums::llvm__APInt::tcMultiply:
      return toClientReflType<int>(C);
    case reflenums::llvm__APInt::tcFullMultiply:
      return toClientReflType<void>(C);
    case reflenums::llvm__APInt::tcDivide:
      return toClientReflType<int>(C);
    case reflenums::llvm__APInt::tcShiftLeft:
      return toClientReflType<void>(C);
    case reflenums::llvm__APInt::tcShiftRight:
      return toClientReflType<void>(C);
    case reflenums::llvm__APInt::tcAnd:
      return toClientReflType<void>(C);
    case reflenums::llvm__APInt::tcOr:
      return toClientReflType<void>(C);
    case reflenums::llvm__APInt::tcXor:
      return toClientReflType<void>(C);
    case reflenums::llvm__APInt::tcComplement:
      return toClientReflType<void>(C);
    case reflenums::llvm__APInt::tcCompare:
      return toClientReflType<int>(C);
    case reflenums::llvm__APInt::tcIncrement:
      return toClientReflType<unsigned long long>(C);
    case reflenums::llvm__APInt::tcDecrement:
      return toClientReflType<unsigned long long>(C);
    case reflenums::llvm__APInt::tcSetLeastSignificantBits:
      return toClientReflType<void>(C);
    case reflenums::llvm__APInt::dump:
      return toClientReflType<void>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_llvm__APInt__ms:
  switch (static_cast<reflenums::llvm__APInt__ms::memnames>(MemNum)) {
    case reflenums::llvm__APInt__ms:::
      return toClientReflType<>(C);
    case reflenums::llvm__APInt__ms:::
      return toClientReflType<>(C);
    case reflenums::llvm__APInt__ms::s:
      return toClientReflType<unsigned int>(C);
    case reflenums::llvm__APInt__ms::s:
      return toClientReflType<unsigned int>(C);
    case reflenums::llvm__APInt__ms::s:
      return toClientReflType<unsigned int>(C);
    case reflenums::llvm__APInt__ms::s:
      return toClientReflType<unsigned int>(C);
    case reflenums::llvm__APInt__ms::s:
      return toClientReflType<unsigned int>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_llvm__APInt__mu:
  switch (static_cast<reflenums::llvm__APInt__mu::memnames>(MemNum)) {
    case reflenums::llvm__APInt__mu:::
      return toClientReflType<>(C);
    case reflenums::llvm__APInt__mu:::
      return toClientReflType<>(C);
    case reflenums::llvm__APInt__mu::a:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APInt__mu::s:
      return toClientReflType<unsigned int>(C);
    case reflenums::llvm__APInt__mu::s:
      return toClientReflType<unsigned int>(C);
    case reflenums::llvm__APInt__mu::s:
      return toClientReflType<unsigned int>(C);
    case reflenums::llvm__APInt__mu::s:
      return toClientReflType<unsigned int>(C);
    case reflenums::llvm__APInt__mu::s:
      return toClientReflType<unsigned int>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_llvm__APFloatBase:
  switch (static_cast<reflenums::llvm__APFloatBase::memnames>(MemNum)) {
    case reflenums::llvm__APFloatBase:::
      return toClientReflType<>(C);
    case reflenums::llvm__APFloatBase:::
      return toClientReflType<>(C);
    case reflenums::llvm__APFloatBase:::
      return toClientReflType<>(C);
    case reflenums::llvm__APFloatBase:::
      return toClientReflType<>(C);
    case reflenums::llvm__APFloatBase:::
      return toClientReflType<>(C);
    case reflenums::llvm__APFloatBase:::
      return toClientReflType<>(C);
    case reflenums::llvm__APFloatBase:::
      return toClientReflType<>(C);
    case reflenums::llvm__APFloatBase:::
      return toClientReflType<>(C);
    case reflenums::llvm__APFloatBase:::
      return toClientReflType<>(C);
    case reflenums::llvm__APFloatBase:::
      return toClientReflType<>(C);
    case reflenums::llvm__APFloatBase:::
      return toClientReflType<>(C);
    case reflenums::llvm__APFloatBase:::
      return toClientReflType<>(C);
    case reflenums::llvm__APFloatBase:::
      return toClientReflType<>(C);
    case reflenums::llvm__APFloatBase:::
      return toClientReflType<>(C);
    case reflenums::llvm__APFloatBase:::
      return toClientReflType<>(C);
    case reflenums::llvm__APFloatBase:::
      return toClientReflType<>(C);
    case reflenums::llvm__APFloatBase:::
      return toClientReflType<>(C);
    case reflenums::llvm__APFloatBase:::
      return toClientReflType<>(C);
    case reflenums::llvm__APFloatBase:::
      return toClientReflType<>(C);
    case reflenums::llvm__APFloatBase:::
      return toClientReflType<>(C);
    case reflenums::llvm__APFloatBase:::
      return toClientReflType<>(C);
    case reflenums::llvm__APFloatBase:::
      return toClientReflType<>(C);
    case reflenums::llvm__APFloatBase:::
      return toClientReflType<>(C);
    case reflenums::llvm__APFloatBase:::
      return toClientReflType<>(C);
    case reflenums::llvm__APFloatBase:::
      return toClientReflType<>(C);
    case reflenums::llvm__APFloatBase:::
      return toClientReflType<>(C);
    case reflenums::llvm__APFloatBase:::
      return toClientReflType<>(C);
    case reflenums::llvm__APFloatBase:::
      return toClientReflType<>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_llvm__APFloat:
  switch (static_cast<reflenums::llvm__APFloat::memnames>(MemNum)) {
    case reflenums::llvm__APFloat:::
      return toClientReflType<>(C);
    case reflenums::llvm__APFloat:::
      return toClientReflType<>(C);
    case reflenums::llvm__APFloat:::
      return toClientReflType<>(C);
    case reflenums::llvm__APFloat:::
      return toClientReflType<>(C);
    case reflenums::llvm__APFloat:::
      return toClientReflType<>(C);
    case reflenums::llvm__APFloat:::
      return toClientReflType<>(C);
    case reflenums::llvm__APFloat:::
      return toClientReflType<>(C);
    case reflenums::llvm__APFloat:::
      return toClientReflType<>(C);
    case reflenums::llvm__APFloat:::
      return toClientReflType<>(C);
    case reflenums::llvm__APFloat:::
      return toClientReflType<>(C);
    case reflenums::llvm__APFloat:::
      return toClientReflType<>(C);
    case reflenums::llvm__APFloat:::
      return toClientReflType<>(C);
    case reflenums::llvm__APFloat:::
      return toClientReflType<>(C);
    case reflenums::llvm__APFloat:::
      return toClientReflType<>(C);
    case reflenums::llvm__APFloat:::
      return toClientReflType<>(C);
    case reflenums::llvm__APFloat:::
      return toClientReflType<>(C);
    case reflenums::llvm__APFloat:::
      return toClientReflType<>(C);
    case reflenums::llvm__APFloat:::
      return toClientReflType<>(C);
    case reflenums::llvm__APFloat:::
      return toClientReflType<>(C);
    case reflenums::llvm__APFloat:::
      return toClientReflType<>(C);
    case reflenums::llvm__APFloat:::
      return toClientReflType<>(C);
    case reflenums::llvm__APFloat:::
      return toClientReflType<>(C);
    case reflenums::llvm__APFloat:::
      return toClientReflType<>(C);
    case reflenums::llvm__APFloat:::
      return toClientReflType<>(C);
    case reflenums::llvm__APFloat:::
      return toClientReflType<>(C);
    case reflenums::llvm__APFloat:::
      return toClientReflType<>(C);
    case reflenums::llvm__APFloat:::
      return toClientReflType<>(C);
    case reflenums::llvm__APFloat:::
      return toClientReflType<>(C);
    case reflenums::llvm__APFloat:::
      return toClientReflType<>(C);
    case reflenums::llvm__APFloat:::
      return toClientReflType<>(C);
    case reflenums::llvm__APFloat::needsCleanup:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APFloat::needsCleanup:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APFloat::needsCleanup:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APFloat::needsCleanup:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APFloat::needsCleanup:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APFloat::needsCleanup:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APFloat::needsCleanup:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APFloat::needsCleanup:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APFloat::needsCleanup:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APFloat::needsCleanup:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APFloat::Profile:
      return toClientReflType<void>(C);
    case reflenums::llvm__APFloat::Profile:
      return toClientReflType<void>(C);
    case reflenums::llvm__APFloat::Profile:
      return toClientReflType<void>(C);
    case reflenums::llvm__APFloat::Profile:
      return toClientReflType<void>(C);
    case reflenums::llvm__APFloat::Profile:
      return toClientReflType<void>(C);
    case reflenums::llvm__APFloat::Profile:
      return toClientReflType<void>(C);
    case reflenums::llvm__APFloat::Profile:
      return toClientReflType<void>(C);
    case reflenums::llvm__APFloat::Profile:
      return toClientReflType<void>(C);
    case reflenums::llvm__APFloat::Profile:
      return toClientReflType<void>(C);
    case reflenums::llvm__APFloat::Profile:
      return toClientReflType<void>(C);
    case reflenums::llvm__APFloat::Profile:
      return toClientReflType<void>(C);
    case reflenums::llvm__APFloat::Profile:
      return toClientReflType<void>(C);
    case reflenums::llvm__APFloat::Profile:
      return toClientReflType<void>(C);
    case reflenums::llvm__APFloat::Profile:
      return toClientReflType<void>(C);
    case reflenums::llvm__APFloat::Profile:
      return toClientReflType<void>(C);
    case reflenums::llvm__APFloat::Profile:
      return toClientReflType<void>(C);
    case reflenums::llvm__APFloat::Profile:
      return toClientReflType<void>(C);
    case reflenums::llvm__APFloat::Profile:
      return toClientReflType<void>(C);
    case reflenums::llvm__APFloat::Profile:
      return toClientReflType<void>(C);
    case reflenums::llvm__APFloat::Profile:
      return toClientReflType<void>(C);
    case reflenums::llvm__APFloat::convertToInteger:
      return toClientReflType<enum llvm::APFloatBase::opStatus>(C);
    case reflenums::llvm__APFloat::convertToInteger:
      return toClientReflType<enum llvm::APFloatBase::opStatus>(C);
    case reflenums::llvm__APFloat::convertToInteger:
      return toClientReflType<enum llvm::APFloatBase::opStatus>(C);
    case reflenums::llvm__APFloat::convertToInteger:
      return toClientReflType<enum llvm::APFloatBase::opStatus>(C);
    case reflenums::llvm__APFloat::convertToInteger:
      return toClientReflType<enum llvm::APFloatBase::opStatus>(C);
    case reflenums::llvm__APFloat::convertToInteger:
      return toClientReflType<enum llvm::APFloatBase::opStatus>(C);
    case reflenums::llvm__APFloat::convertToDouble:
      return toClientReflType<double>(C);
    case reflenums::llvm__APFloat::convertToFloat:
      return toClientReflType<float>(C);
    case reflenums::llvm__APFloat::convertToFloat:
      return toClientReflType<float>(C);
    case reflenums::llvm__APFloat::compare:
      return toClientReflType<enum llvm::APFloatBase::cmpResult>(C);
    case reflenums::llvm__APFloat::bitwiseIsEqual:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APFloat::isExactlyValue:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APFloat::convertToHexString:
      return toClientReflType<unsigned int>(C);
    case reflenums::llvm__APFloat::isZero:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APFloat::isInfinity:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APFloat::isNaN:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APFloat::isNegative:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APFloat::isDenormal:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APFloat::isSignaling:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APFloat::isNormal:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APFloat::isFinite:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APFloat::getCategory:
      return toClientReflType<enum llvm::APFloatBase::fltCategory>(C);
    case reflenums::llvm__APFloat::getCategory:
      return toClientReflType<enum llvm::APFloatBase::fltCategory>(C);
    case reflenums::llvm__APFloat::isNonZero:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APFloat::isFiniteNonZero:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APFloat::isPosZero:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APFloat::isNegZero:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APFloat::isSmallest:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APFloat::isLargest:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APFloat::isInteger:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APFloat::isInteger:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APFloat::isInteger:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APFloat::isInteger:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APFloat::print:
      return toClientReflType<void>(C);
    case reflenums::llvm__APFloat::dump:
      return toClientReflType<void>(C);
    case reflenums::llvm__APFloat::getExactInverse:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APFloat::getExactInverse:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APFloat::getExactInverse:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APFloat::getExactInverse:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APFloat::getExactInverse:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APFloat::getExactInverse:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APFloat::getExactInverse:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_llvm__APSInt:
  switch (static_cast<reflenums::llvm__APSInt::memnames>(MemNum)) {
    case reflenums::llvm__APSInt:::
      return toClientReflType<>(C);
    case reflenums::llvm__APSInt:::
      return toClientReflType<>(C);
    case reflenums::llvm__APSInt:::
      return toClientReflType<>(C);
    case reflenums::llvm__APSInt:::
      return toClientReflType<>(C);
    case reflenums::llvm__APSInt:::
      return toClientReflType<>(C);
    case reflenums::llvm__APSInt:::
      return toClientReflType<>(C);
    case reflenums::llvm__APSInt:::
      return toClientReflType<>(C);
    case reflenums::llvm__APSInt:::
      return toClientReflType<>(C);
    case reflenums::llvm__APSInt:::
      return toClientReflType<>(C);
    case reflenums::llvm__APSInt::isSigned:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APSInt::isUnsigned:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APSInt::isUnsigned:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APSInt::isUnsigned:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APSInt::isUnsigned:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APSInt::toString:
      return toClientReflType<const char *>(C);
    case reflenums::llvm__APSInt::toString:
      return toClientReflType<const char *>(C);
    case reflenums::llvm__APSInt::toString:
      return toClientReflType<const char *>(C);
    case reflenums::llvm__APSInt::toString:
      return toClientReflType<const char *>(C);
    case reflenums::llvm__APSInt::getExtValue:
      return toClientReflType<long long>(C);
    case reflenums::llvm__APSInt::trunc:
      return toClientReflType<class llvm::APSInt>(C);
    case reflenums::llvm__APSInt::extend:
      return toClientReflType<class llvm::APSInt>(C);
    case reflenums::llvm__APSInt::extOrTrunc:
      return toClientReflType<class llvm::APSInt>(C);
    case reflenums::llvm__APSInt::extOrTrunc:
      return toClientReflType<class llvm::APSInt>(C);
    case reflenums::llvm__APSInt::extOrTrunc:
      return toClientReflType<class llvm::APSInt>(C);
    case reflenums::llvm__APSInt::operator_mod:
      return toClientReflType<class llvm::APSInt>(C);
    case reflenums::llvm__APSInt::operator_div:
      return toClientReflType<class llvm::APSInt>(C);
    case reflenums::llvm__APSInt::operator_gr_gr:
      return toClientReflType<class llvm::APSInt>(C);
    case reflenums::llvm__APSInt::operator_gr_gr:
      return toClientReflType<class llvm::APSInt>(C);
    case reflenums::llvm__APSInt::operator_less:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APSInt::operator_gr:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APSInt::operator_less_eq:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APSInt::operator_gr_eq:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APSInt::operator_eq_eq:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APSInt::operator_not_eq:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APSInt::operator_eq_eq1:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APSInt::operator_not_eq1:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APSInt::operator_less_eq1:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APSInt::operator_gr_eq1:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APSInt::operator_less1:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APSInt::operator_gr1:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APSInt::operator_less_less:
      return toClientReflType<class llvm::APSInt>(C);
    case reflenums::llvm__APSInt::operator_less_less:
      return toClientReflType<class llvm::APSInt>(C);
    case reflenums::llvm__APSInt::operator_less_less:
      return toClientReflType<class llvm::APSInt>(C);
    case reflenums::llvm__APSInt::operator_less_less:
      return toClientReflType<class llvm::APSInt>(C);
    case reflenums::llvm__APSInt::operator_less_less:
      return toClientReflType<class llvm::APSInt>(C);
    case reflenums::llvm__APSInt::operator_less_less:
      return toClientReflType<class llvm::APSInt>(C);
    case reflenums::llvm__APSInt::operator_minus:
      return toClientReflType<class llvm::APSInt>(C);
    case reflenums::llvm__APSInt::operator_minus:
      return toClientReflType<class llvm::APSInt>(C);
    case reflenums::llvm__APSInt::operator_minus:
      return toClientReflType<class llvm::APSInt>(C);
    case reflenums::llvm__APSInt::operator_minus:
      return toClientReflType<class llvm::APSInt>(C);
    case reflenums::llvm__APSInt::operator_minus:
      return toClientReflType<class llvm::APSInt>(C);
    case reflenums::llvm__APSInt::operator_minus:
      return toClientReflType<class llvm::APSInt>(C);
    case reflenums::llvm__APSInt::operator_minus:
      return toClientReflType<class llvm::APSInt>(C);
    case reflenums::llvm__APSInt::operator_and:
      return toClientReflType<class llvm::APSInt>(C);
    case reflenums::llvm__APSInt::operator_or:
      return toClientReflType<class llvm::APSInt>(C);
    case reflenums::llvm__APSInt::operator_exp:
      return toClientReflType<class llvm::APSInt>(C);
    case reflenums::llvm__APSInt::operator_star:
      return toClientReflType<class llvm::APSInt>(C);
    case reflenums::llvm__APSInt::operator_plus:
      return toClientReflType<class llvm::APSInt>(C);
    case reflenums::llvm__APSInt::operator_minus1:
      return toClientReflType<class llvm::APSInt>(C);
    case reflenums::llvm__APSInt::operator_tilde:
      return toClientReflType<class llvm::APSInt>(C);
    case reflenums::llvm__APSInt::getMaxValue:
      return toClientReflType<class llvm::APSInt>(C);
    case reflenums::llvm__APSInt::getMinValue:
      return toClientReflType<class llvm::APSInt>(C);
    case reflenums::llvm__APSInt::isSameValue:
      return toClientReflType<bool>(C);
    case reflenums::llvm__APSInt::compareValues:
      return toClientReflType<int>(C);
    case reflenums::llvm__APSInt::get:
      return toClientReflType<class llvm::APSInt>(C);
    case reflenums::llvm__APSInt::getUnsigned:
      return toClientReflType<class llvm::APSInt>(C);
    case reflenums::llvm__APSInt::Profile:
      return toClientReflType<void>(C);
    case reflenums::llvm__APSInt::Profile:
      return toClientReflType<void>(C);
    case reflenums::llvm__APSInt::Profile:
      return toClientReflType<void>(C);
    case reflenums::llvm__APSInt::Profile:
      return toClientReflType<void>(C);
    case reflenums::llvm__APSInt::Profile:
      return toClientReflType<void>(C);
    case reflenums::llvm__APSInt::Profile:
      return toClientReflType<void>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__APValue:
  switch (static_cast<reflenums::clang__APValue::memnames>(MemNum)) {
    case reflenums::clang__APValue:::
      return toClientReflType<>(C);
    case reflenums::clang__APValue:::
      return toClientReflType<>(C);
    case reflenums::clang__APValue:::
      return toClientReflType<>(C);
    case reflenums::clang__APValue:::
      return toClientReflType<>(C);
    case reflenums::clang__APValue:::
      return toClientReflType<>(C);
    case reflenums::clang__APValue:::
      return toClientReflType<>(C);
    case reflenums::clang__APValue:::
      return toClientReflType<>(C);
    case reflenums::clang__APValue:::
      return toClientReflType<>(C);
    case reflenums::clang__APValue:::
      return toClientReflType<>(C);
    case reflenums::clang__APValue:::
      return toClientReflType<>(C);
    case reflenums::clang__APValue:::
      return toClientReflType<>(C);
    case reflenums::clang__APValue:::
      return toClientReflType<>(C);
    case reflenums::clang__APValue:::
      return toClientReflType<>(C);
    case reflenums::clang__APValue:::
      return toClientReflType<>(C);
    case reflenums::clang__APValue:::
      return toClientReflType<>(C);
    case reflenums::clang__APValue:::
      return toClientReflType<>(C);
    case reflenums::clang__APValue:::
      return toClientReflType<>(C);
    case reflenums::clang__APValue:::
      return toClientReflType<>(C);
    case reflenums::clang__APValue:::
      return toClientReflType<>(C);
    case reflenums::clang__APValue:::
      return toClientReflType<>(C);
    case reflenums::clang__APValue:::
      return toClientReflType<>(C);
    case reflenums::clang__APValue:::
      return toClientReflType<>(C);
    case reflenums::clang__APValue:::
      return toClientReflType<>(C);
    case reflenums::clang__APValue:::
      return toClientReflType<>(C);
    case reflenums::clang__APValue:::
      return toClientReflType<>(C);
    case reflenums::clang__APValue:::
      return toClientReflType<>(C);
    case reflenums::clang__APValue:::
      return toClientReflType<>(C);
    case reflenums::clang__APValue:::
      return toClientReflType<>(C);
    case reflenums::clang__APValue:::
      return toClientReflType<>(C);
    case reflenums::clang__APValue:::
      return toClientReflType<>(C);
    case reflenums::clang__APValue:::
      return toClientReflType<>(C);
    case reflenums::clang__APValue:::
      return toClientReflType<>(C);
    case reflenums::clang__APValue:::
      return toClientReflType<>(C);
    case reflenums::clang__APValue:::
      return toClientReflType<>(C);
    case reflenums::clang__APValue:::
      return toClientReflType<>(C);
    case reflenums::clang__APValue:::
      return toClientReflType<>(C);
    case reflenums::clang__APValue:::
      return toClientReflType<>(C);
    case reflenums::clang__APValue:::
      return toClientReflType<>(C);
    case reflenums::clang__APValue:::
      return toClientReflType<>(C);
    case reflenums::clang__APValue:::
      return toClientReflType<>(C);
    case reflenums::clang__APValue:::
      return toClientReflType<>(C);
    case reflenums::clang__APValue:::
      return toClientReflType<>(C);
    case reflenums::clang__APValue::needsCleanup:
      return toClientReflType<bool>(C);
    case reflenums::clang__APValue::needsCleanup:
      return toClientReflType<bool>(C);
    case reflenums::clang__APValue::getKind:
      return toClientReflType<enum clang::APValue::ValueKind>(C);
    case reflenums::clang__APValue::isUninit:
      return toClientReflType<bool>(C);
    case reflenums::clang__APValue::isInt:
      return toClientReflType<bool>(C);
    case reflenums::clang__APValue::isFloat:
      return toClientReflType<bool>(C);
    case reflenums::clang__APValue::isComplexInt:
      return toClientReflType<bool>(C);
    case reflenums::clang__APValue::isComplexFloat:
      return toClientReflType<bool>(C);
    case reflenums::clang__APValue::isLValue:
      return toClientReflType<bool>(C);
    case reflenums::clang__APValue::isVector:
      return toClientReflType<bool>(C);
    case reflenums::clang__APValue::isArray:
      return toClientReflType<bool>(C);
    case reflenums::clang__APValue::isStruct:
      return toClientReflType<bool>(C);
    case reflenums::clang__APValue::isUnion:
      return toClientReflType<bool>(C);
    case reflenums::clang__APValue::isMemberPointer:
      return toClientReflType<bool>(C);
    case reflenums::clang__APValue::isAddrLabelDiff:
      return toClientReflType<bool>(C);
    case reflenums::clang__APValue::dump:
      return toClientReflType<void>(C);
    case reflenums::clang__APValue::dump1:
      return toClientReflType<void>(C);
    case reflenums::clang__APValue::printPretty:
      return toClientReflType<void>(C);
    case reflenums::clang__APValue::getAsString:
      return toClientReflType<const char *>(C);
    case reflenums::clang__APValue::getAsString:
      return toClientReflType<const char *>(C);
    case reflenums::clang__APValue::getInt:
      return toClientReflType<const class llvm::APSInt &>(C);
    case reflenums::clang__APValue::getInt:
      return toClientReflType<const class llvm::APSInt &>(C);
    case reflenums::clang__APValue::getFloat:
      return toClientReflType<const class llvm::APFloat &>(C);
    case reflenums::clang__APValue::getFloat:
      return toClientReflType<const class llvm::APFloat &>(C);
    case reflenums::clang__APValue::getComplexIntReal:
      return toClientReflType<const class llvm::APSInt &>(C);
    case reflenums::clang__APValue::getComplexIntReal:
      return toClientReflType<const class llvm::APSInt &>(C);
    case reflenums::clang__APValue::getComplexIntImag:
      return toClientReflType<const class llvm::APSInt &>(C);
    case reflenums::clang__APValue::getComplexIntImag:
      return toClientReflType<const class llvm::APSInt &>(C);
    case reflenums::clang__APValue::getComplexFloatReal:
      return toClientReflType<const class llvm::APFloat &>(C);
    case reflenums::clang__APValue::getComplexFloatReal:
      return toClientReflType<const class llvm::APFloat &>(C);
    case reflenums::clang__APValue::getComplexFloatImag:
      return toClientReflType<const class llvm::APFloat &>(C);
    case reflenums::clang__APValue::getLValueBase:
      return toClientReflType<const class clang::APValue::LValueBase>(C);
    case reflenums::clang__APValue::getLValueBase:
      return toClientReflType<const class clang::APValue::LValueBase>(C);
    case reflenums::clang__APValue::getLValueOffset:
      return toClientReflType<const class clang::CharUnits &>(C);
    case reflenums::clang__APValue::isLValueOnePastTheEnd:
      return toClientReflType<bool>(C);
    case reflenums::clang__APValue::hasLValuePath:
      return toClientReflType<bool>(C);
    case reflenums::clang__APValue::hasLValuePath:
      return toClientReflType<bool>(C);
    case reflenums::clang__APValue::getLValueCallIndex:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__APValue::getLValueVersion:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__APValue::isNullPointer:
      return toClientReflType<bool>(C);
    case reflenums::clang__APValue::isNullPointer:
      return toClientReflType<bool>(C);
    case reflenums::clang__APValue::getVectorElt:
      return toClientReflType<const class clang::APValue &>(C);
    case reflenums::clang__APValue::getVectorLength:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__APValue::getVectorLength:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__APValue::getArrayInitializedElt:
      return toClientReflType<const class clang::APValue &>(C);
    case reflenums::clang__APValue::hasArrayFiller:
      return toClientReflType<bool>(C);
    case reflenums::clang__APValue::hasArrayFiller:
      return toClientReflType<bool>(C);
    case reflenums::clang__APValue::getArrayFiller:
      return toClientReflType<const class clang::APValue &>(C);
    case reflenums::clang__APValue::getArrayInitializedElts:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__APValue::getArraySize:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__APValue::getStructNumBases:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__APValue::getStructNumFields:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__APValue::getStructNumFields:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__APValue::getStructNumFields:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__APValue::getStructBase:
      return toClientReflType<const class clang::APValue &>(C);
    case reflenums::clang__APValue::getStructField:
      return toClientReflType<const class clang::APValue &>(C);
    case reflenums::clang__APValue::getUnionField:
      return toClientReflType<const class clang::FieldDecl *>(C);
    case reflenums::clang__APValue::getUnionField:
      return toClientReflType<const class clang::FieldDecl *>(C);
    case reflenums::clang__APValue::getUnionValue:
      return toClientReflType<const class clang::APValue &>(C);
    case reflenums::clang__APValue::getMemberPointerDecl:
      return toClientReflType<const class clang::ValueDecl *>(C);
    case reflenums::clang__APValue::isMemberPointerToDerivedMember:
      return toClientReflType<bool>(C);
    case reflenums::clang__APValue::getMemberPointerPath:
      return toClientReflType<class llvm::ArrayRef<const class clang::CXXRecordDecl *>>(C);
    case reflenums::clang__APValue::getAddrLabelDiffLHS:
      return toClientReflType<const class clang::AddrLabelExpr *>(C);
    case reflenums::clang__APValue::getAddrLabelDiffRHS:
      return toClientReflType<const class clang::AddrLabelExpr *>(C);
    case reflenums::clang__APValue::getAddrLabelDiffRHS:
      return toClientReflType<const class clang::AddrLabelExpr *>(C);
    case reflenums::clang__APValue::getAddrLabelDiffRHS:
      return toClientReflType<const class clang::AddrLabelExpr *>(C);
    case reflenums::clang__APValue::getAddrLabelDiffRHS:
      return toClientReflType<const class clang::AddrLabelExpr *>(C);
    case reflenums::clang__APValue::getAddrLabelDiffRHS:
      return toClientReflType<const class clang::AddrLabelExpr *>(C);
    case reflenums::clang__APValue::getAddrLabelDiffRHS:
      return toClientReflType<const class clang::AddrLabelExpr *>(C);
    case reflenums::clang__APValue::getAddrLabelDiffRHS:
      return toClientReflType<const class clang::AddrLabelExpr *>(C);
    case reflenums::clang__APValue::getAddrLabelDiffRHS:
      return toClientReflType<const class clang::AddrLabelExpr *>(C);
    case reflenums::clang__APValue::getAddrLabelDiffRHS:
      return toClientReflType<const class clang::AddrLabelExpr *>(C);
    case reflenums::clang__APValue::getAddrLabelDiffRHS:
      return toClientReflType<const class clang::AddrLabelExpr *>(C);
    case reflenums::clang__APValue::getAddrLabelDiffRHS:
      return toClientReflType<const class clang::AddrLabelExpr *>(C);
    case reflenums::clang__APValue::getAddrLabelDiffRHS:
      return toClientReflType<const class clang::AddrLabelExpr *>(C);
    case reflenums::clang__APValue::getAddrLabelDiffRHS:
      return toClientReflType<const class clang::AddrLabelExpr *>(C);
    case reflenums::clang__APValue::getAddrLabelDiffRHS:
      return toClientReflType<const class clang::AddrLabelExpr *>(C);
    case reflenums::clang__APValue::getAddrLabelDiffRHS:
      return toClientReflType<const class clang::AddrLabelExpr *>(C);
    case reflenums::clang__APValue::getAddrLabelDiffRHS:
      return toClientReflType<const class clang::AddrLabelExpr *>(C);
    case reflenums::clang__APValue::getAddrLabelDiffRHS:
      return toClientReflType<const class clang::AddrLabelExpr *>(C);
    case reflenums::clang__APValue::getAddrLabelDiffRHS:
      return toClientReflType<const class clang::AddrLabelExpr *>(C);
    case reflenums::clang__APValue::getAddrLabelDiffRHS:
      return toClientReflType<const class clang::AddrLabelExpr *>(C);
    case reflenums::clang__APValue::getAddrLabelDiffRHS:
      return toClientReflType<const class clang::AddrLabelExpr *>(C);
    case reflenums::clang__APValue::getAddrLabelDiffRHS:
      return toClientReflType<const class clang::AddrLabelExpr *>(C);
    case reflenums::clang__APValue::getAddrLabelDiffRHS:
      return toClientReflType<const class clang::AddrLabelExpr *>(C);
    case reflenums::clang__APValue::getAddrLabelDiffRHS:
      return toClientReflType<const class clang::AddrLabelExpr *>(C);
    case reflenums::clang__APValue::getAddrLabelDiffRHS:
      return toClientReflType<const class clang::AddrLabelExpr *>(C);
    case reflenums::clang__APValue::getAddrLabelDiffRHS:
      return toClientReflType<const class clang::AddrLabelExpr *>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__APValue__LValueBase:
  switch (static_cast<reflenums::clang__APValue__LValueBase::memnames>(MemNum)) {
    case reflenums::clang__APValue__LValueBase:::
      return toClientReflType<>(C);
    case reflenums::clang__APValue__LValueBase:::
      return toClientReflType<>(C);
    case reflenums::clang__APValue__LValueBase:::
      return toClientReflType<>(C);
    case reflenums::clang__APValue__LValueBase:::
      return toClientReflType<>(C);
    case reflenums::clang__APValue__LValueBase:::
      return toClientReflType<>(C);
    case reflenums::clang__APValue__LValueBase:::
      return toClientReflType<>(C);
    case reflenums::clang__APValue__LValueBase:::
      return toClientReflType<>(C);
    case reflenums::clang__APValue__LValueBase:::
      return toClientReflType<>(C);
    case reflenums::clang__APValue__LValueBase::getOpaqueValue:
      return toClientReflType<void *>(C);
    case reflenums::clang__APValue__LValueBase::isNull:
      return toClientReflType<bool>(C);
    case reflenums::clang__APValue__LValueBase::operator_bool:
      return toClientReflType<bool>(C);
    case reflenums::clang__APValue__LValueBase::operator_bool:
      return toClientReflType<bool>(C);
    case reflenums::clang__APValue__LValueBase::getCallIndex:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__APValue__LValueBase::getCallIndex:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__APValue__LValueBase::getVersion:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__APValue__LValueBase::operator_eq_eq:
      return toClientReflType<bool>(C);
    case reflenums::clang__APValue__LValueBase::operator_eq_eq:
      return toClientReflType<bool>(C);
    case reflenums::clang__APValue__LValueBase::operator_eq_eq:
      return toClientReflType<bool>(C);
    case reflenums::clang__APValue__LValueBase::operator_eq_eq:
      return toClientReflType<bool>(C);
    case reflenums::clang__APValue__LValueBase::operator_eq_eq:
      return toClientReflType<bool>(C);
    case reflenums::clang__APValue__LValueBase::operator_eq_eq:
      return toClientReflType<bool>(C);
    case reflenums::clang__APValue__LValueBase::operator_eq_eq:
      return toClientReflType<bool>(C);
    case reflenums::clang__APValue__LValueBase::operator_eq_eq:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__DiagnosticOptions:
  switch (static_cast<reflenums::clang__DiagnosticOptions::memnames>(MemNum)) {
    case reflenums::clang__DiagnosticOptions:::
      return toClientReflType<>(C);
    case reflenums::clang__DiagnosticOptions:::
      return toClientReflType<>(C);
    case reflenums::clang__DiagnosticOptions:::
      return toClientReflType<>(C);
    case reflenums::clang__DiagnosticOptions:::
      return toClientReflType<>(C);
    case reflenums::clang__DiagnosticOptions:::
      return toClientReflType<>(C);
    case reflenums::clang__DiagnosticOptions::Retain:
      return toClientReflType<void>(C);
    case reflenums::clang__DiagnosticOptions::Release:
      return toClientReflType<void>(C);
    case reflenums::clang__DiagnosticOptions::Release:
      return toClientReflType<void>(C);
    case reflenums::clang__DiagnosticOptions::Release:
      return toClientReflType<void>(C);
    case reflenums::clang__DiagnosticOptions:::
      return toClientReflType<>(C);
    case reflenums::clang__DiagnosticOptions:::
      return toClientReflType<>(C);
    case reflenums::clang__DiagnosticOptions:::
      return toClientReflType<>(C);
    case reflenums::clang__DiagnosticOptions:::
      return toClientReflType<>(C);
    case reflenums::clang__DiagnosticOptions::IgnoreWarnings:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__DiagnosticOptions::NoRewriteMacros:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__DiagnosticOptions::Pedantic:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__DiagnosticOptions::PedanticErrors:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__DiagnosticOptions::ShowColumn:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__DiagnosticOptions::ShowLocation:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__DiagnosticOptions::AbsolutePath:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__DiagnosticOptions::ShowCarets:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__DiagnosticOptions::ShowFixits:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__DiagnosticOptions::ShowSourceRanges:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__DiagnosticOptions::ShowParseableFixits:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__DiagnosticOptions::ShowPresumedLoc:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__DiagnosticOptions::ShowOptionNames:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__DiagnosticOptions::ShowNoteIncludeStack:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__DiagnosticOptions::ShowCategories:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__DiagnosticOptions::ShowColors:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__DiagnosticOptions::VerifyDiagnostics:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__DiagnosticOptions::ElideType:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__DiagnosticOptions::ShowTemplateTree:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__DiagnosticOptions::CLFallbackMode:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__DiagnosticOptions::ErrorLimit:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__DiagnosticOptions::MacroBacktraceLimit:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__DiagnosticOptions::TemplateBacktraceLimit:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__DiagnosticOptions::ConstexprBacktraceLimit:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__DiagnosticOptions::SpellCheckingLimit:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__DiagnosticOptions::SnippetLineLimit:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__DiagnosticOptions::TabStop:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__DiagnosticOptions::MessageLength:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__DiagnosticOptions::MessageLength:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__DiagnosticOptions::MessageLength:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__DiagnosticOptions::MessageLength:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__DiagnosticOptions::MessageLength:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__DiagnosticOptions::MessageLength:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__DiagnosticOptions::MessageLength:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__DiagnosticOptions::MessageLength:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__DiagnosticOptions::MessageLength:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__DiagnosticOptions::MessageLength:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__DiagnosticOptions::MessageLength:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__DiagnosticOptions::MessageLength:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__DiagnosticOptions::getFormat:
      return toClientReflType<enum clang::DiagnosticOptions::TextDiagnosticFormat>(C);
    case reflenums::clang__DiagnosticOptions::getFormat:
      return toClientReflType<enum clang::DiagnosticOptions::TextDiagnosticFormat>(C);
    case reflenums::clang__DiagnosticOptions::getShowOverloads:
      return toClientReflType<enum clang::OverloadsShown>(C);
    case reflenums::clang__DiagnosticOptions::getShowOverloads:
      return toClientReflType<enum clang::OverloadsShown>(C);
    case reflenums::clang__DiagnosticOptions::getVerifyIgnoreUnexpected:
      return toClientReflType<enum clang::DiagnosticLevelMask>(C);
    case reflenums::clang__DiagnosticOptions::getVerifyIgnoreUnexpected:
      return toClientReflType<enum clang::DiagnosticLevelMask>(C);
    case reflenums::clang__DiagnosticOptions::getVerifyIgnoreUnexpected:
      return toClientReflType<enum clang::DiagnosticLevelMask>(C);
    case reflenums::clang__DiagnosticOptions::getVerifyIgnoreUnexpected:
      return toClientReflType<enum clang::DiagnosticLevelMask>(C);
    case reflenums::clang__DiagnosticOptions::getVerifyIgnoreUnexpected:
      return toClientReflType<enum clang::DiagnosticLevelMask>(C);
    case reflenums::clang__DiagnosticOptions::getVerifyIgnoreUnexpected:
      return toClientReflType<enum clang::DiagnosticLevelMask>(C);
    case reflenums::clang__DiagnosticOptions::getVerifyIgnoreUnexpected:
      return toClientReflType<enum clang::DiagnosticLevelMask>(C);
    case reflenums::clang__DiagnosticOptions::getVerifyIgnoreUnexpected:
      return toClientReflType<enum clang::DiagnosticLevelMask>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__FileID:
  switch (static_cast<reflenums::clang__FileID::memnames>(MemNum)) {
    case reflenums::clang__FileID:::
      return toClientReflType<>(C);
    case reflenums::clang__FileID:::
      return toClientReflType<>(C);
    case reflenums::clang__FileID:::
      return toClientReflType<>(C);
    case reflenums::clang__FileID::isValid:
      return toClientReflType<bool>(C);
    case reflenums::clang__FileID::isInvalid:
      return toClientReflType<bool>(C);
    case reflenums::clang__FileID::operator_eq_eq:
      return toClientReflType<bool>(C);
    case reflenums::clang__FileID::operator_less:
      return toClientReflType<bool>(C);
    case reflenums::clang__FileID::operator_less_eq:
      return toClientReflType<bool>(C);
    case reflenums::clang__FileID::operator_not_eq:
      return toClientReflType<bool>(C);
    case reflenums::clang__FileID::operator_gr:
      return toClientReflType<bool>(C);
    case reflenums::clang__FileID::operator_gr_eq:
      return toClientReflType<bool>(C);
    case reflenums::clang__FileID::getSentinel:
      return toClientReflType<class clang::FileID>(C);
    case reflenums::clang__FileID::getHashValue:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__FileID::getHashValue:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__FileID::getHashValue:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__FileID::getHashValue:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__FileID::getHashValue:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__FileID::getHashValue:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__FileID::getHashValue:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__FileID::getHashValue:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__FileID::getHashValue:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__FileID::getHashValue:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__FileID::getHashValue:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__FileID::getHashValue:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__FileID::getHashValue:
      return toClientReflType<unsigned int>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__SourceLocation:
  switch (static_cast<reflenums::clang__SourceLocation::memnames>(MemNum)) {
    case reflenums::clang__SourceLocation:::
      return toClientReflType<>(C);
    case reflenums::clang__SourceLocation:::
      return toClientReflType<>(C);
    case reflenums::clang__SourceLocation:::
      return toClientReflType<>(C);
    case reflenums::clang__SourceLocation:::
      return toClientReflType<>(C);
    case reflenums::clang__SourceLocation:::
      return toClientReflType<>(C);
    case reflenums::clang__SourceLocation:::
      return toClientReflType<>(C);
    case reflenums::clang__SourceLocation:::
      return toClientReflType<>(C);
    case reflenums::clang__SourceLocation::isFileID:
      return toClientReflType<bool>(C);
    case reflenums::clang__SourceLocation::isMacroID:
      return toClientReflType<bool>(C);
    case reflenums::clang__SourceLocation::isValid:
      return toClientReflType<bool>(C);
    case reflenums::clang__SourceLocation::isInvalid:
      return toClientReflType<bool>(C);
    case reflenums::clang__SourceLocation::isInvalid:
      return toClientReflType<bool>(C);
    case reflenums::clang__SourceLocation::isInvalid:
      return toClientReflType<bool>(C);
    case reflenums::clang__SourceLocation::isInvalid:
      return toClientReflType<bool>(C);
    case reflenums::clang__SourceLocation::isInvalid:
      return toClientReflType<bool>(C);
    case reflenums::clang__SourceLocation::isInvalid:
      return toClientReflType<bool>(C);
    case reflenums::clang__SourceLocation::getLocWithOffset:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SourceLocation::getRawEncoding:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__SourceLocation::getFromRawEncoding:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SourceLocation::getPtrEncoding:
      return toClientReflType<void *>(C);
    case reflenums::clang__SourceLocation::getFromPtrEncoding:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SourceLocation::isPairOfFileLocations:
      return toClientReflType<bool>(C);
    case reflenums::clang__SourceLocation::print:
      return toClientReflType<void>(C);
    case reflenums::clang__SourceLocation::printToString:
      return toClientReflType<const char *>(C);
    case reflenums::clang__SourceLocation::dump:
      return toClientReflType<void>(C);
    case reflenums::clang__SourceLocation::dump:
      return toClientReflType<void>(C);
    case reflenums::clang__SourceLocation::dump:
      return toClientReflType<void>(C);
    case reflenums::clang__SourceLocation::dump:
      return toClientReflType<void>(C);
    case reflenums::clang__SourceLocation::dump:
      return toClientReflType<void>(C);
    case reflenums::clang__SourceLocation::dump:
      return toClientReflType<void>(C);
    case reflenums::clang__SourceLocation::dump:
      return toClientReflType<void>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__SourceRange:
  switch (static_cast<reflenums::clang__SourceRange::memnames>(MemNum)) {
    case reflenums::clang__SourceRange:::
      return toClientReflType<>(C);
    case reflenums::clang__SourceRange:::
      return toClientReflType<>(C);
    case reflenums::clang__SourceRange:::
      return toClientReflType<>(C);
    case reflenums::clang__SourceRange:::
      return toClientReflType<>(C);
    case reflenums::clang__SourceRange:::
      return toClientReflType<>(C);
    case reflenums::clang__SourceRange:::
      return toClientReflType<>(C);
    case reflenums::clang__SourceRange:::
      return toClientReflType<>(C);
    case reflenums::clang__SourceRange::getBegin:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SourceRange::getEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SourceRange::getEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SourceRange::getEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SourceRange::isValid:
      return toClientReflType<bool>(C);
    case reflenums::clang__SourceRange::isInvalid:
      return toClientReflType<bool>(C);
    case reflenums::clang__SourceRange::operator_eq_eq:
      return toClientReflType<bool>(C);
    case reflenums::clang__SourceRange::operator_not_eq:
      return toClientReflType<bool>(C);
    case reflenums::clang__SourceRange::operator_not_eq:
      return toClientReflType<bool>(C);
    case reflenums::clang__SourceRange::operator_not_eq:
      return toClientReflType<bool>(C);
    case reflenums::clang__SourceRange::operator_not_eq:
      return toClientReflType<bool>(C);
    case reflenums::clang__SourceRange::operator_not_eq:
      return toClientReflType<bool>(C);
    case reflenums::clang__SourceRange::operator_not_eq:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__CharSourceRange:
  switch (static_cast<reflenums::clang__CharSourceRange::memnames>(MemNum)) {
    case reflenums::clang__CharSourceRange:::
      return toClientReflType<>(C);
    case reflenums::clang__CharSourceRange:::
      return toClientReflType<>(C);
    case reflenums::clang__CharSourceRange:::
      return toClientReflType<>(C);
    case reflenums::clang__CharSourceRange:::
      return toClientReflType<>(C);
    case reflenums::clang__CharSourceRange:::
      return toClientReflType<>(C);
    case reflenums::clang__CharSourceRange:::
      return toClientReflType<>(C);
    case reflenums::clang__CharSourceRange::getTokenRange:
      return toClientReflType<class clang::CharSourceRange>(C);
    case reflenums::clang__CharSourceRange::getCharRange:
      return toClientReflType<class clang::CharSourceRange>(C);
    case reflenums::clang__CharSourceRange::getTokenRange1:
      return toClientReflType<class clang::CharSourceRange>(C);
    case reflenums::clang__CharSourceRange::getCharRange1:
      return toClientReflType<class clang::CharSourceRange>(C);
    case reflenums::clang__CharSourceRange::isTokenRange:
      return toClientReflType<bool>(C);
    case reflenums::clang__CharSourceRange::isCharRange:
      return toClientReflType<bool>(C);
    case reflenums::clang__CharSourceRange::getBegin:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CharSourceRange::getEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CharSourceRange::getAsRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__CharSourceRange::getAsRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__CharSourceRange::getAsRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__CharSourceRange::getAsRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__CharSourceRange::isValid:
      return toClientReflType<bool>(C);
    case reflenums::clang__CharSourceRange::isInvalid:
      return toClientReflType<bool>(C);
    case reflenums::clang__CharSourceRange::isInvalid:
      return toClientReflType<bool>(C);
    case reflenums::clang__CharSourceRange::isInvalid:
      return toClientReflType<bool>(C);
    case reflenums::clang__CharSourceRange::isInvalid:
      return toClientReflType<bool>(C);
    case reflenums::clang__CharSourceRange::isInvalid:
      return toClientReflType<bool>(C);
    case reflenums::clang__CharSourceRange::isInvalid:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__PresumedLoc:
  switch (static_cast<reflenums::clang__PresumedLoc::memnames>(MemNum)) {
    case reflenums::clang__PresumedLoc:::
      return toClientReflType<>(C);
    case reflenums::clang__PresumedLoc:::
      return toClientReflType<>(C);
    case reflenums::clang__PresumedLoc:::
      return toClientReflType<>(C);
    case reflenums::clang__PresumedLoc:::
      return toClientReflType<>(C);
    case reflenums::clang__PresumedLoc:::
      return toClientReflType<>(C);
    case reflenums::clang__PresumedLoc:::
      return toClientReflType<>(C);
    case reflenums::clang__PresumedLoc:::
      return toClientReflType<>(C);
    case reflenums::clang__PresumedLoc:::
      return toClientReflType<>(C);
    case reflenums::clang__PresumedLoc::isInvalid:
      return toClientReflType<bool>(C);
    case reflenums::clang__PresumedLoc::isValid:
      return toClientReflType<bool>(C);
    case reflenums::clang__PresumedLoc::getFilename:
      return toClientReflType<const char *>(C);
    case reflenums::clang__PresumedLoc::getLine:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__PresumedLoc::getColumn:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__PresumedLoc::getIncludeLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__FullSourceLoc:
  switch (static_cast<reflenums::clang__FullSourceLoc::memnames>(MemNum)) {
    case reflenums::clang__FullSourceLoc:::
      return toClientReflType<>(C);
    case reflenums::clang__FullSourceLoc:::
      return toClientReflType<>(C);
    case reflenums::clang__FullSourceLoc:::
      return toClientReflType<>(C);
    case reflenums::clang__FullSourceLoc:::
      return toClientReflType<>(C);
    case reflenums::clang__FullSourceLoc:::
      return toClientReflType<>(C);
    case reflenums::clang__FullSourceLoc::hasManager:
      return toClientReflType<bool>(C);
    case reflenums::clang__FullSourceLoc::getManager:
      return toClientReflType<const class clang::SourceManager &>(C);
    case reflenums::clang__FullSourceLoc::getFileID:
      return toClientReflType<class clang::FileID>(C);
    case reflenums::clang__FullSourceLoc::getExpansionLoc:
      return toClientReflType<class clang::FullSourceLoc>(C);
    case reflenums::clang__FullSourceLoc::getSpellingLoc:
      return toClientReflType<class clang::FullSourceLoc>(C);
    case reflenums::clang__FullSourceLoc::getFileLoc:
      return toClientReflType<class clang::FullSourceLoc>(C);
    case reflenums::clang__FullSourceLoc::getPresumedLoc:
      return toClientReflType<class clang::PresumedLoc>(C);
    case reflenums::clang__FullSourceLoc::isMacroArgExpansion:
      return toClientReflType<bool>(C);
    case reflenums::clang__FullSourceLoc::getImmediateMacroCallerLoc:
      return toClientReflType<class clang::FullSourceLoc>(C);
    case reflenums::clang__FullSourceLoc::getImmediateMacroCallerLoc:
      return toClientReflType<class clang::FullSourceLoc>(C);
    case reflenums::clang__FullSourceLoc::getFileOffset:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__FullSourceLoc::getExpansionLineNumber:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__FullSourceLoc::getExpansionColumnNumber:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__FullSourceLoc::getSpellingLineNumber:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__FullSourceLoc::getSpellingColumnNumber:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__FullSourceLoc::getCharacterData:
      return toClientReflType<const char *>(C);
    case reflenums::clang__FullSourceLoc::getLineNumber:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__FullSourceLoc::getColumnNumber:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__FullSourceLoc::getFileEntry:
      return toClientReflType<const class clang::FileEntry *>(C);
    case reflenums::clang__FullSourceLoc::getBufferData:
      return toClientReflType<const char *>(C);
    case reflenums::clang__FullSourceLoc::getBufferData:
      return toClientReflType<const char *>(C);
    case reflenums::clang__FullSourceLoc::isInSystemHeader:
      return toClientReflType<bool>(C);
    case reflenums::clang__FullSourceLoc::isBeforeInTranslationUnitThan:
      return toClientReflType<bool>(C);
    case reflenums::clang__FullSourceLoc::isBeforeInTranslationUnitThan1:
      return toClientReflType<bool>(C);
    case reflenums::clang__FullSourceLoc::isBeforeInTranslationUnitThan1:
      return toClientReflType<bool>(C);
    case reflenums::clang__FullSourceLoc::dump:
      return toClientReflType<void>(C);
    case reflenums::clang__FullSourceLoc::operator_eq_eq:
      return toClientReflType<bool>(C);
    case reflenums::clang__FullSourceLoc::operator_not_eq:
      return toClientReflType<bool>(C);
    case reflenums::clang__FullSourceLoc::operator_not_eq:
      return toClientReflType<bool>(C);
    case reflenums::clang__FullSourceLoc::operator_not_eq:
      return toClientReflType<bool>(C);
    case reflenums::clang__FullSourceLoc::operator_not_eq:
      return toClientReflType<bool>(C);
    case reflenums::clang__FullSourceLoc::operator_not_eq:
      return toClientReflType<bool>(C);
    case reflenums::clang__FullSourceLoc::operator_not_eq:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_llvm__DebugEpochBase:
  switch (static_cast<reflenums::llvm__DebugEpochBase::memnames>(MemNum)) {
    case reflenums::llvm__DebugEpochBase:::
      return toClientReflType<>(C);
    case reflenums::llvm__DebugEpochBase:::
      return toClientReflType<>(C);
    case reflenums::llvm__DebugEpochBase:::
      return toClientReflType<>(C);
    case reflenums::llvm__DebugEpochBase:::
      return toClientReflType<>(C);
    case reflenums::llvm__DebugEpochBase:::
      return toClientReflType<>(C);
    case reflenums::llvm__DebugEpochBase:::
      return toClientReflType<>(C);
    case reflenums::llvm__DebugEpochBase:::
      return toClientReflType<>(C);
    case reflenums::llvm__DebugEpochBase:::
      return toClientReflType<>(C);
    case reflenums::llvm__DebugEpochBase:::
      return toClientReflType<>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__FixItHint:
  switch (static_cast<reflenums::clang__FixItHint::memnames>(MemNum)) {
    case reflenums::clang__FixItHint:::
      return toClientReflType<>(C);
    case reflenums::clang__FixItHint:::
      return toClientReflType<>(C);
    case reflenums::clang__FixItHint::RemoveRange:
      return toClientReflType<class clang::CharSourceRange>(C);
    case reflenums::clang__FixItHint::InsertFromRange:
      return toClientReflType<class clang::CharSourceRange>(C);
    case reflenums::clang__FixItHint::InsertFromRange:
      return toClientReflType<class clang::CharSourceRange>(C);
    case reflenums::clang__FixItHint::BeforePreviousInsertions:
      return toClientReflType<bool>(C);
    case reflenums::clang__FixItHint::BeforePreviousInsertions:
      return toClientReflType<bool>(C);
    case reflenums::clang__FixItHint::isNull:
      return toClientReflType<bool>(C);
    case reflenums::clang__FixItHint::isNull:
      return toClientReflType<bool>(C);
    case reflenums::clang__FixItHint::CreateInsertionFromRange:
      return toClientReflType<class clang::FixItHint>(C);
    case reflenums::clang__FixItHint::CreateRemoval:
      return toClientReflType<class clang::FixItHint>(C);
    case reflenums::clang__FixItHint::CreateRemoval1:
      return toClientReflType<class clang::FixItHint>(C);
    case reflenums::clang__FixItHint::CreateRemoval1:
      return toClientReflType<class clang::FixItHint>(C);
    case reflenums::clang__FixItHint::CreateRemoval1:
      return toClientReflType<class clang::FixItHint>(C);
    case reflenums::clang__FixItHint::CreateRemoval1:
      return toClientReflType<class clang::FixItHint>(C);
    case reflenums::clang__FixItHint::CreateRemoval1:
      return toClientReflType<class clang::FixItHint>(C);
    case reflenums::clang__FixItHint::CreateRemoval1:
      return toClientReflType<class clang::FixItHint>(C);
    case reflenums::clang__FixItHint::CreateRemoval1:
      return toClientReflType<class clang::FixItHint>(C);
    case reflenums::clang__FixItHint::CreateRemoval1:
      return toClientReflType<class clang::FixItHint>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__DiagnosticsEngine:
  switch (static_cast<reflenums::clang__DiagnosticsEngine::memnames>(MemNum)) {
    case reflenums::clang__DiagnosticsEngine:::
      return toClientReflType<>(C);
    case reflenums::clang__DiagnosticsEngine:::
      return toClientReflType<>(C);
    case reflenums::clang__DiagnosticsEngine:::
      return toClientReflType<>(C);
    case reflenums::clang__DiagnosticsEngine:::
      return toClientReflType<>(C);
    case reflenums::clang__DiagnosticsEngine:::
      return toClientReflType<>(C);
    case reflenums::clang__DiagnosticsEngine::Retain:
      return toClientReflType<void>(C);
    case reflenums::clang__DiagnosticsEngine::Release:
      return toClientReflType<void>(C);
    case reflenums::clang__DiagnosticsEngine::Release:
      return toClientReflType<void>(C);
    case reflenums::clang__DiagnosticsEngine:::
      return toClientReflType<>(C);
    case reflenums::clang__DiagnosticsEngine:::
      return toClientReflType<>(C);
    case reflenums::clang__DiagnosticsEngine:::
      return toClientReflType<>(C);
    case reflenums::clang__DiagnosticsEngine:::
      return toClientReflType<>(C);
    case reflenums::clang__DiagnosticsEngine:::
      return toClientReflType<>(C);
    case reflenums::clang__DiagnosticsEngine:::
      return toClientReflType<>(C);
    case reflenums::clang__DiagnosticsEngine:::
      return toClientReflType<>(C);
    case reflenums::clang__DiagnosticsEngine:::
      return toClientReflType<>(C);
    case reflenums::clang__DiagnosticsEngine:::
      return toClientReflType<>(C);
    case reflenums::clang__DiagnosticsEngine:::
      return toClientReflType<>(C);
    case reflenums::clang__DiagnosticsEngine:::
      return toClientReflType<>(C);
    case reflenums::clang__DiagnosticsEngine:::
      return toClientReflType<>(C);
    case reflenums::clang__DiagnosticsEngine:::
      return toClientReflType<>(C);
    case reflenums::clang__DiagnosticsEngine:::
      return toClientReflType<>(C);
    case reflenums::clang__DiagnosticsEngine:::
      return toClientReflType<>(C);
    case reflenums::clang__DiagnosticsEngine:::
      return toClientReflType<>(C);
    case reflenums::clang__DiagnosticsEngine:::
      return toClientReflType<>(C);
    case reflenums::clang__DiagnosticsEngine:::
      return toClientReflType<>(C);
    case reflenums::clang__DiagnosticsEngine:::
      return toClientReflType<>(C);
    case reflenums::clang__DiagnosticsEngine:::
      return toClientReflType<>(C);
    case reflenums::clang__DiagnosticsEngine:::
      return toClientReflType<>(C);
    case reflenums::clang__DiagnosticsEngine:::
      return toClientReflType<>(C);
    case reflenums::clang__DiagnosticsEngine:::
      return toClientReflType<>(C);
    case reflenums::clang__DiagnosticsEngine:::
      return toClientReflType<>(C);
    case reflenums::clang__DiagnosticsEngine:::
      return toClientReflType<>(C);
    case reflenums::clang__DiagnosticsEngine:::
      return toClientReflType<>(C);
    case reflenums::clang__DiagnosticsEngine:::
      return toClientReflType<>(C);
    case reflenums::clang__DiagnosticsEngine:::
      return toClientReflType<>(C);
    case reflenums::clang__DiagnosticsEngine:::
      return toClientReflType<>(C);
    case reflenums::clang__DiagnosticsEngine:::
      return toClientReflType<>(C);
    case reflenums::clang__DiagnosticsEngine:::
      return toClientReflType<>(C);
    case reflenums::clang__DiagnosticsEngine:::
      return toClientReflType<>(C);
    case reflenums::clang__DiagnosticsEngine:::
      return toClientReflType<>(C);
    case reflenums::clang__DiagnosticsEngine:::
      return toClientReflType<>(C);
    case reflenums::clang__DiagnosticsEngine:::
      return toClientReflType<>(C);
    case reflenums::clang__DiagnosticsEngine:::
      return toClientReflType<>(C);
    case reflenums::clang__DiagnosticsEngine:::
      return toClientReflType<>(C);
    case reflenums::clang__DiagnosticsEngine:::
      return toClientReflType<>(C);
    case reflenums::clang__DiagnosticsEngine:::
      return toClientReflType<>(C);
    case reflenums::clang__DiagnosticsEngine:::
      return toClientReflType<>(C);
    case reflenums::clang__DiagnosticsEngine:::
      return toClientReflType<>(C);
    case reflenums::clang__DiagnosticsEngine:::
      return toClientReflType<>(C);
    case reflenums::clang__DiagnosticsEngine:::
      return toClientReflType<>(C);
    case reflenums::clang__DiagnosticsEngine:::
      return toClientReflType<>(C);
    case reflenums::clang__DiagnosticsEngine:::
      return toClientReflType<>(C);
    case reflenums::clang__DiagnosticsEngine:::
      return toClientReflType<>(C);
    case reflenums::clang__DiagnosticsEngine:::
      return toClientReflType<>(C);
    case reflenums::clang__DiagnosticsEngine:::
      return toClientReflType<>(C);
    case reflenums::clang__DiagnosticsEngine:::
      return toClientReflType<>(C);
    case reflenums::clang__DiagnosticsEngine:::
      return toClientReflType<>(C);
    case reflenums::clang__DiagnosticsEngine::dump:
      return toClientReflType<void>(C);
    case reflenums::clang__DiagnosticsEngine::dump1:
      return toClientReflType<void>(C);
    case reflenums::clang__DiagnosticsEngine::dump1:
      return toClientReflType<void>(C);
    case reflenums::clang__DiagnosticsEngine::getDiagnosticOptions:
      return toClientReflType<class clang::DiagnosticOptions &>(C);
    case reflenums::clang__DiagnosticsEngine::getDiagnosticOptions:
      return toClientReflType<class clang::DiagnosticOptions &>(C);
    case reflenums::clang__DiagnosticsEngine::getDiagnosticOptions:
      return toClientReflType<class clang::DiagnosticOptions &>(C);
    case reflenums::clang__DiagnosticsEngine::getDiagnosticOptions:
      return toClientReflType<class clang::DiagnosticOptions &>(C);
    case reflenums::clang__DiagnosticsEngine::getClient:
      return toClientReflType<const class clang::DiagnosticConsumer *>(C);
    case reflenums::clang__DiagnosticsEngine::ownsClient:
      return toClientReflType<bool>(C);
    case reflenums::clang__DiagnosticsEngine::ownsClient:
      return toClientReflType<bool>(C);
    case reflenums::clang__DiagnosticsEngine::hasSourceManager:
      return toClientReflType<bool>(C);
    case reflenums::clang__DiagnosticsEngine::getSourceManager:
      return toClientReflType<class clang::SourceManager &>(C);
    case reflenums::clang__DiagnosticsEngine::getSourceManager:
      return toClientReflType<class clang::SourceManager &>(C);
    case reflenums::clang__DiagnosticsEngine::getSourceManager:
      return toClientReflType<class clang::SourceManager &>(C);
    case reflenums::clang__DiagnosticsEngine::getSourceManager:
      return toClientReflType<class clang::SourceManager &>(C);
    case reflenums::clang__DiagnosticsEngine::getSourceManager:
      return toClientReflType<class clang::SourceManager &>(C);
    case reflenums::clang__DiagnosticsEngine::getSourceManager:
      return toClientReflType<class clang::SourceManager &>(C);
    case reflenums::clang__DiagnosticsEngine::getSourceManager:
      return toClientReflType<class clang::SourceManager &>(C);
    case reflenums::clang__DiagnosticsEngine::getTemplateBacktraceLimit:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__DiagnosticsEngine::getTemplateBacktraceLimit:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__DiagnosticsEngine::getConstexprBacktraceLimit:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__DiagnosticsEngine::getConstexprBacktraceLimit:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__DiagnosticsEngine::getIgnoreAllWarnings:
      return toClientReflType<bool>(C);
    case reflenums::clang__DiagnosticsEngine::getIgnoreAllWarnings:
      return toClientReflType<bool>(C);
    case reflenums::clang__DiagnosticsEngine::getEnableAllWarnings:
      return toClientReflType<bool>(C);
    case reflenums::clang__DiagnosticsEngine::getEnableAllWarnings:
      return toClientReflType<bool>(C);
    case reflenums::clang__DiagnosticsEngine::getWarningsAsErrors:
      return toClientReflType<bool>(C);
    case reflenums::clang__DiagnosticsEngine::getWarningsAsErrors:
      return toClientReflType<bool>(C);
    case reflenums::clang__DiagnosticsEngine::getErrorsAsFatal:
      return toClientReflType<bool>(C);
    case reflenums::clang__DiagnosticsEngine::getErrorsAsFatal:
      return toClientReflType<bool>(C);
    case reflenums::clang__DiagnosticsEngine::getErrorsAsFatal:
      return toClientReflType<bool>(C);
    case reflenums::clang__DiagnosticsEngine::getSuppressSystemWarnings:
      return toClientReflType<bool>(C);
    case reflenums::clang__DiagnosticsEngine::getSuppressSystemWarnings:
      return toClientReflType<bool>(C);
    case reflenums::clang__DiagnosticsEngine::getSuppressAllDiagnostics:
      return toClientReflType<bool>(C);
    case reflenums::clang__DiagnosticsEngine::getSuppressAllDiagnostics:
      return toClientReflType<bool>(C);
    case reflenums::clang__DiagnosticsEngine::getSuppressAllDiagnostics:
      return toClientReflType<bool>(C);
    case reflenums::clang__DiagnosticsEngine::getSuppressAllDiagnostics:
      return toClientReflType<bool>(C);
    case reflenums::clang__DiagnosticsEngine::getSuppressAllDiagnostics:
      return toClientReflType<bool>(C);
    case reflenums::clang__DiagnosticsEngine::getSuppressAllDiagnostics:
      return toClientReflType<bool>(C);
    case reflenums::clang__DiagnosticsEngine::getSuppressAllDiagnostics:
      return toClientReflType<bool>(C);
    case reflenums::clang__DiagnosticsEngine::getSuppressAllDiagnostics:
      return toClientReflType<bool>(C);
    case reflenums::clang__DiagnosticsEngine::getShowOverloads:
      return toClientReflType<enum clang::OverloadsShown>(C);
    case reflenums::clang__DiagnosticsEngine::getShowOverloads:
      return toClientReflType<enum clang::OverloadsShown>(C);
    case reflenums::clang__DiagnosticsEngine::isLastDiagnosticIgnored:
      return toClientReflType<bool>(C);
    case reflenums::clang__DiagnosticsEngine::isLastDiagnosticIgnored:
      return toClientReflType<bool>(C);
    case reflenums::clang__DiagnosticsEngine::getExtensionHandlingBehavior:
      return toClientReflType<enum clang::diag::Severity>(C);
    case reflenums::clang__DiagnosticsEngine::getExtensionHandlingBehavior:
      return toClientReflType<enum clang::diag::Severity>(C);
    case reflenums::clang__DiagnosticsEngine::getExtensionHandlingBehavior:
      return toClientReflType<enum clang::diag::Severity>(C);
    case reflenums::clang__DiagnosticsEngine::getExtensionHandlingBehavior:
      return toClientReflType<enum clang::diag::Severity>(C);
    case reflenums::clang__DiagnosticsEngine::getExtensionHandlingBehavior:
      return toClientReflType<enum clang::diag::Severity>(C);
    case reflenums::clang__DiagnosticsEngine::getExtensionHandlingBehavior:
      return toClientReflType<enum clang::diag::Severity>(C);
    case reflenums::clang__DiagnosticsEngine::getExtensionHandlingBehavior:
      return toClientReflType<enum clang::diag::Severity>(C);
    case reflenums::clang__DiagnosticsEngine::getExtensionHandlingBehavior:
      return toClientReflType<enum clang::diag::Severity>(C);
    case reflenums::clang__DiagnosticsEngine::getExtensionHandlingBehavior:
      return toClientReflType<enum clang::diag::Severity>(C);
    case reflenums::clang__DiagnosticsEngine::hasErrorOccurred:
      return toClientReflType<bool>(C);
    case reflenums::clang__DiagnosticsEngine::hasUncompilableErrorOccurred:
      return toClientReflType<bool>(C);
    case reflenums::clang__DiagnosticsEngine::hasFatalErrorOccurred:
      return toClientReflType<bool>(C);
    case reflenums::clang__DiagnosticsEngine::hasUnrecoverableErrorOccurred:
      return toClientReflType<bool>(C);
    case reflenums::clang__DiagnosticsEngine::getNumWarnings:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__DiagnosticsEngine::getNumWarnings:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__DiagnosticsEngine::getNumWarnings:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__DiagnosticsEngine::getNumWarnings:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__DiagnosticsEngine::getNumWarnings:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__DiagnosticsEngine::getNumWarnings:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__DiagnosticsEngine::getNumWarnings:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__DiagnosticsEngine::isIgnored:
      return toClientReflType<bool>(C);
    case reflenums::clang__DiagnosticsEngine::getDiagnosticLevel:
      return toClientReflType<enum clang::DiagnosticsEngine::Level>(C);
    case reflenums::clang__DiagnosticsEngine::getDiagnosticLevel:
      return toClientReflType<enum clang::DiagnosticsEngine::Level>(C);
    case reflenums::clang__DiagnosticsEngine::getDiagnosticLevel:
      return toClientReflType<enum clang::DiagnosticsEngine::Level>(C);
    case reflenums::clang__DiagnosticsEngine::getDiagnosticLevel:
      return toClientReflType<enum clang::DiagnosticsEngine::Level>(C);
    case reflenums::clang__DiagnosticsEngine::isDiagnosticInFlight:
      return toClientReflType<bool>(C);
    case reflenums::clang__DiagnosticsEngine::isDiagnosticInFlight:
      return toClientReflType<bool>(C);
    case reflenums::clang__DiagnosticsEngine::isDiagnosticInFlight:
      return toClientReflType<bool>(C);
    case reflenums::clang__DiagnosticsEngine::getFlagValue:
      return toClientReflType<const char *>(C);
    case reflenums::clang__DiagnosticsEngine::getFlagValue:
      return toClientReflType<const char *>(C);
    case reflenums::clang__DiagnosticsEngine::getFlagValue:
      return toClientReflType<const char *>(C);
    case reflenums::clang__DiagnosticsEngine::getFlagValue:
      return toClientReflType<const char *>(C);
    case reflenums::clang__DiagnosticsEngine::getFlagValue:
      return toClientReflType<const char *>(C);
    case reflenums::clang__DiagnosticsEngine::getFlagValue:
      return toClientReflType<const char *>(C);
    case reflenums::clang__DiagnosticsEngine::getFlagValue:
      return toClientReflType<const char *>(C);
    case reflenums::clang__DiagnosticsEngine::getFlagValue:
      return toClientReflType<const char *>(C);
    case reflenums::clang__DiagnosticsEngine::getFlagValue:
      return toClientReflType<const char *>(C);
    case reflenums::clang__DiagnosticsEngine::getFlagValue:
      return toClientReflType<const char *>(C);
    case reflenums::clang__DiagnosticsEngine::getFlagValue:
      return toClientReflType<const char *>(C);
    case reflenums::clang__DiagnosticsEngine::getFlagValue:
      return toClientReflType<const char *>(C);
    case reflenums::clang__DiagnosticsEngine::getFlagValue:
      return toClientReflType<const char *>(C);
    case reflenums::clang__DiagnosticsEngine::getFlagValue:
      return toClientReflType<const char *>(C);
    case reflenums::clang__DiagnosticsEngine::getFlagValue:
      return toClientReflType<const char *>(C);
    case reflenums::clang__DiagnosticsEngine::getFlagValue:
      return toClientReflType<const char *>(C);
    case reflenums::clang__DiagnosticsEngine::getFlagValue:
      return toClientReflType<const char *>(C);
    case reflenums::clang__DiagnosticsEngine::getFlagValue:
      return toClientReflType<const char *>(C);
    case reflenums::clang__DiagnosticsEngine::getFlagValue:
      return toClientReflType<const char *>(C);
    case reflenums::clang__DiagnosticsEngine::getFlagValue:
      return toClientReflType<const char *>(C);
    case reflenums::clang__DiagnosticsEngine::getFlagValue:
      return toClientReflType<const char *>(C);
    case reflenums::clang__DiagnosticsEngine::getFlagValue:
      return toClientReflType<const char *>(C);
    case reflenums::clang__DiagnosticsEngine::getFlagValue:
      return toClientReflType<const char *>(C);
    case reflenums::clang__DiagnosticsEngine::getFlagValue:
      return toClientReflType<const char *>(C);
    case reflenums::clang__DiagnosticsEngine::getFlagValue:
      return toClientReflType<const char *>(C);
    case reflenums::clang__DiagnosticsEngine::getFlagValue:
      return toClientReflType<const char *>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__DiagnosticBuilder:
  switch (static_cast<reflenums::clang__DiagnosticBuilder::memnames>(MemNum)) {
    case reflenums::clang__DiagnosticBuilder:::
      return toClientReflType<>(C);
    case reflenums::clang__DiagnosticBuilder:::
      return toClientReflType<>(C);
    case reflenums::clang__DiagnosticBuilder:::
      return toClientReflType<>(C);
    case reflenums::clang__DiagnosticBuilder:::
      return toClientReflType<>(C);
    case reflenums::clang__DiagnosticBuilder:::
      return toClientReflType<>(C);
    case reflenums::clang__DiagnosticBuilder:::
      return toClientReflType<>(C);
    case reflenums::clang__DiagnosticBuilder:::
      return toClientReflType<>(C);
    case reflenums::clang__DiagnosticBuilder:::
      return toClientReflType<>(C);
    case reflenums::clang__DiagnosticBuilder:::
      return toClientReflType<>(C);
    case reflenums::clang__DiagnosticBuilder:::
      return toClientReflType<>(C);
    case reflenums::clang__DiagnosticBuilder:::
      return toClientReflType<>(C);
    case reflenums::clang__DiagnosticBuilder:::
      return toClientReflType<>(C);
    case reflenums::clang__DiagnosticBuilder:::
      return toClientReflType<>(C);
    case reflenums::clang__DiagnosticBuilder:::
      return toClientReflType<>(C);
    case reflenums::clang__DiagnosticBuilder:::
      return toClientReflType<>(C);
    case reflenums::clang__DiagnosticBuilder:::
      return toClientReflType<>(C);
    case reflenums::clang__DiagnosticBuilder:::
      return toClientReflType<>(C);
    case reflenums::clang__DiagnosticBuilder:::
      return toClientReflType<>(C);
    case reflenums::clang__DiagnosticBuilder:::
      return toClientReflType<>(C);
    case reflenums::clang__DiagnosticBuilder::setForceEmit:
      return toClientReflType<const class clang::DiagnosticBuilder &>(C);
    case reflenums::clang__DiagnosticBuilder::operator_bool:
      return toClientReflType<bool>(C);
    case reflenums::clang__DiagnosticBuilder::AddString:
      return toClientReflType<void>(C);
    case reflenums::clang__DiagnosticBuilder::AddTaggedVal:
      return toClientReflType<void>(C);
    case reflenums::clang__DiagnosticBuilder::AddSourceRange:
      return toClientReflType<void>(C);
    case reflenums::clang__DiagnosticBuilder::AddFixItHint:
      return toClientReflType<void>(C);
    case reflenums::clang__DiagnosticBuilder::addFlagValue:
      return toClientReflType<void>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__DiagnosticConsumer:
  switch (static_cast<reflenums::clang__DiagnosticConsumer::memnames>(MemNum)) {
    case reflenums::clang__DiagnosticConsumer:::
      return toClientReflType<>(C);
    case reflenums::clang__DiagnosticConsumer:::
      return toClientReflType<>(C);
    case reflenums::clang__DiagnosticConsumer:::
      return toClientReflType<>(C);
    case reflenums::clang__DiagnosticConsumer:::
      return toClientReflType<>(C);
    case reflenums::clang__DiagnosticConsumer:::
      return toClientReflType<>(C);
    case reflenums::clang__DiagnosticConsumer:::
      return toClientReflType<>(C);
    case reflenums::clang__DiagnosticConsumer:::
      return toClientReflType<>(C);
    case reflenums::clang__DiagnosticConsumer::getNumErrors:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__DiagnosticConsumer::getNumWarnings:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__DiagnosticConsumer::getNumWarnings:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__DiagnosticConsumer::getNumWarnings:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__DiagnosticConsumer::getNumWarnings:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__DiagnosticConsumer::getNumWarnings:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__DiagnosticConsumer::IncludeInDiagnosticCounts:
      return toClientReflType<bool>(C);
    case reflenums::clang__DiagnosticConsumer::IncludeInDiagnosticCounts:
      return toClientReflType<bool>(C);
    case reflenums::clang__DiagnosticConsumer::IncludeInDiagnosticCounts:
      return toClientReflType<bool>(C);
    case reflenums::clang__DiagnosticConsumer::IncludeInDiagnosticCounts:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__IdentifierInfo:
  switch (static_cast<reflenums::clang__IdentifierInfo::memnames>(MemNum)) {
    case reflenums::clang__IdentifierInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__IdentifierInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__IdentifierInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__IdentifierInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__IdentifierInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__IdentifierInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__IdentifierInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__IdentifierInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__IdentifierInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__IdentifierInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__IdentifierInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__IdentifierInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__IdentifierInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__IdentifierInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__IdentifierInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__IdentifierInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__IdentifierInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__IdentifierInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__IdentifierInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__IdentifierInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__IdentifierInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__IdentifierInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__IdentifierInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__IdentifierInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__IdentifierInfo::isStr:
      return toClientReflType<bool>(C);
    case reflenums::clang__IdentifierInfo::getNameStart:
      return toClientReflType<const char *>(C);
    case reflenums::clang__IdentifierInfo::getLength:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__IdentifierInfo::getName:
      return toClientReflType<const char *>(C);
    case reflenums::clang__IdentifierInfo::hasMacroDefinition:
      return toClientReflType<bool>(C);
    case reflenums::clang__IdentifierInfo::hasMacroDefinition:
      return toClientReflType<bool>(C);
    case reflenums::clang__IdentifierInfo::hadMacroDefinition:
      return toClientReflType<bool>(C);
    case reflenums::clang__IdentifierInfo::getTokenID:
      return toClientReflType<enum clang::tok::TokenKind>(C);
    case reflenums::clang__IdentifierInfo::hasRevertedTokenIDToIdentifier:
      return toClientReflType<bool>(C);
    case reflenums::clang__IdentifierInfo::hasRevertedTokenIDToIdentifier:
      return toClientReflType<bool>(C);
    case reflenums::clang__IdentifierInfo::hasRevertedTokenIDToIdentifier:
      return toClientReflType<bool>(C);
    case reflenums::clang__IdentifierInfo::getPPKeywordID:
      return toClientReflType<enum clang::tok::PPKeywordKind>(C);
    case reflenums::clang__IdentifierInfo::getObjCKeywordID:
      return toClientReflType<enum clang::tok::ObjCKeywordKind>(C);
    case reflenums::clang__IdentifierInfo::getObjCKeywordID:
      return toClientReflType<enum clang::tok::ObjCKeywordKind>(C);
    case reflenums::clang__IdentifierInfo::hasRevertedBuiltin:
      return toClientReflType<bool>(C);
    case reflenums::clang__IdentifierInfo::hasRevertedBuiltin:
      return toClientReflType<bool>(C);
    case reflenums::clang__IdentifierInfo::getBuiltinID:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__IdentifierInfo::getBuiltinID:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__IdentifierInfo::getObjCOrBuiltinID:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__IdentifierInfo::getObjCOrBuiltinID:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__IdentifierInfo::isExtensionToken:
      return toClientReflType<bool>(C);
    case reflenums::clang__IdentifierInfo::isExtensionToken:
      return toClientReflType<bool>(C);
    case reflenums::clang__IdentifierInfo::isFutureCompatKeyword:
      return toClientReflType<bool>(C);
    case reflenums::clang__IdentifierInfo::isFutureCompatKeyword:
      return toClientReflType<bool>(C);
    case reflenums::clang__IdentifierInfo::isFutureCompatKeyword:
      return toClientReflType<bool>(C);
    case reflenums::clang__IdentifierInfo::isPoisoned:
      return toClientReflType<bool>(C);
    case reflenums::clang__IdentifierInfo::isPoisoned:
      return toClientReflType<bool>(C);
    case reflenums::clang__IdentifierInfo::isCPlusPlusOperatorKeyword:
      return toClientReflType<bool>(C);
    case reflenums::clang__IdentifierInfo::isKeyword:
      return toClientReflType<bool>(C);
    case reflenums::clang__IdentifierInfo::isCPlusPlusKeyword:
      return toClientReflType<bool>(C);
    case reflenums::clang__IdentifierInfo::isCPlusPlusKeyword:
      return toClientReflType<bool>(C);
    case reflenums::clang__IdentifierInfo::isCPlusPlusKeyword:
      return toClientReflType<bool>(C);
    case reflenums::clang__IdentifierInfo::isHandleIdentifierCase:
      return toClientReflType<bool>(C);
    case reflenums::clang__IdentifierInfo::isFromAST:
      return toClientReflType<bool>(C);
    case reflenums::clang__IdentifierInfo::isFromAST:
      return toClientReflType<bool>(C);
    case reflenums::clang__IdentifierInfo::hasChangedSinceDeserialization:
      return toClientReflType<bool>(C);
    case reflenums::clang__IdentifierInfo::hasChangedSinceDeserialization:
      return toClientReflType<bool>(C);
    case reflenums::clang__IdentifierInfo::hasFETokenInfoChangedSinceDeserialization:
      return toClientReflType<bool>(C);
    case reflenums::clang__IdentifierInfo::hasFETokenInfoChangedSinceDeserialization:
      return toClientReflType<bool>(C);
    case reflenums::clang__IdentifierInfo::isOutOfDate:
      return toClientReflType<bool>(C);
    case reflenums::clang__IdentifierInfo::isOutOfDate:
      return toClientReflType<bool>(C);
    case reflenums::clang__IdentifierInfo::isModulesImport:
      return toClientReflType<bool>(C);
    case reflenums::clang__IdentifierInfo::isModulesImport:
      return toClientReflType<bool>(C);
    case reflenums::clang__IdentifierInfo::isEditorPlaceholder:
      return toClientReflType<bool>(C);
    case reflenums::clang__IdentifierInfo::operator_less:
      return toClientReflType<bool>(C);
    case reflenums::clang__IdentifierInfo::operator_less:
      return toClientReflType<bool>(C);
    case reflenums::clang__IdentifierInfo::operator_less:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__IdentifierInfoLookup:
  switch (static_cast<reflenums::clang__IdentifierInfoLookup::memnames>(MemNum)) {
    case reflenums::clang__IdentifierInfoLookup:::
      return toClientReflType<>(C);
    case reflenums::clang__IdentifierInfoLookup:::
      return toClientReflType<>(C);
    case reflenums::clang__IdentifierInfoLookup:::
      return toClientReflType<>(C);
    case reflenums::clang__IdentifierInfoLookup:::
      return toClientReflType<>(C);
    case reflenums::clang__IdentifierInfoLookup:::
      return toClientReflType<>(C);
    case reflenums::clang__IdentifierInfoLookup:::
      return toClientReflType<>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__IdentifierTable:
  switch (static_cast<reflenums::clang__IdentifierTable::memnames>(MemNum)) {
    case reflenums::clang__IdentifierTable:::
      return toClientReflType<>(C);
    case reflenums::clang__IdentifierTable:::
      return toClientReflType<>(C);
    case reflenums::clang__IdentifierTable:::
      return toClientReflType<>(C);
    case reflenums::clang__IdentifierTable:::
      return toClientReflType<>(C);
    case reflenums::clang__IdentifierTable:::
      return toClientReflType<>(C);
    case reflenums::clang__IdentifierTable:::
      return toClientReflType<>(C);
    case reflenums::clang__IdentifierTable:::
      return toClientReflType<>(C);
    case reflenums::clang__IdentifierTable:::
      return toClientReflType<>(C);
    case reflenums::clang__IdentifierTable::getExternalIdentifierLookup:
      return toClientReflType<class clang::IdentifierInfoLookup *>(C);
    case reflenums::clang__IdentifierTable::getExternalIdentifierLookup:
      return toClientReflType<class clang::IdentifierInfoLookup *>(C);
    case reflenums::clang__IdentifierTable::getExternalIdentifierLookup:
      return toClientReflType<class clang::IdentifierInfoLookup *>(C);
    case reflenums::clang__IdentifierTable::getExternalIdentifierLookup:
      return toClientReflType<class clang::IdentifierInfoLookup *>(C);
    case reflenums::clang__IdentifierTable::getExternalIdentifierLookup:
      return toClientReflType<class clang::IdentifierInfoLookup *>(C);
    case reflenums::clang__IdentifierTable::getExternalIdentifierLookup:
      return toClientReflType<class clang::IdentifierInfoLookup *>(C);
    case reflenums::clang__IdentifierTable::getExternalIdentifierLookup:
      return toClientReflType<class clang::IdentifierInfoLookup *>(C);
    case reflenums::clang__IdentifierTable::getExternalIdentifierLookup:
      return toClientReflType<class clang::IdentifierInfoLookup *>(C);
    case reflenums::clang__IdentifierTable::getExternalIdentifierLookup:
      return toClientReflType<class clang::IdentifierInfoLookup *>(C);
    case reflenums::clang__IdentifierTable::size:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__IdentifierTable::PrintStats:
      return toClientReflType<void>(C);
    case reflenums::clang__IdentifierTable::PrintStats:
      return toClientReflType<void>(C);
    case reflenums::clang__IdentifierTable::PrintStats:
      return toClientReflType<void>(C);
    case reflenums::clang__IdentifierTable::PrintStats:
      return toClientReflType<void>(C);
    case reflenums::clang__IdentifierTable::PrintStats:
      return toClientReflType<void>(C);
    case reflenums::clang__IdentifierTable::PrintStats:
      return toClientReflType<void>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__Selector:
  switch (static_cast<reflenums::clang__Selector::memnames>(MemNum)) {
    case reflenums::clang__Selector:::
      return toClientReflType<>(C);
    case reflenums::clang__Selector:::
      return toClientReflType<>(C);
    case reflenums::clang__Selector:::
      return toClientReflType<>(C);
    case reflenums::clang__Selector:::
      return toClientReflType<>(C);
    case reflenums::clang__Selector:::
      return toClientReflType<>(C);
    case reflenums::clang__Selector:::
      return toClientReflType<>(C);
    case reflenums::clang__Selector:::
      return toClientReflType<>(C);
    case reflenums::clang__Selector:::
      return toClientReflType<>(C);
    case reflenums::clang__Selector:::
      return toClientReflType<>(C);
    case reflenums::clang__Selector:::
      return toClientReflType<>(C);
    case reflenums::clang__Selector:::
      return toClientReflType<>(C);
    case reflenums::clang__Selector:::
      return toClientReflType<>(C);
    case reflenums::clang__Selector:::
      return toClientReflType<>(C);
    case reflenums::clang__Selector:::
      return toClientReflType<>(C);
    case reflenums::clang__Selector:::
      return toClientReflType<>(C);
    case reflenums::clang__Selector:::
      return toClientReflType<>(C);
    case reflenums::clang__Selector::operator_eq_eq:
      return toClientReflType<bool>(C);
    case reflenums::clang__Selector::operator_not_eq:
      return toClientReflType<bool>(C);
    case reflenums::clang__Selector::getAsOpaquePtr:
      return toClientReflType<void *>(C);
    case reflenums::clang__Selector::isNull:
      return toClientReflType<bool>(C);
    case reflenums::clang__Selector::isKeywordSelector:
      return toClientReflType<bool>(C);
    case reflenums::clang__Selector::isUnarySelector:
      return toClientReflType<bool>(C);
    case reflenums::clang__Selector::getNumArgs:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__Selector::getIdentifierInfoForSlot:
      return toClientReflType<class clang::IdentifierInfo *>(C);
    case reflenums::clang__Selector::getNameForSlot:
      return toClientReflType<const char *>(C);
    case reflenums::clang__Selector::getAsString:
      return toClientReflType<const char *>(C);
    case reflenums::clang__Selector::print:
      return toClientReflType<void>(C);
    case reflenums::clang__Selector::dump:
      return toClientReflType<void>(C);
    case reflenums::clang__Selector::getMethodFamily:
      return toClientReflType<enum clang::ObjCMethodFamily>(C);
    case reflenums::clang__Selector::getStringFormatFamily:
      return toClientReflType<enum clang::ObjCStringFormatFamily>(C);
    case reflenums::clang__Selector::getEmptyMarker:
      return toClientReflType<class clang::Selector>(C);
    case reflenums::clang__Selector::getTombstoneMarker:
      return toClientReflType<class clang::Selector>(C);
    case reflenums::clang__Selector::getInstTypeMethodFamily:
      return toClientReflType<enum clang::ObjCInstanceTypeFamily>(C);
    case reflenums::clang__Selector::getInstTypeMethodFamily:
      return toClientReflType<enum clang::ObjCInstanceTypeFamily>(C);
    case reflenums::clang__Selector::getInstTypeMethodFamily:
      return toClientReflType<enum clang::ObjCInstanceTypeFamily>(C);
    case reflenums::clang__Selector::getInstTypeMethodFamily:
      return toClientReflType<enum clang::ObjCInstanceTypeFamily>(C);
    case reflenums::clang__Selector::getInstTypeMethodFamily:
      return toClientReflType<enum clang::ObjCInstanceTypeFamily>(C);
    case reflenums::clang__Selector::getInstTypeMethodFamily:
      return toClientReflType<enum clang::ObjCInstanceTypeFamily>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__SelectorTable:
  switch (static_cast<reflenums::clang__SelectorTable::memnames>(MemNum)) {
    case reflenums::clang__SelectorTable:::
      return toClientReflType<>(C);
    case reflenums::clang__SelectorTable:::
      return toClientReflType<>(C);
    case reflenums::clang__SelectorTable:::
      return toClientReflType<>(C);
    case reflenums::clang__SelectorTable:::
      return toClientReflType<>(C);
    case reflenums::clang__SelectorTable:::
      return toClientReflType<>(C);
    case reflenums::clang__SelectorTable:::
      return toClientReflType<>(C);
    case reflenums::clang__SelectorTable:::
      return toClientReflType<>(C);
    case reflenums::clang__SelectorTable:::
      return toClientReflType<>(C);
    case reflenums::clang__SelectorTable:::
      return toClientReflType<>(C);
    case reflenums::clang__SelectorTable:::
      return toClientReflType<>(C);
    case reflenums::clang__SelectorTable::getTotalMemory:
      return toClientReflType<unsigned long>(C);
    case reflenums::clang__SelectorTable::getTotalMemory:
      return toClientReflType<unsigned long>(C);
    case reflenums::clang__SelectorTable::constructSetterSelector:
      return toClientReflType<class clang::Selector>(C);
    case reflenums::clang__SelectorTable::getPropertyNameFromSetterSelector:
      return toClientReflType<const char *>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__PartialDiagnostic:
  switch (static_cast<reflenums::clang__PartialDiagnostic::memnames>(MemNum)) {
    case reflenums::clang__PartialDiagnostic:::
      return toClientReflType<>(C);
    case reflenums::clang__PartialDiagnostic:::
      return toClientReflType<>(C);
    case reflenums::clang__PartialDiagnostic:::
      return toClientReflType<>(C);
    case reflenums::clang__PartialDiagnostic:::
      return toClientReflType<>(C);
    case reflenums::clang__PartialDiagnostic:::
      return toClientReflType<>(C);
    case reflenums::clang__PartialDiagnostic:::
      return toClientReflType<>(C);
    case reflenums::clang__PartialDiagnostic:::
      return toClientReflType<>(C);
    case reflenums::clang__PartialDiagnostic:::
      return toClientReflType<>(C);
    case reflenums::clang__PartialDiagnostic:::
      return toClientReflType<>(C);
    case reflenums::clang__PartialDiagnostic:::
      return toClientReflType<>(C);
    case reflenums::clang__PartialDiagnostic:::
      return toClientReflType<>(C);
    case reflenums::clang__PartialDiagnostic:::
      return toClientReflType<>(C);
    case reflenums::clang__PartialDiagnostic:::
      return toClientReflType<>(C);
    case reflenums::clang__PartialDiagnostic:::
      return toClientReflType<>(C);
    case reflenums::clang__PartialDiagnostic:::
      return toClientReflType<>(C);
    case reflenums::clang__PartialDiagnostic:::
      return toClientReflType<>(C);
    case reflenums::clang__PartialDiagnostic:::
      return toClientReflType<>(C);
    case reflenums::clang__PartialDiagnostic:::
      return toClientReflType<>(C);
    case reflenums::clang__PartialDiagnostic:::
      return toClientReflType<>(C);
    case reflenums::clang__PartialDiagnostic:::
      return toClientReflType<>(C);
    case reflenums::clang__PartialDiagnostic:::
      return toClientReflType<>(C);
    case reflenums::clang__PartialDiagnostic:::
      return toClientReflType<>(C);
    case reflenums::clang__PartialDiagnostic:::
      return toClientReflType<>(C);
    case reflenums::clang__PartialDiagnostic:::
      return toClientReflType<>(C);
    case reflenums::clang__PartialDiagnostic:::
      return toClientReflType<>(C);
    case reflenums::clang__PartialDiagnostic:::
      return toClientReflType<>(C);
    case reflenums::clang__PartialDiagnostic::getDiagID:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__PartialDiagnostic::AddTaggedVal:
      return toClientReflType<void>(C);
    case reflenums::clang__PartialDiagnostic::AddString:
      return toClientReflType<void>(C);
    case reflenums::clang__PartialDiagnostic::Emit:
      return toClientReflType<void>(C);
    case reflenums::clang__PartialDiagnostic::Emit:
      return toClientReflType<void>(C);
    case reflenums::clang__PartialDiagnostic::Emit:
      return toClientReflType<void>(C);
    case reflenums::clang__PartialDiagnostic::hasStorage:
      return toClientReflType<bool>(C);
    case reflenums::clang__PartialDiagnostic::getNumArgs:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__PartialDiagnostic::getNumArgs:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__PartialDiagnostic::operator_less_less:
      return toClientReflType<const class clang::PartialDiagnostic &>(C);
    case reflenums::clang__PartialDiagnostic::operator_less_less1:
      return toClientReflType<const class clang::PartialDiagnostic &>(C);
    case reflenums::clang__PartialDiagnostic::operator_less_less2:
      return toClientReflType<const class clang::PartialDiagnostic &>(C);
    case reflenums::clang__PartialDiagnostic::operator_less_less3:
      return toClientReflType<const class clang::PartialDiagnostic &>(C);
    case reflenums::clang__PartialDiagnostic::operator_less_less4:
      return toClientReflType<const class clang::PartialDiagnostic &>(C);
    case reflenums::clang__PartialDiagnostic::operator_less_less4:
      return toClientReflType<const class clang::PartialDiagnostic &>(C);
    case reflenums::clang__PartialDiagnostic::operator_less_less5:
      return toClientReflType<const class clang::PartialDiagnostic &>(C);
    case reflenums::clang__PartialDiagnostic::operator_less_less6:
      return toClientReflType<const class clang::PartialDiagnostic &>(C);
    case reflenums::clang__PartialDiagnostic::operator_less_less7:
      return toClientReflType<const class clang::PartialDiagnostic &>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__DeclarationName:
  switch (static_cast<reflenums::clang__DeclarationName::memnames>(MemNum)) {
    case reflenums::clang__DeclarationName:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclarationName:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclarationName:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclarationName:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclarationName:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclarationName:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclarationName:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclarationName:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclarationName:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclarationName:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclarationName:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclarationName:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclarationName:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclarationName:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclarationName:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclarationName:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclarationName:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclarationName:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclarationName:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclarationName:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclarationName:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclarationName:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclarationName:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclarationName::getUsingDirectiveName:
      return toClientReflType<class clang::DeclarationName>(C);
    case reflenums::clang__DeclarationName::operator_bool:
      return toClientReflType<bool>(C);
    case reflenums::clang__DeclarationName::isEmpty:
      return toClientReflType<bool>(C);
    case reflenums::clang__DeclarationName::isIdentifier:
      return toClientReflType<bool>(C);
    case reflenums::clang__DeclarationName::isObjCZeroArgSelector:
      return toClientReflType<bool>(C);
    case reflenums::clang__DeclarationName::isObjCOneArgSelector:
      return toClientReflType<bool>(C);
    case reflenums::clang__DeclarationName::getNameKind:
      return toClientReflType<enum clang::DeclarationName::NameKind>(C);
    case reflenums::clang__DeclarationName::isDependentName:
      return toClientReflType<bool>(C);
    case reflenums::clang__DeclarationName::getAsString:
      return toClientReflType<const char *>(C);
    case reflenums::clang__DeclarationName::getAsIdentifierInfo:
      return toClientReflType<class clang::IdentifierInfo *>(C);
    case reflenums::clang__DeclarationName::getAsOpaqueInteger:
      return toClientReflType<unsigned long>(C);
    case reflenums::clang__DeclarationName::getAsOpaquePtr:
      return toClientReflType<void *>(C);
    case reflenums::clang__DeclarationName::getFromOpaquePtr:
      return toClientReflType<class clang::DeclarationName>(C);
    case reflenums::clang__DeclarationName::getFromOpaqueInteger:
      return toClientReflType<class clang::DeclarationName>(C);
    case reflenums::clang__DeclarationName::getCXXNameType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__DeclarationName::getCXXDeductionGuideTemplate:
      return toClientReflType<class clang::TemplateDecl *>(C);
    case reflenums::clang__DeclarationName::getCXXOverloadedOperator:
      return toClientReflType<enum clang::OverloadedOperatorKind>(C);
    case reflenums::clang__DeclarationName::getCXXLiteralIdentifier:
      return toClientReflType<class clang::IdentifierInfo *>(C);
    case reflenums::clang__DeclarationName::getCXXIdExprArguments:
      return toClientReflType<class llvm::ArrayRef<class clang::Expr *>>(C);
    case reflenums::clang__DeclarationName::getObjCSelector:
      return toClientReflType<class clang::Selector>(C);
    case reflenums::clang__DeclarationName::getObjCSelector:
      return toClientReflType<class clang::Selector>(C);
    case reflenums::clang__DeclarationName::getObjCSelector:
      return toClientReflType<class clang::Selector>(C);
    case reflenums::clang__DeclarationName::operator_eq_eq:
      return toClientReflType<bool>(C);
    case reflenums::clang__DeclarationName::operator_not_eq:
      return toClientReflType<bool>(C);
    case reflenums::clang__DeclarationName::getEmptyMarker:
      return toClientReflType<class clang::DeclarationName>(C);
    case reflenums::clang__DeclarationName::getTombstoneMarker:
      return toClientReflType<class clang::DeclarationName>(C);
    case reflenums::clang__DeclarationName::compare:
      return toClientReflType<int>(C);
    case reflenums::clang__DeclarationName::compare:
      return toClientReflType<int>(C);
    case reflenums::clang__DeclarationName::dump:
      return toClientReflType<void>(C);
    case reflenums::clang__DeclarationName::dump:
      return toClientReflType<void>(C);
    case reflenums::clang__DeclarationName::dump:
      return toClientReflType<void>(C);
    case reflenums::clang__DeclarationName::dump:
      return toClientReflType<void>(C);
    case reflenums::clang__DeclarationName::dump:
      return toClientReflType<void>(C);
    case reflenums::clang__DeclarationName::dump:
      return toClientReflType<void>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__DeclarationNameLoc:
  switch (static_cast<reflenums::clang__DeclarationNameLoc::memnames>(MemNum)) {
    case reflenums::clang__DeclarationNameLoc:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclarationNameLoc:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclarationNameLoc:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclarationNameLoc:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclarationNameLoc:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclarationNameLoc:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclarationNameLoc:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclarationNameLoc:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclarationNameLoc:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclarationNameLoc:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclarationNameLoc:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclarationNameLoc:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclarationNameLoc:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclarationNameLoc:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclarationNameLoc:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclarationNameLoc:::
      return toClientReflType<>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__DeclarationNameInfo:
  switch (static_cast<reflenums::clang__DeclarationNameInfo::memnames>(MemNum)) {
    case reflenums::clang__DeclarationNameInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclarationNameInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclarationNameInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclarationNameInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclarationNameInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclarationNameInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclarationNameInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclarationNameInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclarationNameInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclarationNameInfo::getName:
      return toClientReflType<class clang::DeclarationName>(C);
    case reflenums::clang__DeclarationNameInfo::getName:
      return toClientReflType<class clang::DeclarationName>(C);
    case reflenums::clang__DeclarationNameInfo::getLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__DeclarationNameInfo::getLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__DeclarationNameInfo::getInfo:
      return toClientReflType<const struct clang::DeclarationNameLoc &>(C);
    case reflenums::clang__DeclarationNameInfo::getInfo:
      return toClientReflType<const struct clang::DeclarationNameLoc &>(C);
    case reflenums::clang__DeclarationNameInfo::getInfo:
      return toClientReflType<const struct clang::DeclarationNameLoc &>(C);
    case reflenums::clang__DeclarationNameInfo::getNamedTypeInfo:
      return toClientReflType<class clang::TypeSourceInfo *>(C);
    case reflenums::clang__DeclarationNameInfo::getNamedTypeInfo:
      return toClientReflType<class clang::TypeSourceInfo *>(C);
    case reflenums::clang__DeclarationNameInfo::getCXXOperatorNameRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__DeclarationNameInfo::getCXXOperatorNameRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__DeclarationNameInfo::getCXXLiteralOperatorNameLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__DeclarationNameInfo::getCXXLiteralOperatorNameLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__DeclarationNameInfo::getCXXIdExprNameRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__DeclarationNameInfo::getCXXIdExprNameRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__DeclarationNameInfo::isInstantiationDependent:
      return toClientReflType<bool>(C);
    case reflenums::clang__DeclarationNameInfo::containsUnexpandedParameterPack:
      return toClientReflType<bool>(C);
    case reflenums::clang__DeclarationNameInfo::getAsString:
      return toClientReflType<const char *>(C);
    case reflenums::clang__DeclarationNameInfo::printName:
      return toClientReflType<void>(C);
    case reflenums::clang__DeclarationNameInfo::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__DeclarationNameInfo::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__DeclarationNameInfo::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__DeclarationNameInfo::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__DeclarationNameInfo::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__DeclarationNameInfo::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__DeclarationNameInfo::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__DeclarationNameInfo::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__DeclarationNameInfo::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__DeclarationNameInfo::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__DeclarationNameInfo::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__DeclarationNameInfo::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_llvm__raw_ostream:
  switch (static_cast<reflenums::llvm__raw_ostream::memnames>(MemNum)) {
    case reflenums::llvm__raw_ostream:::
      return toClientReflType<>(C);
    case reflenums::llvm__raw_ostream:::
      return toClientReflType<>(C);
    case reflenums::llvm__raw_ostream:::
      return toClientReflType<>(C);
    case reflenums::llvm__raw_ostream:::
      return toClientReflType<>(C);
    case reflenums::llvm__raw_ostream:::
      return toClientReflType<>(C);
    case reflenums::llvm__raw_ostream:::
      return toClientReflType<>(C);
    case reflenums::llvm__raw_ostream:::
      return toClientReflType<>(C);
    case reflenums::llvm__raw_ostream:::
      return toClientReflType<>(C);
    case reflenums::llvm__raw_ostream:::
      return toClientReflType<>(C);
    case reflenums::llvm__raw_ostream:::
      return toClientReflType<>(C);
    case reflenums::llvm__raw_ostream:::
      return toClientReflType<>(C);
    case reflenums::llvm__raw_ostream:::
      return toClientReflType<>(C);
    case reflenums::llvm__raw_ostream:::
      return toClientReflType<>(C);
    case reflenums::llvm__raw_ostream::tell:
      return toClientReflType<unsigned long long>(C);
    case reflenums::llvm__raw_ostream::tell:
      return toClientReflType<unsigned long long>(C);
    case reflenums::llvm__raw_ostream::tell:
      return toClientReflType<unsigned long long>(C);
    case reflenums::llvm__raw_ostream::GetBufferSize:
      return toClientReflType<unsigned long>(C);
    case reflenums::llvm__raw_ostream::GetBufferSize:
      return toClientReflType<unsigned long>(C);
    case reflenums::llvm__raw_ostream::GetNumBytesInBuffer:
      return toClientReflType<unsigned long>(C);
    case reflenums::llvm__raw_ostream::GetNumBytesInBuffer:
      return toClientReflType<unsigned long>(C);
    case reflenums::llvm__raw_ostream::GetNumBytesInBuffer:
      return toClientReflType<unsigned long>(C);
    case reflenums::llvm__raw_ostream::GetNumBytesInBuffer:
      return toClientReflType<unsigned long>(C);
    case reflenums::llvm__raw_ostream::GetNumBytesInBuffer:
      return toClientReflType<unsigned long>(C);
    case reflenums::llvm__raw_ostream::GetNumBytesInBuffer:
      return toClientReflType<unsigned long>(C);
    case reflenums::llvm__raw_ostream::GetNumBytesInBuffer:
      return toClientReflType<unsigned long>(C);
    case reflenums::llvm__raw_ostream::GetNumBytesInBuffer:
      return toClientReflType<unsigned long>(C);
    case reflenums::llvm__raw_ostream::GetNumBytesInBuffer:
      return toClientReflType<unsigned long>(C);
    case reflenums::llvm__raw_ostream::GetNumBytesInBuffer:
      return toClientReflType<unsigned long>(C);
    case reflenums::llvm__raw_ostream::GetNumBytesInBuffer:
      return toClientReflType<unsigned long>(C);
    case reflenums::llvm__raw_ostream::GetNumBytesInBuffer:
      return toClientReflType<unsigned long>(C);
    case reflenums::llvm__raw_ostream::GetNumBytesInBuffer:
      return toClientReflType<unsigned long>(C);
    case reflenums::llvm__raw_ostream::GetNumBytesInBuffer:
      return toClientReflType<unsigned long>(C);
    case reflenums::llvm__raw_ostream::GetNumBytesInBuffer:
      return toClientReflType<unsigned long>(C);
    case reflenums::llvm__raw_ostream::GetNumBytesInBuffer:
      return toClientReflType<unsigned long>(C);
    case reflenums::llvm__raw_ostream::GetNumBytesInBuffer:
      return toClientReflType<unsigned long>(C);
    case reflenums::llvm__raw_ostream::GetNumBytesInBuffer:
      return toClientReflType<unsigned long>(C);
    case reflenums::llvm__raw_ostream::GetNumBytesInBuffer:
      return toClientReflType<unsigned long>(C);
    case reflenums::llvm__raw_ostream::GetNumBytesInBuffer:
      return toClientReflType<unsigned long>(C);
    case reflenums::llvm__raw_ostream::GetNumBytesInBuffer:
      return toClientReflType<unsigned long>(C);
    case reflenums::llvm__raw_ostream::GetNumBytesInBuffer:
      return toClientReflType<unsigned long>(C);
    case reflenums::llvm__raw_ostream::GetNumBytesInBuffer:
      return toClientReflType<unsigned long>(C);
    case reflenums::llvm__raw_ostream::GetNumBytesInBuffer:
      return toClientReflType<unsigned long>(C);
    case reflenums::llvm__raw_ostream::GetNumBytesInBuffer:
      return toClientReflType<unsigned long>(C);
    case reflenums::llvm__raw_ostream::GetNumBytesInBuffer:
      return toClientReflType<unsigned long>(C);
    case reflenums::llvm__raw_ostream::GetNumBytesInBuffer:
      return toClientReflType<unsigned long>(C);
    case reflenums::llvm__raw_ostream::GetNumBytesInBuffer:
      return toClientReflType<unsigned long>(C);
    case reflenums::llvm__raw_ostream::GetNumBytesInBuffer:
      return toClientReflType<unsigned long>(C);
    case reflenums::llvm__raw_ostream::GetNumBytesInBuffer:
      return toClientReflType<unsigned long>(C);
    case reflenums::llvm__raw_ostream::GetNumBytesInBuffer:
      return toClientReflType<unsigned long>(C);
    case reflenums::llvm__raw_ostream::GetNumBytesInBuffer:
      return toClientReflType<unsigned long>(C);
    case reflenums::llvm__raw_ostream::GetNumBytesInBuffer:
      return toClientReflType<unsigned long>(C);
    case reflenums::llvm__raw_ostream::is_displayed:
      return toClientReflType<bool>(C);
    case reflenums::llvm__raw_ostream::has_colors:
      return toClientReflType<bool>(C);
    case reflenums::llvm__raw_ostream::has_colors:
      return toClientReflType<bool>(C);
    case reflenums::llvm__raw_ostream::has_colors:
      return toClientReflType<bool>(C);
    case reflenums::llvm__raw_ostream::has_colors:
      return toClientReflType<bool>(C);
    case reflenums::llvm__raw_ostream::has_colors:
      return toClientReflType<bool>(C);
    case reflenums::llvm__raw_ostream::has_colors:
      return toClientReflType<bool>(C);
    case reflenums::llvm__raw_ostream::has_colors:
      return toClientReflType<bool>(C);
    case reflenums::llvm__raw_ostream::has_colors:
      return toClientReflType<bool>(C);
    case reflenums::llvm__raw_ostream::has_colors:
      return toClientReflType<bool>(C);
    case reflenums::llvm__raw_ostream::has_colors:
      return toClientReflType<bool>(C);
    case reflenums::llvm__raw_ostream::has_colors:
      return toClientReflType<bool>(C);
    case reflenums::llvm__raw_ostream::has_colors:
      return toClientReflType<bool>(C);
    case reflenums::llvm__raw_ostream::has_colors:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_llvm__VersionTuple:
  switch (static_cast<reflenums::llvm__VersionTuple::memnames>(MemNum)) {
    case reflenums::llvm__VersionTuple:::
      return toClientReflType<>(C);
    case reflenums::llvm__VersionTuple:::
      return toClientReflType<>(C);
    case reflenums::llvm__VersionTuple:::
      return toClientReflType<>(C);
    case reflenums::llvm__VersionTuple:::
      return toClientReflType<>(C);
    case reflenums::llvm__VersionTuple:::
      return toClientReflType<>(C);
    case reflenums::llvm__VersionTuple:::
      return toClientReflType<>(C);
    case reflenums::llvm__VersionTuple:::
      return toClientReflType<>(C);
    case reflenums::llvm__VersionTuple:::
      return toClientReflType<>(C);
    case reflenums::llvm__VersionTuple:::
      return toClientReflType<>(C);
    case reflenums::llvm__VersionTuple:::
      return toClientReflType<>(C);
    case reflenums::llvm__VersionTuple:::
      return toClientReflType<>(C);
    case reflenums::llvm__VersionTuple:::
      return toClientReflType<>(C);
    case reflenums::llvm__VersionTuple:::
      return toClientReflType<>(C);
    case reflenums::llvm__VersionTuple:::
      return toClientReflType<>(C);
    case reflenums::llvm__VersionTuple::empty:
      return toClientReflType<bool>(C);
    case reflenums::llvm__VersionTuple::getMajor:
      return toClientReflType<unsigned int>(C);
    case reflenums::llvm__VersionTuple::getMajor:
      return toClientReflType<unsigned int>(C);
    case reflenums::llvm__VersionTuple::getMajor:
      return toClientReflType<unsigned int>(C);
    case reflenums::llvm__VersionTuple::getMajor:
      return toClientReflType<unsigned int>(C);
    case reflenums::llvm__VersionTuple::operator_eq_eq:
      return toClientReflType<bool>(C);
    case reflenums::llvm__VersionTuple::operator_not_eq:
      return toClientReflType<bool>(C);
    case reflenums::llvm__VersionTuple::operator_less:
      return toClientReflType<bool>(C);
    case reflenums::llvm__VersionTuple::operator_gr:
      return toClientReflType<bool>(C);
    case reflenums::llvm__VersionTuple::operator_less_eq:
      return toClientReflType<bool>(C);
    case reflenums::llvm__VersionTuple::operator_gr_eq:
      return toClientReflType<bool>(C);
    case reflenums::llvm__VersionTuple::getAsString:
      return toClientReflType<const char *>(C);
    case reflenums::llvm__VersionTuple::getAsString:
      return toClientReflType<const char *>(C);
    case reflenums::llvm__VersionTuple::getAsString:
      return toClientReflType<const char *>(C);
    case reflenums::llvm__VersionTuple::getAsString:
      return toClientReflType<const char *>(C);
    case reflenums::llvm__VersionTuple::getAsString:
      return toClientReflType<const char *>(C);
    case reflenums::llvm__VersionTuple::getAsString:
      return toClientReflType<const char *>(C);
    case reflenums::llvm__VersionTuple::getAsString:
      return toClientReflType<const char *>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__Decl:
  switch (static_cast<reflenums::clang__Decl::memnames>(MemNum)) {
    case reflenums::clang__Decl:::
      return toClientReflType<>(C);
    case reflenums::clang__Decl:::
      return toClientReflType<>(C);
    case reflenums::clang__Decl:::
      return toClientReflType<>(C);
    case reflenums::clang__Decl:::
      return toClientReflType<>(C);
    case reflenums::clang__Decl:::
      return toClientReflType<>(C);
    case reflenums::clang__Decl:::
      return toClientReflType<>(C);
    case reflenums::clang__Decl:::
      return toClientReflType<>(C);
    case reflenums::clang__Decl:::
      return toClientReflType<>(C);
    case reflenums::clang__Decl:::
      return toClientReflType<>(C);
    case reflenums::clang__Decl:::
      return toClientReflType<>(C);
    case reflenums::clang__Decl:::
      return toClientReflType<>(C);
    case reflenums::clang__Decl:::
      return toClientReflType<>(C);
    case reflenums::clang__Decl:::
      return toClientReflType<>(C);
    case reflenums::clang__Decl:::
      return toClientReflType<>(C);
    case reflenums::clang__Decl:::
      return toClientReflType<>(C);
    case reflenums::clang__Decl:::
      return toClientReflType<>(C);
    case reflenums::clang__Decl:::
      return toClientReflType<>(C);
    case reflenums::clang__Decl:::
      return toClientReflType<>(C);
    case reflenums::clang__Decl:::
      return toClientReflType<>(C);
    case reflenums::clang__Decl:::
      return toClientReflType<>(C);
    case reflenums::clang__Decl:::
      return toClientReflType<>(C);
    case reflenums::clang__Decl:::
      return toClientReflType<>(C);
    case reflenums::clang__Decl:::
      return toClientReflType<>(C);
    case reflenums::clang__Decl:::
      return toClientReflType<>(C);
    case reflenums::clang__Decl:::
      return toClientReflType<>(C);
    case reflenums::clang__Decl:::
      return toClientReflType<>(C);
    case reflenums::clang__Decl:::
      return toClientReflType<>(C);
    case reflenums::clang__Decl:::
      return toClientReflType<>(C);
    case reflenums::clang__Decl:::
      return toClientReflType<>(C);
    case reflenums::clang__Decl:::
      return toClientReflType<>(C);
    case reflenums::clang__Decl:::
      return toClientReflType<>(C);
    case reflenums::clang__Decl:::
      return toClientReflType<>(C);
    case reflenums::clang__Decl:::
      return toClientReflType<>(C);
    case reflenums::clang__Decl:::
      return toClientReflType<>(C);
    case reflenums::clang__Decl:::
      return toClientReflType<>(C);
    case reflenums::clang__Decl:::
      return toClientReflType<>(C);
    case reflenums::clang__Decl:::
      return toClientReflType<>(C);
    case reflenums::clang__Decl:::
      return toClientReflType<>(C);
    case reflenums::clang__Decl:::
      return toClientReflType<>(C);
    case reflenums::clang__Decl:::
      return toClientReflType<>(C);
    case reflenums::clang__Decl:::
      return toClientReflType<>(C);
    case reflenums::clang__Decl:::
      return toClientReflType<>(C);
    case reflenums::clang__Decl:::
      return toClientReflType<>(C);
    case reflenums::clang__Decl:::
      return toClientReflType<>(C);
    case reflenums::clang__Decl:::
      return toClientReflType<>(C);
    case reflenums::clang__Decl:::
      return toClientReflType<>(C);
    case reflenums::clang__Decl:::
      return toClientReflType<>(C);
    case reflenums::clang__Decl:::
      return toClientReflType<>(C);
    case reflenums::clang__Decl:::
      return toClientReflType<>(C);
    case reflenums::clang__Decl:::
      return toClientReflType<>(C);
    case reflenums::clang__Decl:::
      return toClientReflType<>(C);
    case reflenums::clang__Decl:::
      return toClientReflType<>(C);
    case reflenums::clang__Decl:::
      return toClientReflType<>(C);
    case reflenums::clang__Decl::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__Decl::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__Decl::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__Decl::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__Decl::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__Decl::getLocation:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__Decl::getLocation:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__Decl::getKind:
      return toClientReflType<enum clang::Decl::Kind>(C);
    case reflenums::clang__Decl::getDeclKindName:
      return toClientReflType<const char *>(C);
    case reflenums::clang__Decl::getDeclKindName:
      return toClientReflType<const char *>(C);
    case reflenums::clang__Decl::getNextDeclInContext:
      return toClientReflType<const class clang::Decl *>(C);
    case reflenums::clang__Decl::getNextDeclInContext:
      return toClientReflType<const class clang::Decl *>(C);
    case reflenums::clang__Decl::getDeclContext:
      return toClientReflType<const class clang::DeclContext *>(C);
    case reflenums::clang__Decl::getDeclContext:
      return toClientReflType<const class clang::DeclContext *>(C);
    case reflenums::clang__Decl::getNonClosureContext:
      return toClientReflType<const class clang::Decl *>(C);
    case reflenums::clang__Decl::getNonClosureContext:
      return toClientReflType<const class clang::Decl *>(C);
    case reflenums::clang__Decl::getTranslationUnitDecl:
      return toClientReflType<const class clang::TranslationUnitDecl *>(C);
    case reflenums::clang__Decl::isInAnonymousNamespace:
      return toClientReflType<bool>(C);
    case reflenums::clang__Decl::isInStdNamespace:
      return toClientReflType<bool>(C);
    case reflenums::clang__Decl::getASTContext:
      return toClientReflType<class clang::ASTContext &>(C);
    case reflenums::clang__Decl::getASTContext:
      return toClientReflType<class clang::ASTContext &>(C);
    case reflenums::clang__Decl::getAccess:
      return toClientReflType<enum clang::AccessSpecifier>(C);
    case reflenums::clang__Decl::getAccessUnsafe:
      return toClientReflType<enum clang::AccessSpecifier>(C);
    case reflenums::clang__Decl::hasAttrs:
      return toClientReflType<bool>(C);
    case reflenums::clang__Decl::hasAttrs:
      return toClientReflType<bool>(C);
    case reflenums::clang__Decl::hasAttrs:
      return toClientReflType<bool>(C);
    case reflenums::clang__Decl::hasAttrs:
      return toClientReflType<bool>(C);
    case reflenums::clang__Decl::hasAttrs:
      return toClientReflType<bool>(C);
    case reflenums::clang__Decl::hasAttrs:
      return toClientReflType<bool>(C);
    case reflenums::clang__Decl::hasAttrs:
      return toClientReflType<bool>(C);
    case reflenums::clang__Decl::hasAttrs:
      return toClientReflType<bool>(C);
    case reflenums::clang__Decl::attrs:
      return toClientReflType<class llvm::iterator_range<class clang::Attr *const *>>(C);
    case reflenums::clang__Decl::attrs:
      return toClientReflType<class llvm::iterator_range<class clang::Attr *const *>>(C);
    case reflenums::clang__Decl::attrs:
      return toClientReflType<class llvm::iterator_range<class clang::Attr *const *>>(C);
    case reflenums::clang__Decl::attrs:
      return toClientReflType<class llvm::iterator_range<class clang::Attr *const *>>(C);
    case reflenums::clang__Decl::attrs:
      return toClientReflType<class llvm::iterator_range<class clang::Attr *const *>>(C);
    case reflenums::clang__Decl::attrs:
      return toClientReflType<class llvm::iterator_range<class clang::Attr *const *>>(C);
    case reflenums::clang__Decl::attrs:
      return toClientReflType<class llvm::iterator_range<class clang::Attr *const *>>(C);
    case reflenums::clang__Decl::attrs:
      return toClientReflType<class llvm::iterator_range<class clang::Attr *const *>>(C);
    case reflenums::clang__Decl::attrs:
      return toClientReflType<class llvm::iterator_range<class clang::Attr *const *>>(C);
    case reflenums::clang__Decl::getMaxAlignment:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__Decl::getMaxAlignment:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__Decl::isInvalidDecl:
      return toClientReflType<bool>(C);
    case reflenums::clang__Decl::isImplicit:
      return toClientReflType<bool>(C);
    case reflenums::clang__Decl::isImplicit:
      return toClientReflType<bool>(C);
    case reflenums::clang__Decl::isUsed:
      return toClientReflType<bool>(C);
    case reflenums::clang__Decl::isUsed:
      return toClientReflType<bool>(C);
    case reflenums::clang__Decl::isUsed:
      return toClientReflType<bool>(C);
    case reflenums::clang__Decl::isReferenced:
      return toClientReflType<bool>(C);
    case reflenums::clang__Decl::isThisDeclarationReferenced:
      return toClientReflType<bool>(C);
    case reflenums::clang__Decl::isThisDeclarationReferenced:
      return toClientReflType<bool>(C);
    case reflenums::clang__Decl::instantiationsWillNeedParsing:
      return toClientReflType<bool>(C);
    case reflenums::clang__Decl::instantiationsWillNeedParsing:
      return toClientReflType<bool>(C);
    case reflenums::clang__Decl::isTopLevelDeclInObjCContainer:
      return toClientReflType<bool>(C);
    case reflenums::clang__Decl::isTopLevelDeclInObjCContainer:
      return toClientReflType<bool>(C);
    case reflenums::clang__Decl::getExternalSourceSymbolAttr:
      return toClientReflType<class clang::ExternalSourceSymbolAttr *>(C);
    case reflenums::clang__Decl::isModulePrivate:
      return toClientReflType<bool>(C);
    case reflenums::clang__Decl::isExported:
      return toClientReflType<bool>(C);
    case reflenums::clang__Decl::hasDefiningAttr:
      return toClientReflType<bool>(C);
    case reflenums::clang__Decl::getDefiningAttr:
      return toClientReflType<const class clang::Attr *>(C);
    case reflenums::clang__Decl::getDefiningAttr:
      return toClientReflType<const class clang::Attr *>(C);
    case reflenums::clang__Decl::getDefiningAttr:
      return toClientReflType<const class clang::Attr *>(C);
    case reflenums::clang__Decl::getDefiningAttr:
      return toClientReflType<const class clang::Attr *>(C);
    case reflenums::clang__Decl::getDefiningAttr:
      return toClientReflType<const class clang::Attr *>(C);
    case reflenums::clang__Decl::getDefiningAttr:
      return toClientReflType<const class clang::Attr *>(C);
    case reflenums::clang__Decl::getVersionIntroduced:
      return toClientReflType<class llvm::VersionTuple>(C);
    case reflenums::clang__Decl::getVersionIntroduced:
      return toClientReflType<class llvm::VersionTuple>(C);
    case reflenums::clang__Decl::getVersionIntroduced:
      return toClientReflType<class llvm::VersionTuple>(C);
    case reflenums::clang__Decl::isWeakImported:
      return toClientReflType<bool>(C);
    case reflenums::clang__Decl::isWeakImported:
      return toClientReflType<bool>(C);
    case reflenums::clang__Decl::isFromASTFile:
      return toClientReflType<bool>(C);
    case reflenums::clang__Decl::getGlobalID:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__Decl::getOwningModuleID:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__Decl::getOwningModuleID:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__Decl::getOwningModuleID:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__Decl::getOwningModuleID:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__Decl::getOwningModuleID:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__Decl::getOwningModuleID:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__Decl::getImportedOwningModule:
      return toClientReflType<class clang::Module *>(C);
    case reflenums::clang__Decl::getLocalOwningModule:
      return toClientReflType<class clang::Module *>(C);
    case reflenums::clang__Decl::getLocalOwningModule:
      return toClientReflType<class clang::Module *>(C);
    case reflenums::clang__Decl::hasOwningModule:
      return toClientReflType<bool>(C);
    case reflenums::clang__Decl::getOwningModule:
      return toClientReflType<class clang::Module *>(C);
    case reflenums::clang__Decl::getOwningModuleForLinkage:
      return toClientReflType<class clang::Module *>(C);
    case reflenums::clang__Decl::isHidden:
      return toClientReflType<bool>(C);
    case reflenums::clang__Decl::isHidden:
      return toClientReflType<bool>(C);
    case reflenums::clang__Decl::getModuleOwnershipKind:
      return toClientReflType<enum clang::Decl::ModuleOwnershipKind>(C);
    case reflenums::clang__Decl::getModuleOwnershipKind:
      return toClientReflType<enum clang::Decl::ModuleOwnershipKind>(C);
    case reflenums::clang__Decl::getIdentifierNamespace:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__Decl::isInIdentifierNamespace:
      return toClientReflType<bool>(C);
    case reflenums::clang__Decl::getIdentifierNamespaceForKind:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__Decl::hasTagIdentifierNamespace:
      return toClientReflType<bool>(C);
    case reflenums::clang__Decl::isTagIdentifierNamespace:
      return toClientReflType<bool>(C);
    case reflenums::clang__Decl::isTagIdentifierNamespace:
      return toClientReflType<bool>(C);
    case reflenums::clang__Decl::getLexicalDeclContext:
      return toClientReflType<const class clang::DeclContext *>(C);
    case reflenums::clang__Decl::isOutOfLine:
      return toClientReflType<bool>(C);
    case reflenums::clang__Decl::isOutOfLine:
      return toClientReflType<bool>(C);
    case reflenums::clang__Decl::isOutOfLine:
      return toClientReflType<bool>(C);
    case reflenums::clang__Decl::isTemplated:
      return toClientReflType<bool>(C);
    case reflenums::clang__Decl::isDefinedOutsideFunctionOrMethod:
      return toClientReflType<bool>(C);
    case reflenums::clang__Decl::isLexicallyWithinFunctionOrMethod:
      return toClientReflType<bool>(C);
    case reflenums::clang__Decl::getParentFunctionOrMethod:
      return toClientReflType<const class clang::DeclContext *>(C);
    case reflenums::clang__Decl::getParentFunctionOrMethod:
      return toClientReflType<const class clang::DeclContext *>(C);
    case reflenums::clang__Decl::getParentFunctionOrMethod:
      return toClientReflType<const class clang::DeclContext *>(C);
    case reflenums::clang__Decl::getCanonicalDecl:
      return toClientReflType<const class clang::Decl *>(C);
    case reflenums::clang__Decl::isCanonicalDecl:
      return toClientReflType<bool>(C);
    case reflenums::clang__Decl::isCanonicalDecl:
      return toClientReflType<bool>(C);
    case reflenums::clang__Decl::isCanonicalDecl:
      return toClientReflType<bool>(C);
    case reflenums::clang__Decl::isCanonicalDecl:
      return toClientReflType<bool>(C);
    case reflenums::clang__Decl::isCanonicalDecl:
      return toClientReflType<bool>(C);
    case reflenums::clang__Decl::isCanonicalDecl:
      return toClientReflType<bool>(C);
    case reflenums::clang__Decl::isCanonicalDecl:
      return toClientReflType<bool>(C);
    case reflenums::clang__Decl::isCanonicalDecl:
      return toClientReflType<bool>(C);
    case reflenums::clang__Decl::redecls:
      return toClientReflType<class llvm::iterator_range<class clang::Decl::redecl_iterator>>(C);
    case reflenums::clang__Decl::redecls:
      return toClientReflType<class llvm::iterator_range<class clang::Decl::redecl_iterator>>(C);
    case reflenums::clang__Decl::redecls:
      return toClientReflType<class llvm::iterator_range<class clang::Decl::redecl_iterator>>(C);
    case reflenums::clang__Decl::redecls:
      return toClientReflType<class llvm::iterator_range<class clang::Decl::redecl_iterator>>(C);
    case reflenums::clang__Decl::getPreviousDecl:
      return toClientReflType<const class clang::Decl *>(C);
    case reflenums::clang__Decl::isFirstDecl:
      return toClientReflType<bool>(C);
    case reflenums::clang__Decl::isFirstDecl:
      return toClientReflType<bool>(C);
    case reflenums::clang__Decl::getMostRecentDecl:
      return toClientReflType<const class clang::Decl *>(C);
    case reflenums::clang__Decl::getBody:
      return toClientReflType<class clang::Stmt *>(C);
    case reflenums::clang__Decl::hasBody:
      return toClientReflType<bool>(C);
    case reflenums::clang__Decl::getBodyRBrace:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__Decl::add:
      return toClientReflType<void>(C);
    case reflenums::clang__Decl::EnableStatistics:
      return toClientReflType<void>(C);
    case reflenums::clang__Decl::PrintStats:
      return toClientReflType<void>(C);
    case reflenums::clang__Decl::isTemplateParameter:
      return toClientReflType<bool>(C);
    case reflenums::clang__Decl::isTemplateParameterPack:
      return toClientReflType<bool>(C);
    case reflenums::clang__Decl::isParameterPack:
      return toClientReflType<bool>(C);
    case reflenums::clang__Decl::isTemplateDecl:
      return toClientReflType<bool>(C);
    case reflenums::clang__Decl::isFunctionOrFunctionTemplate:
      return toClientReflType<bool>(C);
    case reflenums::clang__Decl::getDescribedTemplate:
      return toClientReflType<class clang::TemplateDecl *>(C);
    case reflenums::clang__Decl::getDescribedTemplate:
      return toClientReflType<class clang::TemplateDecl *>(C);
    case reflenums::clang__Decl::getAsFunction:
      return toClientReflType<const class clang::FunctionDecl *>(C);
    case reflenums::clang__Decl::getAsFunction:
      return toClientReflType<const class clang::FunctionDecl *>(C);
    case reflenums::clang__Decl::getAsFunction:
      return toClientReflType<const class clang::FunctionDecl *>(C);
    case reflenums::clang__Decl::getAsFunction:
      return toClientReflType<const class clang::FunctionDecl *>(C);
    case reflenums::clang__Decl::getAsFunction:
      return toClientReflType<const class clang::FunctionDecl *>(C);
    case reflenums::clang__Decl::getFriendObjectKind:
      return toClientReflType<enum clang::Decl::FriendObjectKind>(C);
    case reflenums::clang__Decl::getFriendObjectKind:
      return toClientReflType<enum clang::Decl::FriendObjectKind>(C);
    case reflenums::clang__Decl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__Decl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__Decl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__Decl::print:
      return toClientReflType<void>(C);
    case reflenums::clang__Decl::print1:
      return toClientReflType<void>(C);
    case reflenums::clang__Decl::printGroup:
      return toClientReflType<void>(C);
    case reflenums::clang__Decl::dump:
      return toClientReflType<void>(C);
    case reflenums::clang__Decl::dumpColor:
      return toClientReflType<void>(C);
    case reflenums::clang__Decl::dump1:
      return toClientReflType<void>(C);
    case reflenums::clang__Decl::getFunctionType:
      return toClientReflType<const class clang::FunctionType *>(C);
    case reflenums::clang__Decl::getFunctionType:
      return toClientReflType<const class clang::FunctionType *>(C);
    case reflenums::clang__Decl::getFunctionType:
      return toClientReflType<const class clang::FunctionType *>(C);
    case reflenums::clang__Decl::getFunctionType:
      return toClientReflType<const class clang::FunctionType *>(C);
    case reflenums::clang__Decl::getFunctionType:
      return toClientReflType<const class clang::FunctionType *>(C);
    case reflenums::clang__Decl::getFunctionType:
      return toClientReflType<const class clang::FunctionType *>(C);
    case reflenums::clang__Decl::getFunctionType:
      return toClientReflType<const class clang::FunctionType *>(C);
    case reflenums::clang__Decl::getFunctionType:
      return toClientReflType<const class clang::FunctionType *>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__DeclContextLookupResult:
  switch (static_cast<reflenums::clang__DeclContextLookupResult::memnames>(MemNum)) {
    case reflenums::clang__DeclContextLookupResult::_this_:
      if (IsPtr)
        return toClientReflType<clang::DeclContextLookupResult *>(C);
      return toClientReflType<clang::DeclContextLookupResult>(C);
    case reflenums::clang__DeclContextLookupResult:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclContextLookupResult:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclContextLookupResult:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclContextLookupResult:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclContextLookupResult:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclContextLookupResult:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclContextLookupResult:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclContextLookupResult:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclContextLookupResult:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclContextLookupResult:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclContextLookupResult:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclContextLookupResult:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclContextLookupResult:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclContextLookupResult:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclContextLookupResult:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclContextLookupResult:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclContextLookupResult:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclContextLookupResult::empty:
      return toClientReflType<bool>(C);
    case reflenums::clang__DeclContextLookupResult::data:
      return toClientReflType<class clang::NamedDecl *const *>(C);
    case reflenums::clang__DeclContextLookupResult::size:
      return toClientReflType<unsigned long>(C);
    case reflenums::clang__DeclContextLookupResult::front:
      return toClientReflType<class clang::NamedDecl *const &>(C);
    case reflenums::clang__DeclContextLookupResult::back:
      return toClientReflType<class clang::NamedDecl *const &>(C);
    case reflenums::clang__DeclContextLookupResult::operator_sub:
      return toClientReflType<class clang::NamedDecl *const &>(C);
    case reflenums::clang__DeclContextLookupResult::slice:
      return toClientReflType<class clang::DeclContextLookupResult>(C);
    case reflenums::clang__DeclContextLookupResult::slice:
      return toClientReflType<class clang::DeclContextLookupResult>(C);
    case reflenums::clang__DeclContextLookupResult::slice:
      return toClientReflType<class clang::DeclContextLookupResult>(C);
    case reflenums::clang__DeclContextLookupResult::slice:
      return toClientReflType<class clang::DeclContextLookupResult>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__DeclContext:
  switch (static_cast<reflenums::clang__DeclContext::memnames>(MemNum)) {
    case reflenums::clang__DeclContext:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclContext:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclContext:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclContext:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclContext:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclContext:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclContext:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclContext:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclContext:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclContext:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclContext:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclContext:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclContext:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclContext:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclContext:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclContext:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclContext:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclContext:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclContext:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclContext::getDeclKind:
      return toClientReflType<enum clang::Decl::Kind>(C);
    case reflenums::clang__DeclContext::getDeclKindName:
      return toClientReflType<const char *>(C);
    case reflenums::clang__DeclContext::getDeclKindName:
      return toClientReflType<const char *>(C);
    case reflenums::clang__DeclContext::getParent:
      return toClientReflType<const class clang::DeclContext *>(C);
    case reflenums::clang__DeclContext::getParent:
      return toClientReflType<const class clang::DeclContext *>(C);
    case reflenums::clang__DeclContext::getLexicalParent:
      return toClientReflType<const class clang::DeclContext *>(C);
    case reflenums::clang__DeclContext::getLexicalParent:
      return toClientReflType<const class clang::DeclContext *>(C);
    case reflenums::clang__DeclContext::getLookupParent:
      return toClientReflType<const class clang::DeclContext *>(C);
    case reflenums::clang__DeclContext::getParentASTContext:
      return toClientReflType<class clang::ASTContext &>(C);
    case reflenums::clang__DeclContext::isClosure:
      return toClientReflType<bool>(C);
    case reflenums::clang__DeclContext::isObjCContainer:
      return toClientReflType<bool>(C);
    case reflenums::clang__DeclContext::isFunctionOrMethod:
      return toClientReflType<bool>(C);
    case reflenums::clang__DeclContext::isLookupContext:
      return toClientReflType<bool>(C);
    case reflenums::clang__DeclContext::isFileContext:
      return toClientReflType<bool>(C);
    case reflenums::clang__DeclContext::isTranslationUnit:
      return toClientReflType<bool>(C);
    case reflenums::clang__DeclContext::isRecord:
      return toClientReflType<bool>(C);
    case reflenums::clang__DeclContext::isNamespace:
      return toClientReflType<bool>(C);
    case reflenums::clang__DeclContext::isStdNamespace:
      return toClientReflType<bool>(C);
    case reflenums::clang__DeclContext::isInlineNamespace:
      return toClientReflType<bool>(C);
    case reflenums::clang__DeclContext::isDependentContext:
      return toClientReflType<bool>(C);
    case reflenums::clang__DeclContext::isTransparentContext:
      return toClientReflType<bool>(C);
    case reflenums::clang__DeclContext::isExternCContext:
      return toClientReflType<bool>(C);
    case reflenums::clang__DeclContext::getExternCContext:
      return toClientReflType<const class clang::LinkageSpecDecl *>(C);
    case reflenums::clang__DeclContext::isExternCXXContext:
      return toClientReflType<bool>(C);
    case reflenums::clang__DeclContext::Equals:
      return toClientReflType<bool>(C);
    case reflenums::clang__DeclContext::Encloses:
      return toClientReflType<bool>(C);
    case reflenums::clang__DeclContext::Encloses:
      return toClientReflType<bool>(C);
    case reflenums::clang__DeclContext::getNonClosureAncestor:
      return toClientReflType<const class clang::Decl *>(C);
    case reflenums::clang__DeclContext::getNonClosureAncestor:
      return toClientReflType<const class clang::Decl *>(C);
    case reflenums::clang__DeclContext::getPrimaryContext:
      return toClientReflType<const class clang::DeclContext *>(C);
    case reflenums::clang__DeclContext::getPrimaryContext:
      return toClientReflType<const class clang::DeclContext *>(C);
    case reflenums::clang__DeclContext::getRedeclContext:
      return toClientReflType<const class clang::DeclContext *>(C);
    case reflenums::clang__DeclContext::getRedeclContext:
      return toClientReflType<const class clang::DeclContext *>(C);
    case reflenums::clang__DeclContext::getEnclosingNamespaceContext:
      return toClientReflType<const class clang::DeclContext *>(C);
    case reflenums::clang__DeclContext::getEnclosingNamespaceContext:
      return toClientReflType<const class clang::DeclContext *>(C);
    case reflenums::clang__DeclContext::getOuterLexicalRecordContext:
      return toClientReflType<const class clang::RecordDecl *>(C);
    case reflenums::clang__DeclContext::InEnclosingNamespaceSetOf:
      return toClientReflType<bool>(C);
    case reflenums::clang__DeclContext::InEnclosingNamespaceSetOf:
      return toClientReflType<bool>(C);
    case reflenums::clang__DeclContext::InEnclosingNamespaceSetOf:
      return toClientReflType<bool>(C);
    case reflenums::clang__DeclContext::InEnclosingNamespaceSetOf:
      return toClientReflType<bool>(C);
    case reflenums::clang__DeclContext::decls:
      return toClientReflType<class llvm::iterator_range<class clang::DeclContext::decl_iterator>>(C);
    case reflenums::clang__DeclContext::decls:
      return toClientReflType<class llvm::iterator_range<class clang::DeclContext::decl_iterator>>(C);
    case reflenums::clang__DeclContext::decls:
      return toClientReflType<class llvm::iterator_range<class clang::DeclContext::decl_iterator>>(C);
    case reflenums::clang__DeclContext::decls_empty:
      return toClientReflType<bool>(C);
    case reflenums::clang__DeclContext::noload_decls:
      return toClientReflType<class llvm::iterator_range<class clang::DeclContext::decl_iterator>>(C);
    case reflenums::clang__DeclContext::noload_decls:
      return toClientReflType<class llvm::iterator_range<class clang::DeclContext::decl_iterator>>(C);
    case reflenums::clang__DeclContext::noload_decls:
      return toClientReflType<class llvm::iterator_range<class clang::DeclContext::decl_iterator>>(C);
    case reflenums::clang__DeclContext::noload_decls:
      return toClientReflType<class llvm::iterator_range<class clang::DeclContext::decl_iterator>>(C);
    case reflenums::clang__DeclContext::noload_decls:
      return toClientReflType<class llvm::iterator_range<class clang::DeclContext::decl_iterator>>(C);
    case reflenums::clang__DeclContext::noload_decls:
      return toClientReflType<class llvm::iterator_range<class clang::DeclContext::decl_iterator>>(C);
    case reflenums::clang__DeclContext::noload_decls:
      return toClientReflType<class llvm::iterator_range<class clang::DeclContext::decl_iterator>>(C);
    case reflenums::clang__DeclContext::noload_decls:
      return toClientReflType<class llvm::iterator_range<class clang::DeclContext::decl_iterator>>(C);
    case reflenums::clang__DeclContext::noload_decls:
      return toClientReflType<class llvm::iterator_range<class clang::DeclContext::decl_iterator>>(C);
    case reflenums::clang__DeclContext::containsDecl:
      return toClientReflType<bool>(C);
    case reflenums::clang__DeclContext::containsDeclAndLoad:
      return toClientReflType<bool>(C);
    case reflenums::clang__DeclContext::containsDeclAndLoad:
      return toClientReflType<bool>(C);
    case reflenums::clang__DeclContext::containsDeclAndLoad:
      return toClientReflType<bool>(C);
    case reflenums::clang__DeclContext::lookup:
      return toClientReflType<class clang::DeclContextLookupResult>(C);
    case reflenums::clang__DeclContext::lookup:
      return toClientReflType<class clang::DeclContextLookupResult>(C);
    case reflenums::clang__DeclContext::lookup:
      return toClientReflType<class clang::DeclContextLookupResult>(C);
    case reflenums::clang__DeclContext::lookup:
      return toClientReflType<class clang::DeclContextLookupResult>(C);
    case reflenums::clang__DeclContext::lookup:
      return toClientReflType<class clang::DeclContextLookupResult>(C);
    case reflenums::clang__DeclContext::lookup:
      return toClientReflType<class clang::DeclContextLookupResult>(C);
    case reflenums::clang__DeclContext::lookups:
      return toClientReflType<class llvm::iterator_range<class clang::DeclContext::all_lookups_iterator>>(C);
    case reflenums::clang__DeclContext::lookups:
      return toClientReflType<class llvm::iterator_range<class clang::DeclContext::all_lookups_iterator>>(C);
    case reflenums::clang__DeclContext::lookups:
      return toClientReflType<class llvm::iterator_range<class clang::DeclContext::all_lookups_iterator>>(C);
    case reflenums::clang__DeclContext::lookups:
      return toClientReflType<class llvm::iterator_range<class clang::DeclContext::all_lookups_iterator>>(C);
    case reflenums::clang__DeclContext::lookups:
      return toClientReflType<class llvm::iterator_range<class clang::DeclContext::all_lookups_iterator>>(C);
    case reflenums::clang__DeclContext::lookups:
      return toClientReflType<class llvm::iterator_range<class clang::DeclContext::all_lookups_iterator>>(C);
    case reflenums::clang__DeclContext::lookups:
      return toClientReflType<class llvm::iterator_range<class clang::DeclContext::all_lookups_iterator>>(C);
    case reflenums::clang__DeclContext::lookups:
      return toClientReflType<class llvm::iterator_range<class clang::DeclContext::all_lookups_iterator>>(C);
    case reflenums::clang__DeclContext::lookups:
      return toClientReflType<class llvm::iterator_range<class clang::DeclContext::all_lookups_iterator>>(C);
    case reflenums::clang__DeclContext::ddiags:
      return toClientReflType<class llvm::iterator_range<class clang::DeclContext::ddiag_iterator>>(C);
    case reflenums::clang__DeclContext::ddiags:
      return toClientReflType<class llvm::iterator_range<class clang::DeclContext::ddiag_iterator>>(C);
    case reflenums::clang__DeclContext::getLookupPtr:
      return toClientReflType<class clang::StoredDeclsMap *>(C);
    case reflenums::clang__DeclContext::getLookupPtr:
      return toClientReflType<class clang::StoredDeclsMap *>(C);
    case reflenums::clang__DeclContext::hasExternalLexicalStorage:
      return toClientReflType<bool>(C);
    case reflenums::clang__DeclContext::hasExternalLexicalStorage:
      return toClientReflType<bool>(C);
    case reflenums::clang__DeclContext::hasExternalVisibleStorage:
      return toClientReflType<bool>(C);
    case reflenums::clang__DeclContext::hasExternalVisibleStorage:
      return toClientReflType<bool>(C);
    case reflenums::clang__DeclContext::isDeclInLexicalTraversal:
      return toClientReflType<bool>(C);
    case reflenums::clang__DeclContext::isDeclInLexicalTraversal:
      return toClientReflType<bool>(C);
    case reflenums::clang__DeclContext::shouldUseQualifiedLookup:
      return toClientReflType<bool>(C);
    case reflenums::clang__DeclContext::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__DeclContext::classof1:
      return toClientReflType<bool>(C);
    case reflenums::clang__DeclContext::dumpDeclContext:
      return toClientReflType<void>(C);
    case reflenums::clang__DeclContext::dumpLookups:
      return toClientReflType<void>(C);
    case reflenums::clang__DeclContext::dumpLookups1:
      return toClientReflType<void>(C);
    case reflenums::clang__DeclContext::dumpLookups1:
      return toClientReflType<void>(C);
    case reflenums::clang__DeclContext::dumpLookups1:
      return toClientReflType<void>(C);
    case reflenums::clang__DeclContext::dumpLookups1:
      return toClientReflType<void>(C);
    case reflenums::clang__DeclContext::dumpLookups1:
      return toClientReflType<void>(C);
    case reflenums::clang__DeclContext::dumpLookups1:
      return toClientReflType<void>(C);
    case reflenums::clang__DeclContext::dumpLookups1:
      return toClientReflType<void>(C);
    case reflenums::clang__DeclContext::dumpLookups1:
      return toClientReflType<void>(C);
    case reflenums::clang__DeclContext::dumpLookups1:
      return toClientReflType<void>(C);
    case reflenums::clang__DeclContext::dumpLookups1:
      return toClientReflType<void>(C);
    case reflenums::clang__DeclContext::dumpLookups1:
      return toClientReflType<void>(C);
    case reflenums::clang__DeclContext::dumpLookups1:
      return toClientReflType<void>(C);
    case reflenums::clang__DeclContext::dumpLookups1:
      return toClientReflType<void>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__CharUnits:
  switch (static_cast<reflenums::clang__CharUnits::memnames>(MemNum)) {
    case reflenums::clang__CharUnits:::
      return toClientReflType<>(C);
    case reflenums::clang__CharUnits:::
      return toClientReflType<>(C);
    case reflenums::clang__CharUnits:::
      return toClientReflType<>(C);
    case reflenums::clang__CharUnits:::
      return toClientReflType<>(C);
    case reflenums::clang__CharUnits:::
      return toClientReflType<>(C);
    case reflenums::clang__CharUnits:::
      return toClientReflType<>(C);
    case reflenums::clang__CharUnits:::
      return toClientReflType<>(C);
    case reflenums::clang__CharUnits:::
      return toClientReflType<>(C);
    case reflenums::clang__CharUnits::Zero:
      return toClientReflType<class clang::CharUnits>(C);
    case reflenums::clang__CharUnits::One:
      return toClientReflType<class clang::CharUnits>(C);
    case reflenums::clang__CharUnits::fromQuantity:
      return toClientReflType<class clang::CharUnits>(C);
    case reflenums::clang__CharUnits::fromQuantity:
      return toClientReflType<class clang::CharUnits>(C);
    case reflenums::clang__CharUnits::fromQuantity:
      return toClientReflType<class clang::CharUnits>(C);
    case reflenums::clang__CharUnits::fromQuantity:
      return toClientReflType<class clang::CharUnits>(C);
    case reflenums::clang__CharUnits::fromQuantity:
      return toClientReflType<class clang::CharUnits>(C);
    case reflenums::clang__CharUnits::fromQuantity:
      return toClientReflType<class clang::CharUnits>(C);
    case reflenums::clang__CharUnits::fromQuantity:
      return toClientReflType<class clang::CharUnits>(C);
    case reflenums::clang__CharUnits::operator_eq_eq:
      return toClientReflType<bool>(C);
    case reflenums::clang__CharUnits::operator_not_eq:
      return toClientReflType<bool>(C);
    case reflenums::clang__CharUnits::operator_less:
      return toClientReflType<bool>(C);
    case reflenums::clang__CharUnits::operator_less_eq:
      return toClientReflType<bool>(C);
    case reflenums::clang__CharUnits::operator_gr:
      return toClientReflType<bool>(C);
    case reflenums::clang__CharUnits::operator_gr_eq:
      return toClientReflType<bool>(C);
    case reflenums::clang__CharUnits::isZero:
      return toClientReflType<bool>(C);
    case reflenums::clang__CharUnits::isOne:
      return toClientReflType<bool>(C);
    case reflenums::clang__CharUnits::isPositive:
      return toClientReflType<bool>(C);
    case reflenums::clang__CharUnits::isNegative:
      return toClientReflType<bool>(C);
    case reflenums::clang__CharUnits::isPowerOfTwo:
      return toClientReflType<bool>(C);
    case reflenums::clang__CharUnits::isMultipleOf:
      return toClientReflType<bool>(C);
    case reflenums::clang__CharUnits::operator_star:
      return toClientReflType<class clang::CharUnits>(C);
    case reflenums::clang__CharUnits::operator_star:
      return toClientReflType<class clang::CharUnits>(C);
    case reflenums::clang__CharUnits::operator_div:
      return toClientReflType<class clang::CharUnits>(C);
    case reflenums::clang__CharUnits::operator_div:
      return toClientReflType<class clang::CharUnits>(C);
    case reflenums::clang__CharUnits::operator_div1:
      return toClientReflType<long long>(C);
    case reflenums::clang__CharUnits::operator_mod:
      return toClientReflType<class clang::CharUnits>(C);
    case reflenums::clang__CharUnits::operator_mod1:
      return toClientReflType<long long>(C);
    case reflenums::clang__CharUnits::operator_plus:
      return toClientReflType<class clang::CharUnits>(C);
    case reflenums::clang__CharUnits::operator_minus:
      return toClientReflType<class clang::CharUnits>(C);
    case reflenums::clang__CharUnits::operator_minus1:
      return toClientReflType<class clang::CharUnits>(C);
    case reflenums::clang__CharUnits::getQuantity:
      return toClientReflType<long long>(C);
    case reflenums::clang__CharUnits::alignTo:
      return toClientReflType<class clang::CharUnits>(C);
    case reflenums::clang__CharUnits::alignmentAtOffset:
      return toClientReflType<class clang::CharUnits>(C);
    case reflenums::clang__CharUnits::alignmentOfArrayElement:
      return toClientReflType<class clang::CharUnits>(C);
    case reflenums::clang__CharUnits::alignmentOfArrayElement:
      return toClientReflType<class clang::CharUnits>(C);
    case reflenums::clang__CharUnits::alignmentOfArrayElement:
      return toClientReflType<class clang::CharUnits>(C);
    case reflenums::clang__CharUnits::alignmentOfArrayElement:
      return toClientReflType<class clang::CharUnits>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__FileSystemOptions:
  switch (static_cast<reflenums::clang__FileSystemOptions::memnames>(MemNum)) {
    case reflenums::clang__FileSystemOptions:::
      return toClientReflType<>(C);
    case reflenums::clang__FileSystemOptions:::
      return toClientReflType<>(C);
    case reflenums::clang__FileSystemOptions:::
      return toClientReflType<>(C);
    case reflenums::clang__FileSystemOptions:::
      return toClientReflType<>(C);
    case reflenums::clang__FileSystemOptions:::
      return toClientReflType<>(C);
    case reflenums::clang__FileSystemOptions:::
      return toClientReflType<>(C);
    case reflenums::clang__FileSystemOptions:::
      return toClientReflType<>(C);
    case reflenums::clang__FileSystemOptions:::
      return toClientReflType<>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_llvm__Twine:
  switch (static_cast<reflenums::llvm__Twine::memnames>(MemNum)) {
    case reflenums::llvm__Twine:::
      return toClientReflType<>(C);
    case reflenums::llvm__Twine:::
      return toClientReflType<>(C);
    case reflenums::llvm__Twine:::
      return toClientReflType<>(C);
    case reflenums::llvm__Twine:::
      return toClientReflType<>(C);
    case reflenums::llvm__Twine:::
      return toClientReflType<>(C);
    case reflenums::llvm__Twine:::
      return toClientReflType<>(C);
    case reflenums::llvm__Twine:::
      return toClientReflType<>(C);
    case reflenums::llvm__Twine:::
      return toClientReflType<>(C);
    case reflenums::llvm__Twine:::
      return toClientReflType<>(C);
    case reflenums::llvm__Twine:::
      return toClientReflType<>(C);
    case reflenums::llvm__Twine:::
      return toClientReflType<>(C);
    case reflenums::llvm__Twine:::
      return toClientReflType<>(C);
    case reflenums::llvm__Twine:::
      return toClientReflType<>(C);
    case reflenums::llvm__Twine:::
      return toClientReflType<>(C);
    case reflenums::llvm__Twine:::
      return toClientReflType<>(C);
    case reflenums::llvm__Twine:::
      return toClientReflType<>(C);
    case reflenums::llvm__Twine:::
      return toClientReflType<>(C);
    case reflenums::llvm__Twine:::
      return toClientReflType<>(C);
    case reflenums::llvm__Twine:::
      return toClientReflType<>(C);
    case reflenums::llvm__Twine:::
      return toClientReflType<>(C);
    case reflenums::llvm__Twine:::
      return toClientReflType<>(C);
    case reflenums::llvm__Twine:::
      return toClientReflType<>(C);
    case reflenums::llvm__Twine:::
      return toClientReflType<>(C);
    case reflenums::llvm__Twine:::
      return toClientReflType<>(C);
    case reflenums::llvm__Twine:::
      return toClientReflType<>(C);
    case reflenums::llvm__Twine:::
      return toClientReflType<>(C);
    case reflenums::llvm__Twine:::
      return toClientReflType<>(C);
    case reflenums::llvm__Twine:::
      return toClientReflType<>(C);
    case reflenums::llvm__Twine:::
      return toClientReflType<>(C);
    case reflenums::llvm__Twine:::
      return toClientReflType<>(C);
    case reflenums::llvm__Twine:::
      return toClientReflType<>(C);
    case reflenums::llvm__Twine:::
      return toClientReflType<>(C);
    case reflenums::llvm__Twine:::
      return toClientReflType<>(C);
    case reflenums::llvm__Twine:::
      return toClientReflType<>(C);
    case reflenums::llvm__Twine:::
      return toClientReflType<>(C);
    case reflenums::llvm__Twine:::
      return toClientReflType<>(C);
    case reflenums::llvm__Twine:::
      return toClientReflType<>(C);
    case reflenums::llvm__Twine:::
      return toClientReflType<>(C);
    case reflenums::llvm__Twine:::
      return toClientReflType<>(C);
    case reflenums::llvm__Twine:::
      return toClientReflType<>(C);
    case reflenums::llvm__Twine:::
      return toClientReflType<>(C);
    case reflenums::llvm__Twine:::
      return toClientReflType<>(C);
    case reflenums::llvm__Twine::isTriviallyEmpty:
      return toClientReflType<bool>(C);
    case reflenums::llvm__Twine::isSingleStringRef:
      return toClientReflType<bool>(C);
    case reflenums::llvm__Twine::isSingleStringRef:
      return toClientReflType<bool>(C);
    case reflenums::llvm__Twine::str:
      return toClientReflType<const char *>(C);
    case reflenums::llvm__Twine::str:
      return toClientReflType<const char *>(C);
    case reflenums::llvm__Twine::getSingleStringRef:
      return toClientReflType<const char *>(C);
    case reflenums::llvm__Twine::getSingleStringRef:
      return toClientReflType<const char *>(C);
    case reflenums::llvm__Twine::getSingleStringRef:
      return toClientReflType<const char *>(C);
    case reflenums::llvm__Twine::print:
      return toClientReflType<void>(C);
    case reflenums::llvm__Twine::dump:
      return toClientReflType<void>(C);
    case reflenums::llvm__Twine::printRepr:
      return toClientReflType<void>(C);
    case reflenums::llvm__Twine::dumpRepr:
      return toClientReflType<void>(C);
    case reflenums::llvm__Twine::dumpRepr:
      return toClientReflType<void>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_llvm__sys__fs__UniqueID:
  switch (static_cast<reflenums::llvm__sys__fs__UniqueID::memnames>(MemNum)) {
    case reflenums::llvm__sys__fs__UniqueID:::
      return toClientReflType<>(C);
    case reflenums::llvm__sys__fs__UniqueID:::
      return toClientReflType<>(C);
    case reflenums::llvm__sys__fs__UniqueID:::
      return toClientReflType<>(C);
    case reflenums::llvm__sys__fs__UniqueID:::
      return toClientReflType<>(C);
    case reflenums::llvm__sys__fs__UniqueID:::
      return toClientReflType<>(C);
    case reflenums::llvm__sys__fs__UniqueID:::
      return toClientReflType<>(C);
    case reflenums::llvm__sys__fs__UniqueID::operator_eq_eq:
      return toClientReflType<bool>(C);
    case reflenums::llvm__sys__fs__UniqueID::operator_not_eq:
      return toClientReflType<bool>(C);
    case reflenums::llvm__sys__fs__UniqueID::operator_less:
      return toClientReflType<bool>(C);
    case reflenums::llvm__sys__fs__UniqueID::getDevice:
      return toClientReflType<unsigned long long>(C);
    case reflenums::llvm__sys__fs__UniqueID::getFile:
      return toClientReflType<unsigned long long>(C);
    case reflenums::llvm__sys__fs__UniqueID::getFile:
      return toClientReflType<unsigned long long>(C);
    case reflenums::llvm__sys__fs__UniqueID::getFile:
      return toClientReflType<unsigned long long>(C);
    case reflenums::llvm__sys__fs__UniqueID::getFile:
      return toClientReflType<unsigned long long>(C);
    case reflenums::llvm__sys__fs__UniqueID::getFile:
      return toClientReflType<unsigned long long>(C);
    case reflenums::llvm__sys__fs__UniqueID::getFile:
      return toClientReflType<unsigned long long>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_llvm__MemoryBuffer:
  switch (static_cast<reflenums::llvm__MemoryBuffer::memnames>(MemNum)) {
    case reflenums::llvm__MemoryBuffer:::
      return toClientReflType<>(C);
    case reflenums::llvm__MemoryBuffer:::
      return toClientReflType<>(C);
    case reflenums::llvm__MemoryBuffer:::
      return toClientReflType<>(C);
    case reflenums::llvm__MemoryBuffer:::
      return toClientReflType<>(C);
    case reflenums::llvm__MemoryBuffer:::
      return toClientReflType<>(C);
    case reflenums::llvm__MemoryBuffer:::
      return toClientReflType<>(C);
    case reflenums::llvm__MemoryBuffer:::
      return toClientReflType<>(C);
    case reflenums::llvm__MemoryBuffer:::
      return toClientReflType<>(C);
    case reflenums::llvm__MemoryBuffer:::
      return toClientReflType<>(C);
    case reflenums::llvm__MemoryBuffer:::
      return toClientReflType<>(C);
    case reflenums::llvm__MemoryBuffer:::
      return toClientReflType<>(C);
    case reflenums::llvm__MemoryBuffer::getBufferStart:
      return toClientReflType<const char *>(C);
    case reflenums::llvm__MemoryBuffer::getBufferEnd:
      return toClientReflType<const char *>(C);
    case reflenums::llvm__MemoryBuffer::getBufferSize:
      return toClientReflType<unsigned long>(C);
    case reflenums::llvm__MemoryBuffer::getBuffer:
      return toClientReflType<const char *>(C);
    case reflenums::llvm__MemoryBuffer::getBufferIdentifier:
      return toClientReflType<const char *>(C);
    case reflenums::llvm__MemoryBuffer::getBufferIdentifier:
      return toClientReflType<const char *>(C);
    case reflenums::llvm__MemoryBuffer::getBufferIdentifier:
      return toClientReflType<const char *>(C);
    case reflenums::llvm__MemoryBuffer::getBufferIdentifier:
      return toClientReflType<const char *>(C);
    case reflenums::llvm__MemoryBuffer::getBufferIdentifier:
      return toClientReflType<const char *>(C);
    case reflenums::llvm__MemoryBuffer::getBufferIdentifier:
      return toClientReflType<const char *>(C);
    case reflenums::llvm__MemoryBuffer::getBufferIdentifier:
      return toClientReflType<const char *>(C);
    case reflenums::llvm__MemoryBuffer::getBufferIdentifier:
      return toClientReflType<const char *>(C);
    case reflenums::llvm__MemoryBuffer::getBufferIdentifier:
      return toClientReflType<const char *>(C);
    case reflenums::llvm__MemoryBuffer::getBufferIdentifier:
      return toClientReflType<const char *>(C);
    case reflenums::llvm__MemoryBuffer::getBufferIdentifier:
      return toClientReflType<const char *>(C);
    case reflenums::llvm__MemoryBuffer::getBufferIdentifier:
      return toClientReflType<const char *>(C);
    case reflenums::llvm__MemoryBuffer::getBufferKind:
      return toClientReflType<enum llvm::MemoryBuffer::BufferKind>(C);
    case reflenums::llvm__MemoryBuffer::getMemBufferRef:
      return toClientReflType<class llvm::MemoryBufferRef>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_llvm__MemoryBufferRef:
  switch (static_cast<reflenums::llvm__MemoryBufferRef::memnames>(MemNum)) {
    case reflenums::llvm__MemoryBufferRef:::
      return toClientReflType<>(C);
    case reflenums::llvm__MemoryBufferRef:::
      return toClientReflType<>(C);
    case reflenums::llvm__MemoryBufferRef:::
      return toClientReflType<>(C);
    case reflenums::llvm__MemoryBufferRef:::
      return toClientReflType<>(C);
    case reflenums::llvm__MemoryBufferRef:::
      return toClientReflType<>(C);
    case reflenums::llvm__MemoryBufferRef:::
      return toClientReflType<>(C);
    case reflenums::llvm__MemoryBufferRef:::
      return toClientReflType<>(C);
    case reflenums::llvm__MemoryBufferRef::getBuffer:
      return toClientReflType<const char *>(C);
    case reflenums::llvm__MemoryBufferRef::getBufferIdentifier:
      return toClientReflType<const char *>(C);
    case reflenums::llvm__MemoryBufferRef::getBufferStart:
      return toClientReflType<const char *>(C);
    case reflenums::llvm__MemoryBufferRef::getBufferEnd:
      return toClientReflType<const char *>(C);
    case reflenums::llvm__MemoryBufferRef::getBufferSize:
      return toClientReflType<unsigned long>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__DirectoryEntry:
  switch (static_cast<reflenums::clang__DirectoryEntry::memnames>(MemNum)) {
    case reflenums::clang__DirectoryEntry:::
      return toClientReflType<>(C);
    case reflenums::clang__DirectoryEntry:::
      return toClientReflType<>(C);
    case reflenums::clang__DirectoryEntry:::
      return toClientReflType<>(C);
    case reflenums::clang__DirectoryEntry:::
      return toClientReflType<>(C);
    case reflenums::clang__DirectoryEntry::getName:
      return toClientReflType<const char *>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__FileEntry:
  switch (static_cast<reflenums::clang__FileEntry::memnames>(MemNum)) {
    case reflenums::clang__FileEntry:::
      return toClientReflType<>(C);
    case reflenums::clang__FileEntry:::
      return toClientReflType<>(C);
    case reflenums::clang__FileEntry:::
      return toClientReflType<>(C);
    case reflenums::clang__FileEntry:::
      return toClientReflType<>(C);
    case reflenums::clang__FileEntry:::
      return toClientReflType<>(C);
    case reflenums::clang__FileEntry:::
      return toClientReflType<>(C);
    case reflenums::clang__FileEntry:::
      return toClientReflType<>(C);
    case reflenums::clang__FileEntry:::
      return toClientReflType<>(C);
    case reflenums::clang__FileEntry:::
      return toClientReflType<>(C);
    case reflenums::clang__FileEntry:::
      return toClientReflType<>(C);
    case reflenums::clang__FileEntry:::
      return toClientReflType<>(C);
    case reflenums::clang__FileEntry:::
      return toClientReflType<>(C);
    case reflenums::clang__FileEntry:::
      return toClientReflType<>(C);
    case reflenums::clang__FileEntry:::
      return toClientReflType<>(C);
    case reflenums::clang__FileEntry:::
      return toClientReflType<>(C);
    case reflenums::clang__FileEntry:::
      return toClientReflType<>(C);
    case reflenums::clang__FileEntry:::
      return toClientReflType<>(C);
    case reflenums::clang__FileEntry::getName:
      return toClientReflType<const char *>(C);
    case reflenums::clang__FileEntry::tryGetRealPathName:
      return toClientReflType<const char *>(C);
    case reflenums::clang__FileEntry::isValid:
      return toClientReflType<bool>(C);
    case reflenums::clang__FileEntry::getSize:
      return toClientReflType<long long>(C);
    case reflenums::clang__FileEntry::getUID:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__FileEntry::getUniqueID:
      return toClientReflType<const class llvm::sys::fs::UniqueID &>(C);
    case reflenums::clang__FileEntry::isInPCH:
      return toClientReflType<bool>(C);
    case reflenums::clang__FileEntry::getModificationTime:
      return toClientReflType<long>(C);
    case reflenums::clang__FileEntry::getDir:
      return toClientReflType<const class clang::DirectoryEntry *>(C);
    case reflenums::clang__FileEntry::operator_less:
      return toClientReflType<bool>(C);
    case reflenums::clang__FileEntry::isNamedPipe:
      return toClientReflType<bool>(C);
    case reflenums::clang__FileEntry::closeFile:
      return toClientReflType<void>(C);
    case reflenums::clang__FileEntry::closeFile:
      return toClientReflType<void>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__FileManager:
  switch (static_cast<reflenums::clang__FileManager::memnames>(MemNum)) {
    case reflenums::clang__FileManager:::
      return toClientReflType<>(C);
    case reflenums::clang__FileManager:::
      return toClientReflType<>(C);
    case reflenums::clang__FileManager:::
      return toClientReflType<>(C);
    case reflenums::clang__FileManager:::
      return toClientReflType<>(C);
    case reflenums::clang__FileManager:::
      return toClientReflType<>(C);
    case reflenums::clang__FileManager::Retain:
      return toClientReflType<void>(C);
    case reflenums::clang__FileManager::Release:
      return toClientReflType<void>(C);
    case reflenums::clang__FileManager::Release:
      return toClientReflType<void>(C);
    case reflenums::clang__FileManager::Release:
      return toClientReflType<void>(C);
    case reflenums::clang__FileManager:::
      return toClientReflType<>(C);
    case reflenums::clang__FileManager:::
      return toClientReflType<>(C);
    case reflenums::clang__FileManager:::
      return toClientReflType<>(C);
    case reflenums::clang__FileManager:::
      return toClientReflType<>(C);
    case reflenums::clang__FileManager:::
      return toClientReflType<>(C);
    case reflenums::clang__FileManager:::
      return toClientReflType<>(C);
    case reflenums::clang__FileManager:::
      return toClientReflType<>(C);
    case reflenums::clang__FileManager:::
      return toClientReflType<>(C);
    case reflenums::clang__FileManager:::
      return toClientReflType<>(C);
    case reflenums::clang__FileManager:::
      return toClientReflType<>(C);
    case reflenums::clang__FileManager:::
      return toClientReflType<>(C);
    case reflenums::clang__FileManager:::
      return toClientReflType<>(C);
    case reflenums::clang__FileManager:::
      return toClientReflType<>(C);
    case reflenums::clang__FileManager:::
      return toClientReflType<>(C);
    case reflenums::clang__FileManager:::
      return toClientReflType<>(C);
    case reflenums::clang__FileManager:::
      return toClientReflType<>(C);
    case reflenums::clang__FileManager:::
      return toClientReflType<>(C);
    case reflenums::clang__FileManager:::
      return toClientReflType<>(C);
    case reflenums::clang__FileManager:::
      return toClientReflType<>(C);
    case reflenums::clang__FileManager:::
      return toClientReflType<>(C);
    case reflenums::clang__FileManager:::
      return toClientReflType<>(C);
    case reflenums::clang__FileManager:::
      return toClientReflType<>(C);
    case reflenums::clang__FileManager:::
      return toClientReflType<>(C);
    case reflenums::clang__FileManager:::
      return toClientReflType<>(C);
    case reflenums::clang__FileManager:::
      return toClientReflType<>(C);
    case reflenums::clang__FileManager:::
      return toClientReflType<>(C);
    case reflenums::clang__FileManager:::
      return toClientReflType<>(C);
    case reflenums::clang__FileManager:::
      return toClientReflType<>(C);
    case reflenums::clang__FileManager::getFileSystemOpts:
      return toClientReflType<const class clang::FileSystemOptions &>(C);
    case reflenums::clang__FileManager::getFileSystemOpts:
      return toClientReflType<const class clang::FileSystemOptions &>(C);
    case reflenums::clang__FileManager::getFileSystemOpts:
      return toClientReflType<const class clang::FileSystemOptions &>(C);
    case reflenums::clang__FileManager::getFileSystemOpts:
      return toClientReflType<const class clang::FileSystemOptions &>(C);
    case reflenums::clang__FileManager::getFileSystemOpts:
      return toClientReflType<const class clang::FileSystemOptions &>(C);
    case reflenums::clang__FileManager::getFileSystemOpts:
      return toClientReflType<const class clang::FileSystemOptions &>(C);
    case reflenums::clang__FileManager::getFileSystemOpts:
      return toClientReflType<const class clang::FileSystemOptions &>(C);
    case reflenums::clang__FileManager::getFileSystemOpts:
      return toClientReflType<const class clang::FileSystemOptions &>(C);
    case reflenums::clang__FileManager::getFileSystemOpts:
      return toClientReflType<const class clang::FileSystemOptions &>(C);
    case reflenums::clang__FileManager::getFileSystemOpts:
      return toClientReflType<const class clang::FileSystemOptions &>(C);
    case reflenums::clang__FileManager::modifyFileEntry:
      return toClientReflType<void>(C);
    case reflenums::clang__FileManager::modifyFileEntry:
      return toClientReflType<void>(C);
    case reflenums::clang__FileManager::PrintStats:
      return toClientReflType<void>(C);
    case reflenums::clang__FileManager::PrintStats:
      return toClientReflType<void>(C);
    case reflenums::clang__FileManager::PrintStats:
      return toClientReflType<void>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__ASTFileSignature:
  switch (static_cast<reflenums::clang__ASTFileSignature::memnames>(MemNum)) {
    case reflenums::clang__ASTFileSignature::_this_:
      if (IsPtr)
        return toClientReflType<clang::ASTFileSignature *>(C);
      return toClientReflType<clang::ASTFileSignature>(C);
    case reflenums::clang__ASTFileSignature:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTFileSignature:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTFileSignature:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTFileSignature:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTFileSignature:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTFileSignature:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTFileSignature:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTFileSignature:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTFileSignature:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTFileSignature:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTFileSignature:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTFileSignature:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTFileSignature:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTFileSignature:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTFileSignature:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTFileSignature:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTFileSignature:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTFileSignature:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTFileSignature:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTFileSignature:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTFileSignature:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTFileSignature:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTFileSignature:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTFileSignature:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTFileSignature::cbegin:
      return toClientReflType<const unsigned int *>(C);
    case reflenums::clang__ASTFileSignature::cend:
      return toClientReflType<const unsigned int *>(C);
    case reflenums::clang__ASTFileSignature::cend:
      return toClientReflType<const unsigned int *>(C);
    case reflenums::clang__ASTFileSignature::cend:
      return toClientReflType<const unsigned int *>(C);
    case reflenums::clang__ASTFileSignature::size:
      return toClientReflType<unsigned long>(C);
    case reflenums::clang__ASTFileSignature::max_size:
      return toClientReflType<unsigned long>(C);
    case reflenums::clang__ASTFileSignature::empty:
      return toClientReflType<bool>(C);
    case reflenums::clang__ASTFileSignature::empty:
      return toClientReflType<bool>(C);
    case reflenums::clang__ASTFileSignature::operator_sub:
      return toClientReflType<const unsigned int &>(C);
    case reflenums::clang__ASTFileSignature::operator_sub:
      return toClientReflType<const unsigned int &>(C);
    case reflenums::clang__ASTFileSignature::at:
      return toClientReflType<const unsigned int &>(C);
    case reflenums::clang__ASTFileSignature::at:
      return toClientReflType<const unsigned int &>(C);
    case reflenums::clang__ASTFileSignature::front:
      return toClientReflType<const unsigned int &>(C);
    case reflenums::clang__ASTFileSignature::front:
      return toClientReflType<const unsigned int &>(C);
    case reflenums::clang__ASTFileSignature::back:
      return toClientReflType<const unsigned int &>(C);
    case reflenums::clang__ASTFileSignature::back:
      return toClientReflType<const unsigned int &>(C);
    case reflenums::clang__ASTFileSignature::data:
      return toClientReflType<const unsigned int *>(C);
    case reflenums::clang__ASTFileSignature::data:
      return toClientReflType<const unsigned int *>(C);
    case reflenums::clang__ASTFileSignature::data:
      return toClientReflType<const unsigned int *>(C);
    case reflenums::clang__ASTFileSignature::data:
      return toClientReflType<const unsigned int *>(C);
    case reflenums::clang__ASTFileSignature::data:
      return toClientReflType<const unsigned int *>(C);
    case reflenums::clang__ASTFileSignature::data:
      return toClientReflType<const unsigned int *>(C);
    case reflenums::clang__ASTFileSignature::data:
      return toClientReflType<const unsigned int *>(C);
    case reflenums::clang__ASTFileSignature:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTFileSignature:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTFileSignature::operator_bool:
      return toClientReflType<bool>(C);
    case reflenums::clang__ASTFileSignature::operator_bool:
      return toClientReflType<bool>(C);
    case reflenums::clang__ASTFileSignature::operator_bool:
      return toClientReflType<bool>(C);
    case reflenums::clang__ASTFileSignature::operator_bool:
      return toClientReflType<bool>(C);
    case reflenums::clang__ASTFileSignature::operator_bool:
      return toClientReflType<bool>(C);
    case reflenums::clang__ASTFileSignature::operator_bool:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__Module:
  switch (static_cast<reflenums::clang__Module::memnames>(MemNum)) {
    case reflenums::clang__Module:::
      return toClientReflType<>(C);
    case reflenums::clang__Module:::
      return toClientReflType<>(C);
    case reflenums::clang__Module:::
      return toClientReflType<>(C);
    case reflenums::clang__Module::DefinitionLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__Module::DefinitionLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__Module::Kind:
      return toClientReflType<enum clang::Module::ModuleKind>(C);
    case reflenums::clang__Module::Parent:
      return toClientReflType<class clang::Module *>(C);
    case reflenums::clang__Module::Directory:
      return toClientReflType<const class clang::DirectoryEntry *>(C);
    case reflenums::clang__Module::Directory:
      return toClientReflType<const class clang::DirectoryEntry *>(C);
    case reflenums::clang__Module::Directory:
      return toClientReflType<const class clang::DirectoryEntry *>(C);
    case reflenums::clang__Module::Signature:
      return toClientReflType<struct clang::ASTFileSignature>(C);
    case reflenums::clang__Module::Signature:
      return toClientReflType<struct clang::ASTFileSignature>(C);
    case reflenums::clang__Module::Signature:
      return toClientReflType<struct clang::ASTFileSignature>(C);
    case reflenums::clang__Module::Signature:
      return toClientReflType<struct clang::ASTFileSignature>(C);
    case reflenums::clang__Module::Signature:
      return toClientReflType<struct clang::ASTFileSignature>(C);
    case reflenums::clang__Module::Signature:
      return toClientReflType<struct clang::ASTFileSignature>(C);
    case reflenums::clang__Module::Signature:
      return toClientReflType<struct clang::ASTFileSignature>(C);
    case reflenums::clang__Module::Signature:
      return toClientReflType<struct clang::ASTFileSignature>(C);
    case reflenums::clang__Module::Signature:
      return toClientReflType<struct clang::ASTFileSignature>(C);
    case reflenums::clang__Module::Signature:
      return toClientReflType<struct clang::ASTFileSignature>(C);
    case reflenums::clang__Module::Signature:
      return toClientReflType<struct clang::ASTFileSignature>(C);
    case reflenums::clang__Module::Signature:
      return toClientReflType<struct clang::ASTFileSignature>(C);
    case reflenums::clang__Module::Signature:
      return toClientReflType<struct clang::ASTFileSignature>(C);
    case reflenums::clang__Module::Signature:
      return toClientReflType<struct clang::ASTFileSignature>(C);
    case reflenums::clang__Module::Signature:
      return toClientReflType<struct clang::ASTFileSignature>(C);
    case reflenums::clang__Module::Signature:
      return toClientReflType<struct clang::ASTFileSignature>(C);
    case reflenums::clang__Module::Signature:
      return toClientReflType<struct clang::ASTFileSignature>(C);
    case reflenums::clang__Module::Signature:
      return toClientReflType<struct clang::ASTFileSignature>(C);
    case reflenums::clang__Module::Signature:
      return toClientReflType<struct clang::ASTFileSignature>(C);
    case reflenums::clang__Module::Signature:
      return toClientReflType<struct clang::ASTFileSignature>(C);
    case reflenums::clang__Module::Signature:
      return toClientReflType<struct clang::ASTFileSignature>(C);
    case reflenums::clang__Module::Signature:
      return toClientReflType<struct clang::ASTFileSignature>(C);
    case reflenums::clang__Module::ShadowingModule:
      return toClientReflType<class clang::Module *>(C);
    case reflenums::clang__Module::IsMissingRequirement:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__Module::HasIncompatibleModuleFile:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__Module::IsAvailable:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__Module::IsFromModuleFile:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__Module::IsFramework:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__Module::IsExplicit:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__Module::IsSystem:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__Module::IsExternC:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__Module::IsInferred:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__Module::InferSubmodules:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__Module::InferExplicitSubmodules:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__Module::InferExportWildcard:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__Module::ConfigMacrosExhaustive:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__Module::NoUndeclaredIncludes:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__Module::ModuleMapIsPrivate:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__Module::ModuleMapIsPrivate:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__Module::NameVisibility:
      return toClientReflType<enum clang::Module::NameVisibilityKind>(C);
    case reflenums::clang__Module::InferredSubmoduleLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__Module::InferredSubmoduleLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__Module::InferredSubmoduleLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__Module::InferredSubmoduleLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__Module::InferredSubmoduleLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__Module::InferredSubmoduleLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__Module::InferredSubmoduleLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__Module::InferredSubmoduleLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__Module::InferredSubmoduleLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__Module::InferredSubmoduleLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__Module::UseExportAsModuleLinkName:
      return toClientReflType<bool>(C);
    case reflenums::clang__Module::UseExportAsModuleLinkName:
      return toClientReflType<bool>(C);
    case reflenums::clang__Module::UseExportAsModuleLinkName:
      return toClientReflType<bool>(C);
    case reflenums::clang__Module::UseExportAsModuleLinkName:
      return toClientReflType<bool>(C);
    case reflenums::clang__Module::UseExportAsModuleLinkName:
      return toClientReflType<bool>(C);
    case reflenums::clang__Module::UseExportAsModuleLinkName:
      return toClientReflType<bool>(C);
    case reflenums::clang__Module::UseExportAsModuleLinkName:
      return toClientReflType<bool>(C);
    case reflenums::clang__Module::UseExportAsModuleLinkName:
      return toClientReflType<bool>(C);
    case reflenums::clang__Module::isAvailable:
      return toClientReflType<bool>(C);
    case reflenums::clang__Module::isAvailable:
      return toClientReflType<bool>(C);
    case reflenums::clang__Module::isSubModule:
      return toClientReflType<bool>(C);
    case reflenums::clang__Module::isSubModuleOf:
      return toClientReflType<bool>(C);
    case reflenums::clang__Module::isPartOfFramework:
      return toClientReflType<bool>(C);
    case reflenums::clang__Module::isSubFramework:
      return toClientReflType<bool>(C);
    case reflenums::clang__Module::isSubFramework:
      return toClientReflType<bool>(C);
    case reflenums::clang__Module::getFullModuleName:
      return toClientReflType<const char *>(C);
    case reflenums::clang__Module::getFullModuleName:
      return toClientReflType<const char *>(C);
    case reflenums::clang__Module::getFullModuleName:
      return toClientReflType<const char *>(C);
    case reflenums::clang__Module::getTopLevelModule:
      return toClientReflType<const class clang::Module *>(C);
    case reflenums::clang__Module::getTopLevelModuleName:
      return toClientReflType<const char *>(C);
    case reflenums::clang__Module::getASTFile:
      return toClientReflType<const class clang::FileEntry *>(C);
    case reflenums::clang__Module::getASTFile:
      return toClientReflType<const class clang::FileEntry *>(C);
    case reflenums::clang__Module::getUmbrellaDir:
      return toClientReflType<struct clang::Module::DirectoryName>(C);
    case reflenums::clang__Module::getUmbrellaHeader:
      return toClientReflType<struct clang::Module::Header>(C);
    case reflenums::clang__Module::hasUmbrellaDir:
      return toClientReflType<bool>(C);
    case reflenums::clang__Module::hasUmbrellaDir:
      return toClientReflType<bool>(C);
    case reflenums::clang__Module::hasUmbrellaDir:
      return toClientReflType<bool>(C);
    case reflenums::clang__Module::hasUmbrellaDir:
      return toClientReflType<bool>(C);
    case reflenums::clang__Module::directlyUses:
      return toClientReflType<bool>(C);
    case reflenums::clang__Module::directlyUses:
      return toClientReflType<bool>(C);
    case reflenums::clang__Module::directlyUses:
      return toClientReflType<bool>(C);
    case reflenums::clang__Module::directlyUses:
      return toClientReflType<bool>(C);
    case reflenums::clang__Module::isModuleVisible:
      return toClientReflType<bool>(C);
    case reflenums::clang__Module::getVisibilityID:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__Module::getVisibilityID:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__Module::getVisibilityID:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__Module::getVisibilityID:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__Module::getVisibilityID:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__Module::getVisibilityID:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__Module::getVisibilityID:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__Module::getVisibilityID:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__Module::submodules:
      return toClientReflType<class llvm::iterator_range<class std::__1::__wrap_iter<class clang::Module *const *> >>(C);
    case reflenums::clang__Module::submodules:
      return toClientReflType<class llvm::iterator_range<class std::__1::__wrap_iter<class clang::Module *const *> >>(C);
    case reflenums::clang__Module::getModuleInputBufferName:
      return toClientReflType<const char *>(C);
    case reflenums::clang__Module::print:
      return toClientReflType<void>(C);
    case reflenums::clang__Module::dump:
      return toClientReflType<void>(C);
    case reflenums::clang__Module::dump:
      return toClientReflType<void>(C);
    case reflenums::clang__Module::dump:
      return toClientReflType<void>(C);
    case reflenums::clang__Module::dump:
      return toClientReflType<void>(C);
    case reflenums::clang__Module::dump:
      return toClientReflType<void>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__Module__Header:
  switch (static_cast<reflenums::clang__Module__Header::memnames>(MemNum)) {
    case reflenums::clang__Module__Header:::
      return toClientReflType<>(C);
    case reflenums::clang__Module__Header:::
      return toClientReflType<>(C);
    case reflenums::clang__Module__Header::Entry:
      return toClientReflType<const class clang::FileEntry *>(C);
    case reflenums::clang__Module__Header::Entry:
      return toClientReflType<const class clang::FileEntry *>(C);
    case reflenums::clang__Module__Header::Entry:
      return toClientReflType<const class clang::FileEntry *>(C);
    case reflenums::clang__Module__Header::Entry:
      return toClientReflType<const class clang::FileEntry *>(C);
    case reflenums::clang__Module__Header::Entry:
      return toClientReflType<const class clang::FileEntry *>(C);
    case reflenums::clang__Module__Header::Entry:
      return toClientReflType<const class clang::FileEntry *>(C);
    case reflenums::clang__Module__Header::Entry:
      return toClientReflType<const class clang::FileEntry *>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__Module__DirectoryName:
  switch (static_cast<reflenums::clang__Module__DirectoryName::memnames>(MemNum)) {
    case reflenums::clang__Module__DirectoryName:::
      return toClientReflType<>(C);
    case reflenums::clang__Module__DirectoryName:::
      return toClientReflType<>(C);
    case reflenums::clang__Module__DirectoryName::Entry:
      return toClientReflType<const class clang::DirectoryEntry *>(C);
    case reflenums::clang__Module__DirectoryName::Entry:
      return toClientReflType<const class clang::DirectoryEntry *>(C);
    case reflenums::clang__Module__DirectoryName::Entry:
      return toClientReflType<const class clang::DirectoryEntry *>(C);
    case reflenums::clang__Module__DirectoryName::Entry:
      return toClientReflType<const class clang::DirectoryEntry *>(C);
    case reflenums::clang__Module__DirectoryName::Entry:
      return toClientReflType<const class clang::DirectoryEntry *>(C);
    case reflenums::clang__Module__DirectoryName::Entry:
      return toClientReflType<const class clang::DirectoryEntry *>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__ExternalASTSource:
  switch (static_cast<reflenums::clang__ExternalASTSource::memnames>(MemNum)) {
    case reflenums::clang__ExternalASTSource:::
      return toClientReflType<>(C);
    case reflenums::clang__ExternalASTSource:::
      return toClientReflType<>(C);
    case reflenums::clang__ExternalASTSource:::
      return toClientReflType<>(C);
    case reflenums::clang__ExternalASTSource:::
      return toClientReflType<>(C);
    case reflenums::clang__ExternalASTSource:::
      return toClientReflType<>(C);
    case reflenums::clang__ExternalASTSource::Retain:
      return toClientReflType<void>(C);
    case reflenums::clang__ExternalASTSource::Release:
      return toClientReflType<void>(C);
    case reflenums::clang__ExternalASTSource::Release:
      return toClientReflType<void>(C);
    case reflenums::clang__ExternalASTSource::Release:
      return toClientReflType<void>(C);
    case reflenums::clang__ExternalASTSource:::
      return toClientReflType<>(C);
    case reflenums::clang__ExternalASTSource:::
      return toClientReflType<>(C);
    case reflenums::clang__ExternalASTSource:::
      return toClientReflType<>(C);
    case reflenums::clang__ExternalASTSource:::
      return toClientReflType<>(C);
    case reflenums::clang__ExternalASTSource:::
      return toClientReflType<>(C);
    case reflenums::clang__ExternalASTSource:::
      return toClientReflType<>(C);
    case reflenums::clang__ExternalASTSource:::
      return toClientReflType<>(C);
    case reflenums::clang__ExternalASTSource:::
      return toClientReflType<>(C);
    case reflenums::clang__ExternalASTSource::getGeneration:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ExternalASTSource::getGeneration:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ExternalASTSource::getGeneration:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ExternalASTSource::getGeneration:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ExternalASTSource::getGeneration:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ExternalASTSource::getGeneration:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ExternalASTSource::getGeneration:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ExternalASTSource::getGeneration:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ExternalASTSource::getGeneration:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ExternalASTSource::getGeneration:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ExternalASTSource::getGeneration:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ExternalASTSource::getGeneration:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ExternalASTSource::getGeneration:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ExternalASTSource::getGeneration:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ExternalASTSource::getGeneration:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ExternalASTSource::getGeneration:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ExternalASTSource::getGeneration:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ExternalASTSource::getGeneration:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ExternalASTSource::getGeneration:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ExternalASTSource::getGeneration:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ExternalASTSource::getGeneration:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ExternalASTSource::getGeneration:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ExternalASTSource::getGeneration:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ExternalASTSource::getGeneration:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ExternalASTSource::getGeneration:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ExternalASTSource::getGeneration:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ExternalASTSource::getGeneration:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ExternalASTSource::getGeneration:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ExternalASTSource::getGeneration:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ExternalASTSource::getMemoryBufferSizes:
      return toClientReflType<struct clang::ExternalASTSource::MemoryBufferSizes>(C);
    case reflenums::clang__ExternalASTSource::getMemoryBufferSizes1:
      return toClientReflType<void>(C);
    case reflenums::clang__ExternalASTSource::getMemoryBufferSizes1:
      return toClientReflType<void>(C);
    case reflenums::clang__ExternalASTSource::getMemoryBufferSizes1:
      return toClientReflType<void>(C);
    case reflenums::clang__ExternalASTSource::getMemoryBufferSizes1:
      return toClientReflType<void>(C);
    case reflenums::clang__ExternalASTSource::getMemoryBufferSizes1:
      return toClientReflType<void>(C);
    case reflenums::clang__ExternalASTSource::getMemoryBufferSizes1:
      return toClientReflType<void>(C);
    case reflenums::clang__ExternalASTSource::getMemoryBufferSizes1:
      return toClientReflType<void>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__ExternalASTSource__MemoryBufferSizes:
  switch (static_cast<reflenums::clang__ExternalASTSource__MemoryBufferSizes::memnames>(MemNum)) {
    case reflenums::clang__ExternalASTSource__MemoryBufferSizes:::
      return toClientReflType<>(C);
    case reflenums::clang__ExternalASTSource__MemoryBufferSizes::malloc_bytes:
      return toClientReflType<unsigned long>(C);
    case reflenums::clang__ExternalASTSource__MemoryBufferSizes::mmap_bytes:
      return toClientReflType<unsigned long>(C);
    case reflenums::clang__ExternalASTSource__MemoryBufferSizes::mmap_bytes:
      return toClientReflType<unsigned long>(C);
    case reflenums::clang__ExternalASTSource__MemoryBufferSizes::mmap_bytes:
      return toClientReflType<unsigned long>(C);
    case reflenums::clang__ExternalASTSource__MemoryBufferSizes::mmap_bytes:
      return toClientReflType<unsigned long>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_llvm__FoldingSetBase:
  switch (static_cast<reflenums::llvm__FoldingSetBase::memnames>(MemNum)) {
    case reflenums::llvm__FoldingSetBase:::
      return toClientReflType<>(C);
    case reflenums::llvm__FoldingSetBase:::
      return toClientReflType<>(C);
    case reflenums::llvm__FoldingSetBase:::
      return toClientReflType<>(C);
    case reflenums::llvm__FoldingSetBase:::
      return toClientReflType<>(C);
    case reflenums::llvm__FoldingSetBase:::
      return toClientReflType<>(C);
    case reflenums::llvm__FoldingSetBase:::
      return toClientReflType<>(C);
    case reflenums::llvm__FoldingSetBase:::
      return toClientReflType<>(C);
    case reflenums::llvm__FoldingSetBase:::
      return toClientReflType<>(C);
    case reflenums::llvm__FoldingSetBase:::
      return toClientReflType<>(C);
    case reflenums::llvm__FoldingSetBase:::
      return toClientReflType<>(C);
    case reflenums::llvm__FoldingSetBase:::
      return toClientReflType<>(C);
    case reflenums::llvm__FoldingSetBase:::
      return toClientReflType<>(C);
    case reflenums::llvm__FoldingSetBase:::
      return toClientReflType<>(C);
    case reflenums::llvm__FoldingSetBase::size:
      return toClientReflType<unsigned int>(C);
    case reflenums::llvm__FoldingSetBase::empty:
      return toClientReflType<bool>(C);
    case reflenums::llvm__FoldingSetBase::empty:
      return toClientReflType<bool>(C);
    case reflenums::llvm__FoldingSetBase::empty:
      return toClientReflType<bool>(C);
    case reflenums::llvm__FoldingSetBase::empty:
      return toClientReflType<bool>(C);
    case reflenums::llvm__FoldingSetBase::empty:
      return toClientReflType<bool>(C);
    case reflenums::llvm__FoldingSetBase::empty:
      return toClientReflType<bool>(C);
    case reflenums::llvm__FoldingSetBase::empty:
      return toClientReflType<bool>(C);
    case reflenums::llvm__FoldingSetBase::empty:
      return toClientReflType<bool>(C);
    case reflenums::llvm__FoldingSetBase::empty:
      return toClientReflType<bool>(C);
    case reflenums::llvm__FoldingSetBase::empty:
      return toClientReflType<bool>(C);
    case reflenums::llvm__FoldingSetBase::empty:
      return toClientReflType<bool>(C);
    case reflenums::llvm__FoldingSetBase::empty:
      return toClientReflType<bool>(C);
    case reflenums::llvm__FoldingSetBase::empty:
      return toClientReflType<bool>(C);
    case reflenums::llvm__FoldingSetBase::empty:
      return toClientReflType<bool>(C);
    case reflenums::llvm__FoldingSetBase::empty:
      return toClientReflType<bool>(C);
    case reflenums::llvm__FoldingSetBase::empty:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_llvm__FoldingSetBase__Node:
  switch (static_cast<reflenums::llvm__FoldingSetBase__Node::memnames>(MemNum)) {
    case reflenums::llvm__FoldingSetBase__Node:::
      return toClientReflType<>(C);
    case reflenums::llvm__FoldingSetBase__Node:::
      return toClientReflType<>(C);
    case reflenums::llvm__FoldingSetBase__Node:::
      return toClientReflType<>(C);
    case reflenums::llvm__FoldingSetBase__Node:::
      return toClientReflType<>(C);
    case reflenums::llvm__FoldingSetBase__Node:::
      return toClientReflType<>(C);
    case reflenums::llvm__FoldingSetBase__Node::getNextInBucket:
      return toClientReflType<void *>(C);
    case reflenums::llvm__FoldingSetBase__Node::getNextInBucket:
      return toClientReflType<void *>(C);
    case reflenums::llvm__FoldingSetBase__Node::getNextInBucket:
      return toClientReflType<void *>(C);
    case reflenums::llvm__FoldingSetBase__Node::getNextInBucket:
      return toClientReflType<void *>(C);
    case reflenums::llvm__FoldingSetBase__Node::getNextInBucket:
      return toClientReflType<void *>(C);
    case reflenums::llvm__FoldingSetBase__Node::getNextInBucket:
      return toClientReflType<void *>(C);
    case reflenums::llvm__FoldingSetBase__Node::getNextInBucket:
      return toClientReflType<void *>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_llvm__FoldingSetNodeIDRef:
  switch (static_cast<reflenums::llvm__FoldingSetNodeIDRef::memnames>(MemNum)) {
    case reflenums::llvm__FoldingSetNodeIDRef:::
      return toClientReflType<>(C);
    case reflenums::llvm__FoldingSetNodeIDRef:::
      return toClientReflType<>(C);
    case reflenums::llvm__FoldingSetNodeIDRef:::
      return toClientReflType<>(C);
    case reflenums::llvm__FoldingSetNodeIDRef:::
      return toClientReflType<>(C);
    case reflenums::llvm__FoldingSetNodeIDRef:::
      return toClientReflType<>(C);
    case reflenums::llvm__FoldingSetNodeIDRef:::
      return toClientReflType<>(C);
    case reflenums::llvm__FoldingSetNodeIDRef::ComputeHash:
      return toClientReflType<unsigned int>(C);
    case reflenums::llvm__FoldingSetNodeIDRef::operator_eq_eq:
      return toClientReflType<bool>(C);
    case reflenums::llvm__FoldingSetNodeIDRef::operator_not_eq:
      return toClientReflType<bool>(C);
    case reflenums::llvm__FoldingSetNodeIDRef::operator_less:
      return toClientReflType<bool>(C);
    case reflenums::llvm__FoldingSetNodeIDRef::getData:
      return toClientReflType<const unsigned int *>(C);
    case reflenums::llvm__FoldingSetNodeIDRef::getSize:
      return toClientReflType<unsigned long>(C);
    case reflenums::llvm__FoldingSetNodeIDRef::getSize:
      return toClientReflType<unsigned long>(C);
    case reflenums::llvm__FoldingSetNodeIDRef::getSize:
      return toClientReflType<unsigned long>(C);
    case reflenums::llvm__FoldingSetNodeIDRef::getSize:
      return toClientReflType<unsigned long>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_llvm__FoldingSetNodeID:
  switch (static_cast<reflenums::llvm__FoldingSetNodeID::memnames>(MemNum)) {
    case reflenums::llvm__FoldingSetNodeID:::
      return toClientReflType<>(C);
    case reflenums::llvm__FoldingSetNodeID:::
      return toClientReflType<>(C);
    case reflenums::llvm__FoldingSetNodeID:::
      return toClientReflType<>(C);
    case reflenums::llvm__FoldingSetNodeID:::
      return toClientReflType<>(C);
    case reflenums::llvm__FoldingSetNodeID:::
      return toClientReflType<>(C);
    case reflenums::llvm__FoldingSetNodeID:::
      return toClientReflType<>(C);
    case reflenums::llvm__FoldingSetNodeID:::
      return toClientReflType<>(C);
    case reflenums::llvm__FoldingSetNodeID:::
      return toClientReflType<>(C);
    case reflenums::llvm__FoldingSetNodeID:::
      return toClientReflType<>(C);
    case reflenums::llvm__FoldingSetNodeID:::
      return toClientReflType<>(C);
    case reflenums::llvm__FoldingSetNodeID:::
      return toClientReflType<>(C);
    case reflenums::llvm__FoldingSetNodeID:::
      return toClientReflType<>(C);
    case reflenums::llvm__FoldingSetNodeID:::
      return toClientReflType<>(C);
    case reflenums::llvm__FoldingSetNodeID:::
      return toClientReflType<>(C);
    case reflenums::llvm__FoldingSetNodeID:::
      return toClientReflType<>(C);
    case reflenums::llvm__FoldingSetNodeID:::
      return toClientReflType<>(C);
    case reflenums::llvm__FoldingSetNodeID:::
      return toClientReflType<>(C);
    case reflenums::llvm__FoldingSetNodeID::ComputeHash:
      return toClientReflType<unsigned int>(C);
    case reflenums::llvm__FoldingSetNodeID::operator_eq_eq:
      return toClientReflType<bool>(C);
    case reflenums::llvm__FoldingSetNodeID::operator_eq_eq1:
      return toClientReflType<bool>(C);
    case reflenums::llvm__FoldingSetNodeID::operator_not_eq:
      return toClientReflType<bool>(C);
    case reflenums::llvm__FoldingSetNodeID::operator_not_eq1:
      return toClientReflType<bool>(C);
    case reflenums::llvm__FoldingSetNodeID::operator_less:
      return toClientReflType<bool>(C);
    case reflenums::llvm__FoldingSetNodeID::operator_less1:
      return toClientReflType<bool>(C);
    case reflenums::llvm__FoldingSetNodeID::operator_less1:
      return toClientReflType<bool>(C);
    case reflenums::llvm__FoldingSetNodeID::operator_less1:
      return toClientReflType<bool>(C);
    case reflenums::llvm__FoldingSetNodeID::operator_less1:
      return toClientReflType<bool>(C);
    case reflenums::llvm__FoldingSetNodeID::operator_less1:
      return toClientReflType<bool>(C);
    case reflenums::llvm__FoldingSetNodeID::operator_less1:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__NestedNameSpecifier:
  switch (static_cast<reflenums::clang__NestedNameSpecifier::memnames>(MemNum)) {
    case reflenums::clang__NestedNameSpecifier:::
      return toClientReflType<>(C);
    case reflenums::clang__NestedNameSpecifier:::
      return toClientReflType<>(C);
    case reflenums::clang__NestedNameSpecifier:::
      return toClientReflType<>(C);
    case reflenums::clang__NestedNameSpecifier:::
      return toClientReflType<>(C);
    case reflenums::clang__NestedNameSpecifier:::
      return toClientReflType<>(C);
    case reflenums::clang__NestedNameSpecifier:::
      return toClientReflType<>(C);
    case reflenums::clang__NestedNameSpecifier:::
      return toClientReflType<>(C);
    case reflenums::clang__NestedNameSpecifier:::
      return toClientReflType<>(C);
    case reflenums::clang__NestedNameSpecifier:::
      return toClientReflType<>(C);
    case reflenums::clang__NestedNameSpecifier:::
      return toClientReflType<>(C);
    case reflenums::clang__NestedNameSpecifier:::
      return toClientReflType<>(C);
    case reflenums::clang__NestedNameSpecifier:::
      return toClientReflType<>(C);
    case reflenums::clang__NestedNameSpecifier::Create:
      return toClientReflType<class clang::NestedNameSpecifier *>(C);
    case reflenums::clang__NestedNameSpecifier::Create1:
      return toClientReflType<class clang::NestedNameSpecifier *>(C);
    case reflenums::clang__NestedNameSpecifier::Create2:
      return toClientReflType<class clang::NestedNameSpecifier *>(C);
    case reflenums::clang__NestedNameSpecifier::Create3:
      return toClientReflType<class clang::NestedNameSpecifier *>(C);
    case reflenums::clang__NestedNameSpecifier::Create4:
      return toClientReflType<class clang::NestedNameSpecifier *>(C);
    case reflenums::clang__NestedNameSpecifier::GlobalSpecifier:
      return toClientReflType<class clang::NestedNameSpecifier *>(C);
    case reflenums::clang__NestedNameSpecifier::SuperSpecifier:
      return toClientReflType<class clang::NestedNameSpecifier *>(C);
    case reflenums::clang__NestedNameSpecifier::getPrefix:
      return toClientReflType<class clang::NestedNameSpecifier *>(C);
    case reflenums::clang__NestedNameSpecifier::getKind:
      return toClientReflType<enum clang::NestedNameSpecifier::SpecifierKind>(C);
    case reflenums::clang__NestedNameSpecifier::getAsIdentifier:
      return toClientReflType<class clang::IdentifierInfo *>(C);
    case reflenums::clang__NestedNameSpecifier::getAsNamespace:
      return toClientReflType<class clang::NamespaceDecl *>(C);
    case reflenums::clang__NestedNameSpecifier::getAsNamespaceAlias:
      return toClientReflType<class clang::NamespaceAliasDecl *>(C);
    case reflenums::clang__NestedNameSpecifier::getAsRecordDecl:
      return toClientReflType<class clang::CXXRecordDecl *>(C);
    case reflenums::clang__NestedNameSpecifier::getAsType:
      return toClientReflType<const class clang::Type *>(C);
    case reflenums::clang__NestedNameSpecifier::isDependent:
      return toClientReflType<bool>(C);
    case reflenums::clang__NestedNameSpecifier::isInstantiationDependent:
      return toClientReflType<bool>(C);
    case reflenums::clang__NestedNameSpecifier::containsUnexpandedParameterPack:
      return toClientReflType<bool>(C);
    case reflenums::clang__NestedNameSpecifier::print:
      return toClientReflType<void>(C);
    case reflenums::clang__NestedNameSpecifier::Profile:
      return toClientReflType<void>(C);
    case reflenums::clang__NestedNameSpecifier::dump:
      return toClientReflType<void>(C);
    case reflenums::clang__NestedNameSpecifier::dump1:
      return toClientReflType<void>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__NestedNameSpecifierLoc:
  switch (static_cast<reflenums::clang__NestedNameSpecifierLoc::memnames>(MemNum)) {
    case reflenums::clang__NestedNameSpecifierLoc:::
      return toClientReflType<>(C);
    case reflenums::clang__NestedNameSpecifierLoc:::
      return toClientReflType<>(C);
    case reflenums::clang__NestedNameSpecifierLoc:::
      return toClientReflType<>(C);
    case reflenums::clang__NestedNameSpecifierLoc:::
      return toClientReflType<>(C);
    case reflenums::clang__NestedNameSpecifierLoc:::
      return toClientReflType<>(C);
    case reflenums::clang__NestedNameSpecifierLoc:::
      return toClientReflType<>(C);
    case reflenums::clang__NestedNameSpecifierLoc:::
      return toClientReflType<>(C);
    case reflenums::clang__NestedNameSpecifierLoc:::
      return toClientReflType<>(C);
    case reflenums::clang__NestedNameSpecifierLoc::operator_bool:
      return toClientReflType<bool>(C);
    case reflenums::clang__NestedNameSpecifierLoc::hasQualifier:
      return toClientReflType<bool>(C);
    case reflenums::clang__NestedNameSpecifierLoc::getNestedNameSpecifier:
      return toClientReflType<class clang::NestedNameSpecifier *>(C);
    case reflenums::clang__NestedNameSpecifierLoc::getOpaqueData:
      return toClientReflType<void *>(C);
    case reflenums::clang__NestedNameSpecifierLoc::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__NestedNameSpecifierLoc::getLocalSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__NestedNameSpecifierLoc::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__NestedNameSpecifierLoc::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__NestedNameSpecifierLoc::getLocalBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__NestedNameSpecifierLoc::getLocalEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__NestedNameSpecifierLoc::getPrefix:
      return toClientReflType<class clang::NestedNameSpecifierLoc>(C);
    case reflenums::clang__NestedNameSpecifierLoc::getTypeLoc:
      return toClientReflType<class clang::TypeLoc>(C);
    case reflenums::clang__NestedNameSpecifierLoc::getDataLength:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__NestedNameSpecifierLoc::operator_eq_eq:
      return toClientReflType<bool>(C);
    case reflenums::clang__NestedNameSpecifierLoc::operator_not_eq:
      return toClientReflType<bool>(C);
    case reflenums::clang__NestedNameSpecifierLoc::operator_not_eq:
      return toClientReflType<bool>(C);
    case reflenums::clang__NestedNameSpecifierLoc::operator_not_eq:
      return toClientReflType<bool>(C);
    case reflenums::clang__NestedNameSpecifierLoc::operator_not_eq:
      return toClientReflType<bool>(C);
    case reflenums::clang__NestedNameSpecifierLoc::operator_not_eq:
      return toClientReflType<bool>(C);
    case reflenums::clang__NestedNameSpecifierLoc::operator_not_eq:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__UncommonTemplateNameStorage:
  switch (static_cast<reflenums::clang__UncommonTemplateNameStorage::memnames>(MemNum)) {
    case reflenums::clang__UncommonTemplateNameStorage:::
      return toClientReflType<>(C);
    case reflenums::clang__UncommonTemplateNameStorage:::
      return toClientReflType<>(C);
    case reflenums::clang__UncommonTemplateNameStorage:::
      return toClientReflType<>(C);
    case reflenums::clang__UncommonTemplateNameStorage:::
      return toClientReflType<>(C);
    case reflenums::clang__UncommonTemplateNameStorage:::
      return toClientReflType<>(C);
    case reflenums::clang__UncommonTemplateNameStorage:::
      return toClientReflType<>(C);
    case reflenums::clang__UncommonTemplateNameStorage:::
      return toClientReflType<>(C);
    case reflenums::clang__UncommonTemplateNameStorage:::
      return toClientReflType<>(C);
    case reflenums::clang__UncommonTemplateNameStorage:::
      return toClientReflType<>(C);
    case reflenums::clang__UncommonTemplateNameStorage:::
      return toClientReflType<>(C);
    case reflenums::clang__UncommonTemplateNameStorage::size:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__UncommonTemplateNameStorage::size:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__UncommonTemplateNameStorage::size:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__UncommonTemplateNameStorage::size:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__UncommonTemplateNameStorage::size:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__UncommonTemplateNameStorage::size:
      return toClientReflType<unsigned int>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__OverloadedTemplateStorage:
  switch (static_cast<reflenums::clang__OverloadedTemplateStorage::memnames>(MemNum)) {
    case reflenums::clang__OverloadedTemplateStorage::_this_:
      if (IsPtr)
        return toClientReflType<clang::OverloadedTemplateStorage *>(C);
      return toClientReflType<clang::OverloadedTemplateStorage>(C);
    case reflenums::clang__OverloadedTemplateStorage:::
      return toClientReflType<>(C);
    case reflenums::clang__OverloadedTemplateStorage:::
      return toClientReflType<>(C);
    case reflenums::clang__OverloadedTemplateStorage:::
      return toClientReflType<>(C);
    case reflenums::clang__OverloadedTemplateStorage:::
      return toClientReflType<>(C);
    case reflenums::clang__OverloadedTemplateStorage:::
      return toClientReflType<>(C);
    case reflenums::clang__OverloadedTemplateStorage:::
      return toClientReflType<>(C);
    case reflenums::clang__OverloadedTemplateStorage:::
      return toClientReflType<>(C);
    case reflenums::clang__OverloadedTemplateStorage:::
      return toClientReflType<>(C);
    case reflenums::clang__OverloadedTemplateStorage:::
      return toClientReflType<>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__SubstTemplateTemplateParmPackStorage:
  switch (static_cast<reflenums::clang__SubstTemplateTemplateParmPackStorage::memnames>(MemNum)) {
    case reflenums::clang__SubstTemplateTemplateParmPackStorage:::
      return toClientReflType<>(C);
    case reflenums::clang__SubstTemplateTemplateParmPackStorage:::
      return toClientReflType<>(C);
    case reflenums::clang__SubstTemplateTemplateParmPackStorage:::
      return toClientReflType<>(C);
    case reflenums::clang__SubstTemplateTemplateParmPackStorage:::
      return toClientReflType<>(C);
    case reflenums::clang__SubstTemplateTemplateParmPackStorage:::
      return toClientReflType<>(C);
    case reflenums::clang__SubstTemplateTemplateParmPackStorage::getParameterPack:
      return toClientReflType<class clang::TemplateTemplateParmDecl *>(C);
    case reflenums::clang__SubstTemplateTemplateParmPackStorage::getArgumentPack:
      return toClientReflType<class clang::TemplateArgument>(C);
    case reflenums::clang__SubstTemplateTemplateParmPackStorage::getArgumentPack:
      return toClientReflType<class clang::TemplateArgument>(C);
    case reflenums::clang__SubstTemplateTemplateParmPackStorage::Profile:
      return toClientReflType<void>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__TemplateName:
  switch (static_cast<reflenums::clang__TemplateName::memnames>(MemNum)) {
    case reflenums::clang__TemplateName:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateName:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateName:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateName:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateName:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateName:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateName:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateName:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateName:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateName:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateName:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateName:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateName:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateName::isNull:
      return toClientReflType<bool>(C);
    case reflenums::clang__TemplateName::getKind:
      return toClientReflType<enum clang::TemplateName::NameKind>(C);
    case reflenums::clang__TemplateName::getAsTemplateDecl:
      return toClientReflType<class clang::TemplateDecl *>(C);
    case reflenums::clang__TemplateName::getAsOverloadedTemplate:
      return toClientReflType<class clang::OverloadedTemplateStorage *>(C);
    case reflenums::clang__TemplateName::getAsSubstTemplateTemplateParm:
      return toClientReflType<class clang::SubstTemplateTemplateParmStorage *>(C);
    case reflenums::clang__TemplateName::getAsSubstTemplateTemplateParmPack:
      return toClientReflType<class clang::SubstTemplateTemplateParmPackStorage *>(C);
    case reflenums::clang__TemplateName::getAsQualifiedTemplateName:
      return toClientReflType<class clang::QualifiedTemplateName *>(C);
    case reflenums::clang__TemplateName::getAsDependentTemplateName:
      return toClientReflType<class clang::DependentTemplateName *>(C);
    case reflenums::clang__TemplateName::getUnderlying:
      return toClientReflType<class clang::TemplateName>(C);
    case reflenums::clang__TemplateName::getNameToSubstitute:
      return toClientReflType<class clang::TemplateName>(C);
    case reflenums::clang__TemplateName::isDependent:
      return toClientReflType<bool>(C);
    case reflenums::clang__TemplateName::isInstantiationDependent:
      return toClientReflType<bool>(C);
    case reflenums::clang__TemplateName::containsUnexpandedParameterPack:
      return toClientReflType<bool>(C);
    case reflenums::clang__TemplateName::print:
      return toClientReflType<void>(C);
    case reflenums::clang__TemplateName::dump:
      return toClientReflType<void>(C);
    case reflenums::clang__TemplateName::dump1:
      return toClientReflType<void>(C);
    case reflenums::clang__TemplateName::dump1:
      return toClientReflType<void>(C);
    case reflenums::clang__TemplateName::getAsVoidPointer:
      return toClientReflType<void *>(C);
    case reflenums::clang__TemplateName::getFromVoidPointer:
      return toClientReflType<class clang::TemplateName>(C);
    case reflenums::clang__TemplateName::getFromVoidPointer:
      return toClientReflType<class clang::TemplateName>(C);
    case reflenums::clang__TemplateName::getFromVoidPointer:
      return toClientReflType<class clang::TemplateName>(C);
    case reflenums::clang__TemplateName::getFromVoidPointer:
      return toClientReflType<class clang::TemplateName>(C);
    case reflenums::clang__TemplateName::getFromVoidPointer:
      return toClientReflType<class clang::TemplateName>(C);
    case reflenums::clang__TemplateName::getFromVoidPointer:
      return toClientReflType<class clang::TemplateName>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__SubstTemplateTemplateParmStorage:
  switch (static_cast<reflenums::clang__SubstTemplateTemplateParmStorage::memnames>(MemNum)) {
    case reflenums::clang__SubstTemplateTemplateParmStorage:::
      return toClientReflType<>(C);
    case reflenums::clang__SubstTemplateTemplateParmStorage:::
      return toClientReflType<>(C);
    case reflenums::clang__SubstTemplateTemplateParmStorage:::
      return toClientReflType<>(C);
    case reflenums::clang__SubstTemplateTemplateParmStorage:::
      return toClientReflType<>(C);
    case reflenums::clang__SubstTemplateTemplateParmStorage:::
      return toClientReflType<>(C);
    case reflenums::clang__SubstTemplateTemplateParmStorage:::
      return toClientReflType<>(C);
    case reflenums::clang__SubstTemplateTemplateParmStorage::getParameter:
      return toClientReflType<class clang::TemplateTemplateParmDecl *>(C);
    case reflenums::clang__SubstTemplateTemplateParmStorage::getReplacement:
      return toClientReflType<class clang::TemplateName>(C);
    case reflenums::clang__SubstTemplateTemplateParmStorage::getReplacement:
      return toClientReflType<class clang::TemplateName>(C);
    case reflenums::clang__SubstTemplateTemplateParmStorage::Profile:
      return toClientReflType<void>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__QualifiedTemplateName:
  switch (static_cast<reflenums::clang__QualifiedTemplateName::memnames>(MemNum)) {
    case reflenums::clang__QualifiedTemplateName:::
      return toClientReflType<>(C);
    case reflenums::clang__QualifiedTemplateName:::
      return toClientReflType<>(C);
    case reflenums::clang__QualifiedTemplateName:::
      return toClientReflType<>(C);
    case reflenums::clang__QualifiedTemplateName:::
      return toClientReflType<>(C);
    case reflenums::clang__QualifiedTemplateName:::
      return toClientReflType<>(C);
    case reflenums::clang__QualifiedTemplateName:::
      return toClientReflType<>(C);
    case reflenums::clang__QualifiedTemplateName::getQualifier:
      return toClientReflType<class clang::NestedNameSpecifier *>(C);
    case reflenums::clang__QualifiedTemplateName::hasTemplateKeyword:
      return toClientReflType<bool>(C);
    case reflenums::clang__QualifiedTemplateName::getDecl:
      return toClientReflType<class clang::TemplateDecl *>(C);
    case reflenums::clang__QualifiedTemplateName::getTemplateDecl:
      return toClientReflType<class clang::TemplateDecl *>(C);
    case reflenums::clang__QualifiedTemplateName::getTemplateDecl:
      return toClientReflType<class clang::TemplateDecl *>(C);
    case reflenums::clang__QualifiedTemplateName::Profile:
      return toClientReflType<void>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__DependentTemplateName:
  switch (static_cast<reflenums::clang__DependentTemplateName::memnames>(MemNum)) {
    case reflenums::clang__DependentTemplateName:::
      return toClientReflType<>(C);
    case reflenums::clang__DependentTemplateName:::
      return toClientReflType<>(C);
    case reflenums::clang__DependentTemplateName:::
      return toClientReflType<>(C);
    case reflenums::clang__DependentTemplateName:::
      return toClientReflType<>(C);
    case reflenums::clang__DependentTemplateName:::
      return toClientReflType<>(C);
    case reflenums::clang__DependentTemplateName:::
      return toClientReflType<>(C);
    case reflenums::clang__DependentTemplateName:::
      return toClientReflType<>(C);
    case reflenums::clang__DependentTemplateName:::
      return toClientReflType<>(C);
    case reflenums::clang__DependentTemplateName:::
      return toClientReflType<>(C);
    case reflenums::clang__DependentTemplateName:::
      return toClientReflType<>(C);
    case reflenums::clang__DependentTemplateName:::
      return toClientReflType<>(C);
    case reflenums::clang__DependentTemplateName:::
      return toClientReflType<>(C);
    case reflenums::clang__DependentTemplateName:::
      return toClientReflType<>(C);
    case reflenums::clang__DependentTemplateName::getQualifier:
      return toClientReflType<class clang::NestedNameSpecifier *>(C);
    case reflenums::clang__DependentTemplateName::isIdentifier:
      return toClientReflType<bool>(C);
    case reflenums::clang__DependentTemplateName::getIdentifier:
      return toClientReflType<const class clang::IdentifierInfo *>(C);
    case reflenums::clang__DependentTemplateName::isOverloadedOperator:
      return toClientReflType<bool>(C);
    case reflenums::clang__DependentTemplateName::getOperator:
      return toClientReflType<enum clang::OverloadedOperatorKind>(C);
    case reflenums::clang__DependentTemplateName::getOperator:
      return toClientReflType<enum clang::OverloadedOperatorKind>(C);
    case reflenums::clang__DependentTemplateName::Profile:
      return toClientReflType<void>(C);
    case reflenums::clang__DependentTemplateName::Profile1:
      return toClientReflType<void>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__LinkageInfo:
  switch (static_cast<reflenums::clang__LinkageInfo::memnames>(MemNum)) {
    case reflenums::clang__LinkageInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__LinkageInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__LinkageInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__LinkageInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__LinkageInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__LinkageInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__LinkageInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__LinkageInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__LinkageInfo::external:
      return toClientReflType<class clang::LinkageInfo>(C);
    case reflenums::clang__LinkageInfo::internal:
      return toClientReflType<class clang::LinkageInfo>(C);
    case reflenums::clang__LinkageInfo::uniqueExternal:
      return toClientReflType<class clang::LinkageInfo>(C);
    case reflenums::clang__LinkageInfo::none:
      return toClientReflType<class clang::LinkageInfo>(C);
    case reflenums::clang__LinkageInfo::visible_none:
      return toClientReflType<class clang::LinkageInfo>(C);
    case reflenums::clang__LinkageInfo::getLinkage:
      return toClientReflType<enum clang::Linkage>(C);
    case reflenums::clang__LinkageInfo::getVisibility:
      return toClientReflType<enum clang::Visibility>(C);
    case reflenums::clang__LinkageInfo::isVisibilityExplicit:
      return toClientReflType<bool>(C);
    case reflenums::clang__LinkageInfo::isVisibilityExplicit:
      return toClientReflType<bool>(C);
    case reflenums::clang__LinkageInfo::isVisibilityExplicit:
      return toClientReflType<bool>(C);
    case reflenums::clang__LinkageInfo::isVisibilityExplicit:
      return toClientReflType<bool>(C);
    case reflenums::clang__LinkageInfo::isVisibilityExplicit:
      return toClientReflType<bool>(C);
    case reflenums::clang__LinkageInfo::isVisibilityExplicit:
      return toClientReflType<bool>(C);
    case reflenums::clang__LinkageInfo::isVisibilityExplicit:
      return toClientReflType<bool>(C);
    case reflenums::clang__LinkageInfo::isVisibilityExplicit:
      return toClientReflType<bool>(C);
    case reflenums::clang__LinkageInfo::isVisibilityExplicit:
      return toClientReflType<bool>(C);
    case reflenums::clang__LinkageInfo::isVisibilityExplicit:
      return toClientReflType<bool>(C);
    case reflenums::clang__LinkageInfo::isVisibilityExplicit:
      return toClientReflType<bool>(C);
    case reflenums::clang__LinkageInfo::isVisibilityExplicit:
      return toClientReflType<bool>(C);
    case reflenums::clang__LinkageInfo::isVisibilityExplicit:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__Qualifiers:
  switch (static_cast<reflenums::clang__Qualifiers::memnames>(MemNum)) {
    case reflenums::clang__Qualifiers:::
      return toClientReflType<>(C);
    case reflenums::clang__Qualifiers:::
      return toClientReflType<>(C);
    case reflenums::clang__Qualifiers:::
      return toClientReflType<>(C);
    case reflenums::clang__Qualifiers:::
      return toClientReflType<>(C);
    case reflenums::clang__Qualifiers:::
      return toClientReflType<>(C);
    case reflenums::clang__Qualifiers:::
      return toClientReflType<>(C);
    case reflenums::clang__Qualifiers::removeCommonQualifiers:
      return toClientReflType<class clang::Qualifiers>(C);
    case reflenums::clang__Qualifiers::fromFastMask:
      return toClientReflType<class clang::Qualifiers>(C);
    case reflenums::clang__Qualifiers::fromCVRMask:
      return toClientReflType<class clang::Qualifiers>(C);
    case reflenums::clang__Qualifiers::fromCVRUMask:
      return toClientReflType<class clang::Qualifiers>(C);
    case reflenums::clang__Qualifiers::fromOpaqueValue:
      return toClientReflType<class clang::Qualifiers>(C);
    case reflenums::clang__Qualifiers::getAsOpaqueValue:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__Qualifiers::hasConst:
      return toClientReflType<bool>(C);
    case reflenums::clang__Qualifiers::hasConst:
      return toClientReflType<bool>(C);
    case reflenums::clang__Qualifiers::hasConst:
      return toClientReflType<bool>(C);
    case reflenums::clang__Qualifiers::hasConst:
      return toClientReflType<bool>(C);
    case reflenums::clang__Qualifiers::hasVolatile:
      return toClientReflType<bool>(C);
    case reflenums::clang__Qualifiers::hasVolatile:
      return toClientReflType<bool>(C);
    case reflenums::clang__Qualifiers::hasVolatile:
      return toClientReflType<bool>(C);
    case reflenums::clang__Qualifiers::hasVolatile:
      return toClientReflType<bool>(C);
    case reflenums::clang__Qualifiers::hasRestrict:
      return toClientReflType<bool>(C);
    case reflenums::clang__Qualifiers::hasRestrict:
      return toClientReflType<bool>(C);
    case reflenums::clang__Qualifiers::hasRestrict:
      return toClientReflType<bool>(C);
    case reflenums::clang__Qualifiers::hasRestrict:
      return toClientReflType<bool>(C);
    case reflenums::clang__Qualifiers::hasCVRQualifiers:
      return toClientReflType<bool>(C);
    case reflenums::clang__Qualifiers::getCVRQualifiers:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__Qualifiers::getCVRQualifiers:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__Qualifiers::getCVRQualifiers:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__Qualifiers::getCVRQualifiers:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__Qualifiers::getCVRQualifiers:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__Qualifiers::getCVRQualifiers:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__Qualifiers::hasUnaligned:
      return toClientReflType<bool>(C);
    case reflenums::clang__Qualifiers::hasUnaligned:
      return toClientReflType<bool>(C);
    case reflenums::clang__Qualifiers::hasUnaligned:
      return toClientReflType<bool>(C);
    case reflenums::clang__Qualifiers::hasUnaligned:
      return toClientReflType<bool>(C);
    case reflenums::clang__Qualifiers::hasObjCGCAttr:
      return toClientReflType<bool>(C);
    case reflenums::clang__Qualifiers::getObjCGCAttr:
      return toClientReflType<enum clang::Qualifiers::GC>(C);
    case reflenums::clang__Qualifiers::getObjCGCAttr:
      return toClientReflType<enum clang::Qualifiers::GC>(C);
    case reflenums::clang__Qualifiers::getObjCGCAttr:
      return toClientReflType<enum clang::Qualifiers::GC>(C);
    case reflenums::clang__Qualifiers::getObjCGCAttr:
      return toClientReflType<enum clang::Qualifiers::GC>(C);
    case reflenums::clang__Qualifiers::withoutObjCGCAttr:
      return toClientReflType<class clang::Qualifiers>(C);
    case reflenums::clang__Qualifiers::withoutObjCLifetime:
      return toClientReflType<class clang::Qualifiers>(C);
    case reflenums::clang__Qualifiers::hasObjCLifetime:
      return toClientReflType<bool>(C);
    case reflenums::clang__Qualifiers::getObjCLifetime:
      return toClientReflType<enum clang::Qualifiers::ObjCLifetime>(C);
    case reflenums::clang__Qualifiers::getObjCLifetime:
      return toClientReflType<enum clang::Qualifiers::ObjCLifetime>(C);
    case reflenums::clang__Qualifiers::getObjCLifetime:
      return toClientReflType<enum clang::Qualifiers::ObjCLifetime>(C);
    case reflenums::clang__Qualifiers::getObjCLifetime:
      return toClientReflType<enum clang::Qualifiers::ObjCLifetime>(C);
    case reflenums::clang__Qualifiers::hasNonTrivialObjCLifetime:
      return toClientReflType<bool>(C);
    case reflenums::clang__Qualifiers::hasStrongOrWeakObjCLifetime:
      return toClientReflType<bool>(C);
    case reflenums::clang__Qualifiers::hasAddressSpace:
      return toClientReflType<bool>(C);
    case reflenums::clang__Qualifiers::getAddressSpace:
      return toClientReflType<enum clang::LangAS>(C);
    case reflenums::clang__Qualifiers::hasTargetSpecificAddressSpace:
      return toClientReflType<bool>(C);
    case reflenums::clang__Qualifiers::getAddressSpaceAttributePrintValue:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__Qualifiers::getAddressSpaceAttributePrintValue:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__Qualifiers::getAddressSpaceAttributePrintValue:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__Qualifiers::getAddressSpaceAttributePrintValue:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__Qualifiers::hasFastQualifiers:
      return toClientReflType<bool>(C);
    case reflenums::clang__Qualifiers::getFastQualifiers:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__Qualifiers::getFastQualifiers:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__Qualifiers::getFastQualifiers:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__Qualifiers::getFastQualifiers:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__Qualifiers::getFastQualifiers:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__Qualifiers::hasNonFastQualifiers:
      return toClientReflType<bool>(C);
    case reflenums::clang__Qualifiers::getNonFastQualifiers:
      return toClientReflType<class clang::Qualifiers>(C);
    case reflenums::clang__Qualifiers::hasQualifiers:
      return toClientReflType<bool>(C);
    case reflenums::clang__Qualifiers::empty:
      return toClientReflType<bool>(C);
    case reflenums::clang__Qualifiers::empty:
      return toClientReflType<bool>(C);
    case reflenums::clang__Qualifiers::empty:
      return toClientReflType<bool>(C);
    case reflenums::clang__Qualifiers::empty:
      return toClientReflType<bool>(C);
    case reflenums::clang__Qualifiers::isAddressSpaceSupersetOf:
      return toClientReflType<bool>(C);
    case reflenums::clang__Qualifiers::compatiblyIncludes:
      return toClientReflType<bool>(C);
    case reflenums::clang__Qualifiers::compatiblyIncludesObjCLifetime:
      return toClientReflType<bool>(C);
    case reflenums::clang__Qualifiers::isStrictSupersetOf:
      return toClientReflType<bool>(C);
    case reflenums::clang__Qualifiers::operator_eq_eq:
      return toClientReflType<bool>(C);
    case reflenums::clang__Qualifiers::operator_not_eq:
      return toClientReflType<bool>(C);
    case reflenums::clang__Qualifiers::operator_bool:
      return toClientReflType<bool>(C);
    case reflenums::clang__Qualifiers::operator_bool:
      return toClientReflType<bool>(C);
    case reflenums::clang__Qualifiers::operator_plus:
      return toClientReflType<class clang::Qualifiers>(C);
    case reflenums::clang__Qualifiers::operator_plus:
      return toClientReflType<class clang::Qualifiers>(C);
    case reflenums::clang__Qualifiers::operator_minus:
      return toClientReflType<class clang::Qualifiers>(C);
    case reflenums::clang__Qualifiers::getAsString:
      return toClientReflType<const char *>(C);
    case reflenums::clang__Qualifiers::getAsString1:
      return toClientReflType<const char *>(C);
    case reflenums::clang__Qualifiers::isEmptyWhenPrinted:
      return toClientReflType<bool>(C);
    case reflenums::clang__Qualifiers::print:
      return toClientReflType<void>(C);
    case reflenums::clang__Qualifiers::Profile:
      return toClientReflType<void>(C);
    case reflenums::clang__Qualifiers::Profile:
      return toClientReflType<void>(C);
    case reflenums::clang__Qualifiers::Profile:
      return toClientReflType<void>(C);
    case reflenums::clang__Qualifiers::Profile:
      return toClientReflType<void>(C);
    case reflenums::clang__Qualifiers::Profile:
      return toClientReflType<void>(C);
    case reflenums::clang__Qualifiers::Profile:
      return toClientReflType<void>(C);
    case reflenums::clang__Qualifiers::Profile:
      return toClientReflType<void>(C);
    case reflenums::clang__Qualifiers::Profile:
      return toClientReflType<void>(C);
    case reflenums::clang__Qualifiers::Profile:
      return toClientReflType<void>(C);
    case reflenums::clang__Qualifiers::Profile:
      return toClientReflType<void>(C);
    case reflenums::clang__Qualifiers::Profile:
      return toClientReflType<void>(C);
    case reflenums::clang__Qualifiers::Profile:
      return toClientReflType<void>(C);
    case reflenums::clang__Qualifiers::Profile:
      return toClientReflType<void>(C);
    case reflenums::clang__Qualifiers::Profile:
      return toClientReflType<void>(C);
    case reflenums::clang__Qualifiers::Profile:
      return toClientReflType<void>(C);
    case reflenums::clang__Qualifiers::Profile:
      return toClientReflType<void>(C);
    case reflenums::clang__Qualifiers::Profile:
      return toClientReflType<void>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__SplitQualType:
  switch (static_cast<reflenums::clang__SplitQualType::memnames>(MemNum)) {
    case reflenums::clang__SplitQualType:::
      return toClientReflType<>(C);
    case reflenums::clang__SplitQualType::Ty:
      return toClientReflType<const class clang::Type *>(C);
    case reflenums::clang__SplitQualType::Quals:
      return toClientReflType<class clang::Qualifiers>(C);
    case reflenums::clang__SplitQualType::Quals:
      return toClientReflType<class clang::Qualifiers>(C);
    case reflenums::clang__SplitQualType::Quals:
      return toClientReflType<class clang::Qualifiers>(C);
    case reflenums::clang__SplitQualType::getSingleStepDesugaredType:
      return toClientReflType<struct clang::SplitQualType>(C);
    case reflenums::clang__SplitQualType::getSingleStepDesugaredType:
      return toClientReflType<struct clang::SplitQualType>(C);
    case reflenums::clang__SplitQualType::operator_eq_eq:
      return toClientReflType<bool>(C);
    case reflenums::clang__SplitQualType::operator_not_eq:
      return toClientReflType<bool>(C);
    case reflenums::clang__SplitQualType::operator_not_eq:
      return toClientReflType<bool>(C);
    case reflenums::clang__SplitQualType::operator_not_eq:
      return toClientReflType<bool>(C);
    case reflenums::clang__SplitQualType::operator_not_eq:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__QualType:
  switch (static_cast<reflenums::clang__QualType::memnames>(MemNum)) {
    case reflenums::clang__QualType:::
      return toClientReflType<>(C);
    case reflenums::clang__QualType:::
      return toClientReflType<>(C);
    case reflenums::clang__QualType:::
      return toClientReflType<>(C);
    case reflenums::clang__QualType:::
      return toClientReflType<>(C);
    case reflenums::clang__QualType:::
      return toClientReflType<>(C);
    case reflenums::clang__QualType:::
      return toClientReflType<>(C);
    case reflenums::clang__QualType:::
      return toClientReflType<>(C);
    case reflenums::clang__QualType:::
      return toClientReflType<>(C);
    case reflenums::clang__QualType:::
      return toClientReflType<>(C);
    case reflenums::clang__QualType:::
      return toClientReflType<>(C);
    case reflenums::clang__QualType::getLocalFastQualifiers:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__QualType::getLocalFastQualifiers:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__QualType::getTypePtr:
      return toClientReflType<const class clang::Type *>(C);
    case reflenums::clang__QualType::getTypePtrOrNull:
      return toClientReflType<const class clang::Type *>(C);
    case reflenums::clang__QualType::getBaseTypeIdentifier:
      return toClientReflType<const class clang::IdentifierInfo *>(C);
    case reflenums::clang__QualType::split:
      return toClientReflType<struct clang::SplitQualType>(C);
    case reflenums::clang__QualType::getAsOpaquePtr:
      return toClientReflType<void *>(C);
    case reflenums::clang__QualType::getFromOpaquePtr:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__QualType::operator_star:
      return toClientReflType<const class clang::Type &>(C);
    case reflenums::clang__QualType::operator_arrow:
      return toClientReflType<const class clang::Type *>(C);
    case reflenums::clang__QualType::isCanonical:
      return toClientReflType<bool>(C);
    case reflenums::clang__QualType::isCanonicalAsParam:
      return toClientReflType<bool>(C);
    case reflenums::clang__QualType::isNull:
      return toClientReflType<bool>(C);
    case reflenums::clang__QualType::isLocalConstQualified:
      return toClientReflType<bool>(C);
    case reflenums::clang__QualType::isConstQualified:
      return toClientReflType<bool>(C);
    case reflenums::clang__QualType::isLocalRestrictQualified:
      return toClientReflType<bool>(C);
    case reflenums::clang__QualType::isRestrictQualified:
      return toClientReflType<bool>(C);
    case reflenums::clang__QualType::isLocalVolatileQualified:
      return toClientReflType<bool>(C);
    case reflenums::clang__QualType::isVolatileQualified:
      return toClientReflType<bool>(C);
    case reflenums::clang__QualType::hasLocalQualifiers:
      return toClientReflType<bool>(C);
    case reflenums::clang__QualType::hasQualifiers:
      return toClientReflType<bool>(C);
    case reflenums::clang__QualType::hasLocalNonFastQualifiers:
      return toClientReflType<bool>(C);
    case reflenums::clang__QualType::getLocalQualifiers:
      return toClientReflType<class clang::Qualifiers>(C);
    case reflenums::clang__QualType::getQualifiers:
      return toClientReflType<class clang::Qualifiers>(C);
    case reflenums::clang__QualType::getLocalCVRQualifiers:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__QualType::getCVRQualifiers:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__QualType::isConstant:
      return toClientReflType<bool>(C);
    case reflenums::clang__QualType::isPODType:
      return toClientReflType<bool>(C);
    case reflenums::clang__QualType::isCXX98PODType:
      return toClientReflType<bool>(C);
    case reflenums::clang__QualType::isCXX11PODType:
      return toClientReflType<bool>(C);
    case reflenums::clang__QualType::isTrivialType:
      return toClientReflType<bool>(C);
    case reflenums::clang__QualType::isTriviallyCopyableType:
      return toClientReflType<bool>(C);
    case reflenums::clang__QualType::mayBeDynamicClass:
      return toClientReflType<bool>(C);
    case reflenums::clang__QualType::mayBeNotDynamicClass:
      return toClientReflType<bool>(C);
    case reflenums::clang__QualType::mayBeNotDynamicClass:
      return toClientReflType<bool>(C);
    case reflenums::clang__QualType::withConst:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__QualType::withConst:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__QualType::withVolatile:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__QualType::withVolatile:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__QualType::withRestrict:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__QualType::withCVRQualifiers:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__QualType::withCVRQualifiers:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__QualType::withCVRQualifiers:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__QualType::withCVRQualifiers:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__QualType::withCVRQualifiers:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__QualType::withCVRQualifiers:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__QualType::withCVRQualifiers:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__QualType::withCVRQualifiers:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__QualType::withFastQualifiers:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__QualType::withExactLocalFastQualifiers:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__QualType::withoutLocalFastQualifiers:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__QualType::getCanonicalType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__QualType::getLocalUnqualifiedType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__QualType::getUnqualifiedType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__QualType::getSplitUnqualifiedType:
      return toClientReflType<struct clang::SplitQualType>(C);
    case reflenums::clang__QualType::isMoreQualifiedThan:
      return toClientReflType<bool>(C);
    case reflenums::clang__QualType::isAtLeastAsQualifiedAs:
      return toClientReflType<bool>(C);
    case reflenums::clang__QualType::getNonReferenceType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__QualType::getNonLValueExprType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__QualType::getDesugaredType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__QualType::getSplitDesugaredType:
      return toClientReflType<struct clang::SplitQualType>(C);
    case reflenums::clang__QualType::getSingleStepDesugaredType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__QualType::IgnoreParens:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__QualType::operator_eq_eq:
      return toClientReflType<bool>(C);
    case reflenums::clang__QualType::operator_not_eq:
      return toClientReflType<bool>(C);
    case reflenums::clang__QualType::getAsString:
      return toClientReflType<const char *>(C);
    case reflenums::clang__QualType::getAsString1:
      return toClientReflType<const char *>(C);
    case reflenums::clang__QualType::getAsString2:
      return toClientReflType<const char *>(C);
    case reflenums::clang__QualType::getAsString3:
      return toClientReflType<const char *>(C);
    case reflenums::clang__QualType::getAsString_NoPrependScope:
      return toClientReflType<const char *>(C);
    case reflenums::clang__QualType::print:
      return toClientReflType<void>(C);
    case reflenums::clang__QualType::print1:
      return toClientReflType<void>(C);
    case reflenums::clang__QualType::print2:
      return toClientReflType<void>(C);
    case reflenums::clang__QualType::print2:
      return toClientReflType<void>(C);
    case reflenums::clang__QualType::print2:
      return toClientReflType<void>(C);
    case reflenums::clang__QualType::print2:
      return toClientReflType<void>(C);
    case reflenums::clang__QualType::print2:
      return toClientReflType<void>(C);
    case reflenums::clang__QualType::print2:
      return toClientReflType<void>(C);
    case reflenums::clang__QualType::dump:
      return toClientReflType<void>(C);
    case reflenums::clang__QualType::dump1:
      return toClientReflType<void>(C);
    case reflenums::clang__QualType::dump2:
      return toClientReflType<void>(C);
    case reflenums::clang__QualType::Profile:
      return toClientReflType<void>(C);
    case reflenums::clang__QualType::getAddressSpace:
      return toClientReflType<enum clang::LangAS>(C);
    case reflenums::clang__QualType::getObjCGCAttr:
      return toClientReflType<enum clang::Qualifiers::GC>(C);
    case reflenums::clang__QualType::isObjCGCWeak:
      return toClientReflType<bool>(C);
    case reflenums::clang__QualType::isObjCGCStrong:
      return toClientReflType<bool>(C);
    case reflenums::clang__QualType::getObjCLifetime:
      return toClientReflType<enum clang::Qualifiers::ObjCLifetime>(C);
    case reflenums::clang__QualType::hasNonTrivialObjCLifetime:
      return toClientReflType<bool>(C);
    case reflenums::clang__QualType::hasStrongOrWeakObjCLifetime:
      return toClientReflType<bool>(C);
    case reflenums::clang__QualType::isNonWeakInMRRWithObjCWeak:
      return toClientReflType<bool>(C);
    case reflenums::clang__QualType::isNonWeakInMRRWithObjCWeak:
      return toClientReflType<bool>(C);
    case reflenums::clang__QualType::isNonTrivialToPrimitiveDefaultInitialize:
      return toClientReflType<enum clang::QualType::PrimitiveDefaultInitializeKind>(C);
    case reflenums::clang__QualType::isNonTrivialToPrimitiveDefaultInitialize:
      return toClientReflType<enum clang::QualType::PrimitiveDefaultInitializeKind>(C);
    case reflenums::clang__QualType::isNonTrivialToPrimitiveCopy:
      return toClientReflType<enum clang::QualType::PrimitiveCopyKind>(C);
    case reflenums::clang__QualType::isNonTrivialToPrimitiveDestructiveMove:
      return toClientReflType<enum clang::QualType::PrimitiveCopyKind>(C);
    case reflenums::clang__QualType::isNonTrivialToPrimitiveDestructiveMove:
      return toClientReflType<enum clang::QualType::PrimitiveCopyKind>(C);
    case reflenums::clang__QualType::isDestructedType:
      return toClientReflType<enum clang::QualType::DestructionKind>(C);
    case reflenums::clang__QualType::isCForbiddenLValueType:
      return toClientReflType<bool>(C);
    case reflenums::clang__QualType::isCForbiddenLValueType:
      return toClientReflType<bool>(C);
    case reflenums::clang__QualType::substObjCMemberType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__QualType::stripObjCKindOfType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__QualType::getAtomicUnqualifiedType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__QualType::getAtomicUnqualifiedType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__QualType::getAtomicUnqualifiedType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__QualType::getAtomicUnqualifiedType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__QualType::getAtomicUnqualifiedType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__QualType::getAtomicUnqualifiedType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__QualType::getAtomicUnqualifiedType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__QualType::getAtomicUnqualifiedType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__QualType::getAtomicUnqualifiedType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__QualType::getAtomicUnqualifiedType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__QualType::getAtomicUnqualifiedType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__QualType::getAtomicUnqualifiedType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__QualType::getAtomicUnqualifiedType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__QualType::getAtomicUnqualifiedType:
      return toClientReflType<class clang::QualType>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__ExtQualsTypeCommonBase:
  switch (static_cast<reflenums::clang__ExtQualsTypeCommonBase::memnames>(MemNum)) {
    case reflenums::clang__ExtQualsTypeCommonBase:::
      return toClientReflType<>(C);
    case reflenums::clang__ExtQualsTypeCommonBase:::
      return toClientReflType<>(C);
    case reflenums::clang__ExtQualsTypeCommonBase:::
      return toClientReflType<>(C);
    case reflenums::clang__ExtQualsTypeCommonBase:::
      return toClientReflType<>(C);
    case reflenums::clang__ExtQualsTypeCommonBase:::
      return toClientReflType<>(C);
    case reflenums::clang__ExtQualsTypeCommonBase:::
      return toClientReflType<>(C);
    case reflenums::clang__ExtQualsTypeCommonBase:::
      return toClientReflType<>(C);
    case reflenums::clang__ExtQualsTypeCommonBase:::
      return toClientReflType<>(C);
    case reflenums::clang__ExtQualsTypeCommonBase:::
      return toClientReflType<>(C);
    case reflenums::clang__ExtQualsTypeCommonBase:::
      return toClientReflType<>(C);
    case reflenums::clang__ExtQualsTypeCommonBase:::
      return toClientReflType<>(C);
    case reflenums::clang__ExtQualsTypeCommonBase:::
      return toClientReflType<>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__Type:
  switch (static_cast<reflenums::clang__Type::memnames>(MemNum)) {
    case reflenums::clang__Type:::
      return toClientReflType<>(C);
    case reflenums::clang__Type:::
      return toClientReflType<>(C);
    case reflenums::clang__Type:::
      return toClientReflType<>(C);
    case reflenums::clang__Type:::
      return toClientReflType<>(C);
    case reflenums::clang__Type:::
      return toClientReflType<>(C);
    case reflenums::clang__Type:::
      return toClientReflType<>(C);
    case reflenums::clang__Type:::
      return toClientReflType<>(C);
    case reflenums::clang__Type:::
      return toClientReflType<>(C);
    case reflenums::clang__Type:::
      return toClientReflType<>(C);
    case reflenums::clang__Type:::
      return toClientReflType<>(C);
    case reflenums::clang__Type:::
      return toClientReflType<>(C);
    case reflenums::clang__Type:::
      return toClientReflType<>(C);
    case reflenums::clang__Type:::
      return toClientReflType<>(C);
    case reflenums::clang__Type:::
      return toClientReflType<>(C);
    case reflenums::clang__Type:::
      return toClientReflType<>(C);
    case reflenums::clang__Type:::
      return toClientReflType<>(C);
    case reflenums::clang__Type:::
      return toClientReflType<>(C);
    case reflenums::clang__Type:::
      return toClientReflType<>(C);
    case reflenums::clang__Type:::
      return toClientReflType<>(C);
    case reflenums::clang__Type:::
      return toClientReflType<>(C);
    case reflenums::clang__Type:::
      return toClientReflType<>(C);
    case reflenums::clang__Type:::
      return toClientReflType<>(C);
    case reflenums::clang__Type:::
      return toClientReflType<>(C);
    case reflenums::clang__Type:::
      return toClientReflType<>(C);
    case reflenums::clang__Type:::
      return toClientReflType<>(C);
    case reflenums::clang__Type:::
      return toClientReflType<>(C);
    case reflenums::clang__Type:::
      return toClientReflType<>(C);
    case reflenums::clang__Type:::
      return toClientReflType<>(C);
    case reflenums::clang__Type:::
      return toClientReflType<>(C);
    case reflenums::clang__Type:::
      return toClientReflType<>(C);
    case reflenums::clang__Type:::
      return toClientReflType<>(C);
    case reflenums::clang__Type:::
      return toClientReflType<>(C);
    case reflenums::clang__Type:::
      return toClientReflType<>(C);
    case reflenums::clang__Type:::
      return toClientReflType<>(C);
    case reflenums::clang__Type:::
      return toClientReflType<>(C);
    case reflenums::clang__Type:::
      return toClientReflType<>(C);
    case reflenums::clang__Type:::
      return toClientReflType<>(C);
    case reflenums::clang__Type:::
      return toClientReflType<>(C);
    case reflenums::clang__Type:::
      return toClientReflType<>(C);
    case reflenums::clang__Type:::
      return toClientReflType<>(C);
    case reflenums::clang__Type:::
      return toClientReflType<>(C);
    case reflenums::clang__Type:::
      return toClientReflType<>(C);
    case reflenums::clang__Type:::
      return toClientReflType<>(C);
    case reflenums::clang__Type:::
      return toClientReflType<>(C);
    case reflenums::clang__Type:::
      return toClientReflType<>(C);
    case reflenums::clang__Type::getTypeClass:
      return toClientReflType<enum clang::Type::TypeClass>(C);
    case reflenums::clang__Type::isFromAST:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::containsUnexpandedParameterPack:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isCanonicalUnqualified:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::getLocallyUnqualifiedSingleStepDesugaredType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__Type::isIncompleteType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isIncompleteOrObjectType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isObjectType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isLiteralType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isStandardLayoutType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isBuiltinType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isSpecificBuiltinType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isPlaceholderType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::getAsPlaceholderType:
      return toClientReflType<const class clang::BuiltinType *>(C);
    case reflenums::clang__Type::isSpecificPlaceholderType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isNonOverloadPlaceholderType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isIntegerType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isEnumeralType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isScopedEnumeralType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isBooleanType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isCharType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isWideCharType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isChar8Type:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isChar16Type:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isChar32Type:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isAnyCharacterType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isIntegralType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isIntegralOrEnumerationType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isIntegralOrUnscopedEnumerationType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isRealFloatingType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isComplexType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isAnyComplexType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isFloatingType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isHalfType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isFloat16Type:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isFloat128Type:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isRealType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isArithmeticType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isVoidType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isScalarType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isAggregateType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isFundamentalType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isCompoundType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isFunctionType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isFunctionNoProtoType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isFunctionProtoType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isPointerType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isAnyPointerType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isBlockPointerType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isVoidPointerType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isReferenceType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isLValueReferenceType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isRValueReferenceType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isFunctionPointerType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isMemberPointerType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isMemberFunctionPointerType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isMemberDataPointerType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isArrayType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isConstantArrayType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isIncompleteArrayType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isVariableArrayType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isDependentSizedArrayType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isRecordType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isClassType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isStructureType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isObjCBoxableRecordType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isInterfaceType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isStructureOrClassType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isUnionType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isReflectedType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isComplexIntegerType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isVectorType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isExtVectorType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isDependentAddressSpaceType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isObjCObjectPointerType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isObjCRetainableType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isObjCLifetimeType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isObjCIndirectLifetimeType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isObjCNSObjectType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isObjCIndependentClassType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isObjCObjectType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isObjCQualifiedInterfaceType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isObjCQualifiedIdType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isObjCQualifiedClassType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isObjCObjectOrInterfaceType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isObjCIdType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isObjCInertUnsafeUnretainedType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isObjCIdOrObjectKindOfType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isObjCClassType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isObjCClassOrClassKindOfType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isBlockCompatibleObjCPointerType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isObjCSelType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isObjCBuiltinType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isObjCARCBridgableType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isCARCBridgableType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isTemplateTypeParmType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isNullPtrType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isAlignValT:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isStdByteType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isAtomicType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isOCLImage1dROType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isOCLImage1dArrayROType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isOCLImage1dBufferROType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isOCLImage2dROType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isOCLImage2dArrayROType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isOCLImage2dDepthROType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isOCLImage2dArrayDepthROType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isOCLImage2dMSAAROType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isOCLImage2dArrayMSAAROType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isOCLImage2dMSAADepthROType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isOCLImage2dArrayMSAADepthROType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isOCLImage3dROType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isOCLImage1dWOType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isOCLImage1dArrayWOType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isOCLImage1dBufferWOType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isOCLImage2dWOType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isOCLImage2dArrayWOType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isOCLImage2dDepthWOType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isOCLImage2dArrayDepthWOType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isOCLImage2dMSAAWOType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isOCLImage2dArrayMSAAWOType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isOCLImage2dMSAADepthWOType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isOCLImage2dArrayMSAADepthWOType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isOCLImage3dWOType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isOCLImage1dRWType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isOCLImage1dArrayRWType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isOCLImage1dBufferRWType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isOCLImage2dRWType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isOCLImage2dArrayRWType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isOCLImage2dDepthRWType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isOCLImage2dArrayDepthRWType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isOCLImage2dMSAARWType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isOCLImage2dArrayMSAARWType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isOCLImage2dMSAADepthRWType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isOCLImage2dArrayMSAADepthRWType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isOCLImage3dRWType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isImageType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isSamplerT:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isEventT:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isClkEventT:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isQueueT:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isReserveIDT:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isPipeType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isOpenCLSpecificType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isObjCARCImplicitlyUnretainedType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::getObjCARCImplicitLifetime:
      return toClientReflType<enum clang::Qualifiers::ObjCLifetime>(C);
    case reflenums::clang__Type::getObjCARCImplicitLifetime:
      return toClientReflType<enum clang::Qualifiers::ObjCLifetime>(C);
    case reflenums::clang__Type::getScalarTypeKind:
      return toClientReflType<enum clang::Type::ScalarTypeKind>(C);
    case reflenums::clang__Type::isDependentType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isInstantiationDependentType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isUndeducedType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isVariablyModifiedType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::hasSizedVLAType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::hasUnnamedOrLocalType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isOverloadableType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isElaboratedTypeSpecifier:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::canDecayToPointerType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::hasPointerRepresentation:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::hasObjCPointerRepresentation:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::hasIntegerRepresentation:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::hasSignedIntegerRepresentation:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::hasUnsignedIntegerRepresentation:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::hasFloatingRepresentation:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::getAsStructureType:
      return toClientReflType<const class clang::RecordType *>(C);
    case reflenums::clang__Type::getAsUnionType:
      return toClientReflType<const class clang::RecordType *>(C);
    case reflenums::clang__Type::getAsComplexIntegerType:
      return toClientReflType<const class clang::ComplexType *>(C);
    case reflenums::clang__Type::getAsObjCInterfaceType:
      return toClientReflType<const class clang::ObjCObjectType *>(C);
    case reflenums::clang__Type::getAsObjCInterfacePointerType:
      return toClientReflType<const class clang::ObjCObjectPointerType *>(C);
    case reflenums::clang__Type::getAsObjCQualifiedIdType:
      return toClientReflType<const class clang::ObjCObjectPointerType *>(C);
    case reflenums::clang__Type::getAsObjCQualifiedClassType:
      return toClientReflType<const class clang::ObjCObjectPointerType *>(C);
    case reflenums::clang__Type::getAsObjCQualifiedInterfaceType:
      return toClientReflType<const class clang::ObjCObjectType *>(C);
    case reflenums::clang__Type::getAsCXXRecordDecl:
      return toClientReflType<class clang::CXXRecordDecl *>(C);
    case reflenums::clang__Type::getAsRecordDecl:
      return toClientReflType<class clang::RecordDecl *>(C);
    case reflenums::clang__Type::getAsTagDecl:
      return toClientReflType<class clang::TagDecl *>(C);
    case reflenums::clang__Type::getPointeeCXXRecordDecl:
      return toClientReflType<const class clang::CXXRecordDecl *>(C);
    case reflenums::clang__Type::getContainedDeducedType:
      return toClientReflType<class clang::DeducedType *>(C);
    case reflenums::clang__Type::getContainedAutoType:
      return toClientReflType<class clang::AutoType *>(C);
    case reflenums::clang__Type::hasAutoForTrailingReturnType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::hasAutoForTrailingReturnType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::hasAutoForTrailingReturnType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::getAsArrayTypeUnsafe:
      return toClientReflType<const class clang::ArrayType *>(C);
    case reflenums::clang__Type::getAsArrayTypeUnsafe:
      return toClientReflType<const class clang::ArrayType *>(C);
    case reflenums::clang__Type::castAsArrayTypeUnsafe:
      return toClientReflType<const class clang::ArrayType *>(C);
    case reflenums::clang__Type::getBaseElementTypeUnsafe:
      return toClientReflType<const class clang::Type *>(C);
    case reflenums::clang__Type::getArrayElementTypeNoTypeQual:
      return toClientReflType<const class clang::Type *>(C);
    case reflenums::clang__Type::getPointeeOrArrayElementType:
      return toClientReflType<const class clang::Type *>(C);
    case reflenums::clang__Type::getPointeeType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__Type::getUnqualifiedDesugaredType:
      return toClientReflType<const class clang::Type *>(C);
    case reflenums::clang__Type::isPromotableIntegerType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isSignedIntegerType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isUnsignedIntegerType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isSignedIntegerOrEnumerationType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isUnsignedIntegerOrEnumerationType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isFixedPointType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isSaturatedFixedPointType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isUnsaturatedFixedPointType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isSignedFixedPointType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isUnsignedFixedPointType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isConstantSizeType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isSpecifierType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::getLinkage:
      return toClientReflType<enum clang::Linkage>(C);
    case reflenums::clang__Type::getVisibility:
      return toClientReflType<enum clang::Visibility>(C);
    case reflenums::clang__Type::isVisibilityExplicit:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::getLinkageAndVisibility:
      return toClientReflType<class clang::LinkageInfo>(C);
    case reflenums::clang__Type::isLinkageValid:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::isLinkageValid:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::canHaveNullability:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::canHaveNullability:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::acceptsObjCTypeParams:
      return toClientReflType<bool>(C);
    case reflenums::clang__Type::getTypeClassName:
      return toClientReflType<const char *>(C);
    case reflenums::clang__Type::getCanonicalTypeInternal:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__Type::getCanonicalTypeInternal:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__Type::dump:
      return toClientReflType<void>(C);
    case reflenums::clang__Type::dump1:
      return toClientReflType<void>(C);
    case reflenums::clang__Type::dump1:
      return toClientReflType<void>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__BuiltinType:
  switch (static_cast<reflenums::clang__BuiltinType::memnames>(MemNum)) {
    case reflenums::clang__BuiltinType:::
      return toClientReflType<>(C);
    case reflenums::clang__BuiltinType:::
      return toClientReflType<>(C);
    case reflenums::clang__BuiltinType:::
      return toClientReflType<>(C);
    case reflenums::clang__BuiltinType:::
      return toClientReflType<>(C);
    case reflenums::clang__BuiltinType:::
      return toClientReflType<>(C);
    case reflenums::clang__BuiltinType:::
      return toClientReflType<>(C);
    case reflenums::clang__BuiltinType:::
      return toClientReflType<>(C);
    case reflenums::clang__BuiltinType::getKind:
      return toClientReflType<enum clang::BuiltinType::Kind>(C);
    case reflenums::clang__BuiltinType::getName:
      return toClientReflType<const char *>(C);
    case reflenums::clang__BuiltinType::getNameAsCString:
      return toClientReflType<const char *>(C);
    case reflenums::clang__BuiltinType::isSugared:
      return toClientReflType<bool>(C);
    case reflenums::clang__BuiltinType::desugar:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__BuiltinType::isInteger:
      return toClientReflType<bool>(C);
    case reflenums::clang__BuiltinType::isSignedInteger:
      return toClientReflType<bool>(C);
    case reflenums::clang__BuiltinType::isUnsignedInteger:
      return toClientReflType<bool>(C);
    case reflenums::clang__BuiltinType::isFloatingPoint:
      return toClientReflType<bool>(C);
    case reflenums::clang__BuiltinType::isPlaceholderTypeKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__BuiltinType::isPlaceholderType:
      return toClientReflType<bool>(C);
    case reflenums::clang__BuiltinType::isNonOverloadPlaceholderType:
      return toClientReflType<bool>(C);
    case reflenums::clang__BuiltinType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__BuiltinType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__BuiltinType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__BuiltinType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__BuiltinType::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__ComplexType:
  switch (static_cast<reflenums::clang__ComplexType::memnames>(MemNum)) {
    case reflenums::clang__ComplexType:::
      return toClientReflType<>(C);
    case reflenums::clang__ComplexType:::
      return toClientReflType<>(C);
    case reflenums::clang__ComplexType:::
      return toClientReflType<>(C);
    case reflenums::clang__ComplexType:::
      return toClientReflType<>(C);
    case reflenums::clang__ComplexType:::
      return toClientReflType<>(C);
    case reflenums::clang__ComplexType::getElementType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ComplexType::isSugared:
      return toClientReflType<bool>(C);
    case reflenums::clang__ComplexType::desugar:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ComplexType::desugar:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ComplexType::Profile:
      return toClientReflType<void>(C);
    case reflenums::clang__ComplexType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ComplexType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ComplexType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ComplexType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ComplexType::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__ParenType:
  switch (static_cast<reflenums::clang__ParenType::memnames>(MemNum)) {
    case reflenums::clang__ParenType:::
      return toClientReflType<>(C);
    case reflenums::clang__ParenType:::
      return toClientReflType<>(C);
    case reflenums::clang__ParenType:::
      return toClientReflType<>(C);
    case reflenums::clang__ParenType:::
      return toClientReflType<>(C);
    case reflenums::clang__ParenType:::
      return toClientReflType<>(C);
    case reflenums::clang__ParenType::getInnerType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ParenType::isSugared:
      return toClientReflType<bool>(C);
    case reflenums::clang__ParenType::desugar:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ParenType::desugar:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ParenType::Profile:
      return toClientReflType<void>(C);
    case reflenums::clang__ParenType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ParenType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ParenType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ParenType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ParenType::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__PointerType:
  switch (static_cast<reflenums::clang__PointerType::memnames>(MemNum)) {
    case reflenums::clang__PointerType:::
      return toClientReflType<>(C);
    case reflenums::clang__PointerType:::
      return toClientReflType<>(C);
    case reflenums::clang__PointerType:::
      return toClientReflType<>(C);
    case reflenums::clang__PointerType:::
      return toClientReflType<>(C);
    case reflenums::clang__PointerType:::
      return toClientReflType<>(C);
    case reflenums::clang__PointerType::getPointeeType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__PointerType::isAddressSpaceOverlapping:
      return toClientReflType<bool>(C);
    case reflenums::clang__PointerType::isSugared:
      return toClientReflType<bool>(C);
    case reflenums::clang__PointerType::desugar:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__PointerType::desugar:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__PointerType::Profile:
      return toClientReflType<void>(C);
    case reflenums::clang__PointerType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__PointerType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__PointerType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__PointerType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__PointerType::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__AdjustedType:
  switch (static_cast<reflenums::clang__AdjustedType::memnames>(MemNum)) {
    case reflenums::clang__AdjustedType:::
      return toClientReflType<>(C);
    case reflenums::clang__AdjustedType:::
      return toClientReflType<>(C);
    case reflenums::clang__AdjustedType:::
      return toClientReflType<>(C);
    case reflenums::clang__AdjustedType:::
      return toClientReflType<>(C);
    case reflenums::clang__AdjustedType:::
      return toClientReflType<>(C);
    case reflenums::clang__AdjustedType:::
      return toClientReflType<>(C);
    case reflenums::clang__AdjustedType:::
      return toClientReflType<>(C);
    case reflenums::clang__AdjustedType::getOriginalType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__AdjustedType::getAdjustedType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__AdjustedType::isSugared:
      return toClientReflType<bool>(C);
    case reflenums::clang__AdjustedType::desugar:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__AdjustedType::desugar:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__AdjustedType::Profile:
      return toClientReflType<void>(C);
    case reflenums::clang__AdjustedType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__AdjustedType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__AdjustedType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__AdjustedType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__AdjustedType::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__DecayedType:
  switch (static_cast<reflenums::clang__DecayedType::memnames>(MemNum)) {
    case reflenums::clang__DecayedType:::
      return toClientReflType<>(C);
    case reflenums::clang__DecayedType:::
      return toClientReflType<>(C);
    case reflenums::clang__DecayedType:::
      return toClientReflType<>(C);
    case reflenums::clang__DecayedType:::
      return toClientReflType<>(C);
    case reflenums::clang__DecayedType::getDecayedType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__DecayedType::getPointeeType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__DecayedType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__DecayedType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__DecayedType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__DecayedType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__DecayedType::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__BlockPointerType:
  switch (static_cast<reflenums::clang__BlockPointerType::memnames>(MemNum)) {
    case reflenums::clang__BlockPointerType:::
      return toClientReflType<>(C);
    case reflenums::clang__BlockPointerType:::
      return toClientReflType<>(C);
    case reflenums::clang__BlockPointerType:::
      return toClientReflType<>(C);
    case reflenums::clang__BlockPointerType:::
      return toClientReflType<>(C);
    case reflenums::clang__BlockPointerType:::
      return toClientReflType<>(C);
    case reflenums::clang__BlockPointerType::getPointeeType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__BlockPointerType::isSugared:
      return toClientReflType<bool>(C);
    case reflenums::clang__BlockPointerType::desugar:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__BlockPointerType::desugar:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__BlockPointerType::Profile:
      return toClientReflType<void>(C);
    case reflenums::clang__BlockPointerType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__BlockPointerType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__BlockPointerType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__BlockPointerType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__BlockPointerType::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__ReferenceType:
  switch (static_cast<reflenums::clang__ReferenceType::memnames>(MemNum)) {
    case reflenums::clang__ReferenceType:::
      return toClientReflType<>(C);
    case reflenums::clang__ReferenceType:::
      return toClientReflType<>(C);
    case reflenums::clang__ReferenceType:::
      return toClientReflType<>(C);
    case reflenums::clang__ReferenceType:::
      return toClientReflType<>(C);
    case reflenums::clang__ReferenceType:::
      return toClientReflType<>(C);
    case reflenums::clang__ReferenceType::isSpelledAsLValue:
      return toClientReflType<bool>(C);
    case reflenums::clang__ReferenceType::isInnerRef:
      return toClientReflType<bool>(C);
    case reflenums::clang__ReferenceType::getPointeeTypeAsWritten:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ReferenceType::getPointeeType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ReferenceType::getPointeeType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ReferenceType::Profile:
      return toClientReflType<void>(C);
    case reflenums::clang__ReferenceType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ReferenceType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ReferenceType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ReferenceType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ReferenceType::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__LValueReferenceType:
  switch (static_cast<reflenums::clang__LValueReferenceType::memnames>(MemNum)) {
    case reflenums::clang__LValueReferenceType:::
      return toClientReflType<>(C);
    case reflenums::clang__LValueReferenceType:::
      return toClientReflType<>(C);
    case reflenums::clang__LValueReferenceType:::
      return toClientReflType<>(C);
    case reflenums::clang__LValueReferenceType:::
      return toClientReflType<>(C);
    case reflenums::clang__LValueReferenceType::isSugared:
      return toClientReflType<bool>(C);
    case reflenums::clang__LValueReferenceType::desugar:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__LValueReferenceType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__LValueReferenceType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__LValueReferenceType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__LValueReferenceType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__LValueReferenceType::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__RValueReferenceType:
  switch (static_cast<reflenums::clang__RValueReferenceType::memnames>(MemNum)) {
    case reflenums::clang__RValueReferenceType:::
      return toClientReflType<>(C);
    case reflenums::clang__RValueReferenceType:::
      return toClientReflType<>(C);
    case reflenums::clang__RValueReferenceType:::
      return toClientReflType<>(C);
    case reflenums::clang__RValueReferenceType:::
      return toClientReflType<>(C);
    case reflenums::clang__RValueReferenceType::isSugared:
      return toClientReflType<bool>(C);
    case reflenums::clang__RValueReferenceType::desugar:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__RValueReferenceType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__RValueReferenceType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__RValueReferenceType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__RValueReferenceType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__RValueReferenceType::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__MemberPointerType:
  switch (static_cast<reflenums::clang__MemberPointerType::memnames>(MemNum)) {
    case reflenums::clang__MemberPointerType:::
      return toClientReflType<>(C);
    case reflenums::clang__MemberPointerType:::
      return toClientReflType<>(C);
    case reflenums::clang__MemberPointerType:::
      return toClientReflType<>(C);
    case reflenums::clang__MemberPointerType:::
      return toClientReflType<>(C);
    case reflenums::clang__MemberPointerType:::
      return toClientReflType<>(C);
    case reflenums::clang__MemberPointerType:::
      return toClientReflType<>(C);
    case reflenums::clang__MemberPointerType::getPointeeType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__MemberPointerType::isMemberFunctionPointer:
      return toClientReflType<bool>(C);
    case reflenums::clang__MemberPointerType::isMemberDataPointer:
      return toClientReflType<bool>(C);
    case reflenums::clang__MemberPointerType::getClass:
      return toClientReflType<const class clang::Type *>(C);
    case reflenums::clang__MemberPointerType::getMostRecentCXXRecordDecl:
      return toClientReflType<class clang::CXXRecordDecl *>(C);
    case reflenums::clang__MemberPointerType::isSugared:
      return toClientReflType<bool>(C);
    case reflenums::clang__MemberPointerType::desugar:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__MemberPointerType::desugar:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__MemberPointerType::Profile:
      return toClientReflType<void>(C);
    case reflenums::clang__MemberPointerType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__MemberPointerType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__MemberPointerType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__MemberPointerType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__MemberPointerType::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__ArrayType:
  switch (static_cast<reflenums::clang__ArrayType::memnames>(MemNum)) {
    case reflenums::clang__ArrayType:::
      return toClientReflType<>(C);
    case reflenums::clang__ArrayType:::
      return toClientReflType<>(C);
    case reflenums::clang__ArrayType:::
      return toClientReflType<>(C);
    case reflenums::clang__ArrayType:::
      return toClientReflType<>(C);
    case reflenums::clang__ArrayType:::
      return toClientReflType<>(C);
    case reflenums::clang__ArrayType:::
      return toClientReflType<>(C);
    case reflenums::clang__ArrayType:::
      return toClientReflType<>(C);
    case reflenums::clang__ArrayType:::
      return toClientReflType<>(C);
    case reflenums::clang__ArrayType:::
      return toClientReflType<>(C);
    case reflenums::clang__ArrayType::getElementType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ArrayType::getSizeModifier:
      return toClientReflType<enum clang::ArrayType::ArraySizeModifier>(C);
    case reflenums::clang__ArrayType::getIndexTypeQualifiers:
      return toClientReflType<class clang::Qualifiers>(C);
    case reflenums::clang__ArrayType::getIndexTypeCVRQualifiers:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ArrayType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ArrayType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ArrayType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ArrayType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ArrayType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ArrayType::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__ConstantArrayType:
  switch (static_cast<reflenums::clang__ConstantArrayType::memnames>(MemNum)) {
    case reflenums::clang__ConstantArrayType:::
      return toClientReflType<>(C);
    case reflenums::clang__ConstantArrayType:::
      return toClientReflType<>(C);
    case reflenums::clang__ConstantArrayType:::
      return toClientReflType<>(C);
    case reflenums::clang__ConstantArrayType:::
      return toClientReflType<>(C);
    case reflenums::clang__ConstantArrayType:::
      return toClientReflType<>(C);
    case reflenums::clang__ConstantArrayType:::
      return toClientReflType<>(C);
    case reflenums::clang__ConstantArrayType:::
      return toClientReflType<>(C);
    case reflenums::clang__ConstantArrayType::getSize:
      return toClientReflType<const class llvm::APInt &>(C);
    case reflenums::clang__ConstantArrayType::isSugared:
      return toClientReflType<bool>(C);
    case reflenums::clang__ConstantArrayType::desugar:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ConstantArrayType::getNumAddressingBits:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ConstantArrayType::getMaxSizeBits:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ConstantArrayType::getMaxSizeBits:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ConstantArrayType::Profile:
      return toClientReflType<void>(C);
    case reflenums::clang__ConstantArrayType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ConstantArrayType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ConstantArrayType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ConstantArrayType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ConstantArrayType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ConstantArrayType::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__IncompleteArrayType:
  switch (static_cast<reflenums::clang__IncompleteArrayType::memnames>(MemNum)) {
    case reflenums::clang__IncompleteArrayType:::
      return toClientReflType<>(C);
    case reflenums::clang__IncompleteArrayType:::
      return toClientReflType<>(C);
    case reflenums::clang__IncompleteArrayType:::
      return toClientReflType<>(C);
    case reflenums::clang__IncompleteArrayType:::
      return toClientReflType<>(C);
    case reflenums::clang__IncompleteArrayType:::
      return toClientReflType<>(C);
    case reflenums::clang__IncompleteArrayType::isSugared:
      return toClientReflType<bool>(C);
    case reflenums::clang__IncompleteArrayType::desugar:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__IncompleteArrayType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__IncompleteArrayType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__IncompleteArrayType::Profile:
      return toClientReflType<void>(C);
    case reflenums::clang__IncompleteArrayType::Profile:
      return toClientReflType<void>(C);
    case reflenums::clang__IncompleteArrayType::Profile:
      return toClientReflType<void>(C);
    case reflenums::clang__IncompleteArrayType::Profile:
      return toClientReflType<void>(C);
    case reflenums::clang__IncompleteArrayType::Profile:
      return toClientReflType<void>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__VariableArrayType:
  switch (static_cast<reflenums::clang__VariableArrayType::memnames>(MemNum)) {
    case reflenums::clang__VariableArrayType:::
      return toClientReflType<>(C);
    case reflenums::clang__VariableArrayType:::
      return toClientReflType<>(C);
    case reflenums::clang__VariableArrayType:::
      return toClientReflType<>(C);
    case reflenums::clang__VariableArrayType:::
      return toClientReflType<>(C);
    case reflenums::clang__VariableArrayType:::
      return toClientReflType<>(C);
    case reflenums::clang__VariableArrayType:::
      return toClientReflType<>(C);
    case reflenums::clang__VariableArrayType:::
      return toClientReflType<>(C);
    case reflenums::clang__VariableArrayType::getSizeExpr:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__VariableArrayType::getBracketsRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__VariableArrayType::getLBracketLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__VariableArrayType::getRBracketLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__VariableArrayType::isSugared:
      return toClientReflType<bool>(C);
    case reflenums::clang__VariableArrayType::desugar:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__VariableArrayType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__VariableArrayType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__VariableArrayType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__VariableArrayType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__VariableArrayType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__VariableArrayType::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__DependentSizedArrayType:
  switch (static_cast<reflenums::clang__DependentSizedArrayType::memnames>(MemNum)) {
    case reflenums::clang__DependentSizedArrayType:::
      return toClientReflType<>(C);
    case reflenums::clang__DependentSizedArrayType:::
      return toClientReflType<>(C);
    case reflenums::clang__DependentSizedArrayType:::
      return toClientReflType<>(C);
    case reflenums::clang__DependentSizedArrayType:::
      return toClientReflType<>(C);
    case reflenums::clang__DependentSizedArrayType:::
      return toClientReflType<>(C);
    case reflenums::clang__DependentSizedArrayType:::
      return toClientReflType<>(C);
    case reflenums::clang__DependentSizedArrayType:::
      return toClientReflType<>(C);
    case reflenums::clang__DependentSizedArrayType:::
      return toClientReflType<>(C);
    case reflenums::clang__DependentSizedArrayType::getSizeExpr:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__DependentSizedArrayType::getBracketsRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__DependentSizedArrayType::getLBracketLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__DependentSizedArrayType::getRBracketLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__DependentSizedArrayType::isSugared:
      return toClientReflType<bool>(C);
    case reflenums::clang__DependentSizedArrayType::desugar:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__DependentSizedArrayType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__DependentSizedArrayType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__DependentSizedArrayType::Profile:
      return toClientReflType<void>(C);
    case reflenums::clang__DependentSizedArrayType::Profile:
      return toClientReflType<void>(C);
    case reflenums::clang__DependentSizedArrayType::Profile:
      return toClientReflType<void>(C);
    case reflenums::clang__DependentSizedArrayType::Profile:
      return toClientReflType<void>(C);
    case reflenums::clang__DependentSizedArrayType::Profile:
      return toClientReflType<void>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__DependentAddressSpaceType:
  switch (static_cast<reflenums::clang__DependentAddressSpaceType::memnames>(MemNum)) {
    case reflenums::clang__DependentAddressSpaceType:::
      return toClientReflType<>(C);
    case reflenums::clang__DependentAddressSpaceType:::
      return toClientReflType<>(C);
    case reflenums::clang__DependentAddressSpaceType:::
      return toClientReflType<>(C);
    case reflenums::clang__DependentAddressSpaceType:::
      return toClientReflType<>(C);
    case reflenums::clang__DependentAddressSpaceType:::
      return toClientReflType<>(C);
    case reflenums::clang__DependentAddressSpaceType:::
      return toClientReflType<>(C);
    case reflenums::clang__DependentAddressSpaceType:::
      return toClientReflType<>(C);
    case reflenums::clang__DependentAddressSpaceType:::
      return toClientReflType<>(C);
    case reflenums::clang__DependentAddressSpaceType::getAddrSpaceExpr:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__DependentAddressSpaceType::getPointeeType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__DependentAddressSpaceType::getAttributeLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__DependentAddressSpaceType::isSugared:
      return toClientReflType<bool>(C);
    case reflenums::clang__DependentAddressSpaceType::desugar:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__DependentAddressSpaceType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__DependentAddressSpaceType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__DependentAddressSpaceType::Profile:
      return toClientReflType<void>(C);
    case reflenums::clang__DependentAddressSpaceType::Profile:
      return toClientReflType<void>(C);
    case reflenums::clang__DependentAddressSpaceType::Profile:
      return toClientReflType<void>(C);
    case reflenums::clang__DependentAddressSpaceType::Profile:
      return toClientReflType<void>(C);
    case reflenums::clang__DependentAddressSpaceType::Profile:
      return toClientReflType<void>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__DependentSizedExtVectorType:
  switch (static_cast<reflenums::clang__DependentSizedExtVectorType::memnames>(MemNum)) {
    case reflenums::clang__DependentSizedExtVectorType:::
      return toClientReflType<>(C);
    case reflenums::clang__DependentSizedExtVectorType:::
      return toClientReflType<>(C);
    case reflenums::clang__DependentSizedExtVectorType:::
      return toClientReflType<>(C);
    case reflenums::clang__DependentSizedExtVectorType:::
      return toClientReflType<>(C);
    case reflenums::clang__DependentSizedExtVectorType:::
      return toClientReflType<>(C);
    case reflenums::clang__DependentSizedExtVectorType:::
      return toClientReflType<>(C);
    case reflenums::clang__DependentSizedExtVectorType:::
      return toClientReflType<>(C);
    case reflenums::clang__DependentSizedExtVectorType:::
      return toClientReflType<>(C);
    case reflenums::clang__DependentSizedExtVectorType::getSizeExpr:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__DependentSizedExtVectorType::getElementType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__DependentSizedExtVectorType::getAttributeLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__DependentSizedExtVectorType::isSugared:
      return toClientReflType<bool>(C);
    case reflenums::clang__DependentSizedExtVectorType::desugar:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__DependentSizedExtVectorType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__DependentSizedExtVectorType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__DependentSizedExtVectorType::Profile:
      return toClientReflType<void>(C);
    case reflenums::clang__DependentSizedExtVectorType::Profile:
      return toClientReflType<void>(C);
    case reflenums::clang__DependentSizedExtVectorType::Profile:
      return toClientReflType<void>(C);
    case reflenums::clang__DependentSizedExtVectorType::Profile:
      return toClientReflType<void>(C);
    case reflenums::clang__DependentSizedExtVectorType::Profile:
      return toClientReflType<void>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__VectorType:
  switch (static_cast<reflenums::clang__VectorType::memnames>(MemNum)) {
    case reflenums::clang__VectorType:::
      return toClientReflType<>(C);
    case reflenums::clang__VectorType:::
      return toClientReflType<>(C);
    case reflenums::clang__VectorType:::
      return toClientReflType<>(C);
    case reflenums::clang__VectorType:::
      return toClientReflType<>(C);
    case reflenums::clang__VectorType:::
      return toClientReflType<>(C);
    case reflenums::clang__VectorType:::
      return toClientReflType<>(C);
    case reflenums::clang__VectorType:::
      return toClientReflType<>(C);
    case reflenums::clang__VectorType:::
      return toClientReflType<>(C);
    case reflenums::clang__VectorType:::
      return toClientReflType<>(C);
    case reflenums::clang__VectorType::getElementType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__VectorType::getNumElements:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__VectorType::isVectorSizeTooLarge:
      return toClientReflType<bool>(C);
    case reflenums::clang__VectorType::isSugared:
      return toClientReflType<bool>(C);
    case reflenums::clang__VectorType::desugar:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__VectorType::getVectorKind:
      return toClientReflType<enum clang::VectorType::VectorKind>(C);
    case reflenums::clang__VectorType::getVectorKind:
      return toClientReflType<enum clang::VectorType::VectorKind>(C);
    case reflenums::clang__VectorType::Profile:
      return toClientReflType<void>(C);
    case reflenums::clang__VectorType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__VectorType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__VectorType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__VectorType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__VectorType::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__DependentVectorType:
  switch (static_cast<reflenums::clang__DependentVectorType::memnames>(MemNum)) {
    case reflenums::clang__DependentVectorType:::
      return toClientReflType<>(C);
    case reflenums::clang__DependentVectorType:::
      return toClientReflType<>(C);
    case reflenums::clang__DependentVectorType:::
      return toClientReflType<>(C);
    case reflenums::clang__DependentVectorType:::
      return toClientReflType<>(C);
    case reflenums::clang__DependentVectorType:::
      return toClientReflType<>(C);
    case reflenums::clang__DependentVectorType:::
      return toClientReflType<>(C);
    case reflenums::clang__DependentVectorType:::
      return toClientReflType<>(C);
    case reflenums::clang__DependentVectorType:::
      return toClientReflType<>(C);
    case reflenums::clang__DependentVectorType::getSizeExpr:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__DependentVectorType::getElementType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__DependentVectorType::getAttributeLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__DependentVectorType::getVectorKind:
      return toClientReflType<enum clang::VectorType::VectorKind>(C);
    case reflenums::clang__DependentVectorType::isSugared:
      return toClientReflType<bool>(C);
    case reflenums::clang__DependentVectorType::desugar:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__DependentVectorType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__DependentVectorType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__DependentVectorType::Profile:
      return toClientReflType<void>(C);
    case reflenums::clang__DependentVectorType::Profile:
      return toClientReflType<void>(C);
    case reflenums::clang__DependentVectorType::Profile:
      return toClientReflType<void>(C);
    case reflenums::clang__DependentVectorType::Profile:
      return toClientReflType<void>(C);
    case reflenums::clang__DependentVectorType::Profile:
      return toClientReflType<void>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__ExtVectorType:
  switch (static_cast<reflenums::clang__ExtVectorType::memnames>(MemNum)) {
    case reflenums::clang__ExtVectorType:::
      return toClientReflType<>(C);
    case reflenums::clang__ExtVectorType:::
      return toClientReflType<>(C);
    case reflenums::clang__ExtVectorType:::
      return toClientReflType<>(C);
    case reflenums::clang__ExtVectorType:::
      return toClientReflType<>(C);
    case reflenums::clang__ExtVectorType::getPointAccessorIdx:
      return toClientReflType<int>(C);
    case reflenums::clang__ExtVectorType::getNumericAccessorIdx:
      return toClientReflType<int>(C);
    case reflenums::clang__ExtVectorType::getAccessorIdx:
      return toClientReflType<int>(C);
    case reflenums::clang__ExtVectorType::isAccessorWithinNumElements:
      return toClientReflType<bool>(C);
    case reflenums::clang__ExtVectorType::isSugared:
      return toClientReflType<bool>(C);
    case reflenums::clang__ExtVectorType::desugar:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ExtVectorType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ExtVectorType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ExtVectorType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ExtVectorType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ExtVectorType::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__FunctionType:
  switch (static_cast<reflenums::clang__FunctionType::memnames>(MemNum)) {
    case reflenums::clang__FunctionType:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionType:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionType:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionType:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionType:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionType:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionType:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionType:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionType::getReturnType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__FunctionType::getHasRegParm:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionType::getRegParmType:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__FunctionType::getNoReturnAttr:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionType::getCallConv:
      return toClientReflType<enum clang::CallingConv>(C);
    case reflenums::clang__FunctionType::getExtInfo:
      return toClientReflType<class clang::FunctionType::ExtInfo>(C);
    case reflenums::clang__FunctionType::isConst:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionType::isVolatile:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionType::isRestrict:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionType::getCallResultType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__FunctionType::getNameForCallConv:
      return toClientReflType<const char *>(C);
    case reflenums::clang__FunctionType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionType::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__FunctionType__ExtInfo:
  switch (static_cast<reflenums::clang__FunctionType__ExtInfo::memnames>(MemNum)) {
    case reflenums::clang__FunctionType__ExtInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionType__ExtInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionType__ExtInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionType__ExtInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionType__ExtInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionType__ExtInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionType__ExtInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionType__ExtInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionType__ExtInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionType__ExtInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionType__ExtInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionType__ExtInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionType__ExtInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionType__ExtInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionType__ExtInfo::getNoReturn:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionType__ExtInfo::getProducesResult:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionType__ExtInfo::getNoCallerSavedRegs:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionType__ExtInfo::getNoCfCheck:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionType__ExtInfo::getHasRegParm:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionType__ExtInfo::getRegParm:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__FunctionType__ExtInfo::getCC:
      return toClientReflType<enum clang::CallingConv>(C);
    case reflenums::clang__FunctionType__ExtInfo::operator_eq_eq:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionType__ExtInfo::operator_not_eq:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionType__ExtInfo::withNoReturn:
      return toClientReflType<class clang::FunctionType::ExtInfo>(C);
    case reflenums::clang__FunctionType__ExtInfo::withProducesResult:
      return toClientReflType<class clang::FunctionType::ExtInfo>(C);
    case reflenums::clang__FunctionType__ExtInfo::withNoCallerSavedRegs:
      return toClientReflType<class clang::FunctionType::ExtInfo>(C);
    case reflenums::clang__FunctionType__ExtInfo::withNoCfCheck:
      return toClientReflType<class clang::FunctionType::ExtInfo>(C);
    case reflenums::clang__FunctionType__ExtInfo::withRegParm:
      return toClientReflType<class clang::FunctionType::ExtInfo>(C);
    case reflenums::clang__FunctionType__ExtInfo::withCallingConv:
      return toClientReflType<class clang::FunctionType::ExtInfo>(C);
    case reflenums::clang__FunctionType__ExtInfo::Profile:
      return toClientReflType<void>(C);
    case reflenums::clang__FunctionType__ExtInfo::Profile:
      return toClientReflType<void>(C);
    case reflenums::clang__FunctionType__ExtInfo::Profile:
      return toClientReflType<void>(C);
    case reflenums::clang__FunctionType__ExtInfo::Profile:
      return toClientReflType<void>(C);
    case reflenums::clang__FunctionType__ExtInfo::Profile:
      return toClientReflType<void>(C);
    case reflenums::clang__FunctionType__ExtInfo::Profile:
      return toClientReflType<void>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__FunctionNoProtoType:
  switch (static_cast<reflenums::clang__FunctionNoProtoType::memnames>(MemNum)) {
    case reflenums::clang__FunctionNoProtoType:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionNoProtoType:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionNoProtoType:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionNoProtoType:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionNoProtoType::isSugared:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionNoProtoType::desugar:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__FunctionNoProtoType::desugar:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__FunctionNoProtoType::Profile:
      return toClientReflType<void>(C);
    case reflenums::clang__FunctionNoProtoType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionNoProtoType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionNoProtoType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionNoProtoType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionNoProtoType::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__FunctionProtoType:
  switch (static_cast<reflenums::clang__FunctionProtoType::memnames>(MemNum)) {
    case reflenums::clang__FunctionProtoType:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionProtoType:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionProtoType:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionProtoType:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionProtoType:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionProtoType:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionProtoType:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionProtoType:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionProtoType:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionProtoType:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionProtoType:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionProtoType:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionProtoType:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionProtoType:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionProtoType:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionProtoType:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionProtoType:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionProtoType:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionProtoType:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionProtoType::getNumParams:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__FunctionProtoType::getParamType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__FunctionProtoType::getParamTypes:
      return toClientReflType<class llvm::ArrayRef<class clang::QualType>>(C);
    case reflenums::clang__FunctionProtoType::getExtProtoInfo:
      return toClientReflType<struct clang::FunctionProtoType::ExtProtoInfo>(C);
    case reflenums::clang__FunctionProtoType::getExceptionSpecType:
      return toClientReflType<enum clang::ExceptionSpecificationType>(C);
    case reflenums::clang__FunctionProtoType::hasExceptionSpec:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionProtoType::hasDynamicExceptionSpec:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionProtoType::hasNoexceptExceptionSpec:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionProtoType::hasDependentExceptionSpec:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionProtoType::hasInstantiationDependentExceptionSpec:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionProtoType::getNumExceptions:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__FunctionProtoType::getExceptionType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__FunctionProtoType::getNoexceptExpr:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__FunctionProtoType::getExceptionSpecDecl:
      return toClientReflType<class clang::FunctionDecl *>(C);
    case reflenums::clang__FunctionProtoType::getExceptionSpecTemplate:
      return toClientReflType<class clang::FunctionDecl *>(C);
    case reflenums::clang__FunctionProtoType::canThrow:
      return toClientReflType<enum clang::CanThrowResult>(C);
    case reflenums::clang__FunctionProtoType::isNothrow:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionProtoType::isVariadic:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionProtoType::isTemplateVariadic:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionProtoType::hasTrailingReturn:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionProtoType::getTypeQuals:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__FunctionProtoType::getRefQualifier:
      return toClientReflType<enum clang::RefQualifierKind>(C);
    case reflenums::clang__FunctionProtoType::getRefQualifier:
      return toClientReflType<enum clang::RefQualifierKind>(C);
    case reflenums::clang__FunctionProtoType::getRefQualifier:
      return toClientReflType<enum clang::RefQualifierKind>(C);
    case reflenums::clang__FunctionProtoType::param_types:
      return toClientReflType<class llvm::iterator_range<const class clang::QualType *>>(C);
    case reflenums::clang__FunctionProtoType::param_types:
      return toClientReflType<class llvm::iterator_range<const class clang::QualType *>>(C);
    case reflenums::clang__FunctionProtoType::param_types:
      return toClientReflType<class llvm::iterator_range<const class clang::QualType *>>(C);
    case reflenums::clang__FunctionProtoType::param_types:
      return toClientReflType<class llvm::iterator_range<const class clang::QualType *>>(C);
    case reflenums::clang__FunctionProtoType::exceptions:
      return toClientReflType<class llvm::ArrayRef<class clang::QualType>>(C);
    case reflenums::clang__FunctionProtoType::exceptions:
      return toClientReflType<class llvm::ArrayRef<class clang::QualType>>(C);
    case reflenums::clang__FunctionProtoType::exceptions:
      return toClientReflType<class llvm::ArrayRef<class clang::QualType>>(C);
    case reflenums::clang__FunctionProtoType::hasExtParameterInfos:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionProtoType::getExtParameterInfos:
      return toClientReflType<class llvm::ArrayRef<class clang::FunctionProtoType::ExtParameterInfo>>(C);
    case reflenums::clang__FunctionProtoType::getExtParameterInfosOrNull:
      return toClientReflType<const class clang::FunctionProtoType::ExtParameterInfo *>(C);
    case reflenums::clang__FunctionProtoType::getExtParameterInfo:
      return toClientReflType<class clang::FunctionProtoType::ExtParameterInfo>(C);
    case reflenums::clang__FunctionProtoType::getParameterABI:
      return toClientReflType<enum clang::ParameterABI>(C);
    case reflenums::clang__FunctionProtoType::isParamConsumed:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionProtoType::isSugared:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionProtoType::desugar:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__FunctionProtoType::printExceptionSpecification:
      return toClientReflType<void>(C);
    case reflenums::clang__FunctionProtoType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionProtoType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionProtoType::Profile:
      return toClientReflType<void>(C);
    case reflenums::clang__FunctionProtoType::Profile:
      return toClientReflType<void>(C);
    case reflenums::clang__FunctionProtoType::Profile:
      return toClientReflType<void>(C);
    case reflenums::clang__FunctionProtoType::Profile:
      return toClientReflType<void>(C);
    case reflenums::clang__FunctionProtoType::Profile:
      return toClientReflType<void>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__FunctionProtoType__ExtParameterInfo:
  switch (static_cast<reflenums::clang__FunctionProtoType__ExtParameterInfo::memnames>(MemNum)) {
    case reflenums::clang__FunctionProtoType__ExtParameterInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionProtoType__ExtParameterInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionProtoType__ExtParameterInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionProtoType__ExtParameterInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionProtoType__ExtParameterInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionProtoType__ExtParameterInfo::getABI:
      return toClientReflType<enum clang::ParameterABI>(C);
    case reflenums::clang__FunctionProtoType__ExtParameterInfo::withABI:
      return toClientReflType<class clang::FunctionProtoType::ExtParameterInfo>(C);
    case reflenums::clang__FunctionProtoType__ExtParameterInfo::isConsumed:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionProtoType__ExtParameterInfo::withIsConsumed:
      return toClientReflType<class clang::FunctionProtoType::ExtParameterInfo>(C);
    case reflenums::clang__FunctionProtoType__ExtParameterInfo::hasPassObjectSize:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionProtoType__ExtParameterInfo::withHasPassObjectSize:
      return toClientReflType<class clang::FunctionProtoType::ExtParameterInfo>(C);
    case reflenums::clang__FunctionProtoType__ExtParameterInfo::isNoEscape:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionProtoType__ExtParameterInfo::withIsNoEscape:
      return toClientReflType<class clang::FunctionProtoType::ExtParameterInfo>(C);
    case reflenums::clang__FunctionProtoType__ExtParameterInfo::getOpaqueValue:
      return toClientReflType<unsigned char>(C);
    case reflenums::clang__FunctionProtoType__ExtParameterInfo::getFromOpaqueValue:
      return toClientReflType<class clang::FunctionProtoType::ExtParameterInfo>(C);
    case reflenums::clang__FunctionProtoType__ExtParameterInfo::operator_eq_eq:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionProtoType__ExtParameterInfo::operator_not_eq:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionProtoType__ExtParameterInfo::operator_not_eq:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionProtoType__ExtParameterInfo::operator_not_eq:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionProtoType__ExtParameterInfo::operator_not_eq:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__FunctionProtoType__ExceptionSpecInfo:
  switch (static_cast<reflenums::clang__FunctionProtoType__ExceptionSpecInfo::memnames>(MemNum)) {
    case reflenums::clang__FunctionProtoType__ExceptionSpecInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionProtoType__ExceptionSpecInfo::Type:
      return toClientReflType<enum clang::ExceptionSpecificationType>(C);
    case reflenums::clang__FunctionProtoType__ExceptionSpecInfo::Type:
      return toClientReflType<enum clang::ExceptionSpecificationType>(C);
    case reflenums::clang__FunctionProtoType__ExceptionSpecInfo::NoexceptExpr:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__FunctionProtoType__ExceptionSpecInfo::SourceDecl:
      return toClientReflType<class clang::FunctionDecl *>(C);
    case reflenums::clang__FunctionProtoType__ExceptionSpecInfo::SourceTemplate:
      return toClientReflType<class clang::FunctionDecl *>(C);
    case reflenums::clang__FunctionProtoType__ExceptionSpecInfo::SourceTemplate:
      return toClientReflType<class clang::FunctionDecl *>(C);
    case reflenums::clang__FunctionProtoType__ExceptionSpecInfo::SourceTemplate:
      return toClientReflType<class clang::FunctionDecl *>(C);
    case reflenums::clang__FunctionProtoType__ExceptionSpecInfo::SourceTemplate:
      return toClientReflType<class clang::FunctionDecl *>(C);
    case reflenums::clang__FunctionProtoType__ExceptionSpecInfo::SourceTemplate:
      return toClientReflType<class clang::FunctionDecl *>(C);
    case reflenums::clang__FunctionProtoType__ExceptionSpecInfo::SourceTemplate:
      return toClientReflType<class clang::FunctionDecl *>(C);
    case reflenums::clang__FunctionProtoType__ExceptionSpecInfo::SourceTemplate:
      return toClientReflType<class clang::FunctionDecl *>(C);
    case reflenums::clang__FunctionProtoType__ExceptionSpecInfo::SourceTemplate:
      return toClientReflType<class clang::FunctionDecl *>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__FunctionProtoType__ExtProtoInfo:
  switch (static_cast<reflenums::clang__FunctionProtoType__ExtProtoInfo::memnames>(MemNum)) {
    case reflenums::clang__FunctionProtoType__ExtProtoInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionProtoType__ExtProtoInfo::ExtInfo:
      return toClientReflType<class clang::FunctionType::ExtInfo>(C);
    case reflenums::clang__FunctionProtoType__ExtProtoInfo::Variadic:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionProtoType__ExtProtoInfo::HasTrailingReturn:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionProtoType__ExtProtoInfo::TypeQuals:
      return toClientReflType<unsigned char>(C);
    case reflenums::clang__FunctionProtoType__ExtProtoInfo::RefQualifier:
      return toClientReflType<enum clang::RefQualifierKind>(C);
    case reflenums::clang__FunctionProtoType__ExtProtoInfo::ExceptionSpec:
      return toClientReflType<struct clang::FunctionProtoType::ExceptionSpecInfo>(C);
    case reflenums::clang__FunctionProtoType__ExtProtoInfo::ExtParameterInfos:
      return toClientReflType<const class clang::FunctionProtoType::ExtParameterInfo *>(C);
    case reflenums::clang__FunctionProtoType__ExtProtoInfo::ExtParameterInfos:
      return toClientReflType<const class clang::FunctionProtoType::ExtParameterInfo *>(C);
    case reflenums::clang__FunctionProtoType__ExtProtoInfo::ExtParameterInfos:
      return toClientReflType<const class clang::FunctionProtoType::ExtParameterInfo *>(C);
    case reflenums::clang__FunctionProtoType__ExtProtoInfo::ExtParameterInfos:
      return toClientReflType<const class clang::FunctionProtoType::ExtParameterInfo *>(C);
    case reflenums::clang__FunctionProtoType__ExtProtoInfo::ExtParameterInfos:
      return toClientReflType<const class clang::FunctionProtoType::ExtParameterInfo *>(C);
    case reflenums::clang__FunctionProtoType__ExtProtoInfo::ExtParameterInfos:
      return toClientReflType<const class clang::FunctionProtoType::ExtParameterInfo *>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__UnresolvedUsingType:
  switch (static_cast<reflenums::clang__UnresolvedUsingType::memnames>(MemNum)) {
    case reflenums::clang__UnresolvedUsingType:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedUsingType:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedUsingType:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedUsingType:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedUsingType:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedUsingType::getDecl:
      return toClientReflType<class clang::UnresolvedUsingTypenameDecl *>(C);
    case reflenums::clang__UnresolvedUsingType::isSugared:
      return toClientReflType<bool>(C);
    case reflenums::clang__UnresolvedUsingType::desugar:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__UnresolvedUsingType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__UnresolvedUsingType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__UnresolvedUsingType::Profile:
      return toClientReflType<void>(C);
    case reflenums::clang__UnresolvedUsingType::Profile:
      return toClientReflType<void>(C);
    case reflenums::clang__UnresolvedUsingType::Profile:
      return toClientReflType<void>(C);
    case reflenums::clang__UnresolvedUsingType::Profile:
      return toClientReflType<void>(C);
    case reflenums::clang__UnresolvedUsingType::Profile:
      return toClientReflType<void>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__TypedefType:
  switch (static_cast<reflenums::clang__TypedefType::memnames>(MemNum)) {
    case reflenums::clang__TypedefType:::
      return toClientReflType<>(C);
    case reflenums::clang__TypedefType:::
      return toClientReflType<>(C);
    case reflenums::clang__TypedefType:::
      return toClientReflType<>(C);
    case reflenums::clang__TypedefType:::
      return toClientReflType<>(C);
    case reflenums::clang__TypedefType:::
      return toClientReflType<>(C);
    case reflenums::clang__TypedefType:::
      return toClientReflType<>(C);
    case reflenums::clang__TypedefType::getDecl:
      return toClientReflType<class clang::TypedefNameDecl *>(C);
    case reflenums::clang__TypedefType::isSugared:
      return toClientReflType<bool>(C);
    case reflenums::clang__TypedefType::desugar:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__TypedefType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__TypedefType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__TypedefType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__TypedefType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__TypedefType::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__TypeOfExprType:
  switch (static_cast<reflenums::clang__TypeOfExprType::memnames>(MemNum)) {
    case reflenums::clang__TypeOfExprType:::
      return toClientReflType<>(C);
    case reflenums::clang__TypeOfExprType:::
      return toClientReflType<>(C);
    case reflenums::clang__TypeOfExprType:::
      return toClientReflType<>(C);
    case reflenums::clang__TypeOfExprType:::
      return toClientReflType<>(C);
    case reflenums::clang__TypeOfExprType:::
      return toClientReflType<>(C);
    case reflenums::clang__TypeOfExprType:::
      return toClientReflType<>(C);
    case reflenums::clang__TypeOfExprType::getUnderlyingExpr:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__TypeOfExprType::desugar:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__TypeOfExprType::isSugared:
      return toClientReflType<bool>(C);
    case reflenums::clang__TypeOfExprType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__TypeOfExprType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__TypeOfExprType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__TypeOfExprType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__TypeOfExprType::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__TypeOfType:
  switch (static_cast<reflenums::clang__TypeOfType::memnames>(MemNum)) {
    case reflenums::clang__TypeOfType:::
      return toClientReflType<>(C);
    case reflenums::clang__TypeOfType:::
      return toClientReflType<>(C);
    case reflenums::clang__TypeOfType:::
      return toClientReflType<>(C);
    case reflenums::clang__TypeOfType:::
      return toClientReflType<>(C);
    case reflenums::clang__TypeOfType:::
      return toClientReflType<>(C);
    case reflenums::clang__TypeOfType::getUnderlyingType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__TypeOfType::desugar:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__TypeOfType::isSugared:
      return toClientReflType<bool>(C);
    case reflenums::clang__TypeOfType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__TypeOfType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__TypeOfType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__TypeOfType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__TypeOfType::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__DecltypeType:
  switch (static_cast<reflenums::clang__DecltypeType::memnames>(MemNum)) {
    case reflenums::clang__DecltypeType:::
      return toClientReflType<>(C);
    case reflenums::clang__DecltypeType:::
      return toClientReflType<>(C);
    case reflenums::clang__DecltypeType:::
      return toClientReflType<>(C);
    case reflenums::clang__DecltypeType:::
      return toClientReflType<>(C);
    case reflenums::clang__DecltypeType:::
      return toClientReflType<>(C);
    case reflenums::clang__DecltypeType:::
      return toClientReflType<>(C);
    case reflenums::clang__DecltypeType:::
      return toClientReflType<>(C);
    case reflenums::clang__DecltypeType::getUnderlyingExpr:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__DecltypeType::getUnderlyingType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__DecltypeType::desugar:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__DecltypeType::isSugared:
      return toClientReflType<bool>(C);
    case reflenums::clang__DecltypeType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__DecltypeType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__DecltypeType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__DecltypeType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__DecltypeType::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__ReflectedType:
  switch (static_cast<reflenums::clang__ReflectedType::memnames>(MemNum)) {
    case reflenums::clang__ReflectedType:::
      return toClientReflType<>(C);
    case reflenums::clang__ReflectedType:::
      return toClientReflType<>(C);
    case reflenums::clang__ReflectedType:::
      return toClientReflType<>(C);
    case reflenums::clang__ReflectedType:::
      return toClientReflType<>(C);
    case reflenums::clang__ReflectedType:::
      return toClientReflType<>(C);
    case reflenums::clang__ReflectedType:::
      return toClientReflType<>(C);
    case reflenums::clang__ReflectedType:::
      return toClientReflType<>(C);
    case reflenums::clang__ReflectedType::getTypeReflection:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__ReflectedType::getUnderlyingType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ReflectedType::isSugared:
      return toClientReflType<bool>(C);
    case reflenums::clang__ReflectedType::desugar:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ReflectedType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ReflectedType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ReflectedType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ReflectedType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ReflectedType::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__UnaryTransformType:
  switch (static_cast<reflenums::clang__UnaryTransformType::memnames>(MemNum)) {
    case reflenums::clang__UnaryTransformType:::
      return toClientReflType<>(C);
    case reflenums::clang__UnaryTransformType:::
      return toClientReflType<>(C);
    case reflenums::clang__UnaryTransformType:::
      return toClientReflType<>(C);
    case reflenums::clang__UnaryTransformType:::
      return toClientReflType<>(C);
    case reflenums::clang__UnaryTransformType:::
      return toClientReflType<>(C);
    case reflenums::clang__UnaryTransformType:::
      return toClientReflType<>(C);
    case reflenums::clang__UnaryTransformType:::
      return toClientReflType<>(C);
    case reflenums::clang__UnaryTransformType:::
      return toClientReflType<>(C);
    case reflenums::clang__UnaryTransformType:::
      return toClientReflType<>(C);
    case reflenums::clang__UnaryTransformType:::
      return toClientReflType<>(C);
    case reflenums::clang__UnaryTransformType:::
      return toClientReflType<>(C);
    case reflenums::clang__UnaryTransformType::isSugared:
      return toClientReflType<bool>(C);
    case reflenums::clang__UnaryTransformType::desugar:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__UnaryTransformType::getUnderlyingType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__UnaryTransformType::getBaseType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__UnaryTransformType::getUTTKind:
      return toClientReflType<enum clang::UnaryTransformType::UTTKind>(C);
    case reflenums::clang__UnaryTransformType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__UnaryTransformType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__UnaryTransformType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__UnaryTransformType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__UnaryTransformType::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__TagType:
  switch (static_cast<reflenums::clang__TagType::memnames>(MemNum)) {
    case reflenums::clang__TagType:::
      return toClientReflType<>(C);
    case reflenums::clang__TagType:::
      return toClientReflType<>(C);
    case reflenums::clang__TagType:::
      return toClientReflType<>(C);
    case reflenums::clang__TagType:::
      return toClientReflType<>(C);
    case reflenums::clang__TagType:::
      return toClientReflType<>(C);
    case reflenums::clang__TagType:::
      return toClientReflType<>(C);
    case reflenums::clang__TagType::getDecl:
      return toClientReflType<class clang::TagDecl *>(C);
    case reflenums::clang__TagType::isBeingDefined:
      return toClientReflType<bool>(C);
    case reflenums::clang__TagType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__TagType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__TagType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__TagType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__TagType::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__RecordType:
  switch (static_cast<reflenums::clang__RecordType::memnames>(MemNum)) {
    case reflenums::clang__RecordType:::
      return toClientReflType<>(C);
    case reflenums::clang__RecordType:::
      return toClientReflType<>(C);
    case reflenums::clang__RecordType:::
      return toClientReflType<>(C);
    case reflenums::clang__RecordType:::
      return toClientReflType<>(C);
    case reflenums::clang__RecordType:::
      return toClientReflType<>(C);
    case reflenums::clang__RecordType:::
      return toClientReflType<>(C);
    case reflenums::clang__RecordType::getDecl:
      return toClientReflType<class clang::RecordDecl *>(C);
    case reflenums::clang__RecordType::hasConstFields:
      return toClientReflType<bool>(C);
    case reflenums::clang__RecordType::isSugared:
      return toClientReflType<bool>(C);
    case reflenums::clang__RecordType::desugar:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__RecordType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__RecordType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__RecordType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__RecordType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__RecordType::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__EnumType:
  switch (static_cast<reflenums::clang__EnumType::memnames>(MemNum)) {
    case reflenums::clang__EnumType:::
      return toClientReflType<>(C);
    case reflenums::clang__EnumType:::
      return toClientReflType<>(C);
    case reflenums::clang__EnumType:::
      return toClientReflType<>(C);
    case reflenums::clang__EnumType:::
      return toClientReflType<>(C);
    case reflenums::clang__EnumType::getDecl:
      return toClientReflType<class clang::EnumDecl *>(C);
    case reflenums::clang__EnumType::isSugared:
      return toClientReflType<bool>(C);
    case reflenums::clang__EnumType::desugar:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__EnumType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__EnumType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__EnumType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__EnumType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__EnumType::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__AttributedType:
  switch (static_cast<reflenums::clang__AttributedType::memnames>(MemNum)) {
    case reflenums::clang__AttributedType:::
      return toClientReflType<>(C);
    case reflenums::clang__AttributedType:::
      return toClientReflType<>(C);
    case reflenums::clang__AttributedType:::
      return toClientReflType<>(C);
    case reflenums::clang__AttributedType:::
      return toClientReflType<>(C);
    case reflenums::clang__AttributedType:::
      return toClientReflType<>(C);
    case reflenums::clang__AttributedType:::
      return toClientReflType<>(C);
    case reflenums::clang__AttributedType:::
      return toClientReflType<>(C);
    case reflenums::clang__AttributedType:::
      return toClientReflType<>(C);
    case reflenums::clang__AttributedType:::
      return toClientReflType<>(C);
    case reflenums::clang__AttributedType::getAttrKind:
      return toClientReflType<enum clang::AttributedType::Kind>(C);
    case reflenums::clang__AttributedType::getModifiedType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__AttributedType::getEquivalentType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__AttributedType::isSugared:
      return toClientReflType<bool>(C);
    case reflenums::clang__AttributedType::desugar:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__AttributedType::isQualifier:
      return toClientReflType<bool>(C);
    case reflenums::clang__AttributedType::isMSTypeSpec:
      return toClientReflType<bool>(C);
    case reflenums::clang__AttributedType::isCallingConv:
      return toClientReflType<bool>(C);
    case reflenums::clang__AttributedType::isCallingConv:
      return toClientReflType<bool>(C);
    case reflenums::clang__AttributedType::getNullabilityAttrKind:
      return toClientReflType<enum clang::AttributedType::Kind>(C);
    case reflenums::clang__AttributedType::getNullabilityAttrKind:
      return toClientReflType<enum clang::AttributedType::Kind>(C);
    case reflenums::clang__AttributedType::getNullabilityAttrKind:
      return toClientReflType<enum clang::AttributedType::Kind>(C);
    case reflenums::clang__AttributedType::Profile:
      return toClientReflType<void>(C);
    case reflenums::clang__AttributedType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__AttributedType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__AttributedType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__AttributedType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__AttributedType::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__TemplateTypeParmType:
  switch (static_cast<reflenums::clang__TemplateTypeParmType::memnames>(MemNum)) {
    case reflenums::clang__TemplateTypeParmType:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateTypeParmType:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateTypeParmType:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateTypeParmType:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateTypeParmType:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateTypeParmType:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateTypeParmType:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateTypeParmType:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateTypeParmType:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateTypeParmType:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateTypeParmType:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateTypeParmType::getDepth:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__TemplateTypeParmType::getIndex:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__TemplateTypeParmType::isParameterPack:
      return toClientReflType<bool>(C);
    case reflenums::clang__TemplateTypeParmType::getDecl:
      return toClientReflType<class clang::TemplateTypeParmDecl *>(C);
    case reflenums::clang__TemplateTypeParmType::getIdentifier:
      return toClientReflType<class clang::IdentifierInfo *>(C);
    case reflenums::clang__TemplateTypeParmType::isSugared:
      return toClientReflType<bool>(C);
    case reflenums::clang__TemplateTypeParmType::desugar:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__TemplateTypeParmType::desugar:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__TemplateTypeParmType::Profile:
      return toClientReflType<void>(C);
    case reflenums::clang__TemplateTypeParmType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__TemplateTypeParmType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__TemplateTypeParmType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__TemplateTypeParmType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__TemplateTypeParmType::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__SubstTemplateTypeParmType:
  switch (static_cast<reflenums::clang__SubstTemplateTypeParmType::memnames>(MemNum)) {
    case reflenums::clang__SubstTemplateTypeParmType:::
      return toClientReflType<>(C);
    case reflenums::clang__SubstTemplateTypeParmType:::
      return toClientReflType<>(C);
    case reflenums::clang__SubstTemplateTypeParmType:::
      return toClientReflType<>(C);
    case reflenums::clang__SubstTemplateTypeParmType:::
      return toClientReflType<>(C);
    case reflenums::clang__SubstTemplateTypeParmType:::
      return toClientReflType<>(C);
    case reflenums::clang__SubstTemplateTypeParmType::getReplacedParameter:
      return toClientReflType<const class clang::TemplateTypeParmType *>(C);
    case reflenums::clang__SubstTemplateTypeParmType::getReplacementType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__SubstTemplateTypeParmType::isSugared:
      return toClientReflType<bool>(C);
    case reflenums::clang__SubstTemplateTypeParmType::desugar:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__SubstTemplateTypeParmType::desugar:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__SubstTemplateTypeParmType::Profile:
      return toClientReflType<void>(C);
    case reflenums::clang__SubstTemplateTypeParmType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__SubstTemplateTypeParmType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__SubstTemplateTypeParmType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__SubstTemplateTypeParmType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__SubstTemplateTypeParmType::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__SubstTemplateTypeParmPackType:
  switch (static_cast<reflenums::clang__SubstTemplateTypeParmPackType::memnames>(MemNum)) {
    case reflenums::clang__SubstTemplateTypeParmPackType:::
      return toClientReflType<>(C);
    case reflenums::clang__SubstTemplateTypeParmPackType:::
      return toClientReflType<>(C);
    case reflenums::clang__SubstTemplateTypeParmPackType:::
      return toClientReflType<>(C);
    case reflenums::clang__SubstTemplateTypeParmPackType:::
      return toClientReflType<>(C);
    case reflenums::clang__SubstTemplateTypeParmPackType:::
      return toClientReflType<>(C);
    case reflenums::clang__SubstTemplateTypeParmPackType:::
      return toClientReflType<>(C);
    case reflenums::clang__SubstTemplateTypeParmPackType:::
      return toClientReflType<>(C);
    case reflenums::clang__SubstTemplateTypeParmPackType::getIdentifier:
      return toClientReflType<class clang::IdentifierInfo *>(C);
    case reflenums::clang__SubstTemplateTypeParmPackType::getReplacedParameter:
      return toClientReflType<const class clang::TemplateTypeParmType *>(C);
    case reflenums::clang__SubstTemplateTypeParmPackType::isSugared:
      return toClientReflType<bool>(C);
    case reflenums::clang__SubstTemplateTypeParmPackType::desugar:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__SubstTemplateTypeParmPackType::getArgumentPack:
      return toClientReflType<class clang::TemplateArgument>(C);
    case reflenums::clang__SubstTemplateTypeParmPackType::getArgumentPack:
      return toClientReflType<class clang::TemplateArgument>(C);
    case reflenums::clang__SubstTemplateTypeParmPackType::Profile:
      return toClientReflType<void>(C);
    case reflenums::clang__SubstTemplateTypeParmPackType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__SubstTemplateTypeParmPackType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__SubstTemplateTypeParmPackType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__SubstTemplateTypeParmPackType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__SubstTemplateTypeParmPackType::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__DeducedType:
  switch (static_cast<reflenums::clang__DeducedType::memnames>(MemNum)) {
    case reflenums::clang__DeducedType:::
      return toClientReflType<>(C);
    case reflenums::clang__DeducedType:::
      return toClientReflType<>(C);
    case reflenums::clang__DeducedType:::
      return toClientReflType<>(C);
    case reflenums::clang__DeducedType:::
      return toClientReflType<>(C);
    case reflenums::clang__DeducedType::isSugared:
      return toClientReflType<bool>(C);
    case reflenums::clang__DeducedType::desugar:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__DeducedType::getDeducedType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__DeducedType::isDeduced:
      return toClientReflType<bool>(C);
    case reflenums::clang__DeducedType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__DeducedType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__DeducedType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__DeducedType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__DeducedType::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__AutoType:
  switch (static_cast<reflenums::clang__AutoType::memnames>(MemNum)) {
    case reflenums::clang__AutoType:::
      return toClientReflType<>(C);
    case reflenums::clang__AutoType:::
      return toClientReflType<>(C);
    case reflenums::clang__AutoType:::
      return toClientReflType<>(C);
    case reflenums::clang__AutoType:::
      return toClientReflType<>(C);
    case reflenums::clang__AutoType::isDecltypeAuto:
      return toClientReflType<bool>(C);
    case reflenums::clang__AutoType::getKeyword:
      return toClientReflType<enum clang::AutoTypeKeyword>(C);
    case reflenums::clang__AutoType::getKeyword:
      return toClientReflType<enum clang::AutoTypeKeyword>(C);
    case reflenums::clang__AutoType::Profile:
      return toClientReflType<void>(C);
    case reflenums::clang__AutoType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__AutoType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__AutoType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__AutoType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__AutoType::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__DeducedTemplateSpecializationType:
  switch (static_cast<reflenums::clang__DeducedTemplateSpecializationType::memnames>(MemNum)) {
    case reflenums::clang__DeducedTemplateSpecializationType:::
      return toClientReflType<>(C);
    case reflenums::clang__DeducedTemplateSpecializationType:::
      return toClientReflType<>(C);
    case reflenums::clang__DeducedTemplateSpecializationType:::
      return toClientReflType<>(C);
    case reflenums::clang__DeducedTemplateSpecializationType:::
      return toClientReflType<>(C);
    case reflenums::clang__DeducedTemplateSpecializationType:::
      return toClientReflType<>(C);
    case reflenums::clang__DeducedTemplateSpecializationType::getTemplateName:
      return toClientReflType<class clang::TemplateName>(C);
    case reflenums::clang__DeducedTemplateSpecializationType::getTemplateName:
      return toClientReflType<class clang::TemplateName>(C);
    case reflenums::clang__DeducedTemplateSpecializationType::Profile:
      return toClientReflType<void>(C);
    case reflenums::clang__DeducedTemplateSpecializationType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__DeducedTemplateSpecializationType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__DeducedTemplateSpecializationType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__DeducedTemplateSpecializationType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__DeducedTemplateSpecializationType::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__TemplateSpecializationType:
  switch (static_cast<reflenums::clang__TemplateSpecializationType::memnames>(MemNum)) {
    case reflenums::clang__TemplateSpecializationType::_this_:
      if (IsPtr)
        return toClientReflType<clang::TemplateSpecializationType *>(C);
      return toClientReflType<clang::TemplateSpecializationType>(C);
    case reflenums::clang__TemplateSpecializationType:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateSpecializationType:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateSpecializationType:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateSpecializationType:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateSpecializationType:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateSpecializationType:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateSpecializationType:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateSpecializationType:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateSpecializationType:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateSpecializationType::isCurrentInstantiation:
      return toClientReflType<bool>(C);
    case reflenums::clang__TemplateSpecializationType::isTypeAlias:
      return toClientReflType<bool>(C);
    case reflenums::clang__TemplateSpecializationType::getAliasedType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__TemplateSpecializationType::getAliasedType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__TemplateSpecializationType::getAliasedType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__TemplateSpecializationType::getAliasedType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__TemplateSpecializationType::getTemplateName:
      return toClientReflType<class clang::TemplateName>(C);
    case reflenums::clang__TemplateSpecializationType::getArgs:
      return toClientReflType<const class clang::TemplateArgument *>(C);
    case reflenums::clang__TemplateSpecializationType::getNumArgs:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__TemplateSpecializationType::getArg:
      return toClientReflType<const class clang::TemplateArgument &>(C);
    case reflenums::clang__TemplateSpecializationType::template_arguments:
      return toClientReflType<class llvm::ArrayRef<class clang::TemplateArgument>>(C);
    case reflenums::clang__TemplateSpecializationType::isSugared:
      return toClientReflType<bool>(C);
    case reflenums::clang__TemplateSpecializationType::desugar:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__TemplateSpecializationType::desugar:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__TemplateSpecializationType::desugar:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__TemplateSpecializationType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__TemplateSpecializationType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__TemplateSpecializationType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__TemplateSpecializationType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__TemplateSpecializationType::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__InjectedClassNameType:
  switch (static_cast<reflenums::clang__InjectedClassNameType::memnames>(MemNum)) {
    case reflenums::clang__InjectedClassNameType:::
      return toClientReflType<>(C);
    case reflenums::clang__InjectedClassNameType:::
      return toClientReflType<>(C);
    case reflenums::clang__InjectedClassNameType:::
      return toClientReflType<>(C);
    case reflenums::clang__InjectedClassNameType:::
      return toClientReflType<>(C);
    case reflenums::clang__InjectedClassNameType:::
      return toClientReflType<>(C);
    case reflenums::clang__InjectedClassNameType:::
      return toClientReflType<>(C);
    case reflenums::clang__InjectedClassNameType:::
      return toClientReflType<>(C);
    case reflenums::clang__InjectedClassNameType:::
      return toClientReflType<>(C);
    case reflenums::clang__InjectedClassNameType::getInjectedSpecializationType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__InjectedClassNameType::getInjectedTST:
      return toClientReflType<const class clang::TemplateSpecializationType *>(C);
    case reflenums::clang__InjectedClassNameType::getTemplateName:
      return toClientReflType<class clang::TemplateName>(C);
    case reflenums::clang__InjectedClassNameType::getDecl:
      return toClientReflType<class clang::CXXRecordDecl *>(C);
    case reflenums::clang__InjectedClassNameType::isSugared:
      return toClientReflType<bool>(C);
    case reflenums::clang__InjectedClassNameType::desugar:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__InjectedClassNameType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__InjectedClassNameType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__InjectedClassNameType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__InjectedClassNameType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__InjectedClassNameType::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__TypeWithKeyword:
  switch (static_cast<reflenums::clang__TypeWithKeyword::memnames>(MemNum)) {
    case reflenums::clang__TypeWithKeyword:::
      return toClientReflType<>(C);
    case reflenums::clang__TypeWithKeyword:::
      return toClientReflType<>(C);
    case reflenums::clang__TypeWithKeyword:::
      return toClientReflType<>(C);
    case reflenums::clang__TypeWithKeyword:::
      return toClientReflType<>(C);
    case reflenums::clang__TypeWithKeyword::getKeyword:
      return toClientReflType<enum clang::ElaboratedTypeKeyword>(C);
    case reflenums::clang__TypeWithKeyword::getKeywordForTypeSpec:
      return toClientReflType<enum clang::ElaboratedTypeKeyword>(C);
    case reflenums::clang__TypeWithKeyword::getTagTypeKindForTypeSpec:
      return toClientReflType<enum clang::TagTypeKind>(C);
    case reflenums::clang__TypeWithKeyword::getKeywordForTagTypeKind:
      return toClientReflType<enum clang::ElaboratedTypeKeyword>(C);
    case reflenums::clang__TypeWithKeyword::getTagTypeKindForKeyword:
      return toClientReflType<enum clang::TagTypeKind>(C);
    case reflenums::clang__TypeWithKeyword::KeywordIsTagTypeKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__TypeWithKeyword::getKeywordName:
      return toClientReflType<const char *>(C);
    case reflenums::clang__TypeWithKeyword::getTagTypeKindName:
      return toClientReflType<const char *>(C);
    case reflenums::clang__TypeWithKeyword::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__TypeWithKeyword::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__TypeWithKeyword::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__TypeWithKeyword::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__TypeWithKeyword::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__ElaboratedType:
  switch (static_cast<reflenums::clang__ElaboratedType::memnames>(MemNum)) {
    case reflenums::clang__ElaboratedType:::
      return toClientReflType<>(C);
    case reflenums::clang__ElaboratedType:::
      return toClientReflType<>(C);
    case reflenums::clang__ElaboratedType:::
      return toClientReflType<>(C);
    case reflenums::clang__ElaboratedType:::
      return toClientReflType<>(C);
    case reflenums::clang__ElaboratedType:::
      return toClientReflType<>(C);
    case reflenums::clang__ElaboratedType:::
      return toClientReflType<>(C);
    case reflenums::clang__ElaboratedType:::
      return toClientReflType<>(C);
    case reflenums::clang__ElaboratedType:::
      return toClientReflType<>(C);
    case reflenums::clang__ElaboratedType::getQualifier:
      return toClientReflType<class clang::NestedNameSpecifier *>(C);
    case reflenums::clang__ElaboratedType::getNamedType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ElaboratedType::desugar:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ElaboratedType::isSugared:
      return toClientReflType<bool>(C);
    case reflenums::clang__ElaboratedType::getOwnedTagDecl:
      return toClientReflType<class clang::TagDecl *>(C);
    case reflenums::clang__ElaboratedType::getOwnedTagDecl:
      return toClientReflType<class clang::TagDecl *>(C);
    case reflenums::clang__ElaboratedType::Profile:
      return toClientReflType<void>(C);
    case reflenums::clang__ElaboratedType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ElaboratedType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ElaboratedType::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__DependentNameType:
  switch (static_cast<reflenums::clang__DependentNameType::memnames>(MemNum)) {
    case reflenums::clang__DependentNameType:::
      return toClientReflType<>(C);
    case reflenums::clang__DependentNameType:::
      return toClientReflType<>(C);
    case reflenums::clang__DependentNameType:::
      return toClientReflType<>(C);
    case reflenums::clang__DependentNameType:::
      return toClientReflType<>(C);
    case reflenums::clang__DependentNameType:::
      return toClientReflType<>(C);
    case reflenums::clang__DependentNameType:::
      return toClientReflType<>(C);
    case reflenums::clang__DependentNameType::getQualifier:
      return toClientReflType<class clang::NestedNameSpecifier *>(C);
    case reflenums::clang__DependentNameType::getIdentifier:
      return toClientReflType<const class clang::IdentifierInfo *>(C);
    case reflenums::clang__DependentNameType::isSugared:
      return toClientReflType<bool>(C);
    case reflenums::clang__DependentNameType::desugar:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__DependentNameType::desugar:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__DependentNameType::Profile:
      return toClientReflType<void>(C);
    case reflenums::clang__DependentNameType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__DependentNameType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__DependentNameType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__DependentNameType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__DependentNameType::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__DependentTemplateSpecializationType:
  switch (static_cast<reflenums::clang__DependentTemplateSpecializationType::memnames>(MemNum)) {
    case reflenums::clang__DependentTemplateSpecializationType::_this_:
      if (IsPtr)
        return toClientReflType<clang::DependentTemplateSpecializationType *>(C);
      return toClientReflType<clang::DependentTemplateSpecializationType>(C);
    case reflenums::clang__DependentTemplateSpecializationType:::
      return toClientReflType<>(C);
    case reflenums::clang__DependentTemplateSpecializationType:::
      return toClientReflType<>(C);
    case reflenums::clang__DependentTemplateSpecializationType:::
      return toClientReflType<>(C);
    case reflenums::clang__DependentTemplateSpecializationType:::
      return toClientReflType<>(C);
    case reflenums::clang__DependentTemplateSpecializationType:::
      return toClientReflType<>(C);
    case reflenums::clang__DependentTemplateSpecializationType:::
      return toClientReflType<>(C);
    case reflenums::clang__DependentTemplateSpecializationType:::
      return toClientReflType<>(C);
    case reflenums::clang__DependentTemplateSpecializationType:::
      return toClientReflType<>(C);
    case reflenums::clang__DependentTemplateSpecializationType:::
      return toClientReflType<>(C);
    case reflenums::clang__DependentTemplateSpecializationType::getQualifier:
      return toClientReflType<class clang::NestedNameSpecifier *>(C);
    case reflenums::clang__DependentTemplateSpecializationType::getIdentifier:
      return toClientReflType<const class clang::IdentifierInfo *>(C);
    case reflenums::clang__DependentTemplateSpecializationType::getArgs:
      return toClientReflType<const class clang::TemplateArgument *>(C);
    case reflenums::clang__DependentTemplateSpecializationType::getNumArgs:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__DependentTemplateSpecializationType::getArg:
      return toClientReflType<const class clang::TemplateArgument &>(C);
    case reflenums::clang__DependentTemplateSpecializationType::template_arguments:
      return toClientReflType<class llvm::ArrayRef<class clang::TemplateArgument>>(C);
    case reflenums::clang__DependentTemplateSpecializationType::template_arguments:
      return toClientReflType<class llvm::ArrayRef<class clang::TemplateArgument>>(C);
    case reflenums::clang__DependentTemplateSpecializationType::template_arguments:
      return toClientReflType<class llvm::ArrayRef<class clang::TemplateArgument>>(C);
    case reflenums::clang__DependentTemplateSpecializationType::template_arguments:
      return toClientReflType<class llvm::ArrayRef<class clang::TemplateArgument>>(C);
    case reflenums::clang__DependentTemplateSpecializationType::isSugared:
      return toClientReflType<bool>(C);
    case reflenums::clang__DependentTemplateSpecializationType::desugar:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__DependentTemplateSpecializationType::desugar:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__DependentTemplateSpecializationType::desugar:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__DependentTemplateSpecializationType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__DependentTemplateSpecializationType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__DependentTemplateSpecializationType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__DependentTemplateSpecializationType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__DependentTemplateSpecializationType::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__PackExpansionType:
  switch (static_cast<reflenums::clang__PackExpansionType::memnames>(MemNum)) {
    case reflenums::clang__PackExpansionType:::
      return toClientReflType<>(C);
    case reflenums::clang__PackExpansionType:::
      return toClientReflType<>(C);
    case reflenums::clang__PackExpansionType:::
      return toClientReflType<>(C);
    case reflenums::clang__PackExpansionType:::
      return toClientReflType<>(C);
    case reflenums::clang__PackExpansionType:::
      return toClientReflType<>(C);
    case reflenums::clang__PackExpansionType:::
      return toClientReflType<>(C);
    case reflenums::clang__PackExpansionType::getPattern:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__PackExpansionType::getPattern:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__PackExpansionType::isSugared:
      return toClientReflType<bool>(C);
    case reflenums::clang__PackExpansionType::desugar:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__PackExpansionType::desugar:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__PackExpansionType::desugar:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__PackExpansionType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__PackExpansionType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__PackExpansionType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__PackExpansionType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__PackExpansionType::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__ObjCTypeParamType:
  switch (static_cast<reflenums::clang__ObjCTypeParamType::memnames>(MemNum)) {
    case reflenums::clang__ObjCTypeParamType:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCTypeParamType:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCTypeParamType:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCTypeParamType:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCTypeParamType:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCTypeParamType:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCTypeParamType:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCTypeParamType:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCTypeParamType:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCTypeParamType:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCTypeParamType::quals:
      return toClientReflType<class llvm::iterator_range<class clang::ObjCProtocolDecl *const *>>(C);
    case reflenums::clang__ObjCTypeParamType::quals:
      return toClientReflType<class llvm::iterator_range<class clang::ObjCProtocolDecl *const *>>(C);
    case reflenums::clang__ObjCTypeParamType::quals:
      return toClientReflType<class llvm::iterator_range<class clang::ObjCProtocolDecl *const *>>(C);
    case reflenums::clang__ObjCTypeParamType::qual_empty:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCTypeParamType::getNumProtocols:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ObjCTypeParamType::getProtocol:
      return toClientReflType<class clang::ObjCProtocolDecl *>(C);
    case reflenums::clang__ObjCTypeParamType::getProtocols:
      return toClientReflType<class llvm::ArrayRef<class clang::ObjCProtocolDecl *>>(C);
    case reflenums::clang__ObjCTypeParamType::getProtocols:
      return toClientReflType<class llvm::ArrayRef<class clang::ObjCProtocolDecl *>>(C);
    case reflenums::clang__ObjCTypeParamType::getProtocols:
      return toClientReflType<class llvm::ArrayRef<class clang::ObjCProtocolDecl *>>(C);
    case reflenums::clang__ObjCTypeParamType::getProtocols:
      return toClientReflType<class llvm::ArrayRef<class clang::ObjCProtocolDecl *>>(C);
    case reflenums::clang__ObjCTypeParamType::getProtocols:
      return toClientReflType<class llvm::ArrayRef<class clang::ObjCProtocolDecl *>>(C);
    case reflenums::clang__ObjCTypeParamType:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCTypeParamType:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCTypeParamType:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCTypeParamType:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCTypeParamType:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCTypeParamType:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCTypeParamType:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCTypeParamType:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCTypeParamType:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCTypeParamType:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCTypeParamType::isSugared:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCTypeParamType::desugar:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ObjCTypeParamType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCTypeParamType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCTypeParamType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCTypeParamType::getDecl:
      return toClientReflType<class clang::ObjCTypeParamDecl *>(C);
    case reflenums::clang__ObjCTypeParamType::getDecl:
      return toClientReflType<class clang::ObjCTypeParamDecl *>(C);
    case reflenums::clang__ObjCTypeParamType::getDecl:
      return toClientReflType<class clang::ObjCTypeParamDecl *>(C);
    case reflenums::clang__ObjCTypeParamType::getDecl:
      return toClientReflType<class clang::ObjCTypeParamDecl *>(C);
    case reflenums::clang__ObjCTypeParamType::getDecl:
      return toClientReflType<class clang::ObjCTypeParamDecl *>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__ObjCObjectType:
  switch (static_cast<reflenums::clang__ObjCObjectType::memnames>(MemNum)) {
    case reflenums::clang__ObjCObjectType:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCObjectType:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCObjectType:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCObjectType:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCObjectType:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCObjectType:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCObjectType:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCObjectType:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCObjectType:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCObjectType:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCObjectType::quals:
      return toClientReflType<class llvm::iterator_range<class clang::ObjCProtocolDecl *const *>>(C);
    case reflenums::clang__ObjCObjectType::quals:
      return toClientReflType<class llvm::iterator_range<class clang::ObjCProtocolDecl *const *>>(C);
    case reflenums::clang__ObjCObjectType::quals:
      return toClientReflType<class llvm::iterator_range<class clang::ObjCProtocolDecl *const *>>(C);
    case reflenums::clang__ObjCObjectType::qual_empty:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCObjectType::getNumProtocols:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ObjCObjectType::getProtocol:
      return toClientReflType<class clang::ObjCProtocolDecl *>(C);
    case reflenums::clang__ObjCObjectType::getProtocols:
      return toClientReflType<class llvm::ArrayRef<class clang::ObjCProtocolDecl *>>(C);
    case reflenums::clang__ObjCObjectType::getProtocols:
      return toClientReflType<class llvm::ArrayRef<class clang::ObjCProtocolDecl *>>(C);
    case reflenums::clang__ObjCObjectType::getProtocols:
      return toClientReflType<class llvm::ArrayRef<class clang::ObjCProtocolDecl *>>(C);
    case reflenums::clang__ObjCObjectType::getProtocols:
      return toClientReflType<class llvm::ArrayRef<class clang::ObjCProtocolDecl *>>(C);
    case reflenums::clang__ObjCObjectType::getProtocols:
      return toClientReflType<class llvm::ArrayRef<class clang::ObjCProtocolDecl *>>(C);
    case reflenums::clang__ObjCObjectType:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCObjectType:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCObjectType:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCObjectType:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCObjectType:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCObjectType:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCObjectType:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCObjectType:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCObjectType:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCObjectType:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCObjectType:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCObjectType:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCObjectType:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCObjectType:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCObjectType:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCObjectType::getBaseType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ObjCObjectType::isObjCId:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCObjectType::isObjCClass:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCObjectType::isObjCUnqualifiedId:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCObjectType::isObjCUnqualifiedClass:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCObjectType::isObjCUnqualifiedIdOrClass:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCObjectType::isObjCQualifiedId:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCObjectType::isObjCQualifiedClass:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCObjectType::getInterface:
      return toClientReflType<class clang::ObjCInterfaceDecl *>(C);
    case reflenums::clang__ObjCObjectType::isSpecialized:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCObjectType::isSpecializedAsWritten:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCObjectType::isUnspecialized:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCObjectType::isUnspecializedAsWritten:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCObjectType::getTypeArgs:
      return toClientReflType<class llvm::ArrayRef<class clang::QualType>>(C);
    case reflenums::clang__ObjCObjectType::getTypeArgsAsWritten:
      return toClientReflType<class llvm::ArrayRef<class clang::QualType>>(C);
    case reflenums::clang__ObjCObjectType::isKindOfTypeAsWritten:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCObjectType::isKindOfType:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCObjectType::getSuperClassType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ObjCObjectType::stripObjCKindOfTypeAndQuals:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ObjCObjectType::isSugared:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCObjectType::desugar:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ObjCObjectType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCObjectType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCObjectType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCObjectType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCObjectType::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__ObjCInterfaceType:
  switch (static_cast<reflenums::clang__ObjCInterfaceType::memnames>(MemNum)) {
    case reflenums::clang__ObjCInterfaceType:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCInterfaceType:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCInterfaceType:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCInterfaceType:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCInterfaceType:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCInterfaceType:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCInterfaceType:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCInterfaceType::getDecl:
      return toClientReflType<class clang::ObjCInterfaceDecl *>(C);
    case reflenums::clang__ObjCInterfaceType::isSugared:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCInterfaceType::desugar:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ObjCInterfaceType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCInterfaceType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCInterfaceType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCInterfaceType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCInterfaceType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCInterfaceType::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__ObjCObjectPointerType:
  switch (static_cast<reflenums::clang__ObjCObjectPointerType::memnames>(MemNum)) {
    case reflenums::clang__ObjCObjectPointerType:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCObjectPointerType:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCObjectPointerType:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCObjectPointerType:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCObjectPointerType:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCObjectPointerType::getPointeeType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ObjCObjectPointerType::getObjectType:
      return toClientReflType<const class clang::ObjCObjectType *>(C);
    case reflenums::clang__ObjCObjectPointerType::getInterfaceType:
      return toClientReflType<const class clang::ObjCInterfaceType *>(C);
    case reflenums::clang__ObjCObjectPointerType::getInterfaceDecl:
      return toClientReflType<class clang::ObjCInterfaceDecl *>(C);
    case reflenums::clang__ObjCObjectPointerType::isObjCIdType:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCObjectPointerType::isObjCClassType:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCObjectPointerType::isObjCIdOrClassType:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCObjectPointerType::isObjCQualifiedIdType:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCObjectPointerType::isObjCQualifiedClassType:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCObjectPointerType::isKindOfType:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCObjectPointerType::isSpecialized:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCObjectPointerType::isSpecializedAsWritten:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCObjectPointerType::isUnspecialized:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCObjectPointerType::isUnspecializedAsWritten:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCObjectPointerType::getTypeArgs:
      return toClientReflType<class llvm::ArrayRef<class clang::QualType>>(C);
    case reflenums::clang__ObjCObjectPointerType::getTypeArgsAsWritten:
      return toClientReflType<class llvm::ArrayRef<class clang::QualType>>(C);
    case reflenums::clang__ObjCObjectPointerType::getTypeArgsAsWritten:
      return toClientReflType<class llvm::ArrayRef<class clang::QualType>>(C);
    case reflenums::clang__ObjCObjectPointerType::getTypeArgsAsWritten:
      return toClientReflType<class llvm::ArrayRef<class clang::QualType>>(C);
    case reflenums::clang__ObjCObjectPointerType::quals:
      return toClientReflType<class llvm::iterator_range<class clang::ObjCProtocolDecl *const *>>(C);
    case reflenums::clang__ObjCObjectPointerType::quals:
      return toClientReflType<class llvm::iterator_range<class clang::ObjCProtocolDecl *const *>>(C);
    case reflenums::clang__ObjCObjectPointerType::quals:
      return toClientReflType<class llvm::iterator_range<class clang::ObjCProtocolDecl *const *>>(C);
    case reflenums::clang__ObjCObjectPointerType::qual_empty:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCObjectPointerType::getNumProtocols:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ObjCObjectPointerType::getProtocol:
      return toClientReflType<class clang::ObjCProtocolDecl *>(C);
    case reflenums::clang__ObjCObjectPointerType::isSugared:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCObjectPointerType::desugar:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ObjCObjectPointerType::getSuperClassType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ObjCObjectPointerType::stripObjCKindOfTypeAndQuals:
      return toClientReflType<const class clang::ObjCObjectPointerType *>(C);
    case reflenums::clang__ObjCObjectPointerType::stripObjCKindOfTypeAndQuals:
      return toClientReflType<const class clang::ObjCObjectPointerType *>(C);
    case reflenums::clang__ObjCObjectPointerType::Profile:
      return toClientReflType<void>(C);
    case reflenums::clang__ObjCObjectPointerType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCObjectPointerType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCObjectPointerType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCObjectPointerType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCObjectPointerType::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__AtomicType:
  switch (static_cast<reflenums::clang__AtomicType::memnames>(MemNum)) {
    case reflenums::clang__AtomicType:::
      return toClientReflType<>(C);
    case reflenums::clang__AtomicType:::
      return toClientReflType<>(C);
    case reflenums::clang__AtomicType:::
      return toClientReflType<>(C);
    case reflenums::clang__AtomicType:::
      return toClientReflType<>(C);
    case reflenums::clang__AtomicType:::
      return toClientReflType<>(C);
    case reflenums::clang__AtomicType::getValueType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__AtomicType::isSugared:
      return toClientReflType<bool>(C);
    case reflenums::clang__AtomicType::desugar:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__AtomicType::desugar:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__AtomicType::Profile:
      return toClientReflType<void>(C);
    case reflenums::clang__AtomicType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__AtomicType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__AtomicType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__AtomicType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__AtomicType::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__PipeType:
  switch (static_cast<reflenums::clang__PipeType::memnames>(MemNum)) {
    case reflenums::clang__PipeType:::
      return toClientReflType<>(C);
    case reflenums::clang__PipeType:::
      return toClientReflType<>(C);
    case reflenums::clang__PipeType:::
      return toClientReflType<>(C);
    case reflenums::clang__PipeType:::
      return toClientReflType<>(C);
    case reflenums::clang__PipeType:::
      return toClientReflType<>(C);
    case reflenums::clang__PipeType:::
      return toClientReflType<>(C);
    case reflenums::clang__PipeType::getElementType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__PipeType::isSugared:
      return toClientReflType<bool>(C);
    case reflenums::clang__PipeType::desugar:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__PipeType::desugar:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__PipeType::Profile:
      return toClientReflType<void>(C);
    case reflenums::clang__PipeType::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__PipeType::isReadOnly:
      return toClientReflType<bool>(C);
    case reflenums::clang__PipeType::isReadOnly:
      return toClientReflType<bool>(C);
    case reflenums::clang__PipeType::isReadOnly:
      return toClientReflType<bool>(C);
    case reflenums::clang__PipeType::isReadOnly:
      return toClientReflType<bool>(C);
    case reflenums::clang__PipeType::isReadOnly:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__TypeSourceInfo:
  switch (static_cast<reflenums::clang__TypeSourceInfo::memnames>(MemNum)) {
    case reflenums::clang__TypeSourceInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TypeSourceInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TypeSourceInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TypeSourceInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TypeSourceInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TypeSourceInfo::getType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__TypeSourceInfo::getTypeLoc:
      return toClientReflType<class clang::TypeLoc>(C);
    case reflenums::clang__TypeSourceInfo::getTypeLoc:
      return toClientReflType<class clang::TypeLoc>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__TranslationUnitDecl:
  switch (static_cast<reflenums::clang__TranslationUnitDecl::memnames>(MemNum)) {
    case reflenums::clang__TranslationUnitDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TranslationUnitDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TranslationUnitDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TranslationUnitDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TranslationUnitDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TranslationUnitDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TranslationUnitDecl::getASTContext:
      return toClientReflType<class clang::ASTContext &>(C);
    case reflenums::clang__TranslationUnitDecl::getAnonymousNamespace:
      return toClientReflType<class clang::NamespaceDecl *>(C);
    case reflenums::clang__TranslationUnitDecl::getAnonymousNamespace:
      return toClientReflType<class clang::NamespaceDecl *>(C);
    case reflenums::clang__TranslationUnitDecl::Create:
      return toClientReflType<class clang::TranslationUnitDecl *>(C);
    case reflenums::clang__TranslationUnitDecl::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__TranslationUnitDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__TranslationUnitDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__TranslationUnitDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__TranslationUnitDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__TranslationUnitDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__TranslationUnitDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__TranslationUnitDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__TranslationUnitDecl::classofKind:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__PragmaCommentDecl:
  switch (static_cast<reflenums::clang__PragmaCommentDecl::memnames>(MemNum)) {
    case reflenums::clang__PragmaCommentDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__PragmaCommentDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__PragmaCommentDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__PragmaCommentDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__PragmaCommentDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__PragmaCommentDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__PragmaCommentDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__PragmaCommentDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__PragmaCommentDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__PragmaCommentDecl::CreateDeserialized:
      return toClientReflType<class clang::PragmaCommentDecl *>(C);
    case reflenums::clang__PragmaCommentDecl::getCommentKind:
      return toClientReflType<enum clang::PragmaMSCommentKind>(C);
    case reflenums::clang__PragmaCommentDecl::getArg:
      return toClientReflType<const char *>(C);
    case reflenums::clang__PragmaCommentDecl::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__PragmaCommentDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__PragmaCommentDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__PragmaCommentDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__PragmaCommentDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__PragmaCommentDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__PragmaCommentDecl::classofKind:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__PragmaDetectMismatchDecl:
  switch (static_cast<reflenums::clang__PragmaDetectMismatchDecl::memnames>(MemNum)) {
    case reflenums::clang__PragmaDetectMismatchDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__PragmaDetectMismatchDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__PragmaDetectMismatchDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__PragmaDetectMismatchDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__PragmaDetectMismatchDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__PragmaDetectMismatchDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__PragmaDetectMismatchDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__PragmaDetectMismatchDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__PragmaDetectMismatchDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__PragmaDetectMismatchDecl::CreateDeserialized:
      return toClientReflType<class clang::PragmaDetectMismatchDecl *>(C);
    case reflenums::clang__PragmaDetectMismatchDecl::getName:
      return toClientReflType<const char *>(C);
    case reflenums::clang__PragmaDetectMismatchDecl::getValue:
      return toClientReflType<const char *>(C);
    case reflenums::clang__PragmaDetectMismatchDecl::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__PragmaDetectMismatchDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__PragmaDetectMismatchDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__PragmaDetectMismatchDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__PragmaDetectMismatchDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__PragmaDetectMismatchDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__PragmaDetectMismatchDecl::classofKind:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__ExternCContextDecl:
  switch (static_cast<reflenums::clang__ExternCContextDecl::memnames>(MemNum)) {
    case reflenums::clang__ExternCContextDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ExternCContextDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ExternCContextDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ExternCContextDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ExternCContextDecl::Create:
      return toClientReflType<class clang::ExternCContextDecl *>(C);
    case reflenums::clang__ExternCContextDecl::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ExternCContextDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ExternCContextDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ExternCContextDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ExternCContextDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ExternCContextDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ExternCContextDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ExternCContextDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ExternCContextDecl::classofKind:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__NamedDecl:
  switch (static_cast<reflenums::clang__NamedDecl::memnames>(MemNum)) {
    case reflenums::clang__NamedDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__NamedDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__NamedDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__NamedDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__NamedDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__NamedDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__NamedDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__NamedDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__NamedDecl::getIdentifier:
      return toClientReflType<class clang::IdentifierInfo *>(C);
    case reflenums::clang__NamedDecl::getName:
      return toClientReflType<const char *>(C);
    case reflenums::clang__NamedDecl::getNameAsString:
      return toClientReflType<const char *>(C);
    case reflenums::clang__NamedDecl::printName:
      return toClientReflType<void>(C);
    case reflenums::clang__NamedDecl::getDeclName:
      return toClientReflType<class clang::DeclarationName>(C);
    case reflenums::clang__NamedDecl::getDeclName:
      return toClientReflType<class clang::DeclarationName>(C);
    case reflenums::clang__NamedDecl::printQualifiedName:
      return toClientReflType<void>(C);
    case reflenums::clang__NamedDecl::printQualifiedName1:
      return toClientReflType<void>(C);
    case reflenums::clang__NamedDecl::getQualifiedNameAsString:
      return toClientReflType<const char *>(C);
    case reflenums::clang__NamedDecl::getNameForDiagnostic:
      return toClientReflType<void>(C);
    case reflenums::clang__NamedDecl::declarationReplaces:
      return toClientReflType<bool>(C);
    case reflenums::clang__NamedDecl::hasLinkage:
      return toClientReflType<bool>(C);
    case reflenums::clang__NamedDecl::hasLinkage:
      return toClientReflType<bool>(C);
    case reflenums::clang__NamedDecl::hasLinkage:
      return toClientReflType<bool>(C);
    case reflenums::clang__NamedDecl::hasLinkage:
      return toClientReflType<bool>(C);
    case reflenums::clang__NamedDecl::hasLinkage:
      return toClientReflType<bool>(C);
    case reflenums::clang__NamedDecl::isCXXClassMember:
      return toClientReflType<bool>(C);
    case reflenums::clang__NamedDecl::isCXXInstanceMember:
      return toClientReflType<bool>(C);
    case reflenums::clang__NamedDecl::getLinkageInternal:
      return toClientReflType<enum clang::Linkage>(C);
    case reflenums::clang__NamedDecl::getFormalLinkage:
      return toClientReflType<enum clang::Linkage>(C);
    case reflenums::clang__NamedDecl::hasExternalFormalLinkage:
      return toClientReflType<bool>(C);
    case reflenums::clang__NamedDecl::isExternallyVisible:
      return toClientReflType<bool>(C);
    case reflenums::clang__NamedDecl::isExternallyDeclarable:
      return toClientReflType<bool>(C);
    case reflenums::clang__NamedDecl::getVisibility:
      return toClientReflType<enum clang::Visibility>(C);
    case reflenums::clang__NamedDecl::getLinkageAndVisibility:
      return toClientReflType<class clang::LinkageInfo>(C);
    case reflenums::clang__NamedDecl::getLinkageAndVisibility:
      return toClientReflType<class clang::LinkageInfo>(C);
    case reflenums::clang__NamedDecl::getLinkageAndVisibility:
      return toClientReflType<class clang::LinkageInfo>(C);
    case reflenums::clang__NamedDecl::isLinkageValid:
      return toClientReflType<bool>(C);
    case reflenums::clang__NamedDecl::hasLinkageBeenComputed:
      return toClientReflType<bool>(C);
    case reflenums::clang__NamedDecl::hasLinkageBeenComputed:
      return toClientReflType<bool>(C);
    case reflenums::clang__NamedDecl::getUnderlyingDecl:
      return toClientReflType<const class clang::NamedDecl *>(C);
    case reflenums::clang__NamedDecl::getUnderlyingDecl:
      return toClientReflType<const class clang::NamedDecl *>(C);
    case reflenums::clang__NamedDecl::getMostRecentDecl:
      return toClientReflType<const class clang::NamedDecl *>(C);
    case reflenums::clang__NamedDecl::getObjCFStringFormattingFamily:
      return toClientReflType<enum clang::ObjCStringFormatFamily>(C);
    case reflenums::clang__NamedDecl::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__NamedDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__NamedDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__NamedDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__NamedDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__NamedDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__NamedDecl::classofKind:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__LabelDecl:
  switch (static_cast<reflenums::clang__LabelDecl::memnames>(MemNum)) {
    case reflenums::clang__LabelDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__LabelDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__LabelDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__LabelDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__LabelDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__LabelDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__LabelDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__LabelDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__LabelDecl::Create:
      return toClientReflType<class clang::LabelDecl *>(C);
    case reflenums::clang__LabelDecl::Create1:
      return toClientReflType<class clang::LabelDecl *>(C);
    case reflenums::clang__LabelDecl::CreateDeserialized:
      return toClientReflType<class clang::LabelDecl *>(C);
    case reflenums::clang__LabelDecl::getStmt:
      return toClientReflType<class clang::LabelStmt *>(C);
    case reflenums::clang__LabelDecl::getStmt:
      return toClientReflType<class clang::LabelStmt *>(C);
    case reflenums::clang__LabelDecl::isGnuLocal:
      return toClientReflType<bool>(C);
    case reflenums::clang__LabelDecl::isGnuLocal:
      return toClientReflType<bool>(C);
    case reflenums::clang__LabelDecl::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__LabelDecl::isMSAsmLabel:
      return toClientReflType<bool>(C);
    case reflenums::clang__LabelDecl::isResolvedMSAsmLabel:
      return toClientReflType<bool>(C);
    case reflenums::clang__LabelDecl::isResolvedMSAsmLabel:
      return toClientReflType<bool>(C);
    case reflenums::clang__LabelDecl::getMSAsmLabel:
      return toClientReflType<const char *>(C);
    case reflenums::clang__LabelDecl::getMSAsmLabel:
      return toClientReflType<const char *>(C);
    case reflenums::clang__LabelDecl::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__LabelDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__LabelDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__LabelDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__LabelDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__LabelDecl::classofKind:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__NamespaceDecl:
  switch (static_cast<reflenums::clang__NamespaceDecl::memnames>(MemNum)) {
    case reflenums::clang__NamespaceDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__NamespaceDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__NamespaceDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__NamespaceDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__NamespaceDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__NamespaceDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__NamespaceDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__NamespaceDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__NamespaceDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__NamespaceDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__NamespaceDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__NamespaceDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__NamespaceDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__NamespaceDecl::getPreviousDecl:
      return toClientReflType<const class clang::NamespaceDecl *>(C);
    case reflenums::clang__NamespaceDecl::getPreviousDecl:
      return toClientReflType<const class clang::NamespaceDecl *>(C);
    case reflenums::clang__NamespaceDecl::getFirstDecl:
      return toClientReflType<const class clang::NamespaceDecl *>(C);
    case reflenums::clang__NamespaceDecl::getFirstDecl:
      return toClientReflType<const class clang::NamespaceDecl *>(C);
    case reflenums::clang__NamespaceDecl::getFirstDecl:
      return toClientReflType<const class clang::NamespaceDecl *>(C);
    case reflenums::clang__NamespaceDecl::getMostRecentDecl:
      return toClientReflType<const class clang::NamespaceDecl *>(C);
    case reflenums::clang__NamespaceDecl::getMostRecentDecl:
      return toClientReflType<const class clang::NamespaceDecl *>(C);
    case reflenums::clang__NamespaceDecl::getMostRecentDecl:
      return toClientReflType<const class clang::NamespaceDecl *>(C);
    case reflenums::clang__NamespaceDecl::getMostRecentDecl:
      return toClientReflType<const class clang::NamespaceDecl *>(C);
    case reflenums::clang__NamespaceDecl::getMostRecentDecl:
      return toClientReflType<const class clang::NamespaceDecl *>(C);
    case reflenums::clang__NamespaceDecl::getMostRecentDecl:
      return toClientReflType<const class clang::NamespaceDecl *>(C);
    case reflenums::clang__NamespaceDecl::getMostRecentDecl:
      return toClientReflType<const class clang::NamespaceDecl *>(C);
    case reflenums::clang__NamespaceDecl::getMostRecentDecl:
      return toClientReflType<const class clang::NamespaceDecl *>(C);
    case reflenums::clang__NamespaceDecl::getMostRecentDecl:
      return toClientReflType<const class clang::NamespaceDecl *>(C);
    case reflenums::clang__NamespaceDecl::getMostRecentDecl:
      return toClientReflType<const class clang::NamespaceDecl *>(C);
    case reflenums::clang__NamespaceDecl::getMostRecentDecl:
      return toClientReflType<const class clang::NamespaceDecl *>(C);
    case reflenums::clang__NamespaceDecl::getMostRecentDecl:
      return toClientReflType<const class clang::NamespaceDecl *>(C);
    case reflenums::clang__NamespaceDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__NamespaceDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__NamespaceDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__NamespaceDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__NamespaceDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__NamespaceDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__NamespaceDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__NamespaceDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__NamespaceDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__NamespaceDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__NamespaceDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__NamespaceDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__NamespaceDecl::Create:
      return toClientReflType<class clang::NamespaceDecl *>(C);
    case reflenums::clang__NamespaceDecl::CreateDeserialized:
      return toClientReflType<class clang::NamespaceDecl *>(C);
    case reflenums::clang__NamespaceDecl::CreateDeserialized:
      return toClientReflType<class clang::NamespaceDecl *>(C);
    case reflenums::clang__NamespaceDecl::CreateDeserialized:
      return toClientReflType<class clang::NamespaceDecl *>(C);
    case reflenums::clang__NamespaceDecl::CreateDeserialized:
      return toClientReflType<class clang::NamespaceDecl *>(C);
    case reflenums::clang__NamespaceDecl::CreateDeserialized:
      return toClientReflType<class clang::NamespaceDecl *>(C);
    case reflenums::clang__NamespaceDecl::CreateDeserialized:
      return toClientReflType<class clang::NamespaceDecl *>(C);
    case reflenums::clang__NamespaceDecl::CreateDeserialized:
      return toClientReflType<class clang::NamespaceDecl *>(C);
    case reflenums::clang__NamespaceDecl::CreateDeserialized:
      return toClientReflType<class clang::NamespaceDecl *>(C);
    case reflenums::clang__NamespaceDecl::CreateDeserialized:
      return toClientReflType<class clang::NamespaceDecl *>(C);
    case reflenums::clang__NamespaceDecl::CreateDeserialized:
      return toClientReflType<class clang::NamespaceDecl *>(C);
    case reflenums::clang__NamespaceDecl::CreateDeserialized:
      return toClientReflType<class clang::NamespaceDecl *>(C);
    case reflenums::clang__NamespaceDecl::CreateDeserialized:
      return toClientReflType<class clang::NamespaceDecl *>(C);
    case reflenums::clang__NamespaceDecl::CreateDeserialized:
      return toClientReflType<class clang::NamespaceDecl *>(C);
    case reflenums::clang__NamespaceDecl::CreateDeserialized:
      return toClientReflType<class clang::NamespaceDecl *>(C);
    case reflenums::clang__NamespaceDecl::CreateDeserialized:
      return toClientReflType<class clang::NamespaceDecl *>(C);
    case reflenums::clang__NamespaceDecl::CreateDeserialized:
      return toClientReflType<class clang::NamespaceDecl *>(C);
    case reflenums::clang__NamespaceDecl::CreateDeserialized:
      return toClientReflType<class clang::NamespaceDecl *>(C);
    case reflenums::clang__NamespaceDecl::isAnonymousNamespace:
      return toClientReflType<bool>(C);
    case reflenums::clang__NamespaceDecl::isInline:
      return toClientReflType<bool>(C);
    case reflenums::clang__NamespaceDecl::isInline:
      return toClientReflType<bool>(C);
    case reflenums::clang__NamespaceDecl::isInline:
      return toClientReflType<bool>(C);
    case reflenums::clang__NamespaceDecl::getOriginalNamespace:
      return toClientReflType<const class clang::NamespaceDecl *>(C);
    case reflenums::clang__NamespaceDecl::isOriginalNamespace:
      return toClientReflType<bool>(C);
    case reflenums::clang__NamespaceDecl::getAnonymousNamespace:
      return toClientReflType<class clang::NamespaceDecl *>(C);
    case reflenums::clang__NamespaceDecl::getAnonymousNamespace:
      return toClientReflType<class clang::NamespaceDecl *>(C);
    case reflenums::clang__NamespaceDecl::getAnonymousNamespace:
      return toClientReflType<class clang::NamespaceDecl *>(C);
    case reflenums::clang__NamespaceDecl::getCanonicalDecl:
      return toClientReflType<const class clang::NamespaceDecl *>(C);
    case reflenums::clang__NamespaceDecl::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__NamespaceDecl::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__NamespaceDecl::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__NamespaceDecl::getRBraceLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__NamespaceDecl::getRBraceLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__NamespaceDecl::getRBraceLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__NamespaceDecl::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__NamespaceDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__NamespaceDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__NamespaceDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__NamespaceDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__NamespaceDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__NamespaceDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__NamespaceDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__NamespaceDecl::classofKind:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__ValueDecl:
  switch (static_cast<reflenums::clang__ValueDecl::memnames>(MemNum)) {
    case reflenums::clang__ValueDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ValueDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ValueDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ValueDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ValueDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ValueDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ValueDecl::getType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ValueDecl::getType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ValueDecl::isWeak:
      return toClientReflType<bool>(C);
    case reflenums::clang__ValueDecl::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ValueDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ValueDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ValueDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ValueDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ValueDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ValueDecl::classofKind:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__DeclaratorDecl:
  switch (static_cast<reflenums::clang__DeclaratorDecl::memnames>(MemNum)) {
    case reflenums::clang__DeclaratorDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclaratorDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclaratorDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclaratorDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclaratorDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclaratorDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclaratorDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclaratorDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclaratorDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclaratorDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclaratorDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclaratorDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclaratorDecl::getTypeSourceInfo:
      return toClientReflType<class clang::TypeSourceInfo *>(C);
    case reflenums::clang__DeclaratorDecl::getTypeSourceInfo:
      return toClientReflType<class clang::TypeSourceInfo *>(C);
    case reflenums::clang__DeclaratorDecl::getInnerLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__DeclaratorDecl::getInnerLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__DeclaratorDecl::getOuterLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__DeclaratorDecl::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__DeclaratorDecl::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__DeclaratorDecl::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__DeclaratorDecl::getQualifier:
      return toClientReflType<class clang::NestedNameSpecifier *>(C);
    case reflenums::clang__DeclaratorDecl::getQualifierLoc:
      return toClientReflType<class clang::NestedNameSpecifierLoc>(C);
    case reflenums::clang__DeclaratorDecl::getQualifierLoc:
      return toClientReflType<class clang::NestedNameSpecifierLoc>(C);
    case reflenums::clang__DeclaratorDecl::getNumTemplateParameterLists:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__DeclaratorDecl::getTemplateParameterList:
      return toClientReflType<class clang::TemplateParameterList *>(C);
    case reflenums::clang__DeclaratorDecl::getTemplateParameterList:
      return toClientReflType<class clang::TemplateParameterList *>(C);
    case reflenums::clang__DeclaratorDecl::getTypeSpecStartLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__DeclaratorDecl::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__DeclaratorDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__DeclaratorDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__DeclaratorDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__DeclaratorDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__DeclaratorDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__DeclaratorDecl::classofKind:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__EvaluatedStmt:
  switch (static_cast<reflenums::clang__EvaluatedStmt::memnames>(MemNum)) {
    case reflenums::clang__EvaluatedStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__EvaluatedStmt::WasEvaluated:
      return toClientReflType<bool>(C);
    case reflenums::clang__EvaluatedStmt::IsEvaluating:
      return toClientReflType<bool>(C);
    case reflenums::clang__EvaluatedStmt::CheckedICE:
      return toClientReflType<bool>(C);
    case reflenums::clang__EvaluatedStmt::CheckingICE:
      return toClientReflType<bool>(C);
    case reflenums::clang__EvaluatedStmt::IsICE:
      return toClientReflType<bool>(C);
    case reflenums::clang__EvaluatedStmt::Value:
      return toClientReflType<class clang::Stmt *>(C);
    case reflenums::clang__EvaluatedStmt::Value:
      return toClientReflType<class clang::Stmt *>(C);
    case reflenums::clang__EvaluatedStmt::Value:
      return toClientReflType<class clang::Stmt *>(C);
    case reflenums::clang__EvaluatedStmt::Value:
      return toClientReflType<class clang::Stmt *>(C);
    case reflenums::clang__EvaluatedStmt::Value:
      return toClientReflType<class clang::Stmt *>(C);
    case reflenums::clang__EvaluatedStmt::Value:
      return toClientReflType<class clang::Stmt *>(C);
    case reflenums::clang__EvaluatedStmt::Value:
      return toClientReflType<class clang::Stmt *>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__VarDecl:
  switch (static_cast<reflenums::clang__VarDecl::memnames>(MemNum)) {
    case reflenums::clang__VarDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__VarDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__VarDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__VarDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__VarDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__VarDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__VarDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__VarDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__VarDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__VarDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__VarDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__VarDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__VarDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__VarDecl::getPreviousDecl:
      return toClientReflType<const class clang::VarDecl *>(C);
    case reflenums::clang__VarDecl::getPreviousDecl:
      return toClientReflType<const class clang::VarDecl *>(C);
    case reflenums::clang__VarDecl::getFirstDecl:
      return toClientReflType<const class clang::VarDecl *>(C);
    case reflenums::clang__VarDecl::getFirstDecl:
      return toClientReflType<const class clang::VarDecl *>(C);
    case reflenums::clang__VarDecl::getFirstDecl:
      return toClientReflType<const class clang::VarDecl *>(C);
    case reflenums::clang__VarDecl::getMostRecentDecl:
      return toClientReflType<const class clang::VarDecl *>(C);
    case reflenums::clang__VarDecl::getMostRecentDecl:
      return toClientReflType<const class clang::VarDecl *>(C);
    case reflenums::clang__VarDecl::getMostRecentDecl:
      return toClientReflType<const class clang::VarDecl *>(C);
    case reflenums::clang__VarDecl::getMostRecentDecl:
      return toClientReflType<const class clang::VarDecl *>(C);
    case reflenums::clang__VarDecl::getMostRecentDecl:
      return toClientReflType<const class clang::VarDecl *>(C);
    case reflenums::clang__VarDecl::getMostRecentDecl:
      return toClientReflType<const class clang::VarDecl *>(C);
    case reflenums::clang__VarDecl::getMostRecentDecl:
      return toClientReflType<const class clang::VarDecl *>(C);
    case reflenums::clang__VarDecl::getMostRecentDecl:
      return toClientReflType<const class clang::VarDecl *>(C);
    case reflenums::clang__VarDecl::getMostRecentDecl:
      return toClientReflType<const class clang::VarDecl *>(C);
    case reflenums::clang__VarDecl::getMostRecentDecl:
      return toClientReflType<const class clang::VarDecl *>(C);
    case reflenums::clang__VarDecl::getMostRecentDecl:
      return toClientReflType<const class clang::VarDecl *>(C);
    case reflenums::clang__VarDecl::getMostRecentDecl:
      return toClientReflType<const class clang::VarDecl *>(C);
    case reflenums::clang__VarDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__VarDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__VarDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__VarDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__VarDecl::getStorageClassSpecifierString:
      return toClientReflType<const char *>(C);
    case reflenums::clang__VarDecl::getStorageClassSpecifierString:
      return toClientReflType<const char *>(C);
    case reflenums::clang__VarDecl::getStorageClassSpecifierString:
      return toClientReflType<const char *>(C);
    case reflenums::clang__VarDecl::getStorageClassSpecifierString:
      return toClientReflType<const char *>(C);
    case reflenums::clang__VarDecl::getStorageClassSpecifierString:
      return toClientReflType<const char *>(C);
    case reflenums::clang__VarDecl::getStorageClassSpecifierString:
      return toClientReflType<const char *>(C);
    case reflenums::clang__VarDecl::getStorageClassSpecifierString:
      return toClientReflType<const char *>(C);
    case reflenums::clang__VarDecl::getStorageClassSpecifierString:
      return toClientReflType<const char *>(C);
    case reflenums::clang__VarDecl::getStorageClassSpecifierString:
      return toClientReflType<const char *>(C);
    case reflenums::clang__VarDecl::getStorageClassSpecifierString:
      return toClientReflType<const char *>(C);
    case reflenums::clang__VarDecl::getStorageClassSpecifierString:
      return toClientReflType<const char *>(C);
    case reflenums::clang__VarDecl::getStorageClassSpecifierString:
      return toClientReflType<const char *>(C);
    case reflenums::clang__VarDecl::getStorageClassSpecifierString:
      return toClientReflType<const char *>(C);
    case reflenums::clang__VarDecl::getStorageClassSpecifierString:
      return toClientReflType<const char *>(C);
    case reflenums::clang__VarDecl::getStorageClassSpecifierString:
      return toClientReflType<const char *>(C);
    case reflenums::clang__VarDecl::getStorageClassSpecifierString:
      return toClientReflType<const char *>(C);
    case reflenums::clang__VarDecl::getStorageClassSpecifierString:
      return toClientReflType<const char *>(C);
    case reflenums::clang__VarDecl::getStorageClassSpecifierString:
      return toClientReflType<const char *>(C);
    case reflenums::clang__VarDecl::getStorageClassSpecifierString:
      return toClientReflType<const char *>(C);
    case reflenums::clang__VarDecl::getStorageClassSpecifierString:
      return toClientReflType<const char *>(C);
    case reflenums::clang__VarDecl::getStorageClassSpecifierString:
      return toClientReflType<const char *>(C);
    case reflenums::clang__VarDecl::getStorageClassSpecifierString:
      return toClientReflType<const char *>(C);
    case reflenums::clang__VarDecl::getStorageClassSpecifierString:
      return toClientReflType<const char *>(C);
    case reflenums::clang__VarDecl::getStorageClassSpecifierString:
      return toClientReflType<const char *>(C);
    case reflenums::clang__VarDecl::getStorageClassSpecifierString:
      return toClientReflType<const char *>(C);
    case reflenums::clang__VarDecl::getStorageClassSpecifierString:
      return toClientReflType<const char *>(C);
    case reflenums::clang__VarDecl::getStorageClassSpecifierString:
      return toClientReflType<const char *>(C);
    case reflenums::clang__VarDecl::getStorageClassSpecifierString:
      return toClientReflType<const char *>(C);
    case reflenums::clang__VarDecl::getStorageClassSpecifierString:
      return toClientReflType<const char *>(C);
    case reflenums::clang__VarDecl::getStorageClassSpecifierString:
      return toClientReflType<const char *>(C);
    case reflenums::clang__VarDecl::getStorageClassSpecifierString:
      return toClientReflType<const char *>(C);
    case reflenums::clang__VarDecl::getStorageClassSpecifierString:
      return toClientReflType<const char *>(C);
    case reflenums::clang__VarDecl::getStorageClassSpecifierString:
      return toClientReflType<const char *>(C);
    case reflenums::clang__VarDecl::getStorageClassSpecifierString:
      return toClientReflType<const char *>(C);
    case reflenums::clang__VarDecl::getStorageClassSpecifierString:
      return toClientReflType<const char *>(C);
    case reflenums::clang__VarDecl::getStorageClassSpecifierString:
      return toClientReflType<const char *>(C);
    case reflenums::clang__VarDecl::getStorageClassSpecifierString:
      return toClientReflType<const char *>(C);
    case reflenums::clang__VarDecl::getStorageClassSpecifierString:
      return toClientReflType<const char *>(C);
    case reflenums::clang__VarDecl::getStorageClassSpecifierString:
      return toClientReflType<const char *>(C);
    case reflenums::clang__VarDecl::getStorageClassSpecifierString:
      return toClientReflType<const char *>(C);
    case reflenums::clang__VarDecl::getStorageClassSpecifierString:
      return toClientReflType<const char *>(C);
    case reflenums::clang__VarDecl::getStorageClassSpecifierString:
      return toClientReflType<const char *>(C);
    case reflenums::clang__VarDecl::getStorageClassSpecifierString:
      return toClientReflType<const char *>(C);
    case reflenums::clang__VarDecl::getStorageClassSpecifierString:
      return toClientReflType<const char *>(C);
    case reflenums::clang__VarDecl::Create:
      return toClientReflType<class clang::VarDecl *>(C);
    case reflenums::clang__VarDecl::Create1:
      return toClientReflType<class clang::VarDecl *>(C);
    case reflenums::clang__VarDecl::CreateDeserialized:
      return toClientReflType<class clang::VarDecl *>(C);
    case reflenums::clang__VarDecl::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__VarDecl::getStorageClass:
      return toClientReflType<enum clang::StorageClass>(C);
    case reflenums::clang__VarDecl::getStorageClass:
      return toClientReflType<enum clang::StorageClass>(C);
    case reflenums::clang__VarDecl::getStorageClass:
      return toClientReflType<enum clang::StorageClass>(C);
    case reflenums::clang__VarDecl::getTSCSpec:
      return toClientReflType<enum clang::ThreadStorageClassSpecifier>(C);
    case reflenums::clang__VarDecl::getTLSKind:
      return toClientReflType<enum clang::VarDecl::TLSKind>(C);
    case reflenums::clang__VarDecl::hasLocalStorage:
      return toClientReflType<bool>(C);
    case reflenums::clang__VarDecl::isStaticLocal:
      return toClientReflType<bool>(C);
    case reflenums::clang__VarDecl::hasExternalStorage:
      return toClientReflType<bool>(C);
    case reflenums::clang__VarDecl::hasGlobalStorage:
      return toClientReflType<bool>(C);
    case reflenums::clang__VarDecl::getStorageDuration:
      return toClientReflType<enum clang::StorageDuration>(C);
    case reflenums::clang__VarDecl::getLanguageLinkage:
      return toClientReflType<enum clang::LanguageLinkage>(C);
    case reflenums::clang__VarDecl::isExternC:
      return toClientReflType<bool>(C);
    case reflenums::clang__VarDecl::isInExternCContext:
      return toClientReflType<bool>(C);
    case reflenums::clang__VarDecl::isInExternCXXContext:
      return toClientReflType<bool>(C);
    case reflenums::clang__VarDecl::isLocalVarDecl:
      return toClientReflType<bool>(C);
    case reflenums::clang__VarDecl::isLocalVarDeclOrParm:
      return toClientReflType<bool>(C);
    case reflenums::clang__VarDecl::isFunctionOrMethodVarDecl:
      return toClientReflType<bool>(C);
    case reflenums::clang__VarDecl::isStaticDataMember:
      return toClientReflType<bool>(C);
    case reflenums::clang__VarDecl::isStaticDataMember:
      return toClientReflType<bool>(C);
    case reflenums::clang__VarDecl::getCanonicalDecl:
      return toClientReflType<const class clang::VarDecl *>(C);
    case reflenums::clang__VarDecl::getCanonicalDecl:
      return toClientReflType<const class clang::VarDecl *>(C);
    case reflenums::clang__VarDecl::isThisDeclarationADefinition:
      return toClientReflType<enum clang::VarDecl::DefinitionKind>(C);
    case reflenums::clang__VarDecl::isThisDeclarationADefinition1:
      return toClientReflType<enum clang::VarDecl::DefinitionKind>(C);
    case reflenums::clang__VarDecl::hasDefinition:
      return toClientReflType<enum clang::VarDecl::DefinitionKind>(C);
    case reflenums::clang__VarDecl::hasDefinition1:
      return toClientReflType<enum clang::VarDecl::DefinitionKind>(C);
    case reflenums::clang__VarDecl::hasDefinition1:
      return toClientReflType<enum clang::VarDecl::DefinitionKind>(C);
    case reflenums::clang__VarDecl::getActingDefinition:
      return toClientReflType<const class clang::VarDecl *>(C);
    case reflenums::clang__VarDecl::getActingDefinition:
      return toClientReflType<const class clang::VarDecl *>(C);
    case reflenums::clang__VarDecl::getDefinition:
      return toClientReflType<const class clang::VarDecl *>(C);
    case reflenums::clang__VarDecl::getDefinition:
      return toClientReflType<const class clang::VarDecl *>(C);
    case reflenums::clang__VarDecl::getDefinition1:
      return toClientReflType<const class clang::VarDecl *>(C);
    case reflenums::clang__VarDecl::isOutOfLine:
      return toClientReflType<bool>(C);
    case reflenums::clang__VarDecl::isFileVarDecl:
      return toClientReflType<bool>(C);
    case reflenums::clang__VarDecl::getAnyInitializer:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__VarDecl::getAnyInitializer1:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__VarDecl::hasInit:
      return toClientReflType<bool>(C);
    case reflenums::clang__VarDecl::getInit:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__VarDecl::getInit:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__VarDecl::getInit:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__VarDecl::getInit:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__VarDecl::isUsableInConstantExpressions:
      return toClientReflType<bool>(C);
    case reflenums::clang__VarDecl::ensureEvaluatedStmt:
      return toClientReflType<struct clang::EvaluatedStmt *>(C);
    case reflenums::clang__VarDecl::evaluateValue:
      return toClientReflType<class clang::APValue *>(C);
    case reflenums::clang__VarDecl::evaluateValue:
      return toClientReflType<class clang::APValue *>(C);
    case reflenums::clang__VarDecl::getEvaluatedValue:
      return toClientReflType<class clang::APValue *>(C);
    case reflenums::clang__VarDecl::isInitKnownICE:
      return toClientReflType<bool>(C);
    case reflenums::clang__VarDecl::isInitICE:
      return toClientReflType<bool>(C);
    case reflenums::clang__VarDecl::checkInitIsICE:
      return toClientReflType<bool>(C);
    case reflenums::clang__VarDecl::checkInitIsICE:
      return toClientReflType<bool>(C);
    case reflenums::clang__VarDecl::getInitStyle:
      return toClientReflType<enum clang::VarDecl::InitializationStyle>(C);
    case reflenums::clang__VarDecl::isDirectInit:
      return toClientReflType<bool>(C);
    case reflenums::clang__VarDecl::isThisDeclarationADemotedDefinition:
      return toClientReflType<bool>(C);
    case reflenums::clang__VarDecl::isThisDeclarationADemotedDefinition:
      return toClientReflType<bool>(C);
    case reflenums::clang__VarDecl::isExceptionVariable:
      return toClientReflType<bool>(C);
    case reflenums::clang__VarDecl::isExceptionVariable:
      return toClientReflType<bool>(C);
    case reflenums::clang__VarDecl::isNRVOVariable:
      return toClientReflType<bool>(C);
    case reflenums::clang__VarDecl::isNRVOVariable:
      return toClientReflType<bool>(C);
    case reflenums::clang__VarDecl::isCXXForRangeDecl:
      return toClientReflType<bool>(C);
    case reflenums::clang__VarDecl::isCXXForRangeDecl:
      return toClientReflType<bool>(C);
    case reflenums::clang__VarDecl::isObjCForDecl:
      return toClientReflType<bool>(C);
    case reflenums::clang__VarDecl::isObjCForDecl:
      return toClientReflType<bool>(C);
    case reflenums::clang__VarDecl::isARCPseudoStrong:
      return toClientReflType<bool>(C);
    case reflenums::clang__VarDecl::isARCPseudoStrong:
      return toClientReflType<bool>(C);
    case reflenums::clang__VarDecl::isInline:
      return toClientReflType<bool>(C);
    case reflenums::clang__VarDecl::isInlineSpecified:
      return toClientReflType<bool>(C);
    case reflenums::clang__VarDecl::isInlineSpecified:
      return toClientReflType<bool>(C);
    case reflenums::clang__VarDecl::isInlineSpecified:
      return toClientReflType<bool>(C);
    case reflenums::clang__VarDecl::isConstexpr:
      return toClientReflType<bool>(C);
    case reflenums::clang__VarDecl::isConstexpr:
      return toClientReflType<bool>(C);
    case reflenums::clang__VarDecl::isInitCapture:
      return toClientReflType<bool>(C);
    case reflenums::clang__VarDecl::isInitCapture:
      return toClientReflType<bool>(C);
    case reflenums::clang__VarDecl::isPreviousDeclInSameBlockScope:
      return toClientReflType<bool>(C);
    case reflenums::clang__VarDecl::isPreviousDeclInSameBlockScope:
      return toClientReflType<bool>(C);
    case reflenums::clang__VarDecl::getTemplateInstantiationPattern:
      return toClientReflType<class clang::VarDecl *>(C);
    case reflenums::clang__VarDecl::getInstantiatedFromStaticDataMember:
      return toClientReflType<class clang::VarDecl *>(C);
    case reflenums::clang__VarDecl::getTemplateSpecializationKind:
      return toClientReflType<enum clang::TemplateSpecializationKind>(C);
    case reflenums::clang__VarDecl::getPointOfInstantiation:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__VarDecl::getMemberSpecializationInfo:
      return toClientReflType<class clang::MemberSpecializationInfo *>(C);
    case reflenums::clang__VarDecl::getMemberSpecializationInfo:
      return toClientReflType<class clang::MemberSpecializationInfo *>(C);
    case reflenums::clang__VarDecl::getMemberSpecializationInfo:
      return toClientReflType<class clang::MemberSpecializationInfo *>(C);
    case reflenums::clang__VarDecl::getDescribedVarTemplate:
      return toClientReflType<class clang::VarTemplateDecl *>(C);
    case reflenums::clang__VarDecl::getDescribedVarTemplate:
      return toClientReflType<class clang::VarTemplateDecl *>(C);
    case reflenums::clang__VarDecl::isKnownToBeDefined:
      return toClientReflType<bool>(C);
    case reflenums::clang__VarDecl::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__VarDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__VarDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__VarDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__VarDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__VarDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__VarDecl::classofKind:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__ImplicitParamDecl:
  switch (static_cast<reflenums::clang__ImplicitParamDecl::memnames>(MemNum)) {
    case reflenums::clang__ImplicitParamDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ImplicitParamDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ImplicitParamDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ImplicitParamDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ImplicitParamDecl::Create:
      return toClientReflType<class clang::ImplicitParamDecl *>(C);
    case reflenums::clang__ImplicitParamDecl::Create1:
      return toClientReflType<class clang::ImplicitParamDecl *>(C);
    case reflenums::clang__ImplicitParamDecl::CreateDeserialized:
      return toClientReflType<class clang::ImplicitParamDecl *>(C);
    case reflenums::clang__ImplicitParamDecl::CreateDeserialized:
      return toClientReflType<class clang::ImplicitParamDecl *>(C);
    case reflenums::clang__ImplicitParamDecl::CreateDeserialized:
      return toClientReflType<class clang::ImplicitParamDecl *>(C);
    case reflenums::clang__ImplicitParamDecl::getParameterKind:
      return toClientReflType<enum clang::ImplicitParamDecl::ImplicitParamKind>(C);
    case reflenums::clang__ImplicitParamDecl::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ImplicitParamDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ImplicitParamDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ImplicitParamDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ImplicitParamDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ImplicitParamDecl::classofKind:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__ParmVarDecl:
  switch (static_cast<reflenums::clang__ParmVarDecl::memnames>(MemNum)) {
    case reflenums::clang__ParmVarDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ParmVarDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ParmVarDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ParmVarDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ParmVarDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ParmVarDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ParmVarDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ParmVarDecl::Create:
      return toClientReflType<class clang::ParmVarDecl *>(C);
    case reflenums::clang__ParmVarDecl::CreateDeserialized:
      return toClientReflType<class clang::ParmVarDecl *>(C);
    case reflenums::clang__ParmVarDecl::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__ParmVarDecl::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__ParmVarDecl::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__ParmVarDecl::isObjCMethodParameter:
      return toClientReflType<bool>(C);
    case reflenums::clang__ParmVarDecl::getFunctionScopeDepth:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ParmVarDecl::getFunctionScopeIndex:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ParmVarDecl::getObjCDeclQualifier:
      return toClientReflType<enum clang::Decl::ObjCDeclQualifier>(C);
    case reflenums::clang__ParmVarDecl::getObjCDeclQualifier:
      return toClientReflType<enum clang::Decl::ObjCDeclQualifier>(C);
    case reflenums::clang__ParmVarDecl::isKNRPromoted:
      return toClientReflType<bool>(C);
    case reflenums::clang__ParmVarDecl::isKNRPromoted:
      return toClientReflType<bool>(C);
    case reflenums::clang__ParmVarDecl::isKNRPromoted:
      return toClientReflType<bool>(C);
    case reflenums::clang__ParmVarDecl::getDefaultArg:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__ParmVarDecl::getDefaultArg:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__ParmVarDecl::getDefaultArgRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__ParmVarDecl::getDefaultArgRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__ParmVarDecl::getDefaultArgRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__ParmVarDecl::getUninstantiatedDefaultArg:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__ParmVarDecl::hasDefaultArg:
      return toClientReflType<bool>(C);
    case reflenums::clang__ParmVarDecl::hasUnparsedDefaultArg:
      return toClientReflType<bool>(C);
    case reflenums::clang__ParmVarDecl::hasUninstantiatedDefaultArg:
      return toClientReflType<bool>(C);
    case reflenums::clang__ParmVarDecl::hasUninstantiatedDefaultArg:
      return toClientReflType<bool>(C);
    case reflenums::clang__ParmVarDecl::hasInheritedDefaultArg:
      return toClientReflType<bool>(C);
    case reflenums::clang__ParmVarDecl::hasInheritedDefaultArg:
      return toClientReflType<bool>(C);
    case reflenums::clang__ParmVarDecl::getOriginalType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ParmVarDecl::isParameterPack:
      return toClientReflType<bool>(C);
    case reflenums::clang__ParmVarDecl::isParameterPack:
      return toClientReflType<bool>(C);
    case reflenums::clang__ParmVarDecl::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ParmVarDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ParmVarDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ParmVarDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ParmVarDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ParmVarDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ParmVarDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ParmVarDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ParmVarDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ParmVarDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ParmVarDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ParmVarDecl::classofKind:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__FunctionDecl:
  switch (static_cast<reflenums::clang__FunctionDecl::memnames>(MemNum)) {
    case reflenums::clang__FunctionDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionDecl::getPreviousDecl:
      return toClientReflType<const class clang::FunctionDecl *>(C);
    case reflenums::clang__FunctionDecl::getPreviousDecl:
      return toClientReflType<const class clang::FunctionDecl *>(C);
    case reflenums::clang__FunctionDecl::getFirstDecl:
      return toClientReflType<const class clang::FunctionDecl *>(C);
    case reflenums::clang__FunctionDecl::getFirstDecl:
      return toClientReflType<const class clang::FunctionDecl *>(C);
    case reflenums::clang__FunctionDecl::getFirstDecl:
      return toClientReflType<const class clang::FunctionDecl *>(C);
    case reflenums::clang__FunctionDecl::getMostRecentDecl:
      return toClientReflType<const class clang::FunctionDecl *>(C);
    case reflenums::clang__FunctionDecl::getMostRecentDecl:
      return toClientReflType<const class clang::FunctionDecl *>(C);
    case reflenums::clang__FunctionDecl::getMostRecentDecl:
      return toClientReflType<const class clang::FunctionDecl *>(C);
    case reflenums::clang__FunctionDecl::getMostRecentDecl:
      return toClientReflType<const class clang::FunctionDecl *>(C);
    case reflenums::clang__FunctionDecl::getMostRecentDecl:
      return toClientReflType<const class clang::FunctionDecl *>(C);
    case reflenums::clang__FunctionDecl::getMostRecentDecl:
      return toClientReflType<const class clang::FunctionDecl *>(C);
    case reflenums::clang__FunctionDecl::getMostRecentDecl:
      return toClientReflType<const class clang::FunctionDecl *>(C);
    case reflenums::clang__FunctionDecl::getMostRecentDecl:
      return toClientReflType<const class clang::FunctionDecl *>(C);
    case reflenums::clang__FunctionDecl::getMostRecentDecl:
      return toClientReflType<const class clang::FunctionDecl *>(C);
    case reflenums::clang__FunctionDecl::getMostRecentDecl:
      return toClientReflType<const class clang::FunctionDecl *>(C);
    case reflenums::clang__FunctionDecl::getMostRecentDecl:
      return toClientReflType<const class clang::FunctionDecl *>(C);
    case reflenums::clang__FunctionDecl::getMostRecentDecl:
      return toClientReflType<const class clang::FunctionDecl *>(C);
    case reflenums::clang__FunctionDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionDecl::Create:
      return toClientReflType<class clang::FunctionDecl *>(C);
    case reflenums::clang__FunctionDecl::Create1:
      return toClientReflType<class clang::FunctionDecl *>(C);
    case reflenums::clang__FunctionDecl::CreateDeserialized:
      return toClientReflType<class clang::FunctionDecl *>(C);
    case reflenums::clang__FunctionDecl::getNameInfo:
      return toClientReflType<struct clang::DeclarationNameInfo>(C);
    case reflenums::clang__FunctionDecl::getNameForDiagnostic:
      return toClientReflType<void>(C);
    case reflenums::clang__FunctionDecl::getNameForDiagnostic:
      return toClientReflType<void>(C);
    case reflenums::clang__FunctionDecl::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__FunctionDecl::hasBody:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionDecl::hasBody1:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionDecl::hasTrivialBody:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionDecl::isDefined:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionDecl::isDefined1:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionDecl::isDefined1:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionDecl::getDefinition:
      return toClientReflType<const class clang::FunctionDecl *>(C);
    case reflenums::clang__FunctionDecl::getBody:
      return toClientReflType<class clang::Stmt *>(C);
    case reflenums::clang__FunctionDecl::getBody1:
      return toClientReflType<class clang::Stmt *>(C);
    case reflenums::clang__FunctionDecl::isThisDeclarationADefinition:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionDecl::doesThisDeclarationHaveABody:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionDecl::doesThisDeclarationHaveABody:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionDecl::doesThisDeclarationHaveABody:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionDecl::isVariadic:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionDecl::isVirtualAsWritten:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionDecl::isVirtualAsWritten:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionDecl::isPure:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionDecl::isPure:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionDecl::isLateTemplateParsed:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionDecl::isLateTemplateParsed:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionDecl::isTrivial:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionDecl::isTrivial:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionDecl::isTrivialForCall:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionDecl::isTrivialForCall:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionDecl::isDefaulted:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionDecl::isDefaulted:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionDecl::isExplicitlyDefaulted:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionDecl::isExplicitlyDefaulted:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionDecl::hasImplicitReturnZero:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionDecl::hasImplicitReturnZero:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionDecl::hasPrototype:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionDecl::hasWrittenPrototype:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionDecl::hasInheritedPrototype:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionDecl::hasInheritedPrototype:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionDecl::isConstexpr:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionDecl::isConstexpr:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionDecl::instantiationIsPending:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionDecl::instantiationIsPending:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionDecl::usesSEHTry:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionDecl::usesSEHTry:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionDecl::isDeleted:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionDecl::isDeletedAsWritten:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionDecl::isDeletedAsWritten:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionDecl::isMain:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionDecl::isMSVCRTEntryPoint:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionDecl::isReservedGlobalPlacementOperator:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionDecl::isReplaceableGlobalAllocationFunction:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionDecl::isDestroyingOperatorDelete:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionDecl::getLanguageLinkage:
      return toClientReflType<enum clang::LanguageLinkage>(C);
    case reflenums::clang__FunctionDecl::isExternC:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionDecl::isInExternCContext:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionDecl::isInExternCXXContext:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionDecl::isGlobal:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionDecl::isNoReturn:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionDecl::hasSkippedBody:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionDecl::hasSkippedBody:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionDecl::willHaveBody:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionDecl::willHaveBody:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionDecl::isMetaprogram:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionDecl::isMetaprogram:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionDecl::isMultiVersion:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionDecl::isMultiVersion:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionDecl::isCPUDispatchMultiVersion:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionDecl::isCPUSpecificMultiVersion:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionDecl::isCPUSpecificMultiVersion:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionDecl::isCPUSpecificMultiVersion:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionDecl::getCanonicalDecl:
      return toClientReflType<const class clang::FunctionDecl *>(C);
    case reflenums::clang__FunctionDecl::getBuiltinID:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__FunctionDecl::parameters:
      return toClientReflType<class llvm::ArrayRef<class clang::ParmVarDecl *>>(C);
    case reflenums::clang__FunctionDecl::parameters:
      return toClientReflType<class llvm::ArrayRef<class clang::ParmVarDecl *>>(C);
    case reflenums::clang__FunctionDecl::parameters:
      return toClientReflType<class llvm::ArrayRef<class clang::ParmVarDecl *>>(C);
    case reflenums::clang__FunctionDecl::parameters:
      return toClientReflType<class llvm::ArrayRef<class clang::ParmVarDecl *>>(C);
    case reflenums::clang__FunctionDecl::param_empty:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionDecl::param_empty:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionDecl::param_empty:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionDecl::param_empty:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionDecl::param_empty:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionDecl::param_size:
      return toClientReflType<unsigned long>(C);
    case reflenums::clang__FunctionDecl::getNumParams:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__FunctionDecl::getParamDecl:
      return toClientReflType<const class clang::ParmVarDecl *>(C);
    case reflenums::clang__FunctionDecl::getParamDecl:
      return toClientReflType<const class clang::ParmVarDecl *>(C);
    case reflenums::clang__FunctionDecl::getParamDecl:
      return toClientReflType<const class clang::ParmVarDecl *>(C);
    case reflenums::clang__FunctionDecl::getMinRequiredArguments:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__FunctionDecl::getReturnType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__FunctionDecl::getReturnTypeSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__FunctionDecl::getExceptionSpecSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__FunctionDecl::getCallResultType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__FunctionDecl::getUnusedResultAttr:
      return toClientReflType<const class clang::Attr *>(C);
    case reflenums::clang__FunctionDecl::hasUnusedResultAttr:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionDecl::getStorageClass:
      return toClientReflType<enum clang::StorageClass>(C);
    case reflenums::clang__FunctionDecl::isInlineSpecified:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionDecl::isInlineSpecified:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionDecl::isInlineSpecified:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionDecl::isInlined:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionDecl::isInlineDefinitionExternallyVisible:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionDecl::isMSExternInline:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionDecl::doesDeclarationForceExternallyVisibleDefinition:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionDecl::isOverloadedOperator:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionDecl::getOverloadedOperator:
      return toClientReflType<enum clang::OverloadedOperatorKind>(C);
    case reflenums::clang__FunctionDecl::getLiteralIdentifier:
      return toClientReflType<const class clang::IdentifierInfo *>(C);
    case reflenums::clang__FunctionDecl::getInstantiatedFromMemberFunction:
      return toClientReflType<class clang::FunctionDecl *>(C);
    case reflenums::clang__FunctionDecl::getTemplatedKind:
      return toClientReflType<enum clang::FunctionDecl::TemplatedKind>(C);
    case reflenums::clang__FunctionDecl::getMemberSpecializationInfo:
      return toClientReflType<class clang::MemberSpecializationInfo *>(C);
    case reflenums::clang__FunctionDecl::getMemberSpecializationInfo:
      return toClientReflType<class clang::MemberSpecializationInfo *>(C);
    case reflenums::clang__FunctionDecl::getDescribedFunctionTemplate:
      return toClientReflType<class clang::FunctionTemplateDecl *>(C);
    case reflenums::clang__FunctionDecl::getDescribedFunctionTemplate:
      return toClientReflType<class clang::FunctionTemplateDecl *>(C);
    case reflenums::clang__FunctionDecl::isFunctionTemplateSpecialization:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionDecl::getClassScopeSpecializationPattern:
      return toClientReflType<class clang::FunctionDecl *>(C);
    case reflenums::clang__FunctionDecl::getTemplateSpecializationInfo:
      return toClientReflType<class clang::FunctionTemplateSpecializationInfo *>(C);
    case reflenums::clang__FunctionDecl::isImplicitlyInstantiable:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionDecl::isTemplateInstantiation:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionDecl::getTemplateInstantiationPattern:
      return toClientReflType<class clang::FunctionDecl *>(C);
    case reflenums::clang__FunctionDecl::getPrimaryTemplate:
      return toClientReflType<class clang::FunctionTemplateDecl *>(C);
    case reflenums::clang__FunctionDecl::getTemplateSpecializationArgs:
      return toClientReflType<const class clang::TemplateArgumentList *>(C);
    case reflenums::clang__FunctionDecl::getTemplateSpecializationArgsAsWritten:
      return toClientReflType<const struct clang::ASTTemplateArgumentListInfo *>(C);
    case reflenums::clang__FunctionDecl::getTemplateSpecializationArgsAsWritten:
      return toClientReflType<const struct clang::ASTTemplateArgumentListInfo *>(C);
    case reflenums::clang__FunctionDecl::getTemplateSpecializationArgsAsWritten:
      return toClientReflType<const struct clang::ASTTemplateArgumentListInfo *>(C);
    case reflenums::clang__FunctionDecl::getDependentSpecializationInfo:
      return toClientReflType<class clang::DependentFunctionTemplateSpecializationInfo *>(C);
    case reflenums::clang__FunctionDecl::getTemplateSpecializationKind:
      return toClientReflType<enum clang::TemplateSpecializationKind>(C);
    case reflenums::clang__FunctionDecl::getTemplateSpecializationKind:
      return toClientReflType<enum clang::TemplateSpecializationKind>(C);
    case reflenums::clang__FunctionDecl::getPointOfInstantiation:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__FunctionDecl::isOutOfLine:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionDecl::getMemoryFunctionKind:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__FunctionDecl::getMemoryFunctionKind:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__FunctionDecl::getODRHash:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__FunctionDecl::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionDecl::classofKind:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__FieldDecl:
  switch (static_cast<reflenums::clang__FieldDecl::memnames>(MemNum)) {
    case reflenums::clang__FieldDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FieldDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FieldDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FieldDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FieldDecl::getFirstDecl:
      return toClientReflType<const class clang::FieldDecl *>(C);
    case reflenums::clang__FieldDecl::getFirstDecl:
      return toClientReflType<const class clang::FieldDecl *>(C);
    case reflenums::clang__FieldDecl::getFirstDecl:
      return toClientReflType<const class clang::FieldDecl *>(C);
    case reflenums::clang__FieldDecl::getFirstDecl:
      return toClientReflType<const class clang::FieldDecl *>(C);
    case reflenums::clang__FieldDecl::getFirstDecl:
      return toClientReflType<const class clang::FieldDecl *>(C);
    case reflenums::clang__FieldDecl::getFirstDecl:
      return toClientReflType<const class clang::FieldDecl *>(C);
    case reflenums::clang__FieldDecl::getFirstDecl:
      return toClientReflType<const class clang::FieldDecl *>(C);
    case reflenums::clang__FieldDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FieldDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FieldDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FieldDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FieldDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FieldDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FieldDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FieldDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FieldDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FieldDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FieldDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FieldDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FieldDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FieldDecl::Create:
      return toClientReflType<class clang::FieldDecl *>(C);
    case reflenums::clang__FieldDecl::Create1:
      return toClientReflType<class clang::FieldDecl *>(C);
    case reflenums::clang__FieldDecl::CreateDeserialized:
      return toClientReflType<class clang::FieldDecl *>(C);
    case reflenums::clang__FieldDecl::getFieldIndex:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__FieldDecl::isMutable:
      return toClientReflType<bool>(C);
    case reflenums::clang__FieldDecl::isBitField:
      return toClientReflType<bool>(C);
    case reflenums::clang__FieldDecl::isUnnamedBitfield:
      return toClientReflType<bool>(C);
    case reflenums::clang__FieldDecl::isAnonymousStructOrUnion:
      return toClientReflType<bool>(C);
    case reflenums::clang__FieldDecl::getBitWidth:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__FieldDecl::getBitWidthValue:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__FieldDecl::getBitWidthValue:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__FieldDecl::getBitWidthValue:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__FieldDecl::isZeroLengthBitField:
      return toClientReflType<bool>(C);
    case reflenums::clang__FieldDecl::getInClassInitStyle:
      return toClientReflType<enum clang::InClassInitStyle>(C);
    case reflenums::clang__FieldDecl::hasInClassInitializer:
      return toClientReflType<bool>(C);
    case reflenums::clang__FieldDecl::getInClassInitializer:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__FieldDecl::getInClassInitializer:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__FieldDecl::getInClassInitializer:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__FieldDecl::hasCapturedVLAType:
      return toClientReflType<bool>(C);
    case reflenums::clang__FieldDecl::getCapturedVLAType:
      return toClientReflType<const class clang::VariableArrayType *>(C);
    case reflenums::clang__FieldDecl::getCapturedVLAType:
      return toClientReflType<const class clang::VariableArrayType *>(C);
    case reflenums::clang__FieldDecl::getParent:
      return toClientReflType<const class clang::RecordDecl *>(C);
    case reflenums::clang__FieldDecl::getParent:
      return toClientReflType<const class clang::RecordDecl *>(C);
    case reflenums::clang__FieldDecl::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__FieldDecl::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__FieldDecl::getCanonicalDecl:
      return toClientReflType<const class clang::FieldDecl *>(C);
    case reflenums::clang__FieldDecl::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__FieldDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__FieldDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__FieldDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__FieldDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__FieldDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__FieldDecl::classofKind:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__EnumConstantDecl:
  switch (static_cast<reflenums::clang__EnumConstantDecl::memnames>(MemNum)) {
    case reflenums::clang__EnumConstantDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__EnumConstantDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__EnumConstantDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__EnumConstantDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__EnumConstantDecl::getFirstDecl:
      return toClientReflType<const class clang::EnumConstantDecl *>(C);
    case reflenums::clang__EnumConstantDecl::getFirstDecl:
      return toClientReflType<const class clang::EnumConstantDecl *>(C);
    case reflenums::clang__EnumConstantDecl::getFirstDecl:
      return toClientReflType<const class clang::EnumConstantDecl *>(C);
    case reflenums::clang__EnumConstantDecl::getFirstDecl:
      return toClientReflType<const class clang::EnumConstantDecl *>(C);
    case reflenums::clang__EnumConstantDecl::getFirstDecl:
      return toClientReflType<const class clang::EnumConstantDecl *>(C);
    case reflenums::clang__EnumConstantDecl::getFirstDecl:
      return toClientReflType<const class clang::EnumConstantDecl *>(C);
    case reflenums::clang__EnumConstantDecl::getFirstDecl:
      return toClientReflType<const class clang::EnumConstantDecl *>(C);
    case reflenums::clang__EnumConstantDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__EnumConstantDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__EnumConstantDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__EnumConstantDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__EnumConstantDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__EnumConstantDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__EnumConstantDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__EnumConstantDecl::Create:
      return toClientReflType<class clang::EnumConstantDecl *>(C);
    case reflenums::clang__EnumConstantDecl::CreateDeserialized:
      return toClientReflType<class clang::EnumConstantDecl *>(C);
    case reflenums::clang__EnumConstantDecl::getInitExpr:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__EnumConstantDecl::getInitExpr:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__EnumConstantDecl::getInitVal:
      return toClientReflType<const class llvm::APSInt &>(C);
    case reflenums::clang__EnumConstantDecl::getInitVal:
      return toClientReflType<const class llvm::APSInt &>(C);
    case reflenums::clang__EnumConstantDecl::getInitVal:
      return toClientReflType<const class llvm::APSInt &>(C);
    case reflenums::clang__EnumConstantDecl::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__EnumConstantDecl::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__EnumConstantDecl::getCanonicalDecl:
      return toClientReflType<const class clang::EnumConstantDecl *>(C);
    case reflenums::clang__EnumConstantDecl::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__EnumConstantDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__EnumConstantDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__EnumConstantDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__EnumConstantDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__EnumConstantDecl::classofKind:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__IndirectFieldDecl:
  switch (static_cast<reflenums::clang__IndirectFieldDecl::memnames>(MemNum)) {
    case reflenums::clang__IndirectFieldDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__IndirectFieldDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__IndirectFieldDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__IndirectFieldDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__IndirectFieldDecl::getFirstDecl:
      return toClientReflType<const class clang::IndirectFieldDecl *>(C);
    case reflenums::clang__IndirectFieldDecl::getFirstDecl:
      return toClientReflType<const class clang::IndirectFieldDecl *>(C);
    case reflenums::clang__IndirectFieldDecl::getFirstDecl:
      return toClientReflType<const class clang::IndirectFieldDecl *>(C);
    case reflenums::clang__IndirectFieldDecl::getFirstDecl:
      return toClientReflType<const class clang::IndirectFieldDecl *>(C);
    case reflenums::clang__IndirectFieldDecl::getFirstDecl:
      return toClientReflType<const class clang::IndirectFieldDecl *>(C);
    case reflenums::clang__IndirectFieldDecl::getFirstDecl:
      return toClientReflType<const class clang::IndirectFieldDecl *>(C);
    case reflenums::clang__IndirectFieldDecl::getFirstDecl:
      return toClientReflType<const class clang::IndirectFieldDecl *>(C);
    case reflenums::clang__IndirectFieldDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__IndirectFieldDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__IndirectFieldDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__IndirectFieldDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__IndirectFieldDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__IndirectFieldDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__IndirectFieldDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__IndirectFieldDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__IndirectFieldDecl::CreateDeserialized:
      return toClientReflType<class clang::IndirectFieldDecl *>(C);
    case reflenums::clang__IndirectFieldDecl::CreateDeserialized:
      return toClientReflType<class clang::IndirectFieldDecl *>(C);
    case reflenums::clang__IndirectFieldDecl::chain:
      return toClientReflType<class llvm::ArrayRef<class clang::NamedDecl *>>(C);
    case reflenums::clang__IndirectFieldDecl::chain:
      return toClientReflType<class llvm::ArrayRef<class clang::NamedDecl *>>(C);
    case reflenums::clang__IndirectFieldDecl::chain:
      return toClientReflType<class llvm::ArrayRef<class clang::NamedDecl *>>(C);
    case reflenums::clang__IndirectFieldDecl::getChainingSize:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__IndirectFieldDecl::getAnonField:
      return toClientReflType<class clang::FieldDecl *>(C);
    case reflenums::clang__IndirectFieldDecl::getVarDecl:
      return toClientReflType<class clang::VarDecl *>(C);
    case reflenums::clang__IndirectFieldDecl::getVarDecl:
      return toClientReflType<class clang::VarDecl *>(C);
    case reflenums::clang__IndirectFieldDecl::getCanonicalDecl:
      return toClientReflType<const class clang::IndirectFieldDecl *>(C);
    case reflenums::clang__IndirectFieldDecl::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__IndirectFieldDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__IndirectFieldDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__IndirectFieldDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__IndirectFieldDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__IndirectFieldDecl::classofKind:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__TypeDecl:
  switch (static_cast<reflenums::clang__TypeDecl::memnames>(MemNum)) {
    case reflenums::clang__TypeDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TypeDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TypeDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TypeDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TypeDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TypeDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TypeDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TypeDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TypeDecl::getTypeForDecl:
      return toClientReflType<const class clang::Type *>(C);
    case reflenums::clang__TypeDecl::getTypeForDecl:
      return toClientReflType<const class clang::Type *>(C);
    case reflenums::clang__TypeDecl::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__TypeDecl::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__TypeDecl::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__TypeDecl::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__TypeDecl::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__TypeDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__TypeDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__TypeDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__TypeDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__TypeDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__TypeDecl::classofKind:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__TypedefNameDecl:
  switch (static_cast<reflenums::clang__TypedefNameDecl::memnames>(MemNum)) {
    case reflenums::clang__TypedefNameDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TypedefNameDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TypedefNameDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TypedefNameDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TypedefNameDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TypedefNameDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TypedefNameDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TypedefNameDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TypedefNameDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TypedefNameDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TypedefNameDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TypedefNameDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TypedefNameDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TypedefNameDecl::getPreviousDecl:
      return toClientReflType<const class clang::TypedefNameDecl *>(C);
    case reflenums::clang__TypedefNameDecl::getPreviousDecl:
      return toClientReflType<const class clang::TypedefNameDecl *>(C);
    case reflenums::clang__TypedefNameDecl::getFirstDecl:
      return toClientReflType<const class clang::TypedefNameDecl *>(C);
    case reflenums::clang__TypedefNameDecl::getFirstDecl:
      return toClientReflType<const class clang::TypedefNameDecl *>(C);
    case reflenums::clang__TypedefNameDecl::getFirstDecl:
      return toClientReflType<const class clang::TypedefNameDecl *>(C);
    case reflenums::clang__TypedefNameDecl::getMostRecentDecl:
      return toClientReflType<const class clang::TypedefNameDecl *>(C);
    case reflenums::clang__TypedefNameDecl::getMostRecentDecl:
      return toClientReflType<const class clang::TypedefNameDecl *>(C);
    case reflenums::clang__TypedefNameDecl::getMostRecentDecl:
      return toClientReflType<const class clang::TypedefNameDecl *>(C);
    case reflenums::clang__TypedefNameDecl::getMostRecentDecl:
      return toClientReflType<const class clang::TypedefNameDecl *>(C);
    case reflenums::clang__TypedefNameDecl::getMostRecentDecl:
      return toClientReflType<const class clang::TypedefNameDecl *>(C);
    case reflenums::clang__TypedefNameDecl::getMostRecentDecl:
      return toClientReflType<const class clang::TypedefNameDecl *>(C);
    case reflenums::clang__TypedefNameDecl::getMostRecentDecl:
      return toClientReflType<const class clang::TypedefNameDecl *>(C);
    case reflenums::clang__TypedefNameDecl::getMostRecentDecl:
      return toClientReflType<const class clang::TypedefNameDecl *>(C);
    case reflenums::clang__TypedefNameDecl::getMostRecentDecl:
      return toClientReflType<const class clang::TypedefNameDecl *>(C);
    case reflenums::clang__TypedefNameDecl::getMostRecentDecl:
      return toClientReflType<const class clang::TypedefNameDecl *>(C);
    case reflenums::clang__TypedefNameDecl::getMostRecentDecl:
      return toClientReflType<const class clang::TypedefNameDecl *>(C);
    case reflenums::clang__TypedefNameDecl::getMostRecentDecl:
      return toClientReflType<const class clang::TypedefNameDecl *>(C);
    case reflenums::clang__TypedefNameDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TypedefNameDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TypedefNameDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TypedefNameDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TypedefNameDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TypedefNameDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TypedefNameDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TypedefNameDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TypedefNameDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TypedefNameDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TypedefNameDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TypedefNameDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TypedefNameDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TypedefNameDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TypedefNameDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TypedefNameDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TypedefNameDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TypedefNameDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TypedefNameDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TypedefNameDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TypedefNameDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TypedefNameDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TypedefNameDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TypedefNameDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TypedefNameDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TypedefNameDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TypedefNameDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TypedefNameDecl::isModed:
      return toClientReflType<bool>(C);
    case reflenums::clang__TypedefNameDecl::getTypeSourceInfo:
      return toClientReflType<class clang::TypeSourceInfo *>(C);
    case reflenums::clang__TypedefNameDecl::getUnderlyingType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__TypedefNameDecl::getUnderlyingType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__TypedefNameDecl::getUnderlyingType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__TypedefNameDecl::getUnderlyingType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__TypedefNameDecl::getCanonicalDecl:
      return toClientReflType<const class clang::TypedefNameDecl *>(C);
    case reflenums::clang__TypedefNameDecl::getAnonDeclWithTypedefName:
      return toClientReflType<class clang::TagDecl *>(C);
    case reflenums::clang__TypedefNameDecl::isTransparentTag:
      return toClientReflType<bool>(C);
    case reflenums::clang__TypedefNameDecl::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__TypedefNameDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__TypedefNameDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__TypedefNameDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__TypedefNameDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__TypedefNameDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__TypedefNameDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__TypedefNameDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__TypedefNameDecl::classofKind:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__TypedefDecl:
  switch (static_cast<reflenums::clang__TypedefDecl::memnames>(MemNum)) {
    case reflenums::clang__TypedefDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TypedefDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TypedefDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TypedefDecl::Create:
      return toClientReflType<class clang::TypedefDecl *>(C);
    case reflenums::clang__TypedefDecl::CreateDeserialized:
      return toClientReflType<class clang::TypedefDecl *>(C);
    case reflenums::clang__TypedefDecl::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__TypedefDecl::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__TypedefDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__TypedefDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__TypedefDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__TypedefDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__TypedefDecl::classofKind:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__TypeAliasDecl:
  switch (static_cast<reflenums::clang__TypeAliasDecl::memnames>(MemNum)) {
    case reflenums::clang__TypeAliasDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TypeAliasDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TypeAliasDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TypeAliasDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TypeAliasDecl::Create:
      return toClientReflType<class clang::TypeAliasDecl *>(C);
    case reflenums::clang__TypeAliasDecl::CreateDeserialized:
      return toClientReflType<class clang::TypeAliasDecl *>(C);
    case reflenums::clang__TypeAliasDecl::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__TypeAliasDecl::getDescribedAliasTemplate:
      return toClientReflType<class clang::TypeAliasTemplateDecl *>(C);
    case reflenums::clang__TypeAliasDecl::getDescribedAliasTemplate:
      return toClientReflType<class clang::TypeAliasTemplateDecl *>(C);
    case reflenums::clang__TypeAliasDecl::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__TypeAliasDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__TypeAliasDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__TypeAliasDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__TypeAliasDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__TypeAliasDecl::classofKind:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__TagDecl:
  switch (static_cast<reflenums::clang__TagDecl::memnames>(MemNum)) {
    case reflenums::clang__TagDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TagDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TagDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TagDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TagDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TagDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TagDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TagDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TagDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TagDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TagDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TagDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TagDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TagDecl::getPreviousDecl:
      return toClientReflType<const class clang::TagDecl *>(C);
    case reflenums::clang__TagDecl::getPreviousDecl:
      return toClientReflType<const class clang::TagDecl *>(C);
    case reflenums::clang__TagDecl::getFirstDecl:
      return toClientReflType<const class clang::TagDecl *>(C);
    case reflenums::clang__TagDecl::getFirstDecl:
      return toClientReflType<const class clang::TagDecl *>(C);
    case reflenums::clang__TagDecl::getFirstDecl:
      return toClientReflType<const class clang::TagDecl *>(C);
    case reflenums::clang__TagDecl::getMostRecentDecl:
      return toClientReflType<const class clang::TagDecl *>(C);
    case reflenums::clang__TagDecl::getMostRecentDecl:
      return toClientReflType<const class clang::TagDecl *>(C);
    case reflenums::clang__TagDecl::getMostRecentDecl:
      return toClientReflType<const class clang::TagDecl *>(C);
    case reflenums::clang__TagDecl::getMostRecentDecl:
      return toClientReflType<const class clang::TagDecl *>(C);
    case reflenums::clang__TagDecl::getMostRecentDecl:
      return toClientReflType<const class clang::TagDecl *>(C);
    case reflenums::clang__TagDecl::getMostRecentDecl:
      return toClientReflType<const class clang::TagDecl *>(C);
    case reflenums::clang__TagDecl::getMostRecentDecl:
      return toClientReflType<const class clang::TagDecl *>(C);
    case reflenums::clang__TagDecl::getMostRecentDecl:
      return toClientReflType<const class clang::TagDecl *>(C);
    case reflenums::clang__TagDecl::getMostRecentDecl:
      return toClientReflType<const class clang::TagDecl *>(C);
    case reflenums::clang__TagDecl::getMostRecentDecl:
      return toClientReflType<const class clang::TagDecl *>(C);
    case reflenums::clang__TagDecl::getMostRecentDecl:
      return toClientReflType<const class clang::TagDecl *>(C);
    case reflenums::clang__TagDecl::getMostRecentDecl:
      return toClientReflType<const class clang::TagDecl *>(C);
    case reflenums::clang__TagDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TagDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TagDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TagDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TagDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TagDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TagDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TagDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TagDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TagDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TagDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TagDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TagDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TagDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TagDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TagDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TagDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TagDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TagDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TagDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TagDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TagDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TagDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TagDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TagDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TagDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TagDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TagDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TagDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TagDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TagDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TagDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TagDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TagDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TagDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TagDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TagDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TagDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TagDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TagDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TagDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TagDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TagDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TagDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TagDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TagDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TagDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TagDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TagDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TagDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TagDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TagDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TagDecl::getBraceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__TagDecl::getBraceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__TagDecl::getInnerLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__TagDecl::getOuterLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__TagDecl::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__TagDecl::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__TagDecl::getCanonicalDecl:
      return toClientReflType<const class clang::TagDecl *>(C);
    case reflenums::clang__TagDecl::isThisDeclarationADefinition:
      return toClientReflType<bool>(C);
    case reflenums::clang__TagDecl::isCompleteDefinition:
      return toClientReflType<bool>(C);
    case reflenums::clang__TagDecl::isCompleteDefinitionRequired:
      return toClientReflType<bool>(C);
    case reflenums::clang__TagDecl::isBeingDefined:
      return toClientReflType<bool>(C);
    case reflenums::clang__TagDecl::isEmbeddedInDeclarator:
      return toClientReflType<bool>(C);
    case reflenums::clang__TagDecl::isEmbeddedInDeclarator:
      return toClientReflType<bool>(C);
    case reflenums::clang__TagDecl::isFreeStanding:
      return toClientReflType<bool>(C);
    case reflenums::clang__TagDecl::isFreeStanding:
      return toClientReflType<bool>(C);
    case reflenums::clang__TagDecl::isDependentType:
      return toClientReflType<bool>(C);
    case reflenums::clang__TagDecl::isDependentType:
      return toClientReflType<bool>(C);
    case reflenums::clang__TagDecl::getDefinition:
      return toClientReflType<class clang::TagDecl *>(C);
    case reflenums::clang__TagDecl::getDefinition:
      return toClientReflType<class clang::TagDecl *>(C);
    case reflenums::clang__TagDecl::getDefinition:
      return toClientReflType<class clang::TagDecl *>(C);
    case reflenums::clang__TagDecl::getKindName:
      return toClientReflType<const char *>(C);
    case reflenums::clang__TagDecl::getTagKind:
      return toClientReflType<enum clang::TagTypeKind>(C);
    case reflenums::clang__TagDecl::getTagKind:
      return toClientReflType<enum clang::TagTypeKind>(C);
    case reflenums::clang__TagDecl::isStruct:
      return toClientReflType<bool>(C);
    case reflenums::clang__TagDecl::isInterface:
      return toClientReflType<bool>(C);
    case reflenums::clang__TagDecl::isClass:
      return toClientReflType<bool>(C);
    case reflenums::clang__TagDecl::isUnion:
      return toClientReflType<bool>(C);
    case reflenums::clang__TagDecl::isEnum:
      return toClientReflType<bool>(C);
    case reflenums::clang__TagDecl::hasNameForLinkage:
      return toClientReflType<bool>(C);
    case reflenums::clang__TagDecl::getTypedefNameForAnonDecl:
      return toClientReflType<class clang::TypedefNameDecl *>(C);
    case reflenums::clang__TagDecl::getTypedefNameForAnonDecl:
      return toClientReflType<class clang::TypedefNameDecl *>(C);
    case reflenums::clang__TagDecl::getQualifier:
      return toClientReflType<class clang::NestedNameSpecifier *>(C);
    case reflenums::clang__TagDecl::getQualifierLoc:
      return toClientReflType<class clang::NestedNameSpecifierLoc>(C);
    case reflenums::clang__TagDecl::getQualifierLoc:
      return toClientReflType<class clang::NestedNameSpecifierLoc>(C);
    case reflenums::clang__TagDecl::getNumTemplateParameterLists:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__TagDecl::getTemplateParameterList:
      return toClientReflType<class clang::TemplateParameterList *>(C);
    case reflenums::clang__TagDecl::getTemplateParameterList:
      return toClientReflType<class clang::TemplateParameterList *>(C);
    case reflenums::clang__TagDecl::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__TagDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__TagDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__TagDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__TagDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__TagDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__TagDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__TagDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__TagDecl::classofKind:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__EnumDecl:
  switch (static_cast<reflenums::clang__EnumDecl::memnames>(MemNum)) {
    case reflenums::clang__EnumDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__EnumDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__EnumDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__EnumDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__EnumDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__EnumDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__EnumDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__EnumDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__EnumDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__EnumDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__EnumDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__EnumDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__EnumDecl::getCanonicalDecl:
      return toClientReflType<const class clang::EnumDecl *>(C);
    case reflenums::clang__EnumDecl::getCanonicalDecl:
      return toClientReflType<const class clang::EnumDecl *>(C);
    case reflenums::clang__EnumDecl::getPreviousDecl:
      return toClientReflType<const class clang::EnumDecl *>(C);
    case reflenums::clang__EnumDecl::getPreviousDecl:
      return toClientReflType<const class clang::EnumDecl *>(C);
    case reflenums::clang__EnumDecl::getMostRecentDecl:
      return toClientReflType<const class clang::EnumDecl *>(C);
    case reflenums::clang__EnumDecl::getDefinition:
      return toClientReflType<class clang::EnumDecl *>(C);
    case reflenums::clang__EnumDecl::Create:
      return toClientReflType<class clang::EnumDecl *>(C);
    case reflenums::clang__EnumDecl::CreateDeserialized:
      return toClientReflType<class clang::EnumDecl *>(C);
    case reflenums::clang__EnumDecl::CreateDeserialized:
      return toClientReflType<class clang::EnumDecl *>(C);
    case reflenums::clang__EnumDecl::CreateDeserialized:
      return toClientReflType<class clang::EnumDecl *>(C);
    case reflenums::clang__EnumDecl::CreateDeserialized:
      return toClientReflType<class clang::EnumDecl *>(C);
    case reflenums::clang__EnumDecl::enumerators:
      return toClientReflType<class llvm::iterator_range<class clang::DeclContext::specific_decl_iterator<class clang::EnumConstantDecl> >>(C);
    case reflenums::clang__EnumDecl::enumerators:
      return toClientReflType<class llvm::iterator_range<class clang::DeclContext::specific_decl_iterator<class clang::EnumConstantDecl> >>(C);
    case reflenums::clang__EnumDecl::enumerators:
      return toClientReflType<class llvm::iterator_range<class clang::DeclContext::specific_decl_iterator<class clang::EnumConstantDecl> >>(C);
    case reflenums::clang__EnumDecl::getPromotionType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__EnumDecl::getPromotionType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__EnumDecl::getIntegerType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__EnumDecl::getIntegerType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__EnumDecl::getIntegerType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__EnumDecl::getIntegerTypeSourceInfo:
      return toClientReflType<class clang::TypeSourceInfo *>(C);
    case reflenums::clang__EnumDecl::getIntegerTypeRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__EnumDecl::getNumPositiveBits:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__EnumDecl::getNumPositiveBits:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__EnumDecl::getNumNegativeBits:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__EnumDecl::getNumNegativeBits:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__EnumDecl::isScoped:
      return toClientReflType<bool>(C);
    case reflenums::clang__EnumDecl::isScopedUsingClassTag:
      return toClientReflType<bool>(C);
    case reflenums::clang__EnumDecl::isFixed:
      return toClientReflType<bool>(C);
    case reflenums::clang__EnumDecl::isFixed:
      return toClientReflType<bool>(C);
    case reflenums::clang__EnumDecl::isComplete:
      return toClientReflType<bool>(C);
    case reflenums::clang__EnumDecl::isClosed:
      return toClientReflType<bool>(C);
    case reflenums::clang__EnumDecl::isClosedFlag:
      return toClientReflType<bool>(C);
    case reflenums::clang__EnumDecl::isClosedNonFlag:
      return toClientReflType<bool>(C);
    case reflenums::clang__EnumDecl::getTemplateInstantiationPattern:
      return toClientReflType<class clang::EnumDecl *>(C);
    case reflenums::clang__EnumDecl::getInstantiatedFromMemberEnum:
      return toClientReflType<class clang::EnumDecl *>(C);
    case reflenums::clang__EnumDecl::getTemplateSpecializationKind:
      return toClientReflType<enum clang::TemplateSpecializationKind>(C);
    case reflenums::clang__EnumDecl::getTemplateSpecializationKind:
      return toClientReflType<enum clang::TemplateSpecializationKind>(C);
    case reflenums::clang__EnumDecl::getMemberSpecializationInfo:
      return toClientReflType<class clang::MemberSpecializationInfo *>(C);
    case reflenums::clang__EnumDecl::getMemberSpecializationInfo:
      return toClientReflType<class clang::MemberSpecializationInfo *>(C);
    case reflenums::clang__EnumDecl::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__EnumDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__EnumDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__EnumDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__EnumDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__EnumDecl::classofKind:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__RecordDecl:
  switch (static_cast<reflenums::clang__RecordDecl::memnames>(MemNum)) {
    case reflenums::clang__RecordDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__RecordDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__RecordDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__RecordDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__RecordDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__RecordDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__RecordDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__RecordDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__RecordDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__RecordDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__RecordDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__RecordDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__RecordDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__RecordDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__RecordDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__RecordDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__RecordDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__RecordDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__RecordDecl::Create:
      return toClientReflType<class clang::RecordDecl *>(C);
    case reflenums::clang__RecordDecl::CreateDeserialized:
      return toClientReflType<class clang::RecordDecl *>(C);
    case reflenums::clang__RecordDecl::CreateDeserialized:
      return toClientReflType<class clang::RecordDecl *>(C);
    case reflenums::clang__RecordDecl::getPreviousDecl:
      return toClientReflType<const class clang::RecordDecl *>(C);
    case reflenums::clang__RecordDecl::getPreviousDecl:
      return toClientReflType<const class clang::RecordDecl *>(C);
    case reflenums::clang__RecordDecl::getMostRecentDecl:
      return toClientReflType<const class clang::RecordDecl *>(C);
    case reflenums::clang__RecordDecl::hasFlexibleArrayMember:
      return toClientReflType<bool>(C);
    case reflenums::clang__RecordDecl::hasFlexibleArrayMember:
      return toClientReflType<bool>(C);
    case reflenums::clang__RecordDecl::isAnonymousStructOrUnion:
      return toClientReflType<bool>(C);
    case reflenums::clang__RecordDecl::isAnonymousStructOrUnion:
      return toClientReflType<bool>(C);
    case reflenums::clang__RecordDecl::hasObjectMember:
      return toClientReflType<bool>(C);
    case reflenums::clang__RecordDecl::hasObjectMember:
      return toClientReflType<bool>(C);
    case reflenums::clang__RecordDecl::hasVolatileMember:
      return toClientReflType<bool>(C);
    case reflenums::clang__RecordDecl::hasVolatileMember:
      return toClientReflType<bool>(C);
    case reflenums::clang__RecordDecl::hasLoadedFieldsFromExternalStorage:
      return toClientReflType<bool>(C);
    case reflenums::clang__RecordDecl::hasLoadedFieldsFromExternalStorage:
      return toClientReflType<bool>(C);
    case reflenums::clang__RecordDecl::isNonTrivialToPrimitiveDefaultInitialize:
      return toClientReflType<bool>(C);
    case reflenums::clang__RecordDecl::isNonTrivialToPrimitiveDefaultInitialize:
      return toClientReflType<bool>(C);
    case reflenums::clang__RecordDecl::isNonTrivialToPrimitiveCopy:
      return toClientReflType<bool>(C);
    case reflenums::clang__RecordDecl::isNonTrivialToPrimitiveCopy:
      return toClientReflType<bool>(C);
    case reflenums::clang__RecordDecl::isNonTrivialToPrimitiveDestroy:
      return toClientReflType<bool>(C);
    case reflenums::clang__RecordDecl::isNonTrivialToPrimitiveDestroy:
      return toClientReflType<bool>(C);
    case reflenums::clang__RecordDecl::canPassInRegisters:
      return toClientReflType<bool>(C);
    case reflenums::clang__RecordDecl::getArgPassingRestrictions:
      return toClientReflType<enum clang::RecordDecl::ArgPassingKind>(C);
    case reflenums::clang__RecordDecl::getArgPassingRestrictions:
      return toClientReflType<enum clang::RecordDecl::ArgPassingKind>(C);
    case reflenums::clang__RecordDecl::isParamDestroyedInCallee:
      return toClientReflType<bool>(C);
    case reflenums::clang__RecordDecl::isParamDestroyedInCallee:
      return toClientReflType<bool>(C);
    case reflenums::clang__RecordDecl::isInjectedClassName:
      return toClientReflType<bool>(C);
    case reflenums::clang__RecordDecl::isLambda:
      return toClientReflType<bool>(C);
    case reflenums::clang__RecordDecl::isCapturedRecord:
      return toClientReflType<bool>(C);
    case reflenums::clang__RecordDecl::isCapturedRecord:
      return toClientReflType<bool>(C);
    case reflenums::clang__RecordDecl::getDefinition:
      return toClientReflType<class clang::RecordDecl *>(C);
    case reflenums::clang__RecordDecl::getDefinition:
      return toClientReflType<class clang::RecordDecl *>(C);
    case reflenums::clang__RecordDecl::getDefinition:
      return toClientReflType<class clang::RecordDecl *>(C);
    case reflenums::clang__RecordDecl::fields:
      return toClientReflType<class llvm::iterator_range<class clang::DeclContext::specific_decl_iterator<class clang::FieldDecl> >>(C);
    case reflenums::clang__RecordDecl::fields:
      return toClientReflType<class llvm::iterator_range<class clang::DeclContext::specific_decl_iterator<class clang::FieldDecl> >>(C);
    case reflenums::clang__RecordDecl::fields:
      return toClientReflType<class llvm::iterator_range<class clang::DeclContext::specific_decl_iterator<class clang::FieldDecl> >>(C);
    case reflenums::clang__RecordDecl::field_empty:
      return toClientReflType<bool>(C);
    case reflenums::clang__RecordDecl::field_empty:
      return toClientReflType<bool>(C);
    case reflenums::clang__RecordDecl::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__RecordDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__RecordDecl::isMsStruct:
      return toClientReflType<bool>(C);
    case reflenums::clang__RecordDecl::mayInsertExtraPadding:
      return toClientReflType<bool>(C);
    case reflenums::clang__RecordDecl::findFirstNamedDataMember:
      return toClientReflType<const class clang::FieldDecl *>(C);
    case reflenums::clang__RecordDecl::findFirstNamedDataMember:
      return toClientReflType<const class clang::FieldDecl *>(C);
    case reflenums::clang__RecordDecl::findFirstNamedDataMember:
      return toClientReflType<const class clang::FieldDecl *>(C);
    case reflenums::clang__RecordDecl::findFirstNamedDataMember:
      return toClientReflType<const class clang::FieldDecl *>(C);
    case reflenums::clang__RecordDecl::findFirstNamedDataMember:
      return toClientReflType<const class clang::FieldDecl *>(C);
    case reflenums::clang__RecordDecl::findFirstNamedDataMember:
      return toClientReflType<const class clang::FieldDecl *>(C);
    case reflenums::clang__RecordDecl::findFirstNamedDataMember:
      return toClientReflType<const class clang::FieldDecl *>(C);
    case reflenums::clang__RecordDecl::findFirstNamedDataMember:
      return toClientReflType<const class clang::FieldDecl *>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__FileScopeAsmDecl:
  switch (static_cast<reflenums::clang__FileScopeAsmDecl::memnames>(MemNum)) {
    case reflenums::clang__FileScopeAsmDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FileScopeAsmDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FileScopeAsmDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FileScopeAsmDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FileScopeAsmDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FileScopeAsmDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FileScopeAsmDecl::Create:
      return toClientReflType<class clang::FileScopeAsmDecl *>(C);
    case reflenums::clang__FileScopeAsmDecl::CreateDeserialized:
      return toClientReflType<class clang::FileScopeAsmDecl *>(C);
    case reflenums::clang__FileScopeAsmDecl::getAsmLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__FileScopeAsmDecl::getRParenLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__FileScopeAsmDecl::getRParenLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__FileScopeAsmDecl::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__FileScopeAsmDecl::getAsmString:
      return toClientReflType<const class clang::StringLiteral *>(C);
    case reflenums::clang__FileScopeAsmDecl::getAsmString:
      return toClientReflType<const class clang::StringLiteral *>(C);
    case reflenums::clang__FileScopeAsmDecl::getAsmString:
      return toClientReflType<const class clang::StringLiteral *>(C);
    case reflenums::clang__FileScopeAsmDecl::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__FileScopeAsmDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__FileScopeAsmDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__FileScopeAsmDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__FileScopeAsmDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__FileScopeAsmDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__FileScopeAsmDecl::classofKind:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__BlockDecl:
  switch (static_cast<reflenums::clang__BlockDecl::memnames>(MemNum)) {
    case reflenums::clang__BlockDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__BlockDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__BlockDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__BlockDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__BlockDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__BlockDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__BlockDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__BlockDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__BlockDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__BlockDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__BlockDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__BlockDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__BlockDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__BlockDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__BlockDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__BlockDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__BlockDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__BlockDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__BlockDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__BlockDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__BlockDecl::Create:
      return toClientReflType<class clang::BlockDecl *>(C);
    case reflenums::clang__BlockDecl::CreateDeserialized:
      return toClientReflType<class clang::BlockDecl *>(C);
    case reflenums::clang__BlockDecl::getCaretLocation:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__BlockDecl::isVariadic:
      return toClientReflType<bool>(C);
    case reflenums::clang__BlockDecl::isVariadic:
      return toClientReflType<bool>(C);
    case reflenums::clang__BlockDecl::getCompoundBody:
      return toClientReflType<class clang::CompoundStmt *>(C);
    case reflenums::clang__BlockDecl::getBody:
      return toClientReflType<class clang::Stmt *>(C);
    case reflenums::clang__BlockDecl::getBody:
      return toClientReflType<class clang::Stmt *>(C);
    case reflenums::clang__BlockDecl::getBody:
      return toClientReflType<class clang::Stmt *>(C);
    case reflenums::clang__BlockDecl::getSignatureAsWritten:
      return toClientReflType<class clang::TypeSourceInfo *>(C);
    case reflenums::clang__BlockDecl::parameters:
      return toClientReflType<class llvm::ArrayRef<class clang::ParmVarDecl *>>(C);
    case reflenums::clang__BlockDecl::parameters:
      return toClientReflType<class llvm::ArrayRef<class clang::ParmVarDecl *>>(C);
    case reflenums::clang__BlockDecl::parameters:
      return toClientReflType<class llvm::ArrayRef<class clang::ParmVarDecl *>>(C);
    case reflenums::clang__BlockDecl::parameters:
      return toClientReflType<class llvm::ArrayRef<class clang::ParmVarDecl *>>(C);
    case reflenums::clang__BlockDecl::param_empty:
      return toClientReflType<bool>(C);
    case reflenums::clang__BlockDecl::param_empty:
      return toClientReflType<bool>(C);
    case reflenums::clang__BlockDecl::param_empty:
      return toClientReflType<bool>(C);
    case reflenums::clang__BlockDecl::param_empty:
      return toClientReflType<bool>(C);
    case reflenums::clang__BlockDecl::param_empty:
      return toClientReflType<bool>(C);
    case reflenums::clang__BlockDecl::param_size:
      return toClientReflType<unsigned long>(C);
    case reflenums::clang__BlockDecl::getNumParams:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__BlockDecl::getParamDecl:
      return toClientReflType<const class clang::ParmVarDecl *>(C);
    case reflenums::clang__BlockDecl::getParamDecl:
      return toClientReflType<const class clang::ParmVarDecl *>(C);
    case reflenums::clang__BlockDecl::getParamDecl:
      return toClientReflType<const class clang::ParmVarDecl *>(C);
    case reflenums::clang__BlockDecl::hasCaptures:
      return toClientReflType<bool>(C);
    case reflenums::clang__BlockDecl::getNumCaptures:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__BlockDecl::getNumCaptures:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__BlockDecl::captures:
      return toClientReflType<class llvm::ArrayRef<class clang::BlockDecl::Capture>>(C);
    case reflenums::clang__BlockDecl::captures:
      return toClientReflType<class llvm::ArrayRef<class clang::BlockDecl::Capture>>(C);
    case reflenums::clang__BlockDecl::captures:
      return toClientReflType<class llvm::ArrayRef<class clang::BlockDecl::Capture>>(C);
    case reflenums::clang__BlockDecl::capturesCXXThis:
      return toClientReflType<bool>(C);
    case reflenums::clang__BlockDecl::blockMissingReturnType:
      return toClientReflType<bool>(C);
    case reflenums::clang__BlockDecl::blockMissingReturnType:
      return toClientReflType<bool>(C);
    case reflenums::clang__BlockDecl::isConversionFromLambda:
      return toClientReflType<bool>(C);
    case reflenums::clang__BlockDecl::isConversionFromLambda:
      return toClientReflType<bool>(C);
    case reflenums::clang__BlockDecl::doesNotEscape:
      return toClientReflType<bool>(C);
    case reflenums::clang__BlockDecl::doesNotEscape:
      return toClientReflType<bool>(C);
    case reflenums::clang__BlockDecl::capturesVariable:
      return toClientReflType<bool>(C);
    case reflenums::clang__BlockDecl::capturesVariable:
      return toClientReflType<bool>(C);
    case reflenums::clang__BlockDecl::getBlockManglingNumber:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__BlockDecl::getBlockManglingContextDecl:
      return toClientReflType<class clang::Decl *>(C);
    case reflenums::clang__BlockDecl::getBlockManglingContextDecl:
      return toClientReflType<class clang::Decl *>(C);
    case reflenums::clang__BlockDecl::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__BlockDecl::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__BlockDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__BlockDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__BlockDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__BlockDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__BlockDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__BlockDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__BlockDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__BlockDecl::classofKind:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__BlockDecl__Capture:
  switch (static_cast<reflenums::clang__BlockDecl__Capture::memnames>(MemNum)) {
    case reflenums::clang__BlockDecl__Capture:::
      return toClientReflType<>(C);
    case reflenums::clang__BlockDecl__Capture:::
      return toClientReflType<>(C);
    case reflenums::clang__BlockDecl__Capture:::
      return toClientReflType<>(C);
    case reflenums::clang__BlockDecl__Capture:::
      return toClientReflType<>(C);
    case reflenums::clang__BlockDecl__Capture:::
      return toClientReflType<>(C);
    case reflenums::clang__BlockDecl__Capture:::
      return toClientReflType<>(C);
    case reflenums::clang__BlockDecl__Capture::getVariable:
      return toClientReflType<class clang::VarDecl *>(C);
    case reflenums::clang__BlockDecl__Capture::isByRef:
      return toClientReflType<bool>(C);
    case reflenums::clang__BlockDecl__Capture::isNested:
      return toClientReflType<bool>(C);
    case reflenums::clang__BlockDecl__Capture::hasCopyExpr:
      return toClientReflType<bool>(C);
    case reflenums::clang__BlockDecl__Capture::getCopyExpr:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__BlockDecl__Capture::getCopyExpr:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__BlockDecl__Capture::getCopyExpr:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__BlockDecl__Capture::getCopyExpr:
      return toClientReflType<class clang::Expr *>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__CapturedDecl:
  switch (static_cast<reflenums::clang__CapturedDecl::memnames>(MemNum)) {
    case reflenums::clang__CapturedDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__CapturedDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__CapturedDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__CapturedDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__CapturedDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__CapturedDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__CapturedDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__CapturedDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__CapturedDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__CapturedDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__CapturedDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__CapturedDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__CapturedDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__CapturedDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__CapturedDecl::Create:
      return toClientReflType<class clang::CapturedDecl *>(C);
    case reflenums::clang__CapturedDecl::CreateDeserialized:
      return toClientReflType<class clang::CapturedDecl *>(C);
    case reflenums::clang__CapturedDecl::getBody:
      return toClientReflType<class clang::Stmt *>(C);
    case reflenums::clang__CapturedDecl::getBody:
      return toClientReflType<class clang::Stmt *>(C);
    case reflenums::clang__CapturedDecl::isNothrow:
      return toClientReflType<bool>(C);
    case reflenums::clang__CapturedDecl::isNothrow:
      return toClientReflType<bool>(C);
    case reflenums::clang__CapturedDecl::getNumParams:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__CapturedDecl::getParam:
      return toClientReflType<class clang::ImplicitParamDecl *>(C);
    case reflenums::clang__CapturedDecl::getParam:
      return toClientReflType<class clang::ImplicitParamDecl *>(C);
    case reflenums::clang__CapturedDecl::parameters:
      return toClientReflType<class llvm::ArrayRef<class clang::ImplicitParamDecl *>>(C);
    case reflenums::clang__CapturedDecl::parameters:
      return toClientReflType<class llvm::ArrayRef<class clang::ImplicitParamDecl *>>(C);
    case reflenums::clang__CapturedDecl::getContextParam:
      return toClientReflType<class clang::ImplicitParamDecl *>(C);
    case reflenums::clang__CapturedDecl::getContextParam:
      return toClientReflType<class clang::ImplicitParamDecl *>(C);
    case reflenums::clang__CapturedDecl::getContextParamPosition:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__CapturedDecl::getContextParamPosition:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__CapturedDecl::getContextParamPosition:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__CapturedDecl::getContextParamPosition:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__CapturedDecl::getContextParamPosition:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__CapturedDecl::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__CapturedDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__CapturedDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__CapturedDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__CapturedDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__CapturedDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__CapturedDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__CapturedDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__CapturedDecl::classofKind:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__ImportDecl:
  switch (static_cast<reflenums::clang__ImportDecl::memnames>(MemNum)) {
    case reflenums::clang__ImportDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ImportDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ImportDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ImportDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ImportDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ImportDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ImportDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ImportDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ImportDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ImportDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ImportDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ImportDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ImportDecl::CreateImplicit:
      return toClientReflType<class clang::ImportDecl *>(C);
    case reflenums::clang__ImportDecl::CreateDeserialized:
      return toClientReflType<class clang::ImportDecl *>(C);
    case reflenums::clang__ImportDecl::getImportedModule:
      return toClientReflType<class clang::Module *>(C);
    case reflenums::clang__ImportDecl::getIdentifierLocs:
      return toClientReflType<class llvm::ArrayRef<class clang::SourceLocation>>(C);
    case reflenums::clang__ImportDecl::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__ImportDecl::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ImportDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ImportDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ImportDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ImportDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ImportDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ImportDecl::classofKind:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__ExportDecl:
  switch (static_cast<reflenums::clang__ExportDecl::memnames>(MemNum)) {
    case reflenums::clang__ExportDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ExportDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ExportDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ExportDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ExportDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ExportDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ExportDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ExportDecl::Create:
      return toClientReflType<class clang::ExportDecl *>(C);
    case reflenums::clang__ExportDecl::CreateDeserialized:
      return toClientReflType<class clang::ExportDecl *>(C);
    case reflenums::clang__ExportDecl::getExportLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ExportDecl::getRBraceLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ExportDecl::getRBraceLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ExportDecl::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ExportDecl::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ExportDecl::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__ExportDecl::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ExportDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ExportDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ExportDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ExportDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ExportDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ExportDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ExportDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ExportDecl::classofKind:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__EmptyDecl:
  switch (static_cast<reflenums::clang__EmptyDecl::memnames>(MemNum)) {
    case reflenums::clang__EmptyDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__EmptyDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__EmptyDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__EmptyDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__EmptyDecl::Create:
      return toClientReflType<class clang::EmptyDecl *>(C);
    case reflenums::clang__EmptyDecl::CreateDeserialized:
      return toClientReflType<class clang::EmptyDecl *>(C);
    case reflenums::clang__EmptyDecl::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__EmptyDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__EmptyDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__EmptyDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__EmptyDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__EmptyDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__EmptyDecl::classofKind:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__DeclGroup:
  switch (static_cast<reflenums::clang__DeclGroup::memnames>(MemNum)) {
    case reflenums::clang__DeclGroup:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclGroup:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclGroup:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclGroup:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclGroup:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclGroup:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclGroup:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclGroup::Create:
      return toClientReflType<class clang::DeclGroup *>(C);
    case reflenums::clang__DeclGroup::size:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__DeclGroup::size:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__DeclGroup::operator_sub:
      return toClientReflType<class clang::Decl *const &>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__DeclGroupRef:
  switch (static_cast<reflenums::clang__DeclGroupRef::memnames>(MemNum)) {
    case reflenums::clang__DeclGroupRef::_this_:
      if (IsPtr)
        return toClientReflType<clang::DeclGroupRef *>(C);
      return toClientReflType<clang::DeclGroupRef>(C);
    case reflenums::clang__DeclGroupRef:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclGroupRef:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclGroupRef:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclGroupRef:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclGroupRef:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclGroupRef:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclGroupRef:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclGroupRef:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclGroupRef::Create:
      return toClientReflType<class clang::DeclGroupRef>(C);
    case reflenums::clang__DeclGroupRef::Create:
      return toClientReflType<class clang::DeclGroupRef>(C);
    case reflenums::clang__DeclGroupRef::Create:
      return toClientReflType<class clang::DeclGroupRef>(C);
    case reflenums::clang__DeclGroupRef::isNull:
      return toClientReflType<bool>(C);
    case reflenums::clang__DeclGroupRef::isSingleDecl:
      return toClientReflType<bool>(C);
    case reflenums::clang__DeclGroupRef::isDeclGroup:
      return toClientReflType<bool>(C);
    case reflenums::clang__DeclGroupRef::isDeclGroup:
      return toClientReflType<bool>(C);
    case reflenums::clang__DeclGroupRef::getSingleDecl:
      return toClientReflType<const class clang::Decl *>(C);
    case reflenums::clang__DeclGroupRef::getSingleDecl:
      return toClientReflType<const class clang::Decl *>(C);
    case reflenums::clang__DeclGroupRef::getDeclGroup:
      return toClientReflType<const class clang::DeclGroup &>(C);
    case reflenums::clang__DeclGroupRef::getDeclGroup:
      return toClientReflType<const class clang::DeclGroup &>(C);
    case reflenums::clang__DeclGroupRef::getDeclGroup:
      return toClientReflType<const class clang::DeclGroup &>(C);
    case reflenums::clang__DeclGroupRef::getDeclGroup:
      return toClientReflType<const class clang::DeclGroup &>(C);
    case reflenums::clang__DeclGroupRef::getDeclGroup:
      return toClientReflType<const class clang::DeclGroup &>(C);
    case reflenums::clang__DeclGroupRef::getAsOpaquePtr:
      return toClientReflType<void *>(C);
    case reflenums::clang__DeclGroupRef::getFromOpaquePtr:
      return toClientReflType<class clang::DeclGroupRef>(C);
    case reflenums::clang__DeclGroupRef::getFromOpaquePtr:
      return toClientReflType<class clang::DeclGroupRef>(C);
    case reflenums::clang__DeclGroupRef::getFromOpaquePtr:
      return toClientReflType<class clang::DeclGroupRef>(C);
    case reflenums::clang__DeclGroupRef::getFromOpaquePtr:
      return toClientReflType<class clang::DeclGroupRef>(C);
    case reflenums::clang__DeclGroupRef::getFromOpaquePtr:
      return toClientReflType<class clang::DeclGroupRef>(C);
    case reflenums::clang__DeclGroupRef::getFromOpaquePtr:
      return toClientReflType<class clang::DeclGroupRef>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__Stmt:
  switch (static_cast<reflenums::clang__Stmt::memnames>(MemNum)) {
    case reflenums::clang__Stmt:::
      return toClientReflType<>(C);
    case reflenums::clang__Stmt:::
      return toClientReflType<>(C);
    case reflenums::clang__Stmt:::
      return toClientReflType<>(C);
    case reflenums::clang__Stmt:::
      return toClientReflType<>(C);
    case reflenums::clang__Stmt:::
      return toClientReflType<>(C);
    case reflenums::clang__Stmt:::
      return toClientReflType<>(C);
    case reflenums::clang__Stmt:::
      return toClientReflType<>(C);
    case reflenums::clang__Stmt:::
      return toClientReflType<>(C);
    case reflenums::clang__Stmt:::
      return toClientReflType<>(C);
    case reflenums::clang__Stmt:::
      return toClientReflType<>(C);
    case reflenums::clang__Stmt:::
      return toClientReflType<>(C);
    case reflenums::clang__Stmt:::
      return toClientReflType<>(C);
    case reflenums::clang__Stmt:::
      return toClientReflType<>(C);
    case reflenums::clang__Stmt:::
      return toClientReflType<>(C);
    case reflenums::clang__Stmt:::
      return toClientReflType<>(C);
    case reflenums::clang__Stmt:::
      return toClientReflType<>(C);
    case reflenums::clang__Stmt:::
      return toClientReflType<>(C);
    case reflenums::clang__Stmt:::
      return toClientReflType<>(C);
    case reflenums::clang__Stmt:::
      return toClientReflType<>(C);
    case reflenums::clang__Stmt:::
      return toClientReflType<>(C);
    case reflenums::clang__Stmt:::
      return toClientReflType<>(C);
    case reflenums::clang__Stmt:::
      return toClientReflType<>(C);
    case reflenums::clang__Stmt:::
      return toClientReflType<>(C);
    case reflenums::clang__Stmt:::
      return toClientReflType<>(C);
    case reflenums::clang__Stmt:::
      return toClientReflType<>(C);
    case reflenums::clang__Stmt:::
      return toClientReflType<>(C);
    case reflenums::clang__Stmt:::
      return toClientReflType<>(C);
    case reflenums::clang__Stmt:::
      return toClientReflType<>(C);
    case reflenums::clang__Stmt:::
      return toClientReflType<>(C);
    case reflenums::clang__Stmt:::
      return toClientReflType<>(C);
    case reflenums::clang__Stmt:::
      return toClientReflType<>(C);
    case reflenums::clang__Stmt:::
      return toClientReflType<>(C);
    case reflenums::clang__Stmt:::
      return toClientReflType<>(C);
    case reflenums::clang__Stmt:::
      return toClientReflType<>(C);
    case reflenums::clang__Stmt:::
      return toClientReflType<>(C);
    case reflenums::clang__Stmt:::
      return toClientReflType<>(C);
    case reflenums::clang__Stmt:::
      return toClientReflType<>(C);
    case reflenums::clang__Stmt:::
      return toClientReflType<>(C);
    case reflenums::clang__Stmt:::
      return toClientReflType<>(C);
    case reflenums::clang__Stmt:::
      return toClientReflType<>(C);
    case reflenums::clang__Stmt:::
      return toClientReflType<>(C);
    case reflenums::clang__Stmt:::
      return toClientReflType<>(C);
    case reflenums::clang__Stmt:::
      return toClientReflType<>(C);
    case reflenums::clang__Stmt:::
      return toClientReflType<>(C);
    case reflenums::clang__Stmt:::
      return toClientReflType<>(C);
    case reflenums::clang__Stmt:::
      return toClientReflType<>(C);
    case reflenums::clang__Stmt:::
      return toClientReflType<>(C);
    case reflenums::clang__Stmt:::
      return toClientReflType<>(C);
    case reflenums::clang__Stmt::operator_new:
      return toClientReflType<void *>(C);
    case reflenums::clang__Stmt::operator_new1:
      return toClientReflType<void *>(C);
    case reflenums::clang__Stmt::operator_new2:
      return toClientReflType<void *>(C);
    case reflenums::clang__Stmt::operator_delete:
      return toClientReflType<void>(C);
    case reflenums::clang__Stmt::operator_delete1:
      return toClientReflType<void>(C);
    case reflenums::clang__Stmt::operator_delete2:
      return toClientReflType<void>(C);
    case reflenums::clang__Stmt::operator_delete3:
      return toClientReflType<void>(C);
    case reflenums::clang__Stmt::operator_delete3:
      return toClientReflType<void>(C);
    case reflenums::clang__Stmt::operator_delete3:
      return toClientReflType<void>(C);
    case reflenums::clang__Stmt::operator_delete3:
      return toClientReflType<void>(C);
    case reflenums::clang__Stmt::operator_delete3:
      return toClientReflType<void>(C);
    case reflenums::clang__Stmt::operator_delete3:
      return toClientReflType<void>(C);
    case reflenums::clang__Stmt::operator_delete3:
      return toClientReflType<void>(C);
    case reflenums::clang__Stmt::operator_delete3:
      return toClientReflType<void>(C);
    case reflenums::clang__Stmt::operator_delete3:
      return toClientReflType<void>(C);
    case reflenums::clang__Stmt::operator_delete3:
      return toClientReflType<void>(C);
    case reflenums::clang__Stmt::operator_delete3:
      return toClientReflType<void>(C);
    case reflenums::clang__Stmt::operator_delete3:
      return toClientReflType<void>(C);
    case reflenums::clang__Stmt::getStmtClass:
      return toClientReflType<enum clang::Stmt::StmtClass>(C);
    case reflenums::clang__Stmt::getStmtClassName:
      return toClientReflType<const char *>(C);
    case reflenums::clang__Stmt::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__Stmt::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__Stmt::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__Stmt::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__Stmt::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__Stmt::addStmtClass:
      return toClientReflType<void>(C);
    case reflenums::clang__Stmt::EnableStatistics:
      return toClientReflType<void>(C);
    case reflenums::clang__Stmt::PrintStats:
      return toClientReflType<void>(C);
    case reflenums::clang__Stmt::dump:
      return toClientReflType<void>(C);
    case reflenums::clang__Stmt::dump1:
      return toClientReflType<void>(C);
    case reflenums::clang__Stmt::dump2:
      return toClientReflType<void>(C);
    case reflenums::clang__Stmt::dump3:
      return toClientReflType<void>(C);
    case reflenums::clang__Stmt::dumpColor:
      return toClientReflType<void>(C);
    case reflenums::clang__Stmt::dumpPretty:
      return toClientReflType<void>(C);
    case reflenums::clang__Stmt::printPretty:
      return toClientReflType<void>(C);
    case reflenums::clang__Stmt::viewAST:
      return toClientReflType<void>(C);
    case reflenums::clang__Stmt::viewAST:
      return toClientReflType<void>(C);
    case reflenums::clang__Stmt::IgnoreImplicit:
      return toClientReflType<const class clang::Stmt *>(C);
    case reflenums::clang__Stmt::IgnoreImplicit:
      return toClientReflType<const class clang::Stmt *>(C);
    case reflenums::clang__Stmt::IgnoreContainers:
      return toClientReflType<const class clang::Stmt *>(C);
    case reflenums::clang__Stmt::stripLabelLikeStatements:
      return toClientReflType<const class clang::Stmt *>(C);
    case reflenums::clang__Stmt::stripLabelLikeStatements:
      return toClientReflType<const class clang::Stmt *>(C);
    case reflenums::clang__Stmt::stripLabelLikeStatements:
      return toClientReflType<const class clang::Stmt *>(C);
    case reflenums::clang__Stmt::stripLabelLikeStatements:
      return toClientReflType<const class clang::Stmt *>(C);
    case reflenums::clang__Stmt::stripLabelLikeStatements:
      return toClientReflType<const class clang::Stmt *>(C);
    case reflenums::clang__Stmt::stripLabelLikeStatements:
      return toClientReflType<const class clang::Stmt *>(C);
    case reflenums::clang__Stmt::stripLabelLikeStatements:
      return toClientReflType<const class clang::Stmt *>(C);
    case reflenums::clang__Stmt::children:
      return toClientReflType<class llvm::iterator_range<struct clang::ConstStmtIterator>>(C);
    case reflenums::clang__Stmt::children:
      return toClientReflType<class llvm::iterator_range<struct clang::ConstStmtIterator>>(C);
    case reflenums::clang__Stmt::children:
      return toClientReflType<class llvm::iterator_range<struct clang::ConstStmtIterator>>(C);
    case reflenums::clang__Stmt::children:
      return toClientReflType<class llvm::iterator_range<struct clang::ConstStmtIterator>>(C);
    case reflenums::clang__Stmt::children:
      return toClientReflType<class llvm::iterator_range<struct clang::ConstStmtIterator>>(C);
    case reflenums::clang__Stmt::Profile:
      return toClientReflType<void>(C);
    case reflenums::clang__Stmt::Profile:
      return toClientReflType<void>(C);
    case reflenums::clang__Stmt::Profile:
      return toClientReflType<void>(C);
    case reflenums::clang__Stmt::Profile:
      return toClientReflType<void>(C);
    case reflenums::clang__Stmt::Profile:
      return toClientReflType<void>(C);
    case reflenums::clang__Stmt::Profile:
      return toClientReflType<void>(C);
    case reflenums::clang__Stmt::Profile:
      return toClientReflType<void>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__Stmt__EmptyShell:
  switch (static_cast<reflenums::clang__Stmt__EmptyShell::memnames>(MemNum)) {
    case reflenums::clang__Stmt__EmptyShell:::
      return toClientReflType<>(C);
    case reflenums::clang__Stmt__EmptyShell:::
      return toClientReflType<>(C);
    case reflenums::clang__Stmt__EmptyShell:::
      return toClientReflType<>(C);
    case reflenums::clang__Stmt__EmptyShell:::
      return toClientReflType<>(C);
    case reflenums::clang__Stmt__EmptyShell:::
      return toClientReflType<>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__DeclStmt:
  switch (static_cast<reflenums::clang__DeclStmt::memnames>(MemNum)) {
    case reflenums::clang__DeclStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclStmt::isSingleDecl:
      return toClientReflType<bool>(C);
    case reflenums::clang__DeclStmt::getSingleDecl:
      return toClientReflType<const class clang::Decl *>(C);
    case reflenums::clang__DeclStmt::getSingleDecl:
      return toClientReflType<const class clang::Decl *>(C);
    case reflenums::clang__DeclStmt::getDeclGroup:
      return toClientReflType<const class clang::DeclGroupRef>(C);
    case reflenums::clang__DeclStmt::getDeclGroup:
      return toClientReflType<const class clang::DeclGroupRef>(C);
    case reflenums::clang__DeclStmt::getDeclGroup:
      return toClientReflType<const class clang::DeclGroupRef>(C);
    case reflenums::clang__DeclStmt::getStartLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__DeclStmt::getStartLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__DeclStmt::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__DeclStmt::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__DeclStmt::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__DeclStmt::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__DeclStmt::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__DeclStmt::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__DeclStmt::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__DeclStmt::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__DeclStmt::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__DeclStmt::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__DeclStmt::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__DeclStmt::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__DeclStmt::decls:
      return toClientReflType<class llvm::iterator_range<class clang::Decl *const *>>(C);
    case reflenums::clang__DeclStmt::decls:
      return toClientReflType<class llvm::iterator_range<class clang::Decl *const *>>(C);
    case reflenums::clang__DeclStmt::decls:
      return toClientReflType<class llvm::iterator_range<class clang::Decl *const *>>(C);
    case reflenums::clang__DeclStmt::decls:
      return toClientReflType<class llvm::iterator_range<class clang::Decl *const *>>(C);
    case reflenums::clang__DeclStmt::decls:
      return toClientReflType<class llvm::iterator_range<class clang::Decl *const *>>(C);
    case reflenums::clang__DeclStmt::decls:
      return toClientReflType<class llvm::iterator_range<class clang::Decl *const *>>(C);
    case reflenums::clang__DeclStmt::decls:
      return toClientReflType<class llvm::iterator_range<class clang::Decl *const *>>(C);
    case reflenums::clang__DeclStmt::decls:
      return toClientReflType<class llvm::iterator_range<class clang::Decl *const *>>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__NullStmt:
  switch (static_cast<reflenums::clang__NullStmt::memnames>(MemNum)) {
    case reflenums::clang__NullStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__NullStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__NullStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__NullStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__NullStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__NullStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__NullStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__NullStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__NullStmt::getSemiLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__NullStmt::getSemiLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__NullStmt::hasLeadingEmptyMacro:
      return toClientReflType<bool>(C);
    case reflenums::clang__NullStmt::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__NullStmt::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__NullStmt::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__NullStmt::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__NullStmt::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__NullStmt::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__CompoundStmt:
  switch (static_cast<reflenums::clang__CompoundStmt::memnames>(MemNum)) {
    case reflenums::clang__CompoundStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CompoundStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CompoundStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CompoundStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CompoundStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CompoundStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CompoundStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CompoundStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CompoundStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CompoundStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CompoundStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CompoundStmt::CreateEmpty:
      return toClientReflType<class clang::CompoundStmt *>(C);
    case reflenums::clang__CompoundStmt::body_empty:
      return toClientReflType<bool>(C);
    case reflenums::clang__CompoundStmt::size:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__CompoundStmt::size:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__CompoundStmt::size:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__CompoundStmt::size:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__CompoundStmt::size:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__CompoundStmt::size:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__CompoundStmt::size:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__CompoundStmt::size:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__CompoundStmt::size:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__CompoundStmt::size:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__CompoundStmt::size:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__CompoundStmt::body:
      return toClientReflType<class llvm::iterator_range<class clang::Stmt *const *>>(C);
    case reflenums::clang__CompoundStmt::body:
      return toClientReflType<class llvm::iterator_range<class clang::Stmt *const *>>(C);
    case reflenums::clang__CompoundStmt::body:
      return toClientReflType<class llvm::iterator_range<class clang::Stmt *const *>>(C);
    case reflenums::clang__CompoundStmt::body_front:
      return toClientReflType<const class clang::Stmt *>(C);
    case reflenums::clang__CompoundStmt::body_back:
      return toClientReflType<const class clang::Stmt *>(C);
    case reflenums::clang__CompoundStmt::body_back:
      return toClientReflType<const class clang::Stmt *>(C);
    case reflenums::clang__CompoundStmt::body_back:
      return toClientReflType<const class clang::Stmt *>(C);
    case reflenums::clang__CompoundStmt::body_back:
      return toClientReflType<const class clang::Stmt *>(C);
    case reflenums::clang__CompoundStmt::body_back:
      return toClientReflType<const class clang::Stmt *>(C);
    case reflenums::clang__CompoundStmt::body_back:
      return toClientReflType<const class clang::Stmt *>(C);
    case reflenums::clang__CompoundStmt::body_back:
      return toClientReflType<const class clang::Stmt *>(C);
    case reflenums::clang__CompoundStmt::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CompoundStmt::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CompoundStmt::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CompoundStmt::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CompoundStmt::getLBracLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CompoundStmt::getRBracLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CompoundStmt::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__CompoundStmt::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__CompoundStmt::children:
      return toClientReflType<class llvm::iterator_range<struct clang::ConstStmtIterator>>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__SwitchCase:
  switch (static_cast<reflenums::clang__SwitchCase::memnames>(MemNum)) {
    case reflenums::clang__SwitchCase:::
      return toClientReflType<>(C);
    case reflenums::clang__SwitchCase:::
      return toClientReflType<>(C);
    case reflenums::clang__SwitchCase:::
      return toClientReflType<>(C);
    case reflenums::clang__SwitchCase:::
      return toClientReflType<>(C);
    case reflenums::clang__SwitchCase:::
      return toClientReflType<>(C);
    case reflenums::clang__SwitchCase:::
      return toClientReflType<>(C);
    case reflenums::clang__SwitchCase:::
      return toClientReflType<>(C);
    case reflenums::clang__SwitchCase:::
      return toClientReflType<>(C);
    case reflenums::clang__SwitchCase::getNextSwitchCase:
      return toClientReflType<const class clang::SwitchCase *>(C);
    case reflenums::clang__SwitchCase::getNextSwitchCase:
      return toClientReflType<const class clang::SwitchCase *>(C);
    case reflenums::clang__SwitchCase::getNextSwitchCase:
      return toClientReflType<const class clang::SwitchCase *>(C);
    case reflenums::clang__SwitchCase::getKeywordLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SwitchCase::getKeywordLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SwitchCase::getColonLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SwitchCase::getColonLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SwitchCase::getColonLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SwitchCase::getSubStmt:
      return toClientReflType<const class clang::Stmt *>(C);
    case reflenums::clang__SwitchCase::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SwitchCase::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SwitchCase::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SwitchCase::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SwitchCase::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__SwitchCase::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__SwitchCase::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__CaseStmt:
  switch (static_cast<reflenums::clang__CaseStmt::memnames>(MemNum)) {
    case reflenums::clang__CaseStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CaseStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CaseStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CaseStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CaseStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CaseStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CaseStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CaseStmt::getCaseLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CaseStmt::getCaseLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CaseStmt::getEllipsisLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CaseStmt::getEllipsisLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CaseStmt::getColonLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CaseStmt::getColonLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CaseStmt::getColonLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CaseStmt::getColonLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CaseStmt::getColonLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CaseStmt::getLHS:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__CaseStmt::getRHS:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__CaseStmt::getSubStmt:
      return toClientReflType<const class clang::Stmt *>(C);
    case reflenums::clang__CaseStmt::getSubStmt:
      return toClientReflType<const class clang::Stmt *>(C);
    case reflenums::clang__CaseStmt::getSubStmt:
      return toClientReflType<const class clang::Stmt *>(C);
    case reflenums::clang__CaseStmt::getSubStmt:
      return toClientReflType<const class clang::Stmt *>(C);
    case reflenums::clang__CaseStmt::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CaseStmt::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CaseStmt::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CaseStmt::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CaseStmt::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__CaseStmt::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__DefaultStmt:
  switch (static_cast<reflenums::clang__DefaultStmt::memnames>(MemNum)) {
    case reflenums::clang__DefaultStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__DefaultStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__DefaultStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__DefaultStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__DefaultStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__DefaultStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__DefaultStmt::getSubStmt:
      return toClientReflType<const class clang::Stmt *>(C);
    case reflenums::clang__DefaultStmt::getSubStmt:
      return toClientReflType<const class clang::Stmt *>(C);
    case reflenums::clang__DefaultStmt::getDefaultLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__DefaultStmt::getDefaultLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__DefaultStmt::getColonLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__DefaultStmt::getColonLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__DefaultStmt::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__DefaultStmt::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__DefaultStmt::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__DefaultStmt::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__DefaultStmt::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__DefaultStmt::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__LabelStmt:
  switch (static_cast<reflenums::clang__LabelStmt::memnames>(MemNum)) {
    case reflenums::clang__LabelStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__LabelStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__LabelStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__LabelStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__LabelStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__LabelStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__LabelStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__LabelStmt::getIdentLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__LabelStmt::getDecl:
      return toClientReflType<class clang::LabelDecl *>(C);
    case reflenums::clang__LabelStmt::getDecl:
      return toClientReflType<class clang::LabelDecl *>(C);
    case reflenums::clang__LabelStmt::getName:
      return toClientReflType<const char *>(C);
    case reflenums::clang__LabelStmt::getName:
      return toClientReflType<const char *>(C);
    case reflenums::clang__LabelStmt::getSubStmt:
      return toClientReflType<const class clang::Stmt *>(C);
    case reflenums::clang__LabelStmt::getSubStmt:
      return toClientReflType<const class clang::Stmt *>(C);
    case reflenums::clang__LabelStmt::getSubStmt:
      return toClientReflType<const class clang::Stmt *>(C);
    case reflenums::clang__LabelStmt::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__LabelStmt::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__LabelStmt::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__LabelStmt::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__LabelStmt::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__LabelStmt::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__AttributedStmt:
  switch (static_cast<reflenums::clang__AttributedStmt::memnames>(MemNum)) {
    case reflenums::clang__AttributedStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__AttributedStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__AttributedStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__AttributedStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__AttributedStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__AttributedStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__AttributedStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__AttributedStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__AttributedStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__AttributedStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__AttributedStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__AttributedStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__AttributedStmt::CreateEmpty:
      return toClientReflType<class clang::AttributedStmt *>(C);
    case reflenums::clang__AttributedStmt::getAttrLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__AttributedStmt::getAttrs:
      return toClientReflType<class llvm::ArrayRef<const class clang::Attr *>>(C);
    case reflenums::clang__AttributedStmt::getAttrs:
      return toClientReflType<class llvm::ArrayRef<const class clang::Attr *>>(C);
    case reflenums::clang__AttributedStmt::getSubStmt:
      return toClientReflType<const class clang::Stmt *>(C);
    case reflenums::clang__AttributedStmt::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__AttributedStmt::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__AttributedStmt::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__AttributedStmt::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__AttributedStmt::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__AttributedStmt::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__IfStmt:
  switch (static_cast<reflenums::clang__IfStmt::memnames>(MemNum)) {
    case reflenums::clang__IfStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__IfStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__IfStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__IfStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__IfStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__IfStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__IfStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__IfStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__IfStmt::getConditionVariable:
      return toClientReflType<class clang::VarDecl *>(C);
    case reflenums::clang__IfStmt::getConditionVariable:
      return toClientReflType<class clang::VarDecl *>(C);
    case reflenums::clang__IfStmt::getConditionVariableDeclStmt:
      return toClientReflType<const class clang::DeclStmt *>(C);
    case reflenums::clang__IfStmt::getConditionVariableDeclStmt:
      return toClientReflType<const class clang::DeclStmt *>(C);
    case reflenums::clang__IfStmt::getInit:
      return toClientReflType<const class clang::Stmt *>(C);
    case reflenums::clang__IfStmt::getInit:
      return toClientReflType<const class clang::Stmt *>(C);
    case reflenums::clang__IfStmt::getCond:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__IfStmt::getCond:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__IfStmt::getThen:
      return toClientReflType<const class clang::Stmt *>(C);
    case reflenums::clang__IfStmt::getThen:
      return toClientReflType<const class clang::Stmt *>(C);
    case reflenums::clang__IfStmt::getElse:
      return toClientReflType<const class clang::Stmt *>(C);
    case reflenums::clang__IfStmt::getElse:
      return toClientReflType<const class clang::Stmt *>(C);
    case reflenums::clang__IfStmt::getElse:
      return toClientReflType<const class clang::Stmt *>(C);
    case reflenums::clang__IfStmt::getElse:
      return toClientReflType<const class clang::Stmt *>(C);
    case reflenums::clang__IfStmt::getElse:
      return toClientReflType<const class clang::Stmt *>(C);
    case reflenums::clang__IfStmt::getIfLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__IfStmt::getIfLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__IfStmt::getElseLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__IfStmt::getElseLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__IfStmt::isConstexpr:
      return toClientReflType<bool>(C);
    case reflenums::clang__IfStmt::isConstexpr:
      return toClientReflType<bool>(C);
    case reflenums::clang__IfStmt::isObjCAvailabilityCheck:
      return toClientReflType<bool>(C);
    case reflenums::clang__IfStmt::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__IfStmt::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__IfStmt::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__IfStmt::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__IfStmt::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__IfStmt::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__SwitchStmt:
  switch (static_cast<reflenums::clang__SwitchStmt::memnames>(MemNum)) {
    case reflenums::clang__SwitchStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__SwitchStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__SwitchStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__SwitchStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__SwitchStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__SwitchStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__SwitchStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__SwitchStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__SwitchStmt::getConditionVariable:
      return toClientReflType<class clang::VarDecl *>(C);
    case reflenums::clang__SwitchStmt::getConditionVariable:
      return toClientReflType<class clang::VarDecl *>(C);
    case reflenums::clang__SwitchStmt::getConditionVariableDeclStmt:
      return toClientReflType<const class clang::DeclStmt *>(C);
    case reflenums::clang__SwitchStmt::getConditionVariableDeclStmt:
      return toClientReflType<const class clang::DeclStmt *>(C);
    case reflenums::clang__SwitchStmt::getInit:
      return toClientReflType<const class clang::Stmt *>(C);
    case reflenums::clang__SwitchStmt::getInit:
      return toClientReflType<const class clang::Stmt *>(C);
    case reflenums::clang__SwitchStmt::getCond:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__SwitchStmt::getBody:
      return toClientReflType<const class clang::Stmt *>(C);
    case reflenums::clang__SwitchStmt::getSwitchCaseList:
      return toClientReflType<const class clang::SwitchCase *>(C);
    case reflenums::clang__SwitchStmt::getSwitchCaseList:
      return toClientReflType<const class clang::SwitchCase *>(C);
    case reflenums::clang__SwitchStmt::getSwitchCaseList:
      return toClientReflType<const class clang::SwitchCase *>(C);
    case reflenums::clang__SwitchStmt::getSwitchCaseList:
      return toClientReflType<const class clang::SwitchCase *>(C);
    case reflenums::clang__SwitchStmt::getSwitchCaseList:
      return toClientReflType<const class clang::SwitchCase *>(C);
    case reflenums::clang__SwitchStmt::getSwitchCaseList:
      return toClientReflType<const class clang::SwitchCase *>(C);
    case reflenums::clang__SwitchStmt::getSwitchCaseList:
      return toClientReflType<const class clang::SwitchCase *>(C);
    case reflenums::clang__SwitchStmt::getSwitchLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SwitchStmt::getSwitchLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SwitchStmt::getSwitchLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SwitchStmt::getSwitchLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SwitchStmt::getSwitchLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SwitchStmt::isAllEnumCasesCovered:
      return toClientReflType<bool>(C);
    case reflenums::clang__SwitchStmt::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SwitchStmt::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SwitchStmt::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SwitchStmt::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SwitchStmt::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SwitchStmt::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__WhileStmt:
  switch (static_cast<reflenums::clang__WhileStmt::memnames>(MemNum)) {
    case reflenums::clang__WhileStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__WhileStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__WhileStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__WhileStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__WhileStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__WhileStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__WhileStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__WhileStmt::getConditionVariable:
      return toClientReflType<class clang::VarDecl *>(C);
    case reflenums::clang__WhileStmt::getConditionVariable:
      return toClientReflType<class clang::VarDecl *>(C);
    case reflenums::clang__WhileStmt::getConditionVariableDeclStmt:
      return toClientReflType<const class clang::DeclStmt *>(C);
    case reflenums::clang__WhileStmt::getConditionVariableDeclStmt:
      return toClientReflType<const class clang::DeclStmt *>(C);
    case reflenums::clang__WhileStmt::getCond:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__WhileStmt::getCond:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__WhileStmt::getCond:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__WhileStmt::getBody:
      return toClientReflType<const class clang::Stmt *>(C);
    case reflenums::clang__WhileStmt::getBody:
      return toClientReflType<const class clang::Stmt *>(C);
    case reflenums::clang__WhileStmt::getWhileLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__WhileStmt::getWhileLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__WhileStmt::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__WhileStmt::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__WhileStmt::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__WhileStmt::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__WhileStmt::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__WhileStmt::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__DoStmt:
  switch (static_cast<reflenums::clang__DoStmt::memnames>(MemNum)) {
    case reflenums::clang__DoStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__DoStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__DoStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__DoStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__DoStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__DoStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__DoStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__DoStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__DoStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__DoStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__DoStmt::getCond:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__DoStmt::getCond:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__DoStmt::getCond:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__DoStmt::getBody:
      return toClientReflType<const class clang::Stmt *>(C);
    case reflenums::clang__DoStmt::getBody:
      return toClientReflType<const class clang::Stmt *>(C);
    case reflenums::clang__DoStmt::getDoLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__DoStmt::getDoLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__DoStmt::getWhileLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__DoStmt::getWhileLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__DoStmt::getRParenLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__DoStmt::getRParenLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__DoStmt::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__DoStmt::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__DoStmt::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__DoStmt::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__DoStmt::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__DoStmt::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__ForStmt:
  switch (static_cast<reflenums::clang__ForStmt::memnames>(MemNum)) {
    case reflenums::clang__ForStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__ForStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__ForStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__ForStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__ForStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__ForStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__ForStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__ForStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__ForStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__ForStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__ForStmt::getConditionVariable:
      return toClientReflType<class clang::VarDecl *>(C);
    case reflenums::clang__ForStmt::getConditionVariable:
      return toClientReflType<class clang::VarDecl *>(C);
    case reflenums::clang__ForStmt::getConditionVariableDeclStmt:
      return toClientReflType<const class clang::DeclStmt *>(C);
    case reflenums::clang__ForStmt::getConditionVariableDeclStmt:
      return toClientReflType<const class clang::DeclStmt *>(C);
    case reflenums::clang__ForStmt::getConditionVariableDeclStmt:
      return toClientReflType<const class clang::DeclStmt *>(C);
    case reflenums::clang__ForStmt::getConditionVariableDeclStmt:
      return toClientReflType<const class clang::DeclStmt *>(C);
    case reflenums::clang__ForStmt::getInit:
      return toClientReflType<const class clang::Stmt *>(C);
    case reflenums::clang__ForStmt::getCond:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__ForStmt::getInc:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__ForStmt::getBody:
      return toClientReflType<const class clang::Stmt *>(C);
    case reflenums::clang__ForStmt::getBody:
      return toClientReflType<const class clang::Stmt *>(C);
    case reflenums::clang__ForStmt::getBody:
      return toClientReflType<const class clang::Stmt *>(C);
    case reflenums::clang__ForStmt::getBody:
      return toClientReflType<const class clang::Stmt *>(C);
    case reflenums::clang__ForStmt::getBody:
      return toClientReflType<const class clang::Stmt *>(C);
    case reflenums::clang__ForStmt::getForLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ForStmt::getForLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ForStmt::getLParenLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ForStmt::getLParenLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ForStmt::getRParenLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ForStmt::getRParenLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ForStmt::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ForStmt::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ForStmt::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ForStmt::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ForStmt::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ForStmt::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__GotoStmt:
  switch (static_cast<reflenums::clang__GotoStmt::memnames>(MemNum)) {
    case reflenums::clang__GotoStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__GotoStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__GotoStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__GotoStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__GotoStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__GotoStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__GotoStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__GotoStmt::getLabel:
      return toClientReflType<class clang::LabelDecl *>(C);
    case reflenums::clang__GotoStmt::getLabel:
      return toClientReflType<class clang::LabelDecl *>(C);
    case reflenums::clang__GotoStmt::getGotoLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__GotoStmt::getGotoLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__GotoStmt::getLabelLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__GotoStmt::getLabelLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__GotoStmt::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__GotoStmt::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__GotoStmt::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__GotoStmt::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__GotoStmt::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__GotoStmt::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__IndirectGotoStmt:
  switch (static_cast<reflenums::clang__IndirectGotoStmt::memnames>(MemNum)) {
    case reflenums::clang__IndirectGotoStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__IndirectGotoStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__IndirectGotoStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__IndirectGotoStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__IndirectGotoStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__IndirectGotoStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__IndirectGotoStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__IndirectGotoStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__IndirectGotoStmt::getGotoLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__IndirectGotoStmt::getGotoLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__IndirectGotoStmt::getStarLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__IndirectGotoStmt::getStarLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__IndirectGotoStmt::getTarget:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__IndirectGotoStmt::getTarget:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__IndirectGotoStmt::getTarget:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__IndirectGotoStmt::getConstantTarget:
      return toClientReflType<const class clang::LabelDecl *>(C);
    case reflenums::clang__IndirectGotoStmt::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__IndirectGotoStmt::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__IndirectGotoStmt::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__IndirectGotoStmt::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__IndirectGotoStmt::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__IndirectGotoStmt::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__ContinueStmt:
  switch (static_cast<reflenums::clang__ContinueStmt::memnames>(MemNum)) {
    case reflenums::clang__ContinueStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__ContinueStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__ContinueStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__ContinueStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__ContinueStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__ContinueStmt::getContinueLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ContinueStmt::getContinueLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ContinueStmt::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ContinueStmt::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ContinueStmt::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ContinueStmt::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ContinueStmt::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ContinueStmt::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__BreakStmt:
  switch (static_cast<reflenums::clang__BreakStmt::memnames>(MemNum)) {
    case reflenums::clang__BreakStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__BreakStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__BreakStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__BreakStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__BreakStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__BreakStmt::getBreakLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__BreakStmt::getBreakLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__BreakStmt::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__BreakStmt::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__BreakStmt::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__BreakStmt::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__BreakStmt::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__BreakStmt::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__ReturnStmt:
  switch (static_cast<reflenums::clang__ReturnStmt::memnames>(MemNum)) {
    case reflenums::clang__ReturnStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__ReturnStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__ReturnStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__ReturnStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__ReturnStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__ReturnStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__ReturnStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__ReturnStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__ReturnStmt::getRetValue:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__ReturnStmt::getRetValue:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__ReturnStmt::getRetValue:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__ReturnStmt::getReturnLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ReturnStmt::getReturnLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ReturnStmt::getNRVOCandidate:
      return toClientReflType<const class clang::VarDecl *>(C);
    case reflenums::clang__ReturnStmt::getNRVOCandidate:
      return toClientReflType<const class clang::VarDecl *>(C);
    case reflenums::clang__ReturnStmt::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ReturnStmt::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ReturnStmt::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ReturnStmt::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ReturnStmt::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ReturnStmt::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ReturnStmt::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ReturnStmt::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ReturnStmt::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__AsmStmt:
  switch (static_cast<reflenums::clang__AsmStmt::memnames>(MemNum)) {
    case reflenums::clang__AsmStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__AsmStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__AsmStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__AsmStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__AsmStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__AsmStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__AsmStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__AsmStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__AsmStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__AsmStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__AsmStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__AsmStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__AsmStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__AsmStmt::getAsmLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__AsmStmt::getAsmLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__AsmStmt::isSimple:
      return toClientReflType<bool>(C);
    case reflenums::clang__AsmStmt::isSimple:
      return toClientReflType<bool>(C);
    case reflenums::clang__AsmStmt::isVolatile:
      return toClientReflType<bool>(C);
    case reflenums::clang__AsmStmt::isVolatile:
      return toClientReflType<bool>(C);
    case reflenums::clang__AsmStmt::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__AsmStmt::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__AsmStmt::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__AsmStmt::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__AsmStmt::generateAsmString:
      return toClientReflType<const char *>(C);
    case reflenums::clang__AsmStmt::getNumOutputs:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__AsmStmt::getOutputConstraint:
      return toClientReflType<const char *>(C);
    case reflenums::clang__AsmStmt::isOutputPlusConstraint:
      return toClientReflType<bool>(C);
    case reflenums::clang__AsmStmt::getOutputExpr:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__AsmStmt::getNumPlusOperands:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__AsmStmt::getNumInputs:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__AsmStmt::getInputConstraint:
      return toClientReflType<const char *>(C);
    case reflenums::clang__AsmStmt::getInputExpr:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__AsmStmt::getNumClobbers:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__AsmStmt::getClobber:
      return toClientReflType<const char *>(C);
    case reflenums::clang__AsmStmt::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__AsmStmt::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__AsmStmt::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__AsmStmt::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__AsmStmt::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__AsmStmt::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__AsmStmt::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__AsmStmt::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__AsmStmt::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__AsmStmt::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__AsmStmt::inputs:
      return toClientReflType<class llvm::iterator_range<struct clang::Stmt::ConstExprIterator>>(C);
    case reflenums::clang__AsmStmt::inputs:
      return toClientReflType<class llvm::iterator_range<struct clang::Stmt::ConstExprIterator>>(C);
    case reflenums::clang__AsmStmt::inputs:
      return toClientReflType<class llvm::iterator_range<struct clang::Stmt::ConstExprIterator>>(C);
    case reflenums::clang__AsmStmt::inputs:
      return toClientReflType<class llvm::iterator_range<struct clang::Stmt::ConstExprIterator>>(C);
    case reflenums::clang__AsmStmt::inputs:
      return toClientReflType<class llvm::iterator_range<struct clang::Stmt::ConstExprIterator>>(C);
    case reflenums::clang__AsmStmt::inputs:
      return toClientReflType<class llvm::iterator_range<struct clang::Stmt::ConstExprIterator>>(C);
    case reflenums::clang__AsmStmt::inputs:
      return toClientReflType<class llvm::iterator_range<struct clang::Stmt::ConstExprIterator>>(C);
    case reflenums::clang__AsmStmt::inputs:
      return toClientReflType<class llvm::iterator_range<struct clang::Stmt::ConstExprIterator>>(C);
    case reflenums::clang__AsmStmt::inputs:
      return toClientReflType<class llvm::iterator_range<struct clang::Stmt::ConstExprIterator>>(C);
    case reflenums::clang__AsmStmt::inputs:
      return toClientReflType<class llvm::iterator_range<struct clang::Stmt::ConstExprIterator>>(C);
    case reflenums::clang__AsmStmt::outputs:
      return toClientReflType<class llvm::iterator_range<struct clang::Stmt::ConstExprIterator>>(C);
    case reflenums::clang__AsmStmt::outputs:
      return toClientReflType<class llvm::iterator_range<struct clang::Stmt::ConstExprIterator>>(C);
    case reflenums::clang__AsmStmt::outputs:
      return toClientReflType<class llvm::iterator_range<struct clang::Stmt::ConstExprIterator>>(C);
    case reflenums::clang__AsmStmt::outputs:
      return toClientReflType<class llvm::iterator_range<struct clang::Stmt::ConstExprIterator>>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__GCCAsmStmt:
  switch (static_cast<reflenums::clang__GCCAsmStmt::memnames>(MemNum)) {
    case reflenums::clang__GCCAsmStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__GCCAsmStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__GCCAsmStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__GCCAsmStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__GCCAsmStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__GCCAsmStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__GCCAsmStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__GCCAsmStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__GCCAsmStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__GCCAsmStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__GCCAsmStmt::getRParenLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__GCCAsmStmt::getRParenLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__GCCAsmStmt::getAsmString:
      return toClientReflType<const class clang::StringLiteral *>(C);
    case reflenums::clang__GCCAsmStmt::getAsmString:
      return toClientReflType<const class clang::StringLiteral *>(C);
    case reflenums::clang__GCCAsmStmt::getAsmString:
      return toClientReflType<const class clang::StringLiteral *>(C);
    case reflenums::clang__GCCAsmStmt::getAsmString:
      return toClientReflType<const class clang::StringLiteral *>(C);
    case reflenums::clang__GCCAsmStmt::getAsmString:
      return toClientReflType<const class clang::StringLiteral *>(C);
    case reflenums::clang__GCCAsmStmt::generateAsmString:
      return toClientReflType<const char *>(C);
    case reflenums::clang__GCCAsmStmt::getOutputIdentifier:
      return toClientReflType<class clang::IdentifierInfo *>(C);
    case reflenums::clang__GCCAsmStmt::getOutputName:
      return toClientReflType<const char *>(C);
    case reflenums::clang__GCCAsmStmt::getOutputConstraint:
      return toClientReflType<const char *>(C);
    case reflenums::clang__GCCAsmStmt::getOutputConstraintLiteral:
      return toClientReflType<const class clang::StringLiteral *>(C);
    case reflenums::clang__GCCAsmStmt::getOutputConstraintLiteral:
      return toClientReflType<const class clang::StringLiteral *>(C);
    case reflenums::clang__GCCAsmStmt::getOutputConstraintLiteral:
      return toClientReflType<const class clang::StringLiteral *>(C);
    case reflenums::clang__GCCAsmStmt::getOutputExpr:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__GCCAsmStmt::getInputIdentifier:
      return toClientReflType<class clang::IdentifierInfo *>(C);
    case reflenums::clang__GCCAsmStmt::getInputName:
      return toClientReflType<const char *>(C);
    case reflenums::clang__GCCAsmStmt::getInputConstraint:
      return toClientReflType<const char *>(C);
    case reflenums::clang__GCCAsmStmt::getInputConstraintLiteral:
      return toClientReflType<const class clang::StringLiteral *>(C);
    case reflenums::clang__GCCAsmStmt::getInputConstraintLiteral:
      return toClientReflType<const class clang::StringLiteral *>(C);
    case reflenums::clang__GCCAsmStmt::getInputConstraintLiteral:
      return toClientReflType<const class clang::StringLiteral *>(C);
    case reflenums::clang__GCCAsmStmt::getInputConstraintLiteral:
      return toClientReflType<const class clang::StringLiteral *>(C);
    case reflenums::clang__GCCAsmStmt::getInputExpr:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__GCCAsmStmt::getInputExpr:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__GCCAsmStmt::getInputExpr:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__GCCAsmStmt::getInputExpr:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__GCCAsmStmt::getNamedOperand:
      return toClientReflType<int>(C);
    case reflenums::clang__GCCAsmStmt::getClobber:
      return toClientReflType<const char *>(C);
    case reflenums::clang__GCCAsmStmt::getClobber:
      return toClientReflType<const char *>(C);
    case reflenums::clang__GCCAsmStmt::getClobberStringLiteral:
      return toClientReflType<const class clang::StringLiteral *>(C);
    case reflenums::clang__GCCAsmStmt::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__GCCAsmStmt::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__GCCAsmStmt::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__GCCAsmStmt::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__GCCAsmStmt::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__MSAsmStmt:
  switch (static_cast<reflenums::clang__MSAsmStmt::memnames>(MemNum)) {
    case reflenums::clang__MSAsmStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__MSAsmStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__MSAsmStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__MSAsmStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__MSAsmStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__MSAsmStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__MSAsmStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__MSAsmStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__MSAsmStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__MSAsmStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__MSAsmStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__MSAsmStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__MSAsmStmt::getLBraceLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__MSAsmStmt::getLBraceLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__MSAsmStmt::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__MSAsmStmt::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__MSAsmStmt::hasBraces:
      return toClientReflType<bool>(C);
    case reflenums::clang__MSAsmStmt::hasBraces:
      return toClientReflType<bool>(C);
    case reflenums::clang__MSAsmStmt::hasBraces:
      return toClientReflType<bool>(C);
    case reflenums::clang__MSAsmStmt::getAsmString:
      return toClientReflType<const char *>(C);
    case reflenums::clang__MSAsmStmt::generateAsmString:
      return toClientReflType<const char *>(C);
    case reflenums::clang__MSAsmStmt::getOutputConstraint:
      return toClientReflType<const char *>(C);
    case reflenums::clang__MSAsmStmt::getOutputConstraint:
      return toClientReflType<const char *>(C);
    case reflenums::clang__MSAsmStmt::getOutputExpr:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__MSAsmStmt::getInputConstraint:
      return toClientReflType<const char *>(C);
    case reflenums::clang__MSAsmStmt::getInputConstraint:
      return toClientReflType<const char *>(C);
    case reflenums::clang__MSAsmStmt::getInputConstraint:
      return toClientReflType<const char *>(C);
    case reflenums::clang__MSAsmStmt::getInputExpr:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__MSAsmStmt::getAllConstraints:
      return toClientReflType<class llvm::ArrayRef<const char *>>(C);
    case reflenums::clang__MSAsmStmt::getClobbers:
      return toClientReflType<class llvm::ArrayRef<const char *>>(C);
    case reflenums::clang__MSAsmStmt::getAllExprs:
      return toClientReflType<class llvm::ArrayRef<class clang::Expr *>>(C);
    case reflenums::clang__MSAsmStmt::getClobber:
      return toClientReflType<const char *>(C);
    case reflenums::clang__MSAsmStmt::getClobber:
      return toClientReflType<const char *>(C);
    case reflenums::clang__MSAsmStmt::getClobber:
      return toClientReflType<const char *>(C);
    case reflenums::clang__MSAsmStmt::getClobber:
      return toClientReflType<const char *>(C);
    case reflenums::clang__MSAsmStmt::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__MSAsmStmt::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__MSAsmStmt::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__MSAsmStmt::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__MSAsmStmt::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__SEHExceptStmt:
  switch (static_cast<reflenums::clang__SEHExceptStmt::memnames>(MemNum)) {
    case reflenums::clang__SEHExceptStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__SEHExceptStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__SEHExceptStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__SEHExceptStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__SEHExceptStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__SEHExceptStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__SEHExceptStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__SEHExceptStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__SEHExceptStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__SEHExceptStmt::Create:
      return toClientReflType<class clang::SEHExceptStmt *>(C);
    case reflenums::clang__SEHExceptStmt::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SEHExceptStmt::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SEHExceptStmt::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SEHExceptStmt::getExceptLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SEHExceptStmt::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SEHExceptStmt::getFilterExpr:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__SEHExceptStmt::getBlock:
      return toClientReflType<class clang::CompoundStmt *>(C);
    case reflenums::clang__SEHExceptStmt::getBlock:
      return toClientReflType<class clang::CompoundStmt *>(C);
    case reflenums::clang__SEHExceptStmt::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__SEHFinallyStmt:
  switch (static_cast<reflenums::clang__SEHFinallyStmt::memnames>(MemNum)) {
    case reflenums::clang__SEHFinallyStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__SEHFinallyStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__SEHFinallyStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__SEHFinallyStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__SEHFinallyStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__SEHFinallyStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__SEHFinallyStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__SEHFinallyStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__SEHFinallyStmt::Create:
      return toClientReflType<class clang::SEHFinallyStmt *>(C);
    case reflenums::clang__SEHFinallyStmt::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SEHFinallyStmt::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SEHFinallyStmt::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SEHFinallyStmt::getFinallyLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SEHFinallyStmt::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SEHFinallyStmt::getBlock:
      return toClientReflType<class clang::CompoundStmt *>(C);
    case reflenums::clang__SEHFinallyStmt::getBlock:
      return toClientReflType<class clang::CompoundStmt *>(C);
    case reflenums::clang__SEHFinallyStmt::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__SEHTryStmt:
  switch (static_cast<reflenums::clang__SEHTryStmt::memnames>(MemNum)) {
    case reflenums::clang__SEHTryStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__SEHTryStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__SEHTryStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__SEHTryStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__SEHTryStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__SEHTryStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__SEHTryStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__SEHTryStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__SEHTryStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__SEHTryStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__SEHTryStmt::Create:
      return toClientReflType<class clang::SEHTryStmt *>(C);
    case reflenums::clang__SEHTryStmt::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SEHTryStmt::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SEHTryStmt::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SEHTryStmt::getTryLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SEHTryStmt::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SEHTryStmt::getIsCXXTry:
      return toClientReflType<bool>(C);
    case reflenums::clang__SEHTryStmt::getTryBlock:
      return toClientReflType<class clang::CompoundStmt *>(C);
    case reflenums::clang__SEHTryStmt::getHandler:
      return toClientReflType<class clang::Stmt *>(C);
    case reflenums::clang__SEHTryStmt::getExceptHandler:
      return toClientReflType<class clang::SEHExceptStmt *>(C);
    case reflenums::clang__SEHTryStmt::getFinallyHandler:
      return toClientReflType<class clang::SEHFinallyStmt *>(C);
    case reflenums::clang__SEHTryStmt::getFinallyHandler:
      return toClientReflType<class clang::SEHFinallyStmt *>(C);
    case reflenums::clang__SEHTryStmt::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__SEHLeaveStmt:
  switch (static_cast<reflenums::clang__SEHLeaveStmt::memnames>(MemNum)) {
    case reflenums::clang__SEHLeaveStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__SEHLeaveStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__SEHLeaveStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__SEHLeaveStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__SEHLeaveStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__SEHLeaveStmt::getLeaveLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SEHLeaveStmt::getLeaveLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SEHLeaveStmt::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SEHLeaveStmt::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SEHLeaveStmt::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SEHLeaveStmt::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SEHLeaveStmt::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__SEHLeaveStmt::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__CapturedStmt:
  switch (static_cast<reflenums::clang__CapturedStmt::memnames>(MemNum)) {
    case reflenums::clang__CapturedStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CapturedStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CapturedStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CapturedStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CapturedStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CapturedStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CapturedStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CapturedStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CapturedStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CapturedStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CapturedStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CapturedStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CapturedStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CapturedStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CapturedStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CapturedStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CapturedStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CapturedStmt::CreateDeserialized:
      return toClientReflType<class clang::CapturedStmt *>(C);
    case reflenums::clang__CapturedStmt::CreateDeserialized:
      return toClientReflType<class clang::CapturedStmt *>(C);
    case reflenums::clang__CapturedStmt::getCapturedStmt:
      return toClientReflType<const class clang::Stmt *>(C);
    case reflenums::clang__CapturedStmt::getCapturedStmt:
      return toClientReflType<const class clang::Stmt *>(C);
    case reflenums::clang__CapturedStmt::getCapturedDecl:
      return toClientReflType<const class clang::CapturedDecl *>(C);
    case reflenums::clang__CapturedStmt::getCapturedDecl:
      return toClientReflType<const class clang::CapturedDecl *>(C);
    case reflenums::clang__CapturedStmt::getCapturedRegionKind:
      return toClientReflType<enum clang::CapturedRegionKind>(C);
    case reflenums::clang__CapturedStmt::getCapturedRegionKind:
      return toClientReflType<enum clang::CapturedRegionKind>(C);
    case reflenums::clang__CapturedStmt::getCapturedRecordDecl:
      return toClientReflType<const class clang::RecordDecl *>(C);
    case reflenums::clang__CapturedStmt::getCapturedRecordDecl:
      return toClientReflType<const class clang::RecordDecl *>(C);
    case reflenums::clang__CapturedStmt::capturesVariable:
      return toClientReflType<bool>(C);
    case reflenums::clang__CapturedStmt::capturesVariable:
      return toClientReflType<bool>(C);
    case reflenums::clang__CapturedStmt::capturesVariable:
      return toClientReflType<bool>(C);
    case reflenums::clang__CapturedStmt::capturesVariable:
      return toClientReflType<bool>(C);
    case reflenums::clang__CapturedStmt::capturesVariable:
      return toClientReflType<bool>(C);
    case reflenums::clang__CapturedStmt::capturesVariable:
      return toClientReflType<bool>(C);
    case reflenums::clang__CapturedStmt::captures:
      return toClientReflType<class llvm::iterator_range<const class clang::CapturedStmt::Capture *>>(C);
    case reflenums::clang__CapturedStmt::captures:
      return toClientReflType<class llvm::iterator_range<const class clang::CapturedStmt::Capture *>>(C);
    case reflenums::clang__CapturedStmt::captures:
      return toClientReflType<class llvm::iterator_range<const class clang::CapturedStmt::Capture *>>(C);
    case reflenums::clang__CapturedStmt::captures:
      return toClientReflType<class llvm::iterator_range<const class clang::CapturedStmt::Capture *>>(C);
    case reflenums::clang__CapturedStmt::capture_size:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__CapturedStmt::capture_size:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__CapturedStmt::capture_size:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__CapturedStmt::capture_size:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__CapturedStmt::capture_size:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__CapturedStmt::capture_size:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__CapturedStmt::capture_inits:
      return toClientReflType<class llvm::iterator_range<class clang::Expr *const *>>(C);
    case reflenums::clang__CapturedStmt::capture_inits:
      return toClientReflType<class llvm::iterator_range<class clang::Expr *const *>>(C);
    case reflenums::clang__CapturedStmt::capture_inits:
      return toClientReflType<class llvm::iterator_range<class clang::Expr *const *>>(C);
    case reflenums::clang__CapturedStmt::capture_inits:
      return toClientReflType<class llvm::iterator_range<class clang::Expr *const *>>(C);
    case reflenums::clang__CapturedStmt::capture_inits:
      return toClientReflType<class llvm::iterator_range<class clang::Expr *const *>>(C);
    case reflenums::clang__CapturedStmt::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CapturedStmt::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CapturedStmt::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CapturedStmt::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CapturedStmt::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__CapturedStmt::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__CapturedStmt::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__CapturedStmt__Capture:
  switch (static_cast<reflenums::clang__CapturedStmt__Capture::memnames>(MemNum)) {
    case reflenums::clang__CapturedStmt__Capture:::
      return toClientReflType<>(C);
    case reflenums::clang__CapturedStmt__Capture:::
      return toClientReflType<>(C);
    case reflenums::clang__CapturedStmt__Capture:::
      return toClientReflType<>(C);
    case reflenums::clang__CapturedStmt__Capture:::
      return toClientReflType<>(C);
    case reflenums::clang__CapturedStmt__Capture:::
      return toClientReflType<>(C);
    case reflenums::clang__CapturedStmt__Capture:::
      return toClientReflType<>(C);
    case reflenums::clang__CapturedStmt__Capture::getCaptureKind:
      return toClientReflType<enum clang::CapturedStmt::VariableCaptureKind>(C);
    case reflenums::clang__CapturedStmt__Capture::getLocation:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CapturedStmt__Capture::capturesThis:
      return toClientReflType<bool>(C);
    case reflenums::clang__CapturedStmt__Capture::capturesVariable:
      return toClientReflType<bool>(C);
    case reflenums::clang__CapturedStmt__Capture::capturesVariableByCopy:
      return toClientReflType<bool>(C);
    case reflenums::clang__CapturedStmt__Capture::capturesVariableArrayType:
      return toClientReflType<bool>(C);
    case reflenums::clang__CapturedStmt__Capture::getCapturedVar:
      return toClientReflType<class clang::VarDecl *>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__TemplateArgument:
  switch (static_cast<reflenums::clang__TemplateArgument::memnames>(MemNum)) {
    case reflenums::clang__TemplateArgument:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateArgument:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateArgument:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateArgument:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateArgument:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateArgument:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateArgument:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateArgument:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateArgument:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateArgument:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateArgument:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateArgument:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateArgument:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateArgument:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateArgument:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateArgument:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateArgument:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateArgument:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateArgument:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateArgument:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateArgument:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateArgument:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateArgument:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateArgument:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateArgument:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateArgument:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateArgument:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateArgument::getEmptyPack:
      return toClientReflType<class clang::TemplateArgument>(C);
    case reflenums::clang__TemplateArgument::getEmptyPack:
      return toClientReflType<class clang::TemplateArgument>(C);
    case reflenums::clang__TemplateArgument::getKind:
      return toClientReflType<enum clang::TemplateArgument::ArgKind>(C);
    case reflenums::clang__TemplateArgument::isNull:
      return toClientReflType<bool>(C);
    case reflenums::clang__TemplateArgument::isDependent:
      return toClientReflType<bool>(C);
    case reflenums::clang__TemplateArgument::isInstantiationDependent:
      return toClientReflType<bool>(C);
    case reflenums::clang__TemplateArgument::containsUnexpandedParameterPack:
      return toClientReflType<bool>(C);
    case reflenums::clang__TemplateArgument::isPackExpansion:
      return toClientReflType<bool>(C);
    case reflenums::clang__TemplateArgument::getAsType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__TemplateArgument::getAsDecl:
      return toClientReflType<class clang::ValueDecl *>(C);
    case reflenums::clang__TemplateArgument::getParamTypeForDecl:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__TemplateArgument::getNullPtrType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__TemplateArgument::getAsTemplate:
      return toClientReflType<class clang::TemplateName>(C);
    case reflenums::clang__TemplateArgument::getAsTemplateOrTemplatePattern:
      return toClientReflType<class clang::TemplateName>(C);
    case reflenums::clang__TemplateArgument::getAsTemplateOrTemplatePattern:
      return toClientReflType<class clang::TemplateName>(C);
    case reflenums::clang__TemplateArgument::getAsIntegral:
      return toClientReflType<class llvm::APSInt>(C);
    case reflenums::clang__TemplateArgument::getIntegralType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__TemplateArgument::getIntegralType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__TemplateArgument::getNonTypeTemplateArgumentType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__TemplateArgument::getAsExpr:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__TemplateArgument::getAsExpr:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__TemplateArgument::getAsExpr:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__TemplateArgument::getAsExpr:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__TemplateArgument::pack_elements:
      return toClientReflType<class llvm::ArrayRef<class clang::TemplateArgument>>(C);
    case reflenums::clang__TemplateArgument::pack_size:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__TemplateArgument::getPackAsArray:
      return toClientReflType<class llvm::ArrayRef<class clang::TemplateArgument>>(C);
    case reflenums::clang__TemplateArgument::structurallyEquals:
      return toClientReflType<bool>(C);
    case reflenums::clang__TemplateArgument::getPackExpansionPattern:
      return toClientReflType<class clang::TemplateArgument>(C);
    case reflenums::clang__TemplateArgument::print:
      return toClientReflType<void>(C);
    case reflenums::clang__TemplateArgument::dump:
      return toClientReflType<void>(C);
    case reflenums::clang__TemplateArgument::dump1:
      return toClientReflType<void>(C);
    case reflenums::clang__TemplateArgument::Profile:
      return toClientReflType<void>(C);
    case reflenums::clang__TemplateArgument::Profile:
      return toClientReflType<void>(C);
    case reflenums::clang__TemplateArgument::Profile:
      return toClientReflType<void>(C);
    case reflenums::clang__TemplateArgument::Profile:
      return toClientReflType<void>(C);
    case reflenums::clang__TemplateArgument::Profile:
      return toClientReflType<void>(C);
    case reflenums::clang__TemplateArgument::Profile:
      return toClientReflType<void>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__TemplateArgumentLocInfo:
  switch (static_cast<reflenums::clang__TemplateArgumentLocInfo::memnames>(MemNum)) {
    case reflenums::clang__TemplateArgumentLocInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateArgumentLocInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateArgumentLocInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateArgumentLocInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateArgumentLocInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateArgumentLocInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateArgumentLocInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateArgumentLocInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateArgumentLocInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateArgumentLocInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateArgumentLocInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateArgumentLocInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateArgumentLocInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateArgumentLocInfo::getAsTypeSourceInfo:
      return toClientReflType<class clang::TypeSourceInfo *>(C);
    case reflenums::clang__TemplateArgumentLocInfo::getAsExpr:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__TemplateArgumentLocInfo::getTemplateQualifierLoc:
      return toClientReflType<class clang::NestedNameSpecifierLoc>(C);
    case reflenums::clang__TemplateArgumentLocInfo::getTemplateNameLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__TemplateArgumentLocInfo::getTemplateEllipsisLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__TemplateArgumentLocInfo::getTemplateEllipsisLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__TemplateArgumentLocInfo::getTemplateEllipsisLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__TemplateArgumentLocInfo::getTemplateEllipsisLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__TemplateArgumentLocInfo::getTemplateEllipsisLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__TemplateArgumentLocInfo::getTemplateEllipsisLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__TemplateArgumentLoc:
  switch (static_cast<reflenums::clang__TemplateArgumentLoc::memnames>(MemNum)) {
    case reflenums::clang__TemplateArgumentLoc:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateArgumentLoc:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateArgumentLoc:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateArgumentLoc:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateArgumentLoc:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateArgumentLoc:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateArgumentLoc:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateArgumentLoc:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateArgumentLoc:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateArgumentLoc::getLocation:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__TemplateArgumentLoc::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__TemplateArgumentLoc::getArgument:
      return toClientReflType<const class clang::TemplateArgument &>(C);
    case reflenums::clang__TemplateArgumentLoc::getLocInfo:
      return toClientReflType<struct clang::TemplateArgumentLocInfo>(C);
    case reflenums::clang__TemplateArgumentLoc::getTypeSourceInfo:
      return toClientReflType<class clang::TypeSourceInfo *>(C);
    case reflenums::clang__TemplateArgumentLoc::getSourceExpression:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__TemplateArgumentLoc::getSourceDeclExpression:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__TemplateArgumentLoc::getSourceNullPtrExpression:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__TemplateArgumentLoc::getSourceIntegralExpression:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__TemplateArgumentLoc::getTemplateQualifierLoc:
      return toClientReflType<class clang::NestedNameSpecifierLoc>(C);
    case reflenums::clang__TemplateArgumentLoc::getTemplateNameLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__TemplateArgumentLoc::getTemplateEllipsisLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__TemplateArgumentLoc::getTemplateEllipsisLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__TemplateArgumentLoc::getTemplateEllipsisLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__TemplateArgumentLoc::getTemplateEllipsisLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__TemplateArgumentLoc::getTemplateEllipsisLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__TemplateArgumentLoc::getTemplateEllipsisLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__TemplateArgumentListInfo:
  switch (static_cast<reflenums::clang__TemplateArgumentListInfo::memnames>(MemNum)) {
    case reflenums::clang__TemplateArgumentListInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateArgumentListInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateArgumentListInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateArgumentListInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateArgumentListInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateArgumentListInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateArgumentListInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateArgumentListInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateArgumentListInfo::getLAngleLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__TemplateArgumentListInfo::getRAngleLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__TemplateArgumentListInfo::getRAngleLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__TemplateArgumentListInfo::getRAngleLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__TemplateArgumentListInfo::size:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__TemplateArgumentListInfo::getArgumentArray:
      return toClientReflType<const class clang::TemplateArgumentLoc *>(C);
    case reflenums::clang__TemplateArgumentListInfo::arguments:
      return toClientReflType<class llvm::ArrayRef<class clang::TemplateArgumentLoc>>(C);
    case reflenums::clang__TemplateArgumentListInfo::operator_sub:
      return toClientReflType<const class clang::TemplateArgumentLoc &>(C);
    case reflenums::clang__TemplateArgumentListInfo::operator_sub:
      return toClientReflType<const class clang::TemplateArgumentLoc &>(C);
    case reflenums::clang__TemplateArgumentListInfo::operator_sub:
      return toClientReflType<const class clang::TemplateArgumentLoc &>(C);
    case reflenums::clang__TemplateArgumentListInfo::operator_sub:
      return toClientReflType<const class clang::TemplateArgumentLoc &>(C);
    case reflenums::clang__TemplateArgumentListInfo::operator_sub:
      return toClientReflType<const class clang::TemplateArgumentLoc &>(C);
    case reflenums::clang__TemplateArgumentListInfo::operator_sub:
      return toClientReflType<const class clang::TemplateArgumentLoc &>(C);
    case reflenums::clang__TemplateArgumentListInfo::operator_sub:
      return toClientReflType<const class clang::TemplateArgumentLoc &>(C);
    case reflenums::clang__TemplateArgumentListInfo::operator_sub:
      return toClientReflType<const class clang::TemplateArgumentLoc &>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__ASTTemplateArgumentListInfo:
  switch (static_cast<reflenums::clang__ASTTemplateArgumentListInfo::memnames>(MemNum)) {
    case reflenums::clang__ASTTemplateArgumentListInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTTemplateArgumentListInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTTemplateArgumentListInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTTemplateArgumentListInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTTemplateArgumentListInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTTemplateArgumentListInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTTemplateArgumentListInfo::LAngleLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ASTTemplateArgumentListInfo::RAngleLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ASTTemplateArgumentListInfo::NumTemplateArgs:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ASTTemplateArgumentListInfo::getTemplateArgs:
      return toClientReflType<const class clang::TemplateArgumentLoc *>(C);
    case reflenums::clang__ASTTemplateArgumentListInfo::arguments:
      return toClientReflType<class llvm::ArrayRef<class clang::TemplateArgumentLoc>>(C);
    case reflenums::clang__ASTTemplateArgumentListInfo::operator_sub:
      return toClientReflType<const class clang::TemplateArgumentLoc &>(C);
    case reflenums::clang__ASTTemplateArgumentListInfo::Create:
      return toClientReflType<const struct clang::ASTTemplateArgumentListInfo *>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__TypeLoc:
  switch (static_cast<reflenums::clang__TypeLoc::memnames>(MemNum)) {
    case reflenums::clang__TypeLoc:::
      return toClientReflType<>(C);
    case reflenums::clang__TypeLoc:::
      return toClientReflType<>(C);
    case reflenums::clang__TypeLoc:::
      return toClientReflType<>(C);
    case reflenums::clang__TypeLoc:::
      return toClientReflType<>(C);
    case reflenums::clang__TypeLoc:::
      return toClientReflType<>(C);
    case reflenums::clang__TypeLoc:::
      return toClientReflType<>(C);
    case reflenums::clang__TypeLoc:::
      return toClientReflType<>(C);
    case reflenums::clang__TypeLoc:::
      return toClientReflType<>(C);
    case reflenums::clang__TypeLoc:::
      return toClientReflType<>(C);
    case reflenums::clang__TypeLoc:::
      return toClientReflType<>(C);
    case reflenums::clang__TypeLoc:::
      return toClientReflType<>(C);
    case reflenums::clang__TypeLoc:::
      return toClientReflType<>(C);
    case reflenums::clang__TypeLoc::getTypeLocClass:
      return toClientReflType<enum clang::TypeLoc::TypeLocClass>(C);
    case reflenums::clang__TypeLoc::isNull:
      return toClientReflType<bool>(C);
    case reflenums::clang__TypeLoc::operator_bool:
      return toClientReflType<bool>(C);
    case reflenums::clang__TypeLoc::getFullDataSizeForType:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__TypeLoc::getLocalAlignmentForType:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__TypeLoc::getType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__TypeLoc::getTypePtr:
      return toClientReflType<const class clang::Type *>(C);
    case reflenums::clang__TypeLoc::getOpaqueData:
      return toClientReflType<void *>(C);
    case reflenums::clang__TypeLoc::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__TypeLoc::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__TypeLoc::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__TypeLoc::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__TypeLoc::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__TypeLoc::getLocalSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__TypeLoc::getFullDataSize:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__TypeLoc::getNextTypeLoc:
      return toClientReflType<class clang::TypeLoc>(C);
    case reflenums::clang__TypeLoc::getUnqualifiedLoc:
      return toClientReflType<class clang::UnqualTypeLoc>(C);
    case reflenums::clang__TypeLoc::IgnoreParens:
      return toClientReflType<class clang::TypeLoc>(C);
    case reflenums::clang__TypeLoc::findExplicitQualifierLoc:
      return toClientReflType<class clang::TypeLoc>(C);
    case reflenums::clang__TypeLoc::initialize:
      return toClientReflType<void>(C);
    case reflenums::clang__TypeLoc::initialize:
      return toClientReflType<void>(C);
    case reflenums::clang__TypeLoc::initialize:
      return toClientReflType<void>(C);
    case reflenums::clang__TypeLoc::initialize:
      return toClientReflType<void>(C);
    case reflenums::clang__TypeLoc::operator_eq_eq:
      return toClientReflType<bool>(C);
    case reflenums::clang__TypeLoc::operator_not_eq:
      return toClientReflType<bool>(C);
    case reflenums::clang__TypeLoc::findNullabilityLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__TypeLoc::findNullabilityLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__TypeLoc::findNullabilityLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__TypeLoc::findNullabilityLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__TypeLoc::findNullabilityLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__TypeLoc::findNullabilityLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__TypeLoc::findNullabilityLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__TypeLoc::findNullabilityLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__TypeLoc::findNullabilityLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__TypeLoc::findNullabilityLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__TypeLoc::findNullabilityLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__TypeLoc::findNullabilityLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__UnqualTypeLoc:
  switch (static_cast<reflenums::clang__UnqualTypeLoc::memnames>(MemNum)) {
    case reflenums::clang__UnqualTypeLoc:::
      return toClientReflType<>(C);
    case reflenums::clang__UnqualTypeLoc:::
      return toClientReflType<>(C);
    case reflenums::clang__UnqualTypeLoc:::
      return toClientReflType<>(C);
    case reflenums::clang__UnqualTypeLoc:::
      return toClientReflType<>(C);
    case reflenums::clang__UnqualTypeLoc::getTypePtr:
      return toClientReflType<const class clang::Type *>(C);
    case reflenums::clang__UnqualTypeLoc::getTypeLocClass:
      return toClientReflType<enum clang::TypeLoc::TypeLocClass>(C);
    case reflenums::clang__UnqualTypeLoc::getTypeLocClass:
      return toClientReflType<enum clang::TypeLoc::TypeLocClass>(C);
    case reflenums::clang__UnqualTypeLoc::getTypeLocClass:
      return toClientReflType<enum clang::TypeLoc::TypeLocClass>(C);
    case reflenums::clang__UnqualTypeLoc::getTypeLocClass:
      return toClientReflType<enum clang::TypeLoc::TypeLocClass>(C);
    case reflenums::clang__UnqualTypeLoc::getTypeLocClass:
      return toClientReflType<enum clang::TypeLoc::TypeLocClass>(C);
    case reflenums::clang__UnqualTypeLoc::getTypeLocClass:
      return toClientReflType<enum clang::TypeLoc::TypeLocClass>(C);
    case reflenums::clang__UnqualTypeLoc::getTypeLocClass:
      return toClientReflType<enum clang::TypeLoc::TypeLocClass>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__CommentOptions:
  switch (static_cast<reflenums::clang__CommentOptions::memnames>(MemNum)) {
    case reflenums::clang__CommentOptions:::
      return toClientReflType<>(C);
    case reflenums::clang__CommentOptions:::
      return toClientReflType<>(C);
    case reflenums::clang__CommentOptions:::
      return toClientReflType<>(C);
    case reflenums::clang__CommentOptions::ParseAllComments:
      return toClientReflType<bool>(C);
    case reflenums::clang__CommentOptions::ParseAllComments:
      return toClientReflType<bool>(C);
    case reflenums::clang__CommentOptions::ParseAllComments:
      return toClientReflType<bool>(C);
    case reflenums::clang__CommentOptions::ParseAllComments:
      return toClientReflType<bool>(C);
    case reflenums::clang__CommentOptions::ParseAllComments:
      return toClientReflType<bool>(C);
    case reflenums::clang__CommentOptions::ParseAllComments:
      return toClientReflType<bool>(C);
    case reflenums::clang__CommentOptions::ParseAllComments:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__comments__CommandInfo:
  switch (static_cast<reflenums::clang__comments__CommandInfo::memnames>(MemNum)) {
    case reflenums::clang__comments__CommandInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__comments__CommandInfo::getID:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__comments__CommandInfo::Name:
      return toClientReflType<const char *>(C);
    case reflenums::clang__comments__CommandInfo::EndCommandName:
      return toClientReflType<const char *>(C);
    case reflenums::clang__comments__CommandInfo::EndCommandName:
      return toClientReflType<const char *>(C);
    case reflenums::clang__comments__CommandInfo::ID:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__comments__CommandInfo::NumArgs:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__comments__CommandInfo::IsInlineCommand:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__comments__CommandInfo::IsBlockCommand:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__comments__CommandInfo::IsBriefCommand:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__comments__CommandInfo::IsReturnsCommand:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__comments__CommandInfo::IsParamCommand:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__comments__CommandInfo::IsTParamCommand:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__comments__CommandInfo::IsThrowsCommand:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__comments__CommandInfo::IsDeprecatedCommand:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__comments__CommandInfo::IsHeaderfileCommand:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__comments__CommandInfo::IsEmptyParagraphAllowed:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__comments__CommandInfo::IsVerbatimBlockCommand:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__comments__CommandInfo::IsVerbatimBlockEndCommand:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__comments__CommandInfo::IsVerbatimLineCommand:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__comments__CommandInfo::IsDeclarationCommand:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__comments__CommandInfo::IsFunctionDeclarationCommand:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__comments__CommandInfo::IsRecordLikeDetailCommand:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__comments__CommandInfo::IsRecordLikeDeclarationCommand:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__comments__CommandInfo::IsUnknownCommand:
      return toClientReflType<unsigned int>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__comments__CommandTraits:
  switch (static_cast<reflenums::clang__comments__CommandTraits::memnames>(MemNum)) {
    case reflenums::clang__comments__CommandTraits:::
      return toClientReflType<>(C);
    case reflenums::clang__comments__CommandTraits:::
      return toClientReflType<>(C);
    case reflenums::clang__comments__CommandTraits:::
      return toClientReflType<>(C);
    case reflenums::clang__comments__CommandTraits:::
      return toClientReflType<>(C);
    case reflenums::clang__comments__CommandTraits:::
      return toClientReflType<>(C);
    case reflenums::clang__comments__CommandTraits:::
      return toClientReflType<>(C);
    case reflenums::clang__comments__CommandTraits:::
      return toClientReflType<>(C);
    case reflenums::clang__comments__CommandTraits:::
      return toClientReflType<>(C);
    case reflenums::clang__comments__CommandTraits::getCommandInfo:
      return toClientReflType<const struct clang::comments::CommandInfo *>(C);
    case reflenums::clang__comments__CommandTraits::getCommandInfo:
      return toClientReflType<const struct clang::comments::CommandInfo *>(C);
    case reflenums::clang__comments__CommandTraits::getCommandInfo:
      return toClientReflType<const struct clang::comments::CommandInfo *>(C);
    case reflenums::clang__comments__CommandTraits::getCommandInfo:
      return toClientReflType<const struct clang::comments::CommandInfo *>(C);
    case reflenums::clang__comments__CommandTraits::getBuiltinCommandInfo:
      return toClientReflType<const struct clang::comments::CommandInfo *>(C);
    case reflenums::clang__comments__CommandTraits::getBuiltinCommandInfo:
      return toClientReflType<const struct clang::comments::CommandInfo *>(C);
    case reflenums::clang__comments__CommandTraits::getBuiltinCommandInfo:
      return toClientReflType<const struct clang::comments::CommandInfo *>(C);
    case reflenums::clang__comments__CommandTraits::getBuiltinCommandInfo:
      return toClientReflType<const struct clang::comments::CommandInfo *>(C);
    case reflenums::clang__comments__CommandTraits::getBuiltinCommandInfo:
      return toClientReflType<const struct clang::comments::CommandInfo *>(C);
    case reflenums::clang__comments__CommandTraits::getBuiltinCommandInfo:
      return toClientReflType<const struct clang::comments::CommandInfo *>(C);
    case reflenums::clang__comments__CommandTraits::getBuiltinCommandInfo:
      return toClientReflType<const struct clang::comments::CommandInfo *>(C);
    case reflenums::clang__comments__CommandTraits::getBuiltinCommandInfo:
      return toClientReflType<const struct clang::comments::CommandInfo *>(C);
    case reflenums::clang__comments__CommandTraits::getBuiltinCommandInfo:
      return toClientReflType<const struct clang::comments::CommandInfo *>(C);
    case reflenums::clang__comments__CommandTraits::getBuiltinCommandInfo:
      return toClientReflType<const struct clang::comments::CommandInfo *>(C);
    case reflenums::clang__comments__CommandTraits::getBuiltinCommandInfo:
      return toClientReflType<const struct clang::comments::CommandInfo *>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_llvm__Triple:
  switch (static_cast<reflenums::llvm__Triple::memnames>(MemNum)) {
    case reflenums::llvm__Triple:::
      return toClientReflType<>(C);
    case reflenums::llvm__Triple:::
      return toClientReflType<>(C);
    case reflenums::llvm__Triple:::
      return toClientReflType<>(C);
    case reflenums::llvm__Triple:::
      return toClientReflType<>(C);
    case reflenums::llvm__Triple:::
      return toClientReflType<>(C);
    case reflenums::llvm__Triple:::
      return toClientReflType<>(C);
    case reflenums::llvm__Triple:::
      return toClientReflType<>(C);
    case reflenums::llvm__Triple:::
      return toClientReflType<>(C);
    case reflenums::llvm__Triple:::
      return toClientReflType<>(C);
    case reflenums::llvm__Triple:::
      return toClientReflType<>(C);
    case reflenums::llvm__Triple:::
      return toClientReflType<>(C);
    case reflenums::llvm__Triple:::
      return toClientReflType<>(C);
    case reflenums::llvm__Triple:::
      return toClientReflType<>(C);
    case reflenums::llvm__Triple:::
      return toClientReflType<>(C);
    case reflenums::llvm__Triple:::
      return toClientReflType<>(C);
    case reflenums::llvm__Triple:::
      return toClientReflType<>(C);
    case reflenums::llvm__Triple:::
      return toClientReflType<>(C);
    case reflenums::llvm__Triple:::
      return toClientReflType<>(C);
    case reflenums::llvm__Triple:::
      return toClientReflType<>(C);
    case reflenums::llvm__Triple:::
      return toClientReflType<>(C);
    case reflenums::llvm__Triple:::
      return toClientReflType<>(C);
    case reflenums::llvm__Triple::operator_eq_eq:
      return toClientReflType<bool>(C);
    case reflenums::llvm__Triple::operator_not_eq:
      return toClientReflType<bool>(C);
    case reflenums::llvm__Triple::normalize:
      return toClientReflType<const char *>(C);
    case reflenums::llvm__Triple::normalize1:
      return toClientReflType<const char *>(C);
    case reflenums::llvm__Triple::getArch:
      return toClientReflType<enum llvm::Triple::ArchType>(C);
    case reflenums::llvm__Triple::getSubArch:
      return toClientReflType<enum llvm::Triple::SubArchType>(C);
    case reflenums::llvm__Triple::getVendor:
      return toClientReflType<enum llvm::Triple::VendorType>(C);
    case reflenums::llvm__Triple::getOS:
      return toClientReflType<enum llvm::Triple::OSType>(C);
    case reflenums::llvm__Triple::hasEnvironment:
      return toClientReflType<bool>(C);
    case reflenums::llvm__Triple::getEnvironment:
      return toClientReflType<enum llvm::Triple::EnvironmentType>(C);
    case reflenums::llvm__Triple::getEnvironment:
      return toClientReflType<enum llvm::Triple::EnvironmentType>(C);
    case reflenums::llvm__Triple::getObjectFormat:
      return toClientReflType<enum llvm::Triple::ObjectFormatType>(C);
    case reflenums::llvm__Triple::getObjectFormat:
      return toClientReflType<enum llvm::Triple::ObjectFormatType>(C);
    case reflenums::llvm__Triple::getOSMajorVersion:
      return toClientReflType<unsigned int>(C);
    case reflenums::llvm__Triple::getOSMajorVersion:
      return toClientReflType<unsigned int>(C);
    case reflenums::llvm__Triple::getOSMajorVersion:
      return toClientReflType<unsigned int>(C);
    case reflenums::llvm__Triple::getOSMajorVersion:
      return toClientReflType<unsigned int>(C);
    case reflenums::llvm__Triple::getOSMajorVersion:
      return toClientReflType<unsigned int>(C);
    case reflenums::llvm__Triple::getOSMajorVersion:
      return toClientReflType<unsigned int>(C);
    case reflenums::llvm__Triple::getArchName:
      return toClientReflType<const char *>(C);
    case reflenums::llvm__Triple::getVendorName:
      return toClientReflType<const char *>(C);
    case reflenums::llvm__Triple::getOSName:
      return toClientReflType<const char *>(C);
    case reflenums::llvm__Triple::getEnvironmentName:
      return toClientReflType<const char *>(C);
    case reflenums::llvm__Triple::getOSAndEnvironmentName:
      return toClientReflType<const char *>(C);
    case reflenums::llvm__Triple::isArch64Bit:
      return toClientReflType<bool>(C);
    case reflenums::llvm__Triple::isArch32Bit:
      return toClientReflType<bool>(C);
    case reflenums::llvm__Triple::isArch16Bit:
      return toClientReflType<bool>(C);
    case reflenums::llvm__Triple::isOSVersionLT:
      return toClientReflType<bool>(C);
    case reflenums::llvm__Triple::isOSVersionLT1:
      return toClientReflType<bool>(C);
    case reflenums::llvm__Triple::isMacOSXVersionLT:
      return toClientReflType<bool>(C);
    case reflenums::llvm__Triple::isMacOSX:
      return toClientReflType<bool>(C);
    case reflenums::llvm__Triple::isiOS:
      return toClientReflType<bool>(C);
    case reflenums::llvm__Triple::isTvOS:
      return toClientReflType<bool>(C);
    case reflenums::llvm__Triple::isWatchOS:
      return toClientReflType<bool>(C);
    case reflenums::llvm__Triple::isWatchABI:
      return toClientReflType<bool>(C);
    case reflenums::llvm__Triple::isOSDarwin:
      return toClientReflType<bool>(C);
    case reflenums::llvm__Triple::isSimulatorEnvironment:
      return toClientReflType<bool>(C);
    case reflenums::llvm__Triple::isOSNetBSD:
      return toClientReflType<bool>(C);
    case reflenums::llvm__Triple::isOSOpenBSD:
      return toClientReflType<bool>(C);
    case reflenums::llvm__Triple::isOSFreeBSD:
      return toClientReflType<bool>(C);
    case reflenums::llvm__Triple::isOSFuchsia:
      return toClientReflType<bool>(C);
    case reflenums::llvm__Triple::isOSDragonFly:
      return toClientReflType<bool>(C);
    case reflenums::llvm__Triple::isOSSolaris:
      return toClientReflType<bool>(C);
    case reflenums::llvm__Triple::isOSIAMCU:
      return toClientReflType<bool>(C);
    case reflenums::llvm__Triple::isOSUnknown:
      return toClientReflType<bool>(C);
    case reflenums::llvm__Triple::isGNUEnvironment:
      return toClientReflType<bool>(C);
    case reflenums::llvm__Triple::isOSContiki:
      return toClientReflType<bool>(C);
    case reflenums::llvm__Triple::isOSHaiku:
      return toClientReflType<bool>(C);
    case reflenums::llvm__Triple::isWindowsMSVCEnvironment:
      return toClientReflType<bool>(C);
    case reflenums::llvm__Triple::isKnownWindowsMSVCEnvironment:
      return toClientReflType<bool>(C);
    case reflenums::llvm__Triple::isWindowsCoreCLREnvironment:
      return toClientReflType<bool>(C);
    case reflenums::llvm__Triple::isWindowsItaniumEnvironment:
      return toClientReflType<bool>(C);
    case reflenums::llvm__Triple::isWindowsCygwinEnvironment:
      return toClientReflType<bool>(C);
    case reflenums::llvm__Triple::isWindowsGNUEnvironment:
      return toClientReflType<bool>(C);
    case reflenums::llvm__Triple::isOSCygMing:
      return toClientReflType<bool>(C);
    case reflenums::llvm__Triple::isOSMSVCRT:
      return toClientReflType<bool>(C);
    case reflenums::llvm__Triple::isOSWindows:
      return toClientReflType<bool>(C);
    case reflenums::llvm__Triple::isOSNaCl:
      return toClientReflType<bool>(C);
    case reflenums::llvm__Triple::isOSLinux:
      return toClientReflType<bool>(C);
    case reflenums::llvm__Triple::isOSKFreeBSD:
      return toClientReflType<bool>(C);
    case reflenums::llvm__Triple::isOSGlibc:
      return toClientReflType<bool>(C);
    case reflenums::llvm__Triple::isOSBinFormatELF:
      return toClientReflType<bool>(C);
    case reflenums::llvm__Triple::isOSBinFormatCOFF:
      return toClientReflType<bool>(C);
    case reflenums::llvm__Triple::isOSBinFormatMachO:
      return toClientReflType<bool>(C);
    case reflenums::llvm__Triple::isOSBinFormatWasm:
      return toClientReflType<bool>(C);
    case reflenums::llvm__Triple::isPS4CPU:
      return toClientReflType<bool>(C);
    case reflenums::llvm__Triple::isPS4:
      return toClientReflType<bool>(C);
    case reflenums::llvm__Triple::isAndroid:
      return toClientReflType<bool>(C);
    case reflenums::llvm__Triple::isAndroidVersionLT:
      return toClientReflType<bool>(C);
    case reflenums::llvm__Triple::isMusl:
      return toClientReflType<bool>(C);
    case reflenums::llvm__Triple::isNVPTX:
      return toClientReflType<bool>(C);
    case reflenums::llvm__Triple::isThumb:
      return toClientReflType<bool>(C);
    case reflenums::llvm__Triple::isARM:
      return toClientReflType<bool>(C);
    case reflenums::llvm__Triple::isAArch64:
      return toClientReflType<bool>(C);
    case reflenums::llvm__Triple::isMIPS32:
      return toClientReflType<bool>(C);
    case reflenums::llvm__Triple::isMIPS64:
      return toClientReflType<bool>(C);
    case reflenums::llvm__Triple::isMIPS:
      return toClientReflType<bool>(C);
    case reflenums::llvm__Triple::supportsCOMDAT:
      return toClientReflType<bool>(C);
    case reflenums::llvm__Triple::hasDefaultEmulatedTLS:
      return toClientReflType<bool>(C);
    case reflenums::llvm__Triple::hasDefaultEmulatedTLS:
      return toClientReflType<bool>(C);
    case reflenums::llvm__Triple::hasDefaultEmulatedTLS:
      return toClientReflType<bool>(C);
    case reflenums::llvm__Triple::hasDefaultEmulatedTLS:
      return toClientReflType<bool>(C);
    case reflenums::llvm__Triple::hasDefaultEmulatedTLS:
      return toClientReflType<bool>(C);
    case reflenums::llvm__Triple::hasDefaultEmulatedTLS:
      return toClientReflType<bool>(C);
    case reflenums::llvm__Triple::hasDefaultEmulatedTLS:
      return toClientReflType<bool>(C);
    case reflenums::llvm__Triple::hasDefaultEmulatedTLS:
      return toClientReflType<bool>(C);
    case reflenums::llvm__Triple::hasDefaultEmulatedTLS:
      return toClientReflType<bool>(C);
    case reflenums::llvm__Triple::hasDefaultEmulatedTLS:
      return toClientReflType<bool>(C);
    case reflenums::llvm__Triple::hasDefaultEmulatedTLS:
      return toClientReflType<bool>(C);
    case reflenums::llvm__Triple::hasDefaultEmulatedTLS:
      return toClientReflType<bool>(C);
    case reflenums::llvm__Triple::get32BitArchVariant:
      return toClientReflType<class llvm::Triple>(C);
    case reflenums::llvm__Triple::get64BitArchVariant:
      return toClientReflType<class llvm::Triple>(C);
    case reflenums::llvm__Triple::getBigEndianArchVariant:
      return toClientReflType<class llvm::Triple>(C);
    case reflenums::llvm__Triple::getLittleEndianArchVariant:
      return toClientReflType<class llvm::Triple>(C);
    case reflenums::llvm__Triple::getARMCPUForArch:
      return toClientReflType<const char *>(C);
    case reflenums::llvm__Triple::isLittleEndian:
      return toClientReflType<bool>(C);
    case reflenums::llvm__Triple::isCompatibleWith:
      return toClientReflType<bool>(C);
    case reflenums::llvm__Triple::merge:
      return toClientReflType<const char *>(C);
    case reflenums::llvm__Triple::getArchTypeName:
      return toClientReflType<const char *>(C);
    case reflenums::llvm__Triple::getArchTypePrefix:
      return toClientReflType<const char *>(C);
    case reflenums::llvm__Triple::getVendorTypeName:
      return toClientReflType<const char *>(C);
    case reflenums::llvm__Triple::getOSTypeName:
      return toClientReflType<const char *>(C);
    case reflenums::llvm__Triple::getEnvironmentTypeName:
      return toClientReflType<const char *>(C);
    case reflenums::llvm__Triple::getArchTypeForLLVMName:
      return toClientReflType<enum llvm::Triple::ArchType>(C);
    case reflenums::llvm__Triple::getArchTypeForLLVMName:
      return toClientReflType<enum llvm::Triple::ArchType>(C);
    case reflenums::llvm__Triple::getArchTypeForLLVMName:
      return toClientReflType<enum llvm::Triple::ArchType>(C);
    case reflenums::llvm__Triple::getArchTypeForLLVMName:
      return toClientReflType<enum llvm::Triple::ArchType>(C);
    case reflenums::llvm__Triple::getArchTypeForLLVMName:
      return toClientReflType<enum llvm::Triple::ArchType>(C);
    case reflenums::llvm__Triple::getArchTypeForLLVMName:
      return toClientReflType<enum llvm::Triple::ArchType>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__ObjCRuntime:
  switch (static_cast<reflenums::clang__ObjCRuntime::memnames>(MemNum)) {
    case reflenums::clang__ObjCRuntime:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCRuntime:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCRuntime:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCRuntime:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCRuntime:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCRuntime:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCRuntime:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCRuntime:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCRuntime:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCRuntime:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCRuntime::getKind:
      return toClientReflType<enum clang::ObjCRuntime::Kind>(C);
    case reflenums::clang__ObjCRuntime::getVersion:
      return toClientReflType<const class llvm::VersionTuple &>(C);
    case reflenums::clang__ObjCRuntime::isNonFragile:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCRuntime::isFragile:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCRuntime::isFragile:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCRuntime::isGNUFamily:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCRuntime::isNeXTFamily:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCRuntime::allowsARC:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCRuntime::hasNativeARC:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCRuntime::hasOptimizedSetter:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCRuntime::allowsWeak:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCRuntime::hasNativeWeak:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCRuntime::hasSubscripting:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCRuntime::allowsSizeofAlignof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCRuntime::allowsPointerArithmetic:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCRuntime::isSubscriptPointerArithmetic:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCRuntime::hasTerminate:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCRuntime::hasWeakClassImport:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCRuntime::hasUnwindExceptions:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCRuntime::hasAtomicCopyHelper:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCRuntime::hasARCUnsafeClaimAutoreleasedReturnValue:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCRuntime::hasEmptyCollections:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCRuntime::hasEmptyCollections:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCRuntime::getAsString:
      return toClientReflType<const char *>(C);
    case reflenums::clang__ObjCRuntime::operator_eq_eq:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCRuntime::operator_not_eq:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCRuntime::operator_not_eq:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCRuntime::operator_not_eq:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCRuntime::operator_not_eq:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCRuntime::operator_not_eq:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCRuntime::operator_not_eq:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__SanitizerSet:
  switch (static_cast<reflenums::clang__SanitizerSet::memnames>(MemNum)) {
    case reflenums::clang__SanitizerSet:::
      return toClientReflType<>(C);
    case reflenums::clang__SanitizerSet::has:
      return toClientReflType<bool>(C);
    case reflenums::clang__SanitizerSet::hasOneOf:
      return toClientReflType<bool>(C);
    case reflenums::clang__SanitizerSet::hasOneOf:
      return toClientReflType<bool>(C);
    case reflenums::clang__SanitizerSet::hasOneOf:
      return toClientReflType<bool>(C);
    case reflenums::clang__SanitizerSet::empty:
      return toClientReflType<bool>(C);
    case reflenums::clang__SanitizerSet::Mask:
      return toClientReflType<unsigned long long>(C);
    case reflenums::clang__SanitizerSet::Mask:
      return toClientReflType<unsigned long long>(C);
    case reflenums::clang__SanitizerSet::Mask:
      return toClientReflType<unsigned long long>(C);
    case reflenums::clang__SanitizerSet::Mask:
      return toClientReflType<unsigned long long>(C);
    case reflenums::clang__SanitizerSet::Mask:
      return toClientReflType<unsigned long long>(C);
    case reflenums::clang__SanitizerSet::Mask:
      return toClientReflType<unsigned long long>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__LangOptionsBase:
  switch (static_cast<reflenums::clang__LangOptionsBase::memnames>(MemNum)) {
    case reflenums::clang__LangOptionsBase:::
      return toClientReflType<>(C);
    case reflenums::clang__LangOptionsBase:::
      return toClientReflType<>(C);
    case reflenums::clang__LangOptionsBase::C99:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::C11:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::C17:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::MSVCCompat:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::MicrosoftExt:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::AsmBlocks:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::Borland:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::CPlusPlus:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::CPlusPlus11:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::CPlusPlus14:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::CPlusPlus17:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::CPlusPlus2a:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::ObjC1:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::ObjC2:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::ObjCDefaultSynthProperties:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::EncodeExtendedBlockSig:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::ObjCInferRelatedResultType:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::AppExt:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::Trigraphs:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::LineComment:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::Bool:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::Half:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::WChar:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::Char8:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::DeclSpecKeyword:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::DollarIdents:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::AsmPreprocessor:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::GNUMode:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::GNUKeywords:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::ImplicitInt:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::Digraphs:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::HexFloats:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::CXXOperatorNames:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::AppleKext:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::PascalStrings:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::WritableStrings:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::ConstStrings:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::LaxVectorConversions:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::AltiVec:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::ZVector:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::Exceptions:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::ObjCExceptions:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::CXXExceptions:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::DWARFExceptions:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::SjLjExceptions:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::SEHExceptions:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::ExternCNoUnwind:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::TraditionalCPP:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::RTTI:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::RTTIData:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::MSBitfields:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::Freestanding:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::NoBuiltin:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::NoMathBuiltin:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::GNUAsm:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::CoroutinesTS:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::RelaxedTemplateTemplateArgs:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::DoubleSquareBracketAttributes:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::ThreadsafeStatics:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::POSIXThreads:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::Blocks:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::EmitAllDecls:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::MathErrno:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::HeinousExtensions:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::Modules:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::ModulesTS:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::CompilingPCH:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::BuildingPCHWithObjectFile:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::ModulesDeclUse:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::ModulesSearchAll:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::ModulesStrictDeclUse:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::ModulesErrorRecovery:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::ImplicitModules:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::ModulesLocalVisibility:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::Optimize:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::OptimizeSize:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::Static:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::PackStruct:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::MaxTypeAlign:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::AlignDouble:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::PICLevel:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::PIE:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::GNUInline:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::NoInlineDefine:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::Deprecated:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::FastMath:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::FiniteMathOnly:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::UnsafeFPMath:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::ObjCGCBitmapPrint:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::AccessControl:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::CharIsSigned:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::WCharSize:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::WCharIsSigned:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::ShortEnums:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::OpenCL:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::OpenCLVersion:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::OpenCLCPlusPlus:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::OpenCLCPlusPlusVersion:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::NativeHalfType:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::NativeHalfArgsAndReturns:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::HalfArgsAndReturns:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::CUDA:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::HIP:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::OpenMP:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::OpenMPSimd:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::OpenMPUseTLS:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::OpenMPIsDevice:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::OpenMPCUDAMode:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::OpenMPHostCXXExceptions:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::RenderScript:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::CUDAIsDevice:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::CUDAAllowVariadicFunctions:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::CUDAHostDeviceConstexpr:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::CUDADeviceApproxTranscendentals:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::CUDARelocatableDeviceCode:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::SizedDeallocation:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::AlignedAllocation:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::AlignedAllocationUnavailable:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::NewAlignOverride:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::ConceptsTS:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::Reflection:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::ModulesCodegen:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::ModulesDebugInfo:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::ElideConstructors:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::DumpRecordLayouts:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::DumpRecordLayoutsSimple:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::DumpVTableLayouts:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::NoConstantCFStrings:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::InlineVisibilityHidden:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::ParseUnknownAnytype:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::DebuggerSupport:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::DebuggerCastResultToId:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::DebuggerObjCLiteral:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::SpellChecking:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::SinglePrecisionConstants:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::FastRelaxedMath:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::NoBitFieldTypeAlign:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::HexagonQdsp6Compat:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::ObjCAutoRefCount:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::ObjCWeakRuntime:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::ObjCWeak:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::ObjCSubscriptingLegacyRuntime:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::CFProtectionBranch:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::FakeAddressSpaceMap:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::IncludeDefaultHeader:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::DelayedTemplateParsing:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::BlocksRuntimeOptional:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::CompleteMemberPointers:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::ArrowDepth:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::InstantiationDepth:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::ConstexprCallDepth:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::ConstexprStepLimit:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::BracketDepth:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::NumLargeByValueCopy:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::MSCompatibilityVersion:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::VtorDispMode:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::ApplePragmaPack:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::RetainCommentsFromSystemHeaders:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::SanitizeAddressFieldPadding:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::XRayInstrument:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::XRayAlwaysEmitCustomEvents:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::XRayAlwaysEmitTypedEvents:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::ForceEmitVTables:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::AllowEditorPlaceholders:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::FunctionAlignment:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::FixedPoint:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::PaddingOnUnsignedFixedPoint:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::PaddingOnUnsignedFixedPoint:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::PaddingOnUnsignedFixedPoint:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::PaddingOnUnsignedFixedPoint:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::PaddingOnUnsignedFixedPoint:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::PaddingOnUnsignedFixedPoint:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::PaddingOnUnsignedFixedPoint:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::PaddingOnUnsignedFixedPoint:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::PaddingOnUnsignedFixedPoint:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::PaddingOnUnsignedFixedPoint:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::PaddingOnUnsignedFixedPoint:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::PaddingOnUnsignedFixedPoint:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::PaddingOnUnsignedFixedPoint:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::PaddingOnUnsignedFixedPoint:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::PaddingOnUnsignedFixedPoint:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::PaddingOnUnsignedFixedPoint:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::PaddingOnUnsignedFixedPoint:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LangOptionsBase::PaddingOnUnsignedFixedPoint:
      return toClientReflType<unsigned int>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__LangOptions:
  switch (static_cast<reflenums::clang__LangOptions::memnames>(MemNum)) {
    case reflenums::clang__LangOptions:::
      return toClientReflType<>(C);
    case reflenums::clang__LangOptions:::
      return toClientReflType<>(C);
    case reflenums::clang__LangOptions:::
      return toClientReflType<>(C);
    case reflenums::clang__LangOptions:::
      return toClientReflType<>(C);
    case reflenums::clang__LangOptions:::
      return toClientReflType<>(C);
    case reflenums::clang__LangOptions:::
      return toClientReflType<>(C);
    case reflenums::clang__LangOptions:::
      return toClientReflType<>(C);
    case reflenums::clang__LangOptions:::
      return toClientReflType<>(C);
    case reflenums::clang__LangOptions:::
      return toClientReflType<>(C);
    case reflenums::clang__LangOptions:::
      return toClientReflType<>(C);
    case reflenums::clang__LangOptions:::
      return toClientReflType<>(C);
    case reflenums::clang__LangOptions:::
      return toClientReflType<>(C);
    case reflenums::clang__LangOptions:::
      return toClientReflType<>(C);
    case reflenums::clang__LangOptions:::
      return toClientReflType<>(C);
    case reflenums::clang__LangOptions::Sanitize:
      return toClientReflType<struct clang::SanitizerSet>(C);
    case reflenums::clang__LangOptions::Sanitize:
      return toClientReflType<struct clang::SanitizerSet>(C);
    case reflenums::clang__LangOptions::Sanitize:
      return toClientReflType<struct clang::SanitizerSet>(C);
    case reflenums::clang__LangOptions::Sanitize:
      return toClientReflType<struct clang::SanitizerSet>(C);
    case reflenums::clang__LangOptions::Sanitize:
      return toClientReflType<struct clang::SanitizerSet>(C);
    case reflenums::clang__LangOptions::ObjCRuntime:
      return toClientReflType<class clang::ObjCRuntime>(C);
    case reflenums::clang__LangOptions::ObjCRuntime:
      return toClientReflType<class clang::ObjCRuntime>(C);
    case reflenums::clang__LangOptions::ObjCRuntime:
      return toClientReflType<class clang::ObjCRuntime>(C);
    case reflenums::clang__LangOptions::ObjCRuntime:
      return toClientReflType<class clang::ObjCRuntime>(C);
    case reflenums::clang__LangOptions::ObjCRuntime:
      return toClientReflType<class clang::ObjCRuntime>(C);
    case reflenums::clang__LangOptions::ObjCRuntime:
      return toClientReflType<class clang::ObjCRuntime>(C);
    case reflenums::clang__LangOptions::CommentOpts:
      return toClientReflType<struct clang::CommentOptions>(C);
    case reflenums::clang__LangOptions::CommentOpts:
      return toClientReflType<struct clang::CommentOptions>(C);
    case reflenums::clang__LangOptions::CommentOpts:
      return toClientReflType<struct clang::CommentOptions>(C);
    case reflenums::clang__LangOptions::CommentOpts:
      return toClientReflType<struct clang::CommentOptions>(C);
    case reflenums::clang__LangOptions::IsHeaderFile:
      return toClientReflType<bool>(C);
    case reflenums::clang__LangOptions::IsHeaderFile:
      return toClientReflType<bool>(C);
    case reflenums::clang__LangOptions::getCompilingModule:
      return toClientReflType<enum clang::LangOptions::CompilingModuleKind>(C);
    case reflenums::clang__LangOptions::getCompilingModule:
      return toClientReflType<enum clang::LangOptions::CompilingModuleKind>(C);
    case reflenums::clang__LangOptions::getMSPointerToMemberRepresentationMethod:
      return toClientReflType<enum clang::LangOptions::PragmaMSPointersToMembersKind>(C);
    case reflenums::clang__LangOptions::getMSPointerToMemberRepresentationMethod:
      return toClientReflType<enum clang::LangOptions::PragmaMSPointersToMembersKind>(C);
    case reflenums::clang__LangOptions::getDefaultCallingConv:
      return toClientReflType<enum clang::LangOptions::DefaultCallingConvention>(C);
    case reflenums::clang__LangOptions::getDefaultCallingConv:
      return toClientReflType<enum clang::LangOptions::DefaultCallingConvention>(C);
    case reflenums::clang__LangOptions::getDefaultFPContractMode:
      return toClientReflType<enum clang::LangOptions::FPContractModeKind>(C);
    case reflenums::clang__LangOptions::getDefaultFPContractMode:
      return toClientReflType<enum clang::LangOptions::FPContractModeKind>(C);
    case reflenums::clang__LangOptions::getAddressSpaceMapMangling:
      return toClientReflType<enum clang::LangOptions::AddrSpaceMapMangling>(C);
    case reflenums::clang__LangOptions::getAddressSpaceMapMangling:
      return toClientReflType<enum clang::LangOptions::AddrSpaceMapMangling>(C);
    case reflenums::clang__LangOptions::getGC:
      return toClientReflType<enum clang::LangOptions::GCMode>(C);
    case reflenums::clang__LangOptions::getGC:
      return toClientReflType<enum clang::LangOptions::GCMode>(C);
    case reflenums::clang__LangOptions::getValueVisibilityMode:
      return toClientReflType<enum clang::Visibility>(C);
    case reflenums::clang__LangOptions::getValueVisibilityMode:
      return toClientReflType<enum clang::Visibility>(C);
    case reflenums::clang__LangOptions::getTypeVisibilityMode:
      return toClientReflType<enum clang::Visibility>(C);
    case reflenums::clang__LangOptions::getTypeVisibilityMode:
      return toClientReflType<enum clang::Visibility>(C);
    case reflenums::clang__LangOptions::getStackProtector:
      return toClientReflType<enum clang::LangOptions::StackProtectorMode>(C);
    case reflenums::clang__LangOptions::getStackProtector:
      return toClientReflType<enum clang::LangOptions::StackProtectorMode>(C);
    case reflenums::clang__LangOptions::getSignedOverflowBehavior:
      return toClientReflType<enum clang::LangOptions::SignedOverflowBehaviorTy>(C);
    case reflenums::clang__LangOptions::getSignedOverflowBehavior:
      return toClientReflType<enum clang::LangOptions::SignedOverflowBehaviorTy>(C);
    case reflenums::clang__LangOptions::getClangABICompat:
      return toClientReflType<enum clang::LangOptions::ClangABI>(C);
    case reflenums::clang__LangOptions::getClangABICompat:
      return toClientReflType<enum clang::LangOptions::ClangABI>(C);
    case reflenums::clang__LangOptions::isCompilingModule:
      return toClientReflType<bool>(C);
    case reflenums::clang__LangOptions::trackLocalOwningModule:
      return toClientReflType<bool>(C);
    case reflenums::clang__LangOptions::isSignedOverflowDefined:
      return toClientReflType<bool>(C);
    case reflenums::clang__LangOptions::isSubscriptPointerArithmetic:
      return toClientReflType<bool>(C);
    case reflenums::clang__LangOptions::isCompatibleWithMSVC:
      return toClientReflType<bool>(C);
    case reflenums::clang__LangOptions::isCompatibleWithMSVC:
      return toClientReflType<bool>(C);
    case reflenums::clang__LangOptions::isNoBuiltinFunc:
      return toClientReflType<bool>(C);
    case reflenums::clang__LangOptions::allowsNonTrivialObjCLifetimeQualifiers:
      return toClientReflType<bool>(C);
    case reflenums::clang__LangOptions::assumeFunctionsAreConvergent:
      return toClientReflType<bool>(C);
    case reflenums::clang__LangOptions::getOpenCLVersionTuple:
      return toClientReflType<class llvm::VersionTuple>(C);
    case reflenums::clang__LangOptions::getOpenCLVersionTuple:
      return toClientReflType<class llvm::VersionTuple>(C);
    case reflenums::clang__LangOptions::getOpenCLVersionTuple:
      return toClientReflType<class llvm::VersionTuple>(C);
    case reflenums::clang__LangOptions::getOpenCLVersionTuple:
      return toClientReflType<class llvm::VersionTuple>(C);
    case reflenums::clang__LangOptions::getOpenCLVersionTuple:
      return toClientReflType<class llvm::VersionTuple>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__FPOptions:
  switch (static_cast<reflenums::clang__FPOptions::memnames>(MemNum)) {
    case reflenums::clang__FPOptions:::
      return toClientReflType<>(C);
    case reflenums::clang__FPOptions:::
      return toClientReflType<>(C);
    case reflenums::clang__FPOptions:::
      return toClientReflType<>(C);
    case reflenums::clang__FPOptions:::
      return toClientReflType<>(C);
    case reflenums::clang__FPOptions:::
      return toClientReflType<>(C);
    case reflenums::clang__FPOptions::allowFPContractWithinStatement:
      return toClientReflType<bool>(C);
    case reflenums::clang__FPOptions::allowFPContractAcrossStatement:
      return toClientReflType<bool>(C);
    case reflenums::clang__FPOptions::allowFPContractAcrossStatement:
      return toClientReflType<bool>(C);
    case reflenums::clang__FPOptions::allowFPContractAcrossStatement:
      return toClientReflType<bool>(C);
    case reflenums::clang__FPOptions::allowFPContractAcrossStatement:
      return toClientReflType<bool>(C);
    case reflenums::clang__FPOptions::getInt:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__FPOptions::getInt:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__FPOptions::getInt:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__FPOptions::getInt:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__FPOptions::getInt:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__FPOptions::getInt:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__FPOptions::getInt:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__FPOptions::getInt:
      return toClientReflType<unsigned int>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__PrinterHelper:
  switch (static_cast<reflenums::clang__PrinterHelper::memnames>(MemNum)) {
    case reflenums::clang__PrinterHelper:::
      return toClientReflType<>(C);
    case reflenums::clang__PrinterHelper:::
      return toClientReflType<>(C);
    case reflenums::clang__PrinterHelper:::
      return toClientReflType<>(C);
    case reflenums::clang__PrinterHelper:::
      return toClientReflType<>(C);
    case reflenums::clang__PrinterHelper:::
      return toClientReflType<>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__PrintingPolicy:
  switch (static_cast<reflenums::clang__PrintingPolicy::memnames>(MemNum)) {
    case reflenums::clang__PrintingPolicy:::
      return toClientReflType<>(C);
    case reflenums::clang__PrintingPolicy:::
      return toClientReflType<>(C);
    case reflenums::clang__PrintingPolicy:::
      return toClientReflType<>(C);
    case reflenums::clang__PrintingPolicy::Indentation:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__PrintingPolicy::SuppressSpecifiers:
      return toClientReflType<bool>(C);
    case reflenums::clang__PrintingPolicy::SuppressTagKeyword:
      return toClientReflType<bool>(C);
    case reflenums::clang__PrintingPolicy::IncludeTagDefinition:
      return toClientReflType<bool>(C);
    case reflenums::clang__PrintingPolicy::SuppressScope:
      return toClientReflType<bool>(C);
    case reflenums::clang__PrintingPolicy::SuppressUnwrittenScope:
      return toClientReflType<bool>(C);
    case reflenums::clang__PrintingPolicy::SuppressInitializers:
      return toClientReflType<bool>(C);
    case reflenums::clang__PrintingPolicy::ConstantArraySizeAsWritten:
      return toClientReflType<bool>(C);
    case reflenums::clang__PrintingPolicy::AnonymousTagLocations:
      return toClientReflType<bool>(C);
    case reflenums::clang__PrintingPolicy::SuppressStrongLifetime:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__PrintingPolicy::SuppressLifetimeQualifiers:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__PrintingPolicy::SuppressTemplateArgsInCXXConstructors:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__PrintingPolicy::Bool:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__PrintingPolicy::Restrict:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__PrintingPolicy::Alignof:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__PrintingPolicy::UnderscoreAlignof:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__PrintingPolicy::UseVoidForZeroParams:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__PrintingPolicy::TerseOutput:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__PrintingPolicy::PolishForDeclaration:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__PrintingPolicy::Half:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__PrintingPolicy::MSWChar:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__PrintingPolicy::IncludeNewlines:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__PrintingPolicy::MSVCFormatting:
      return toClientReflType<bool>(C);
    case reflenums::clang__PrintingPolicy::ConstantsAsWritten:
      return toClientReflType<bool>(C);
    case reflenums::clang__PrintingPolicy::SuppressImplicitBase:
      return toClientReflType<bool>(C);
    case reflenums::clang__PrintingPolicy::FullyQualifiedName:
      return toClientReflType<bool>(C);
    case reflenums::clang__PrintingPolicy::FullyQualifiedName:
      return toClientReflType<bool>(C);
    case reflenums::clang__PrintingPolicy::FullyQualifiedName:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__SrcMgr__ContentCache:
  switch (static_cast<reflenums::clang__SrcMgr__ContentCache::memnames>(MemNum)) {
    case reflenums::clang__SrcMgr__ContentCache:::
      return toClientReflType<>(C);
    case reflenums::clang__SrcMgr__ContentCache:::
      return toClientReflType<>(C);
    case reflenums::clang__SrcMgr__ContentCache:::
      return toClientReflType<>(C);
    case reflenums::clang__SrcMgr__ContentCache:::
      return toClientReflType<>(C);
    case reflenums::clang__SrcMgr__ContentCache::OrigEntry:
      return toClientReflType<const class clang::FileEntry *>(C);
    case reflenums::clang__SrcMgr__ContentCache::ContentsEntry:
      return toClientReflType<const class clang::FileEntry *>(C);
    case reflenums::clang__SrcMgr__ContentCache::SourceLineCache:
      return toClientReflType<unsigned int *>(C);
    case reflenums::clang__SrcMgr__ContentCache::NumLines:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__SrcMgr__ContentCache::BufferOverridden:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__SrcMgr__ContentCache::IsSystemFile:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__SrcMgr__ContentCache::IsTransient:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__SrcMgr__ContentCache::IsTransient:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__SrcMgr__ContentCache::IsTransient:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__SrcMgr__ContentCache::IsTransient:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__SrcMgr__ContentCache::IsTransient:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__SrcMgr__ContentCache::IsTransient:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__SrcMgr__ContentCache::getBuffer:
      return toClientReflType<class llvm::MemoryBuffer *>(C);
    case reflenums::clang__SrcMgr__ContentCache::getSize:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__SrcMgr__ContentCache::getSizeBytesMapped:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__SrcMgr__ContentCache::getMemoryBufferKind:
      return toClientReflType<enum llvm::MemoryBuffer::BufferKind>(C);
    case reflenums::clang__SrcMgr__ContentCache::getRawBuffer:
      return toClientReflType<class llvm::MemoryBuffer *>(C);
    case reflenums::clang__SrcMgr__ContentCache::getRawBuffer:
      return toClientReflType<class llvm::MemoryBuffer *>(C);
    case reflenums::clang__SrcMgr__ContentCache::isBufferInvalid:
      return toClientReflType<bool>(C);
    case reflenums::clang__SrcMgr__ContentCache::shouldFreeBuffer:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__SrcMgr__FileInfo:
  switch (static_cast<reflenums::clang__SrcMgr__FileInfo::memnames>(MemNum)) {
    case reflenums::clang__SrcMgr__FileInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__SrcMgr__FileInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__SrcMgr__FileInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__SrcMgr__FileInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__SrcMgr__FileInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__SrcMgr__FileInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__SrcMgr__FileInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__SrcMgr__FileInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__SrcMgr__FileInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__SrcMgr__FileInfo::get:
      return toClientReflType<class clang::SrcMgr::FileInfo>(C);
    case reflenums::clang__SrcMgr__FileInfo::getIncludeLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SrcMgr__FileInfo::getContentCache:
      return toClientReflType<const class clang::SrcMgr::ContentCache *>(C);
    case reflenums::clang__SrcMgr__FileInfo::getFileCharacteristic:
      return toClientReflType<enum clang::SrcMgr::CharacteristicKind>(C);
    case reflenums::clang__SrcMgr__FileInfo::hasLineDirectives:
      return toClientReflType<bool>(C);
    case reflenums::clang__SrcMgr__FileInfo::hasLineDirectives:
      return toClientReflType<bool>(C);
    case reflenums::clang__SrcMgr__FileInfo::hasLineDirectives:
      return toClientReflType<bool>(C);
    case reflenums::clang__SrcMgr__FileInfo::hasLineDirectives:
      return toClientReflType<bool>(C);
    case reflenums::clang__SrcMgr__FileInfo::hasLineDirectives:
      return toClientReflType<bool>(C);
    case reflenums::clang__SrcMgr__FileInfo::hasLineDirectives:
      return toClientReflType<bool>(C);
    case reflenums::clang__SrcMgr__FileInfo::hasLineDirectives:
      return toClientReflType<bool>(C);
    case reflenums::clang__SrcMgr__FileInfo::hasLineDirectives:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__SrcMgr__ExpansionInfo:
  switch (static_cast<reflenums::clang__SrcMgr__ExpansionInfo::memnames>(MemNum)) {
    case reflenums::clang__SrcMgr__ExpansionInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__SrcMgr__ExpansionInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__SrcMgr__ExpansionInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__SrcMgr__ExpansionInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__SrcMgr__ExpansionInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__SrcMgr__ExpansionInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__SrcMgr__ExpansionInfo::getSpellingLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SrcMgr__ExpansionInfo::getExpansionLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SrcMgr__ExpansionInfo::getExpansionLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SrcMgr__ExpansionInfo::isExpansionTokenRange:
      return toClientReflType<bool>(C);
    case reflenums::clang__SrcMgr__ExpansionInfo::getExpansionLocRange:
      return toClientReflType<class clang::CharSourceRange>(C);
    case reflenums::clang__SrcMgr__ExpansionInfo::isMacroArgExpansion:
      return toClientReflType<bool>(C);
    case reflenums::clang__SrcMgr__ExpansionInfo::isMacroBodyExpansion:
      return toClientReflType<bool>(C);
    case reflenums::clang__SrcMgr__ExpansionInfo::isFunctionMacroExpansion:
      return toClientReflType<bool>(C);
    case reflenums::clang__SrcMgr__ExpansionInfo::create:
      return toClientReflType<class clang::SrcMgr::ExpansionInfo>(C);
    case reflenums::clang__SrcMgr__ExpansionInfo::createForMacroArg:
      return toClientReflType<class clang::SrcMgr::ExpansionInfo>(C);
    case reflenums::clang__SrcMgr__ExpansionInfo::createForTokenSplit:
      return toClientReflType<class clang::SrcMgr::ExpansionInfo>(C);
    case reflenums::clang__SrcMgr__ExpansionInfo::createForTokenSplit:
      return toClientReflType<class clang::SrcMgr::ExpansionInfo>(C);
    case reflenums::clang__SrcMgr__ExpansionInfo::createForTokenSplit:
      return toClientReflType<class clang::SrcMgr::ExpansionInfo>(C);
    case reflenums::clang__SrcMgr__ExpansionInfo::createForTokenSplit:
      return toClientReflType<class clang::SrcMgr::ExpansionInfo>(C);
    case reflenums::clang__SrcMgr__ExpansionInfo::createForTokenSplit:
      return toClientReflType<class clang::SrcMgr::ExpansionInfo>(C);
    case reflenums::clang__SrcMgr__ExpansionInfo::createForTokenSplit:
      return toClientReflType<class clang::SrcMgr::ExpansionInfo>(C);
    case reflenums::clang__SrcMgr__ExpansionInfo::createForTokenSplit:
      return toClientReflType<class clang::SrcMgr::ExpansionInfo>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__SrcMgr__SLocEntry:
  switch (static_cast<reflenums::clang__SrcMgr__SLocEntry::memnames>(MemNum)) {
    case reflenums::clang__SrcMgr__SLocEntry:::
      return toClientReflType<>(C);
    case reflenums::clang__SrcMgr__SLocEntry:::
      return toClientReflType<>(C);
    case reflenums::clang__SrcMgr__SLocEntry:::
      return toClientReflType<>(C);
    case reflenums::clang__SrcMgr__SLocEntry:::
      return toClientReflType<>(C);
    case reflenums::clang__SrcMgr__SLocEntry:::
      return toClientReflType<>(C);
    case reflenums::clang__SrcMgr__SLocEntry:::
      return toClientReflType<>(C);
    case reflenums::clang__SrcMgr__SLocEntry:::
      return toClientReflType<>(C);
    case reflenums::clang__SrcMgr__SLocEntry:::
      return toClientReflType<>(C);
    case reflenums::clang__SrcMgr__SLocEntry:::
      return toClientReflType<>(C);
    case reflenums::clang__SrcMgr__SLocEntry::getOffset:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__SrcMgr__SLocEntry::isExpansion:
      return toClientReflType<bool>(C);
    case reflenums::clang__SrcMgr__SLocEntry::isFile:
      return toClientReflType<bool>(C);
    case reflenums::clang__SrcMgr__SLocEntry::getFile:
      return toClientReflType<const class clang::SrcMgr::FileInfo &>(C);
    case reflenums::clang__SrcMgr__SLocEntry::getExpansion:
      return toClientReflType<const class clang::SrcMgr::ExpansionInfo &>(C);
    case reflenums::clang__SrcMgr__SLocEntry::get:
      return toClientReflType<class clang::SrcMgr::SLocEntry>(C);
    case reflenums::clang__SrcMgr__SLocEntry::get1:
      return toClientReflType<class clang::SrcMgr::SLocEntry>(C);
    case reflenums::clang__SrcMgr__SLocEntry::get1:
      return toClientReflType<class clang::SrcMgr::SLocEntry>(C);
    case reflenums::clang__SrcMgr__SLocEntry::get1:
      return toClientReflType<class clang::SrcMgr::SLocEntry>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__SourceManager:
  switch (static_cast<reflenums::clang__SourceManager::memnames>(MemNum)) {
    case reflenums::clang__SourceManager:::
      return toClientReflType<>(C);
    case reflenums::clang__SourceManager:::
      return toClientReflType<>(C);
    case reflenums::clang__SourceManager:::
      return toClientReflType<>(C);
    case reflenums::clang__SourceManager:::
      return toClientReflType<>(C);
    case reflenums::clang__SourceManager:::
      return toClientReflType<>(C);
    case reflenums::clang__SourceManager::Retain:
      return toClientReflType<void>(C);
    case reflenums::clang__SourceManager::Release:
      return toClientReflType<void>(C);
    case reflenums::clang__SourceManager::Release:
      return toClientReflType<void>(C);
    case reflenums::clang__SourceManager:::
      return toClientReflType<>(C);
    case reflenums::clang__SourceManager:::
      return toClientReflType<>(C);
    case reflenums::clang__SourceManager:::
      return toClientReflType<>(C);
    case reflenums::clang__SourceManager:::
      return toClientReflType<>(C);
    case reflenums::clang__SourceManager:::
      return toClientReflType<>(C);
    case reflenums::clang__SourceManager:::
      return toClientReflType<>(C);
    case reflenums::clang__SourceManager:::
      return toClientReflType<>(C);
    case reflenums::clang__SourceManager:::
      return toClientReflType<>(C);
    case reflenums::clang__SourceManager:::
      return toClientReflType<>(C);
    case reflenums::clang__SourceManager:::
      return toClientReflType<>(C);
    case reflenums::clang__SourceManager:::
      return toClientReflType<>(C);
    case reflenums::clang__SourceManager:::
      return toClientReflType<>(C);
    case reflenums::clang__SourceManager:::
      return toClientReflType<>(C);
    case reflenums::clang__SourceManager:::
      return toClientReflType<>(C);
    case reflenums::clang__SourceManager:::
      return toClientReflType<>(C);
    case reflenums::clang__SourceManager:::
      return toClientReflType<>(C);
    case reflenums::clang__SourceManager:::
      return toClientReflType<>(C);
    case reflenums::clang__SourceManager:::
      return toClientReflType<>(C);
    case reflenums::clang__SourceManager:::
      return toClientReflType<>(C);
    case reflenums::clang__SourceManager:::
      return toClientReflType<>(C);
    case reflenums::clang__SourceManager:::
      return toClientReflType<>(C);
    case reflenums::clang__SourceManager:::
      return toClientReflType<>(C);
    case reflenums::clang__SourceManager:::
      return toClientReflType<>(C);
    case reflenums::clang__SourceManager:::
      return toClientReflType<>(C);
    case reflenums::clang__SourceManager:::
      return toClientReflType<>(C);
    case reflenums::clang__SourceManager:::
      return toClientReflType<>(C);
    case reflenums::clang__SourceManager:::
      return toClientReflType<>(C);
    case reflenums::clang__SourceManager:::
      return toClientReflType<>(C);
    case reflenums::clang__SourceManager:::
      return toClientReflType<>(C);
    case reflenums::clang__SourceManager:::
      return toClientReflType<>(C);
    case reflenums::clang__SourceManager:::
      return toClientReflType<>(C);
    case reflenums::clang__SourceManager:::
      return toClientReflType<>(C);
    case reflenums::clang__SourceManager:::
      return toClientReflType<>(C);
    case reflenums::clang__SourceManager:::
      return toClientReflType<>(C);
    case reflenums::clang__SourceManager:::
      return toClientReflType<>(C);
    case reflenums::clang__SourceManager:::
      return toClientReflType<>(C);
    case reflenums::clang__SourceManager:::
      return toClientReflType<>(C);
    case reflenums::clang__SourceManager:::
      return toClientReflType<>(C);
    case reflenums::clang__SourceManager:::
      return toClientReflType<>(C);
    case reflenums::clang__SourceManager:::
      return toClientReflType<>(C);
    case reflenums::clang__SourceManager:::
      return toClientReflType<>(C);
    case reflenums::clang__SourceManager:::
      return toClientReflType<>(C);
    case reflenums::clang__SourceManager:::
      return toClientReflType<>(C);
    case reflenums::clang__SourceManager:::
      return toClientReflType<>(C);
    case reflenums::clang__SourceManager:::
      return toClientReflType<>(C);
    case reflenums::clang__SourceManager:::
      return toClientReflType<>(C);
    case reflenums::clang__SourceManager:::
      return toClientReflType<>(C);
    case reflenums::clang__SourceManager::getDiagnostics:
      return toClientReflType<class clang::DiagnosticsEngine &>(C);
    case reflenums::clang__SourceManager::getFileManager:
      return toClientReflType<class clang::FileManager &>(C);
    case reflenums::clang__SourceManager::getFileManager:
      return toClientReflType<class clang::FileManager &>(C);
    case reflenums::clang__SourceManager::userFilesAreVolatile:
      return toClientReflType<bool>(C);
    case reflenums::clang__SourceManager::userFilesAreVolatile:
      return toClientReflType<bool>(C);
    case reflenums::clang__SourceManager::userFilesAreVolatile:
      return toClientReflType<bool>(C);
    case reflenums::clang__SourceManager::userFilesAreVolatile:
      return toClientReflType<bool>(C);
    case reflenums::clang__SourceManager::getMainFileID:
      return toClientReflType<class clang::FileID>(C);
    case reflenums::clang__SourceManager::getMainFileID:
      return toClientReflType<class clang::FileID>(C);
    case reflenums::clang__SourceManager::getMainFileID:
      return toClientReflType<class clang::FileID>(C);
    case reflenums::clang__SourceManager::getPreambleFileID:
      return toClientReflType<class clang::FileID>(C);
    case reflenums::clang__SourceManager::getPreambleFileID:
      return toClientReflType<class clang::FileID>(C);
    case reflenums::clang__SourceManager::getPreambleFileID:
      return toClientReflType<class clang::FileID>(C);
    case reflenums::clang__SourceManager::getPreambleFileID:
      return toClientReflType<class clang::FileID>(C);
    case reflenums::clang__SourceManager::getPreambleFileID:
      return toClientReflType<class clang::FileID>(C);
    case reflenums::clang__SourceManager::getPreambleFileID:
      return toClientReflType<class clang::FileID>(C);
    case reflenums::clang__SourceManager::getPreambleFileID:
      return toClientReflType<class clang::FileID>(C);
    case reflenums::clang__SourceManager::getPreambleFileID:
      return toClientReflType<class clang::FileID>(C);
    case reflenums::clang__SourceManager::getPreambleFileID:
      return toClientReflType<class clang::FileID>(C);
    case reflenums::clang__SourceManager::getPreambleFileID:
      return toClientReflType<class clang::FileID>(C);
    case reflenums::clang__SourceManager::getPreambleFileID:
      return toClientReflType<class clang::FileID>(C);
    case reflenums::clang__SourceManager::getPreambleFileID:
      return toClientReflType<class clang::FileID>(C);
    case reflenums::clang__SourceManager::getPreambleFileID:
      return toClientReflType<class clang::FileID>(C);
    case reflenums::clang__SourceManager::isFileOverridden:
      return toClientReflType<bool>(C);
    case reflenums::clang__SourceManager::isFileOverridden:
      return toClientReflType<bool>(C);
    case reflenums::clang__SourceManager::isFileOverridden:
      return toClientReflType<bool>(C);
    case reflenums::clang__SourceManager::isFileOverridden:
      return toClientReflType<bool>(C);
    case reflenums::clang__SourceManager::getBuffer:
      return toClientReflType<class llvm::MemoryBuffer *>(C);
    case reflenums::clang__SourceManager::getBuffer1:
      return toClientReflType<class llvm::MemoryBuffer *>(C);
    case reflenums::clang__SourceManager::getFileEntryForID:
      return toClientReflType<const class clang::FileEntry *>(C);
    case reflenums::clang__SourceManager::getFileEntryForSLocEntry:
      return toClientReflType<const class clang::FileEntry *>(C);
    case reflenums::clang__SourceManager::getBufferData:
      return toClientReflType<const char *>(C);
    case reflenums::clang__SourceManager::getNumCreatedFIDsForFileID:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__SourceManager::setNumCreatedFIDsForFileID:
      return toClientReflType<void>(C);
    case reflenums::clang__SourceManager::getFileID:
      return toClientReflType<class clang::FileID>(C);
    case reflenums::clang__SourceManager::getFilename:
      return toClientReflType<const char *>(C);
    case reflenums::clang__SourceManager::getLocForStartOfFile:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SourceManager::getLocForEndOfFile:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SourceManager::getIncludeLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SourceManager::getIncludeLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SourceManager::getExpansionLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SourceManager::getFileLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SourceManager::getImmediateExpansionRange:
      return toClientReflType<class clang::CharSourceRange>(C);
    case reflenums::clang__SourceManager::getExpansionRange:
      return toClientReflType<class clang::CharSourceRange>(C);
    case reflenums::clang__SourceManager::getExpansionRange1:
      return toClientReflType<class clang::CharSourceRange>(C);
    case reflenums::clang__SourceManager::getExpansionRange2:
      return toClientReflType<class clang::CharSourceRange>(C);
    case reflenums::clang__SourceManager::getSpellingLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SourceManager::getImmediateSpellingLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SourceManager::getComposedLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SourceManager::getComposedLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SourceManager::getComposedLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SourceManager::getComposedLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SourceManager::getComposedLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SourceManager::getFileOffset:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__SourceManager::isMacroArgExpansion:
      return toClientReflType<bool>(C);
    case reflenums::clang__SourceManager::isMacroBodyExpansion:
      return toClientReflType<bool>(C);
    case reflenums::clang__SourceManager::isAtStartOfImmediateMacroExpansion:
      return toClientReflType<bool>(C);
    case reflenums::clang__SourceManager::isAtEndOfImmediateMacroExpansion:
      return toClientReflType<bool>(C);
    case reflenums::clang__SourceManager::isInSLocAddrSpace:
      return toClientReflType<bool>(C);
    case reflenums::clang__SourceManager::isInSameSLocAddrSpace:
      return toClientReflType<bool>(C);
    case reflenums::clang__SourceManager::getCharacterData:
      return toClientReflType<const char *>(C);
    case reflenums::clang__SourceManager::getColumnNumber:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__SourceManager::getSpellingColumnNumber:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__SourceManager::getExpansionColumnNumber:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__SourceManager::getPresumedColumnNumber:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__SourceManager::getLineNumber:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__SourceManager::getSpellingLineNumber:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__SourceManager::getExpansionLineNumber:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__SourceManager::getPresumedLineNumber:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__SourceManager::getBufferName:
      return toClientReflType<const char *>(C);
    case reflenums::clang__SourceManager::getFileCharacteristic:
      return toClientReflType<enum clang::SrcMgr::CharacteristicKind>(C);
    case reflenums::clang__SourceManager::getPresumedLoc:
      return toClientReflType<class clang::PresumedLoc>(C);
    case reflenums::clang__SourceManager::isInMainFile:
      return toClientReflType<bool>(C);
    case reflenums::clang__SourceManager::isWrittenInSameFile:
      return toClientReflType<bool>(C);
    case reflenums::clang__SourceManager::isWrittenInMainFile:
      return toClientReflType<bool>(C);
    case reflenums::clang__SourceManager::isInSystemHeader:
      return toClientReflType<bool>(C);
    case reflenums::clang__SourceManager::isInExternCSystemHeader:
      return toClientReflType<bool>(C);
    case reflenums::clang__SourceManager::isInSystemMacro:
      return toClientReflType<bool>(C);
    case reflenums::clang__SourceManager::getFileIDSize:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__SourceManager::isInFileID:
      return toClientReflType<bool>(C);
    case reflenums::clang__SourceManager::isInFileID:
      return toClientReflType<bool>(C);
    case reflenums::clang__SourceManager::isInFileID:
      return toClientReflType<bool>(C);
    case reflenums::clang__SourceManager::hasLineTable:
      return toClientReflType<bool>(C);
    case reflenums::clang__SourceManager::hasLineTable:
      return toClientReflType<bool>(C);
    case reflenums::clang__SourceManager::getContentCacheSize:
      return toClientReflType<unsigned long>(C);
    case reflenums::clang__SourceManager::getContentCacheSize:
      return toClientReflType<unsigned long>(C);
    case reflenums::clang__SourceManager::getContentCacheSize:
      return toClientReflType<unsigned long>(C);
    case reflenums::clang__SourceManager::getDataStructureSizes:
      return toClientReflType<unsigned long>(C);
    case reflenums::clang__SourceManager::translateFileLineCol:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SourceManager::translateFile:
      return toClientReflType<class clang::FileID>(C);
    case reflenums::clang__SourceManager::translateLineCol:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SourceManager::getMacroArgExpandedLocation:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SourceManager::isBeforeInTranslationUnit:
      return toClientReflType<bool>(C);
    case reflenums::clang__SourceManager::isBeforeInTranslationUnit:
      return toClientReflType<bool>(C);
    case reflenums::clang__SourceManager::isBeforeInSLocAddrSpace:
      return toClientReflType<bool>(C);
    case reflenums::clang__SourceManager::isBeforeInSLocAddrSpace1:
      return toClientReflType<bool>(C);
    case reflenums::clang__SourceManager::isPointWithin:
      return toClientReflType<bool>(C);
    case reflenums::clang__SourceManager::isPointWithin:
      return toClientReflType<bool>(C);
    case reflenums::clang__SourceManager::isPointWithin:
      return toClientReflType<bool>(C);
    case reflenums::clang__SourceManager::isPointWithin:
      return toClientReflType<bool>(C);
    case reflenums::clang__SourceManager::hasFileInfo:
      return toClientReflType<bool>(C);
    case reflenums::clang__SourceManager::PrintStats:
      return toClientReflType<void>(C);
    case reflenums::clang__SourceManager::dump:
      return toClientReflType<void>(C);
    case reflenums::clang__SourceManager::local_sloc_entry_size:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__SourceManager::getLocalSLocEntry:
      return toClientReflType<const class clang::SrcMgr::SLocEntry &>(C);
    case reflenums::clang__SourceManager::loaded_sloc_entry_size:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__SourceManager::getLoadedSLocEntry:
      return toClientReflType<const class clang::SrcMgr::SLocEntry &>(C);
    case reflenums::clang__SourceManager::getSLocEntry:
      return toClientReflType<const class clang::SrcMgr::SLocEntry &>(C);
    case reflenums::clang__SourceManager::getNextLocalOffset:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__SourceManager::getNextLocalOffset:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__SourceManager::getNextLocalOffset:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__SourceManager::isLoadedSourceLocation:
      return toClientReflType<bool>(C);
    case reflenums::clang__SourceManager::isLocalSourceLocation:
      return toClientReflType<bool>(C);
    case reflenums::clang__SourceManager::isLoadedFileID:
      return toClientReflType<bool>(C);
    case reflenums::clang__SourceManager::isLocalFileID:
      return toClientReflType<bool>(C);
    case reflenums::clang__SourceManager::getImmediateMacroCallerLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SourceManager::getTopMacroCallerLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SourceManager::getTopMacroCallerLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SourceManager::getTopMacroCallerLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SourceManager::getTopMacroCallerLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SourceManager::getTopMacroCallerLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SourceManager::getTopMacroCallerLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SourceManager::getTopMacroCallerLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SourceManager::getTopMacroCallerLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SourceManager::getTopMacroCallerLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SourceManager::getTopMacroCallerLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SourceManager::getTopMacroCallerLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SourceManager::getTopMacroCallerLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SourceManager::getTopMacroCallerLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SourceManager::getTopMacroCallerLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SourceManager::getTopMacroCallerLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SourceManager::getTopMacroCallerLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SourceManager::getTopMacroCallerLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SourceManager::getTopMacroCallerLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SourceManager::getTopMacroCallerLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SourceManager::getTopMacroCallerLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SourceManager::getTopMacroCallerLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SourceManager::getTopMacroCallerLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SourceManager::getTopMacroCallerLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SourceManager::getTopMacroCallerLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SourceManager::getTopMacroCallerLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SourceManager::getTopMacroCallerLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__RawComment:
  switch (static_cast<reflenums::clang__RawComment::memnames>(MemNum)) {
    case reflenums::clang__RawComment:::
      return toClientReflType<>(C);
    case reflenums::clang__RawComment:::
      return toClientReflType<>(C);
    case reflenums::clang__RawComment:::
      return toClientReflType<>(C);
    case reflenums::clang__RawComment:::
      return toClientReflType<>(C);
    case reflenums::clang__RawComment:::
      return toClientReflType<>(C);
    case reflenums::clang__RawComment::getKind:
      return toClientReflType<enum clang::RawComment::CommentKind>(C);
    case reflenums::clang__RawComment::isInvalid:
      return toClientReflType<bool>(C);
    case reflenums::clang__RawComment::isMerged:
      return toClientReflType<bool>(C);
    case reflenums::clang__RawComment::isAttached:
      return toClientReflType<bool>(C);
    case reflenums::clang__RawComment::isAttached:
      return toClientReflType<bool>(C);
    case reflenums::clang__RawComment::isTrailingComment:
      return toClientReflType<bool>(C);
    case reflenums::clang__RawComment::isAlmostTrailingComment:
      return toClientReflType<bool>(C);
    case reflenums::clang__RawComment::isOrdinary:
      return toClientReflType<bool>(C);
    case reflenums::clang__RawComment::isDocumentation:
      return toClientReflType<bool>(C);
    case reflenums::clang__RawComment::getRawText:
      return toClientReflType<const char *>(C);
    case reflenums::clang__RawComment::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__RawComment::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__RawComment::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__RawComment::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__RawComment::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__RawComment::getBriefText:
      return toClientReflType<const char *>(C);
    case reflenums::clang__RawComment::getFormattedText:
      return toClientReflType<const char *>(C);
    case reflenums::clang__RawComment::getFormattedText:
      return toClientReflType<const char *>(C);
    case reflenums::clang__RawComment::getFormattedText:
      return toClientReflType<const char *>(C);
    case reflenums::clang__RawComment::getFormattedText:
      return toClientReflType<const char *>(C);
    case reflenums::clang__RawComment::getFormattedText:
      return toClientReflType<const char *>(C);
    case reflenums::clang__RawComment::getFormattedText:
      return toClientReflType<const char *>(C);
    case reflenums::clang__RawComment::getFormattedText:
      return toClientReflType<const char *>(C);
    case reflenums::clang__RawComment::getFormattedText:
      return toClientReflType<const char *>(C);
    case reflenums::clang__RawComment::getFormattedText:
      return toClientReflType<const char *>(C);
    case reflenums::clang__RawComment::getFormattedText:
      return toClientReflType<const char *>(C);
    case reflenums::clang__RawComment::getFormattedText:
      return toClientReflType<const char *>(C);
    case reflenums::clang__RawComment::getFormattedText:
      return toClientReflType<const char *>(C);
    case reflenums::clang__RawComment::getFormattedText:
      return toClientReflType<const char *>(C);
    case reflenums::clang__RawComment::getFormattedText:
      return toClientReflType<const char *>(C);
    case reflenums::clang__RawComment::getFormattedText:
      return toClientReflType<const char *>(C);
    case reflenums::clang__RawComment::getFormattedText:
      return toClientReflType<const char *>(C);
    case reflenums::clang__RawComment::getFormattedText:
      return toClientReflType<const char *>(C);
    case reflenums::clang__RawComment::getFormattedText:
      return toClientReflType<const char *>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__SanitizerBlacklist:
  switch (static_cast<reflenums::clang__SanitizerBlacklist::memnames>(MemNum)) {
    case reflenums::clang__SanitizerBlacklist:::
      return toClientReflType<>(C);
    case reflenums::clang__SanitizerBlacklist:::
      return toClientReflType<>(C);
    case reflenums::clang__SanitizerBlacklist:::
      return toClientReflType<>(C);
    case reflenums::clang__SanitizerBlacklist:::
      return toClientReflType<>(C);
    case reflenums::clang__SanitizerBlacklist:::
      return toClientReflType<>(C);
    case reflenums::clang__SanitizerBlacklist::isBlacklistedGlobal:
      return toClientReflType<bool>(C);
    case reflenums::clang__SanitizerBlacklist::isBlacklistedType:
      return toClientReflType<bool>(C);
    case reflenums::clang__SanitizerBlacklist::isBlacklistedFunction:
      return toClientReflType<bool>(C);
    case reflenums::clang__SanitizerBlacklist::isBlacklistedFile:
      return toClientReflType<bool>(C);
    case reflenums::clang__SanitizerBlacklist::isBlacklistedLocation:
      return toClientReflType<bool>(C);
    case reflenums::clang__SanitizerBlacklist::isBlacklistedLocation:
      return toClientReflType<bool>(C);
    case reflenums::clang__SanitizerBlacklist::isBlacklistedLocation:
      return toClientReflType<bool>(C);
    case reflenums::clang__SanitizerBlacklist::isBlacklistedLocation:
      return toClientReflType<bool>(C);
    case reflenums::clang__SanitizerBlacklist::isBlacklistedLocation:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__TargetCXXABI:
  switch (static_cast<reflenums::clang__TargetCXXABI::memnames>(MemNum)) {
    case reflenums::clang__TargetCXXABI:::
      return toClientReflType<>(C);
    case reflenums::clang__TargetCXXABI:::
      return toClientReflType<>(C);
    case reflenums::clang__TargetCXXABI:::
      return toClientReflType<>(C);
    case reflenums::clang__TargetCXXABI:::
      return toClientReflType<>(C);
    case reflenums::clang__TargetCXXABI:::
      return toClientReflType<>(C);
    case reflenums::clang__TargetCXXABI:::
      return toClientReflType<>(C);
    case reflenums::clang__TargetCXXABI:::
      return toClientReflType<>(C);
    case reflenums::clang__TargetCXXABI:::
      return toClientReflType<>(C);
    case reflenums::clang__TargetCXXABI:::
      return toClientReflType<>(C);
    case reflenums::clang__TargetCXXABI::getKind:
      return toClientReflType<enum clang::TargetCXXABI::Kind>(C);
    case reflenums::clang__TargetCXXABI::isItaniumFamily:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetCXXABI::isMicrosoft:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetCXXABI::areMemberFunctionsAligned:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetCXXABI::areArgsDestroyedLeftToRightInCallee:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetCXXABI::hasConstructorVariants:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetCXXABI::hasPrimaryVBases:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetCXXABI::hasKeyFunctions:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetCXXABI::canKeyFunctionBeInline:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetCXXABI::canKeyFunctionBeInline:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetCXXABI::getTailPaddingUseRules:
      return toClientReflType<enum clang::TargetCXXABI::TailPaddingUseRules>(C);
    case reflenums::clang__TargetCXXABI::operator_eq_eq:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetCXXABI::operator_not_eq:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetCXXABI::operator_not_eq:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetCXXABI::operator_not_eq:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__OpenCLOptions:
  switch (static_cast<reflenums::clang__OpenCLOptions::memnames>(MemNum)) {
    case reflenums::clang__OpenCLOptions:::
      return toClientReflType<>(C);
    case reflenums::clang__OpenCLOptions:::
      return toClientReflType<>(C);
    case reflenums::clang__OpenCLOptions:::
      return toClientReflType<>(C);
    case reflenums::clang__OpenCLOptions:::
      return toClientReflType<>(C);
    case reflenums::clang__OpenCLOptions::isKnown:
      return toClientReflType<bool>(C);
    case reflenums::clang__OpenCLOptions::isEnabled:
      return toClientReflType<bool>(C);
    case reflenums::clang__OpenCLOptions::isSupported:
      return toClientReflType<bool>(C);
    case reflenums::clang__OpenCLOptions::isSupportedCore:
      return toClientReflType<bool>(C);
    case reflenums::clang__OpenCLOptions::isSupportedExtension:
      return toClientReflType<bool>(C);
    case reflenums::clang__OpenCLOptions::isSupportedExtension:
      return toClientReflType<bool>(C);
    case reflenums::clang__OpenCLOptions::isSupportedExtension:
      return toClientReflType<bool>(C);
    case reflenums::clang__OpenCLOptions::isSupportedExtension:
      return toClientReflType<bool>(C);
    case reflenums::clang__OpenCLOptions::isSupportedExtension:
      return toClientReflType<bool>(C);
    case reflenums::clang__OpenCLOptions::isSupportedExtension:
      return toClientReflType<bool>(C);
    case reflenums::clang__OpenCLOptions::isSupportedExtension:
      return toClientReflType<bool>(C);
    case reflenums::clang__OpenCLOptions::isSupportedExtension:
      return toClientReflType<bool>(C);
    case reflenums::clang__OpenCLOptions::isSupportedExtension:
      return toClientReflType<bool>(C);
    case reflenums::clang__OpenCLOptions::isSupportedExtension:
      return toClientReflType<bool>(C);
    case reflenums::clang__OpenCLOptions::isSupportedExtension:
      return toClientReflType<bool>(C);
    case reflenums::clang__OpenCLOptions::isSupportedExtension:
      return toClientReflType<bool>(C);
    case reflenums::clang__OpenCLOptions::isSupportedExtension:
      return toClientReflType<bool>(C);
    case reflenums::clang__OpenCLOptions::isSupportedExtension:
      return toClientReflType<bool>(C);
    case reflenums::clang__OpenCLOptions::isSupportedExtension:
      return toClientReflType<bool>(C);
    case reflenums::clang__OpenCLOptions::isSupportedExtension:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__TargetOptions:
  switch (static_cast<reflenums::clang__TargetOptions::memnames>(MemNum)) {
    case reflenums::clang__TargetOptions:::
      return toClientReflType<>(C);
    case reflenums::clang__TargetOptions:::
      return toClientReflType<>(C);
    case reflenums::clang__TargetOptions:::
      return toClientReflType<>(C);
    case reflenums::clang__TargetOptions:::
      return toClientReflType<>(C);
    case reflenums::clang__TargetOptions:::
      return toClientReflType<>(C);
    case reflenums::clang__TargetOptions:::
      return toClientReflType<>(C);
    case reflenums::clang__TargetOptions:::
      return toClientReflType<>(C);
    case reflenums::clang__TargetOptions::EABIVersion:
      return toClientReflType<enum llvm::EABI>(C);
    case reflenums::clang__TargetOptions::EABIVersion:
      return toClientReflType<enum llvm::EABI>(C);
    case reflenums::clang__TargetOptions::EABIVersion:
      return toClientReflType<enum llvm::EABI>(C);
    case reflenums::clang__TargetOptions::EABIVersion:
      return toClientReflType<enum llvm::EABI>(C);
    case reflenums::clang__TargetOptions::SupportedOpenCLOptions:
      return toClientReflType<class clang::OpenCLOptions>(C);
    case reflenums::clang__TargetOptions::SupportedOpenCLOptions:
      return toClientReflType<class clang::OpenCLOptions>(C);
    case reflenums::clang__TargetOptions::ForceEnableInt128:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetOptions::NVPTXUseShortPointers:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetOptions::NVPTXUseShortPointers:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetOptions::NVPTXUseShortPointers:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetOptions::NVPTXUseShortPointers:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetOptions::NVPTXUseShortPointers:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_llvm__Type:
  switch (static_cast<reflenums::llvm__Type::memnames>(MemNum)) {
    case reflenums::llvm__Type:::
      return toClientReflType<>(C);
    case reflenums::llvm__Type:::
      return toClientReflType<>(C);
    case reflenums::llvm__Type:::
      return toClientReflType<>(C);
    case reflenums::llvm__Type:::
      return toClientReflType<>(C);
    case reflenums::llvm__Type:::
      return toClientReflType<>(C);
    case reflenums::llvm__Type:::
      return toClientReflType<>(C);
    case reflenums::llvm__Type:::
      return toClientReflType<>(C);
    case reflenums::llvm__Type:::
      return toClientReflType<>(C);
    case reflenums::llvm__Type:::
      return toClientReflType<>(C);
    case reflenums::llvm__Type:::
      return toClientReflType<>(C);
    case reflenums::llvm__Type:::
      return toClientReflType<>(C);
    case reflenums::llvm__Type:::
      return toClientReflType<>(C);
    case reflenums::llvm__Type:::
      return toClientReflType<>(C);
    case reflenums::llvm__Type:::
      return toClientReflType<>(C);
    case reflenums::llvm__Type:::
      return toClientReflType<>(C);
    case reflenums::llvm__Type:::
      return toClientReflType<>(C);
    case reflenums::llvm__Type:::
      return toClientReflType<>(C);
    case reflenums::llvm__Type::print:
      return toClientReflType<void>(C);
    case reflenums::llvm__Type::dump:
      return toClientReflType<void>(C);
    case reflenums::llvm__Type::dump:
      return toClientReflType<void>(C);
    case reflenums::llvm__Type::getTypeID:
      return toClientReflType<enum llvm::Type::TypeID>(C);
    case reflenums::llvm__Type::isVoidTy:
      return toClientReflType<bool>(C);
    case reflenums::llvm__Type::isHalfTy:
      return toClientReflType<bool>(C);
    case reflenums::llvm__Type::isFloatTy:
      return toClientReflType<bool>(C);
    case reflenums::llvm__Type::isDoubleTy:
      return toClientReflType<bool>(C);
    case reflenums::llvm__Type::isX86_FP80Ty:
      return toClientReflType<bool>(C);
    case reflenums::llvm__Type::isFP128Ty:
      return toClientReflType<bool>(C);
    case reflenums::llvm__Type::isPPC_FP128Ty:
      return toClientReflType<bool>(C);
    case reflenums::llvm__Type::isFloatingPointTy:
      return toClientReflType<bool>(C);
    case reflenums::llvm__Type::isFloatingPointTy:
      return toClientReflType<bool>(C);
    case reflenums::llvm__Type::isX86_MMXTy:
      return toClientReflType<bool>(C);
    case reflenums::llvm__Type::isFPOrFPVectorTy:
      return toClientReflType<bool>(C);
    case reflenums::llvm__Type::isLabelTy:
      return toClientReflType<bool>(C);
    case reflenums::llvm__Type::isMetadataTy:
      return toClientReflType<bool>(C);
    case reflenums::llvm__Type::isTokenTy:
      return toClientReflType<bool>(C);
    case reflenums::llvm__Type::isIntegerTy:
      return toClientReflType<bool>(C);
    case reflenums::llvm__Type::isIntegerTy1:
      return toClientReflType<bool>(C);
    case reflenums::llvm__Type::isIntOrIntVectorTy:
      return toClientReflType<bool>(C);
    case reflenums::llvm__Type::isIntOrIntVectorTy1:
      return toClientReflType<bool>(C);
    case reflenums::llvm__Type::isIntOrPtrTy:
      return toClientReflType<bool>(C);
    case reflenums::llvm__Type::isFunctionTy:
      return toClientReflType<bool>(C);
    case reflenums::llvm__Type::isStructTy:
      return toClientReflType<bool>(C);
    case reflenums::llvm__Type::isArrayTy:
      return toClientReflType<bool>(C);
    case reflenums::llvm__Type::isPointerTy:
      return toClientReflType<bool>(C);
    case reflenums::llvm__Type::isPtrOrPtrVectorTy:
      return toClientReflType<bool>(C);
    case reflenums::llvm__Type::isVectorTy:
      return toClientReflType<bool>(C);
    case reflenums::llvm__Type::canLosslesslyBitCastTo:
      return toClientReflType<bool>(C);
    case reflenums::llvm__Type::isEmptyTy:
      return toClientReflType<bool>(C);
    case reflenums::llvm__Type::isFirstClassType:
      return toClientReflType<bool>(C);
    case reflenums::llvm__Type::isSingleValueType:
      return toClientReflType<bool>(C);
    case reflenums::llvm__Type::isAggregateType:
      return toClientReflType<bool>(C);
    case reflenums::llvm__Type::isAggregateType:
      return toClientReflType<bool>(C);
    case reflenums::llvm__Type::getPrimitiveSizeInBits:
      return toClientReflType<unsigned int>(C);
    case reflenums::llvm__Type::getScalarSizeInBits:
      return toClientReflType<unsigned int>(C);
    case reflenums::llvm__Type::getFPMantissaWidth:
      return toClientReflType<int>(C);
    case reflenums::llvm__Type::getScalarType:
      return toClientReflType<class llvm::Type *>(C);
    case reflenums::llvm__Type::getScalarType:
      return toClientReflType<class llvm::Type *>(C);
    case reflenums::llvm__Type::getScalarType:
      return toClientReflType<class llvm::Type *>(C);
    case reflenums::llvm__Type::getScalarType:
      return toClientReflType<class llvm::Type *>(C);
    case reflenums::llvm__Type::subtypes:
      return toClientReflType<class llvm::ArrayRef<class llvm::Type *>>(C);
    case reflenums::llvm__Type::subtypes:
      return toClientReflType<class llvm::ArrayRef<class llvm::Type *>>(C);
    case reflenums::llvm__Type::subtypes:
      return toClientReflType<class llvm::ArrayRef<class llvm::Type *>>(C);
    case reflenums::llvm__Type::subtypes:
      return toClientReflType<class llvm::ArrayRef<class llvm::Type *>>(C);
    case reflenums::llvm__Type::getContainedType:
      return toClientReflType<class llvm::Type *>(C);
    case reflenums::llvm__Type::getNumContainedTypes:
      return toClientReflType<unsigned int>(C);
    case reflenums::llvm__Type::getIntegerBitWidth:
      return toClientReflType<unsigned int>(C);
    case reflenums::llvm__Type::getFunctionParamType:
      return toClientReflType<class llvm::Type *>(C);
    case reflenums::llvm__Type::getFunctionNumParams:
      return toClientReflType<unsigned int>(C);
    case reflenums::llvm__Type::isFunctionVarArg:
      return toClientReflType<bool>(C);
    case reflenums::llvm__Type::getStructName:
      return toClientReflType<const char *>(C);
    case reflenums::llvm__Type::getStructNumElements:
      return toClientReflType<unsigned int>(C);
    case reflenums::llvm__Type::getStructElementType:
      return toClientReflType<class llvm::Type *>(C);
    case reflenums::llvm__Type::getSequentialElementType:
      return toClientReflType<class llvm::Type *>(C);
    case reflenums::llvm__Type::getArrayNumElements:
      return toClientReflType<unsigned long long>(C);
    case reflenums::llvm__Type::getArrayElementType:
      return toClientReflType<class llvm::Type *>(C);
    case reflenums::llvm__Type::getVectorNumElements:
      return toClientReflType<unsigned int>(C);
    case reflenums::llvm__Type::getVectorElementType:
      return toClientReflType<class llvm::Type *>(C);
    case reflenums::llvm__Type::getPointerElementType:
      return toClientReflType<class llvm::Type *>(C);
    case reflenums::llvm__Type::getPointerAddressSpace:
      return toClientReflType<unsigned int>(C);
    case reflenums::llvm__Type::getPointerAddressSpace:
      return toClientReflType<unsigned int>(C);
    case reflenums::llvm__Type::getPointerAddressSpace:
      return toClientReflType<unsigned int>(C);
    case reflenums::llvm__Type::getPointerAddressSpace:
      return toClientReflType<unsigned int>(C);
    case reflenums::llvm__Type::getPointerAddressSpace:
      return toClientReflType<unsigned int>(C);
    case reflenums::llvm__Type::getPointerAddressSpace:
      return toClientReflType<unsigned int>(C);
    case reflenums::llvm__Type::getPointerAddressSpace:
      return toClientReflType<unsigned int>(C);
    case reflenums::llvm__Type::getPointerAddressSpace:
      return toClientReflType<unsigned int>(C);
    case reflenums::llvm__Type::getPointerAddressSpace:
      return toClientReflType<unsigned int>(C);
    case reflenums::llvm__Type::getPointerAddressSpace:
      return toClientReflType<unsigned int>(C);
    case reflenums::llvm__Type::getPointerAddressSpace:
      return toClientReflType<unsigned int>(C);
    case reflenums::llvm__Type::getPointerAddressSpace:
      return toClientReflType<unsigned int>(C);
    case reflenums::llvm__Type::getPointerAddressSpace:
      return toClientReflType<unsigned int>(C);
    case reflenums::llvm__Type::getPointerAddressSpace:
      return toClientReflType<unsigned int>(C);
    case reflenums::llvm__Type::getPointerAddressSpace:
      return toClientReflType<unsigned int>(C);
    case reflenums::llvm__Type::getPointerAddressSpace:
      return toClientReflType<unsigned int>(C);
    case reflenums::llvm__Type::getPointerAddressSpace:
      return toClientReflType<unsigned int>(C);
    case reflenums::llvm__Type::getPointerAddressSpace:
      return toClientReflType<unsigned int>(C);
    case reflenums::llvm__Type::getPointerAddressSpace:
      return toClientReflType<unsigned int>(C);
    case reflenums::llvm__Type::getPointerAddressSpace:
      return toClientReflType<unsigned int>(C);
    case reflenums::llvm__Type::getPointerAddressSpace:
      return toClientReflType<unsigned int>(C);
    case reflenums::llvm__Type::getPointerAddressSpace:
      return toClientReflType<unsigned int>(C);
    case reflenums::llvm__Type::getPointerAddressSpace:
      return toClientReflType<unsigned int>(C);
    case reflenums::llvm__Type::getPointerAddressSpace:
      return toClientReflType<unsigned int>(C);
    case reflenums::llvm__Type::getPointerAddressSpace:
      return toClientReflType<unsigned int>(C);
    case reflenums::llvm__Type::getPointerAddressSpace:
      return toClientReflType<unsigned int>(C);
    case reflenums::llvm__Type::getPointerAddressSpace:
      return toClientReflType<unsigned int>(C);
    case reflenums::llvm__Type::getPointerAddressSpace:
      return toClientReflType<unsigned int>(C);
    case reflenums::llvm__Type::getPointerAddressSpace:
      return toClientReflType<unsigned int>(C);
    case reflenums::llvm__Type::getPointerAddressSpace:
      return toClientReflType<unsigned int>(C);
    case reflenums::llvm__Type::getPointerAddressSpace:
      return toClientReflType<unsigned int>(C);
    case reflenums::llvm__Type::getPointerAddressSpace:
      return toClientReflType<unsigned int>(C);
    case reflenums::llvm__Type::getPointerAddressSpace:
      return toClientReflType<unsigned int>(C);
    case reflenums::llvm__Type::getPointerAddressSpace:
      return toClientReflType<unsigned int>(C);
    case reflenums::llvm__Type::getPointerTo:
      return toClientReflType<class llvm::PointerType *>(C);
    case reflenums::llvm__Type::getPointerTo:
      return toClientReflType<class llvm::PointerType *>(C);
    case reflenums::llvm__Type::getPointerTo:
      return toClientReflType<class llvm::PointerType *>(C);
    case reflenums::llvm__Type::getPointerTo:
      return toClientReflType<class llvm::PointerType *>(C);
    case reflenums::llvm__Type::getPointerTo:
      return toClientReflType<class llvm::PointerType *>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_llvm__IntegerType:
  switch (static_cast<reflenums::llvm__IntegerType::memnames>(MemNum)) {
    case reflenums::llvm__IntegerType:::
      return toClientReflType<>(C);
    case reflenums::llvm__IntegerType:::
      return toClientReflType<>(C);
    case reflenums::llvm__IntegerType:::
      return toClientReflType<>(C);
    case reflenums::llvm__IntegerType:::
      return toClientReflType<>(C);
    case reflenums::llvm__IntegerType:::
      return toClientReflType<>(C);
    case reflenums::llvm__IntegerType:::
      return toClientReflType<>(C);
    case reflenums::llvm__IntegerType:::
      return toClientReflType<>(C);
    case reflenums::llvm__IntegerType::getBitWidth:
      return toClientReflType<unsigned int>(C);
    case reflenums::llvm__IntegerType::getBitMask:
      return toClientReflType<unsigned long long>(C);
    case reflenums::llvm__IntegerType::getSignBit:
      return toClientReflType<unsigned long long>(C);
    case reflenums::llvm__IntegerType::getSignBit:
      return toClientReflType<unsigned long long>(C);
    case reflenums::llvm__IntegerType::isPowerOf2ByteWidth:
      return toClientReflType<bool>(C);
    case reflenums::llvm__IntegerType::classof:
      return toClientReflType<bool>(C);
    case reflenums::llvm__IntegerType::classof:
      return toClientReflType<bool>(C);
    case reflenums::llvm__IntegerType::classof:
      return toClientReflType<bool>(C);
    case reflenums::llvm__IntegerType::classof:
      return toClientReflType<bool>(C);
    case reflenums::llvm__IntegerType::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_llvm__CompositeType:
  switch (static_cast<reflenums::llvm__CompositeType::memnames>(MemNum)) {
    case reflenums::llvm__CompositeType:::
      return toClientReflType<>(C);
    case reflenums::llvm__CompositeType:::
      return toClientReflType<>(C);
    case reflenums::llvm__CompositeType:::
      return toClientReflType<>(C);
    case reflenums::llvm__CompositeType:::
      return toClientReflType<>(C);
    case reflenums::llvm__CompositeType:::
      return toClientReflType<>(C);
    case reflenums::llvm__CompositeType::getTypeAtIndex:
      return toClientReflType<class llvm::Type *>(C);
    case reflenums::llvm__CompositeType::getTypeAtIndex:
      return toClientReflType<class llvm::Type *>(C);
    case reflenums::llvm__CompositeType::indexValid:
      return toClientReflType<bool>(C);
    case reflenums::llvm__CompositeType::classof:
      return toClientReflType<bool>(C);
    case reflenums::llvm__CompositeType::classof:
      return toClientReflType<bool>(C);
    case reflenums::llvm__CompositeType::classof:
      return toClientReflType<bool>(C);
    case reflenums::llvm__CompositeType::classof:
      return toClientReflType<bool>(C);
    case reflenums::llvm__CompositeType::classof:
      return toClientReflType<bool>(C);
    case reflenums::llvm__CompositeType::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_llvm__StructType:
  switch (static_cast<reflenums::llvm__StructType::memnames>(MemNum)) {
    case reflenums::llvm__StructType:::
      return toClientReflType<>(C);
    case reflenums::llvm__StructType:::
      return toClientReflType<>(C);
    case reflenums::llvm__StructType:::
      return toClientReflType<>(C);
    case reflenums::llvm__StructType:::
      return toClientReflType<>(C);
    case reflenums::llvm__StructType:::
      return toClientReflType<>(C);
    case reflenums::llvm__StructType:::
      return toClientReflType<>(C);
    case reflenums::llvm__StructType:::
      return toClientReflType<>(C);
    case reflenums::llvm__StructType:::
      return toClientReflType<>(C);
    case reflenums::llvm__StructType:::
      return toClientReflType<>(C);
    case reflenums::llvm__StructType:::
      return toClientReflType<>(C);
    case reflenums::llvm__StructType:::
      return toClientReflType<>(C);
    case reflenums::llvm__StructType:::
      return toClientReflType<>(C);
    case reflenums::llvm__StructType:::
      return toClientReflType<>(C);
    case reflenums::llvm__StructType:::
      return toClientReflType<>(C);
    case reflenums::llvm__StructType:::
      return toClientReflType<>(C);
    case reflenums::llvm__StructType:::
      return toClientReflType<>(C);
    case reflenums::llvm__StructType:::
      return toClientReflType<>(C);
    case reflenums::llvm__StructType::isPacked:
      return toClientReflType<bool>(C);
    case reflenums::llvm__StructType::isLiteral:
      return toClientReflType<bool>(C);
    case reflenums::llvm__StructType::isOpaque:
      return toClientReflType<bool>(C);
    case reflenums::llvm__StructType::isOpaque:
      return toClientReflType<bool>(C);
    case reflenums::llvm__StructType::hasName:
      return toClientReflType<bool>(C);
    case reflenums::llvm__StructType::getName:
      return toClientReflType<const char *>(C);
    case reflenums::llvm__StructType::getName:
      return toClientReflType<const char *>(C);
    case reflenums::llvm__StructType::getName:
      return toClientReflType<const char *>(C);
    case reflenums::llvm__StructType::getName:
      return toClientReflType<const char *>(C);
    case reflenums::llvm__StructType::isValidElementType:
      return toClientReflType<bool>(C);
    case reflenums::llvm__StructType::isValidElementType:
      return toClientReflType<bool>(C);
    case reflenums::llvm__StructType::isValidElementType:
      return toClientReflType<bool>(C);
    case reflenums::llvm__StructType::isValidElementType:
      return toClientReflType<bool>(C);
    case reflenums::llvm__StructType::elements:
      return toClientReflType<const class llvm::ArrayRef<class llvm::Type *>>(C);
    case reflenums::llvm__StructType::isLayoutIdentical:
      return toClientReflType<bool>(C);
    case reflenums::llvm__StructType::getNumElements:
      return toClientReflType<unsigned int>(C);
    case reflenums::llvm__StructType::getElementType:
      return toClientReflType<class llvm::Type *>(C);
    case reflenums::llvm__StructType::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_llvm__PointerType:
  switch (static_cast<reflenums::llvm__PointerType::memnames>(MemNum)) {
    case reflenums::llvm__PointerType:::
      return toClientReflType<>(C);
    case reflenums::llvm__PointerType:::
      return toClientReflType<>(C);
    case reflenums::llvm__PointerType:::
      return toClientReflType<>(C);
    case reflenums::llvm__PointerType:::
      return toClientReflType<>(C);
    case reflenums::llvm__PointerType:::
      return toClientReflType<>(C);
    case reflenums::llvm__PointerType:::
      return toClientReflType<>(C);
    case reflenums::llvm__PointerType::get:
      return toClientReflType<class llvm::PointerType *>(C);
    case reflenums::llvm__PointerType::getUnqual:
      return toClientReflType<class llvm::PointerType *>(C);
    case reflenums::llvm__PointerType::getElementType:
      return toClientReflType<class llvm::Type *>(C);
    case reflenums::llvm__PointerType::isValidElementType:
      return toClientReflType<bool>(C);
    case reflenums::llvm__PointerType::isLoadableOrStorableType:
      return toClientReflType<bool>(C);
    case reflenums::llvm__PointerType::getAddressSpace:
      return toClientReflType<unsigned int>(C);
    case reflenums::llvm__PointerType::classof:
      return toClientReflType<bool>(C);
    case reflenums::llvm__PointerType::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_llvm__DataLayout:
  switch (static_cast<reflenums::llvm__DataLayout::memnames>(MemNum)) {
    case reflenums::llvm__DataLayout:::
      return toClientReflType<>(C);
    case reflenums::llvm__DataLayout:::
      return toClientReflType<>(C);
    case reflenums::llvm__DataLayout:::
      return toClientReflType<>(C);
    case reflenums::llvm__DataLayout:::
      return toClientReflType<>(C);
    case reflenums::llvm__DataLayout:::
      return toClientReflType<>(C);
    case reflenums::llvm__DataLayout:::
      return toClientReflType<>(C);
    case reflenums::llvm__DataLayout:::
      return toClientReflType<>(C);
    case reflenums::llvm__DataLayout:::
      return toClientReflType<>(C);
    case reflenums::llvm__DataLayout:::
      return toClientReflType<>(C);
    case reflenums::llvm__DataLayout:::
      return toClientReflType<>(C);
    case reflenums::llvm__DataLayout:::
      return toClientReflType<>(C);
    case reflenums::llvm__DataLayout:::
      return toClientReflType<>(C);
    case reflenums::llvm__DataLayout:::
      return toClientReflType<>(C);
    case reflenums::llvm__DataLayout:::
      return toClientReflType<>(C);
    case reflenums::llvm__DataLayout:::
      return toClientReflType<>(C);
    case reflenums::llvm__DataLayout:::
      return toClientReflType<>(C);
    case reflenums::llvm__DataLayout:::
      return toClientReflType<>(C);
    case reflenums::llvm__DataLayout:::
      return toClientReflType<>(C);
    case reflenums::llvm__DataLayout:::
      return toClientReflType<>(C);
    case reflenums::llvm__DataLayout:::
      return toClientReflType<>(C);
    case reflenums::llvm__DataLayout:::
      return toClientReflType<>(C);
    case reflenums::llvm__DataLayout:::
      return toClientReflType<>(C);
    case reflenums::llvm__DataLayout:::
      return toClientReflType<>(C);
    case reflenums::llvm__DataLayout:::
      return toClientReflType<>(C);
    case reflenums::llvm__DataLayout:::
      return toClientReflType<>(C);
    case reflenums::llvm__DataLayout:::
      return toClientReflType<>(C);
    case reflenums::llvm__DataLayout:::
      return toClientReflType<>(C);
    case reflenums::llvm__DataLayout:::
      return toClientReflType<>(C);
    case reflenums::llvm__DataLayout:::
      return toClientReflType<>(C);
    case reflenums::llvm__DataLayout:::
      return toClientReflType<>(C);
    case reflenums::llvm__DataLayout:::
      return toClientReflType<>(C);
    case reflenums::llvm__DataLayout:::
      return toClientReflType<>(C);
    case reflenums::llvm__DataLayout::operator_eq_eq:
      return toClientReflType<bool>(C);
    case reflenums::llvm__DataLayout::operator_not_eq:
      return toClientReflType<bool>(C);
    case reflenums::llvm__DataLayout::operator_not_eq:
      return toClientReflType<bool>(C);
    case reflenums::llvm__DataLayout::operator_not_eq:
      return toClientReflType<bool>(C);
    case reflenums::llvm__DataLayout::isLittleEndian:
      return toClientReflType<bool>(C);
    case reflenums::llvm__DataLayout::isBigEndian:
      return toClientReflType<bool>(C);
    case reflenums::llvm__DataLayout::isBigEndian:
      return toClientReflType<bool>(C);
    case reflenums::llvm__DataLayout::isDefault:
      return toClientReflType<bool>(C);
    case reflenums::llvm__DataLayout::isLegalInteger:
      return toClientReflType<bool>(C);
    case reflenums::llvm__DataLayout::isIllegalInteger:
      return toClientReflType<bool>(C);
    case reflenums::llvm__DataLayout::exceedsNaturalStackAlignment:
      return toClientReflType<bool>(C);
    case reflenums::llvm__DataLayout::getStackAlignment:
      return toClientReflType<unsigned int>(C);
    case reflenums::llvm__DataLayout::getAllocaAddrSpace:
      return toClientReflType<unsigned int>(C);
    case reflenums::llvm__DataLayout::getProgramAddressSpace:
      return toClientReflType<unsigned int>(C);
    case reflenums::llvm__DataLayout::hasMicrosoftFastStdCallMangling:
      return toClientReflType<bool>(C);
    case reflenums::llvm__DataLayout::doNotMangleLeadingQuestionMark:
      return toClientReflType<bool>(C);
    case reflenums::llvm__DataLayout::hasLinkerPrivateGlobalPrefix:
      return toClientReflType<bool>(C);
    case reflenums::llvm__DataLayout::getLinkerPrivateGlobalPrefix:
      return toClientReflType<const char *>(C);
    case reflenums::llvm__DataLayout::getGlobalPrefix:
      return toClientReflType<char>(C);
    case reflenums::llvm__DataLayout::getPrivateGlobalPrefix:
      return toClientReflType<const char *>(C);
    case reflenums::llvm__DataLayout::getManglingComponent:
      return toClientReflType<const char *>(C);
    case reflenums::llvm__DataLayout::fitsInLegalInteger:
      return toClientReflType<bool>(C);
    case reflenums::llvm__DataLayout::getPointerABIAlignment:
      return toClientReflType<unsigned int>(C);
    case reflenums::llvm__DataLayout::getPointerPrefAlignment:
      return toClientReflType<unsigned int>(C);
    case reflenums::llvm__DataLayout::getPointerSize:
      return toClientReflType<unsigned int>(C);
    case reflenums::llvm__DataLayout::getIndexSize:
      return toClientReflType<unsigned int>(C);
    case reflenums::llvm__DataLayout::getNonIntegralAddressSpaces:
      return toClientReflType<class llvm::ArrayRef<unsigned int>>(C);
    case reflenums::llvm__DataLayout::isNonIntegralPointerType:
      return toClientReflType<bool>(C);
    case reflenums::llvm__DataLayout::isNonIntegralPointerType1:
      return toClientReflType<bool>(C);
    case reflenums::llvm__DataLayout::getPointerSizeInBits:
      return toClientReflType<unsigned int>(C);
    case reflenums::llvm__DataLayout::getIndexSizeInBits:
      return toClientReflType<unsigned int>(C);
    case reflenums::llvm__DataLayout::getPointerTypeSizeInBits:
      return toClientReflType<unsigned int>(C);
    case reflenums::llvm__DataLayout::getIndexTypeSizeInBits:
      return toClientReflType<unsigned int>(C);
    case reflenums::llvm__DataLayout::getPointerTypeSize:
      return toClientReflType<unsigned int>(C);
    case reflenums::llvm__DataLayout::getTypeSizeInBits:
      return toClientReflType<unsigned long long>(C);
    case reflenums::llvm__DataLayout::getTypeStoreSize:
      return toClientReflType<unsigned long long>(C);
    case reflenums::llvm__DataLayout::getTypeStoreSizeInBits:
      return toClientReflType<unsigned long long>(C);
    case reflenums::llvm__DataLayout::getTypeAllocSize:
      return toClientReflType<unsigned long long>(C);
    case reflenums::llvm__DataLayout::getTypeAllocSizeInBits:
      return toClientReflType<unsigned long long>(C);
    case reflenums::llvm__DataLayout::getABITypeAlignment:
      return toClientReflType<unsigned int>(C);
    case reflenums::llvm__DataLayout::getABIIntegerTypeAlignment:
      return toClientReflType<unsigned int>(C);
    case reflenums::llvm__DataLayout::getPrefTypeAlignment:
      return toClientReflType<unsigned int>(C);
    case reflenums::llvm__DataLayout::getPreferredTypeAlignmentShift:
      return toClientReflType<unsigned int>(C);
    case reflenums::llvm__DataLayout::getPreferredTypeAlignmentShift:
      return toClientReflType<unsigned int>(C);
    case reflenums::llvm__DataLayout::getIntPtrType:
      return toClientReflType<class llvm::Type *>(C);
    case reflenums::llvm__DataLayout::getIntPtrType:
      return toClientReflType<class llvm::Type *>(C);
    case reflenums::llvm__DataLayout::getIntPtrType:
      return toClientReflType<class llvm::Type *>(C);
    case reflenums::llvm__DataLayout::getLargestLegalIntTypeSizeInBits:
      return toClientReflType<unsigned int>(C);
    case reflenums::llvm__DataLayout::getIndexType:
      return toClientReflType<class llvm::Type *>(C);
    case reflenums::llvm__DataLayout::getIndexType:
      return toClientReflType<class llvm::Type *>(C);
    case reflenums::llvm__DataLayout::getStructLayout:
      return toClientReflType<const class llvm::StructLayout *>(C);
    case reflenums::llvm__DataLayout::getStructLayout:
      return toClientReflType<const class llvm::StructLayout *>(C);
    case reflenums::llvm__DataLayout::getStructLayout:
      return toClientReflType<const class llvm::StructLayout *>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_llvm__StructLayout:
  switch (static_cast<reflenums::llvm__StructLayout::memnames>(MemNum)) {
    case reflenums::llvm__StructLayout:::
      return toClientReflType<>(C);
    case reflenums::llvm__StructLayout:::
      return toClientReflType<>(C);
    case reflenums::llvm__StructLayout:::
      return toClientReflType<>(C);
    case reflenums::llvm__StructLayout:::
      return toClientReflType<>(C);
    case reflenums::llvm__StructLayout:::
      return toClientReflType<>(C);
    case reflenums::llvm__StructLayout:::
      return toClientReflType<>(C);
    case reflenums::llvm__StructLayout:::
      return toClientReflType<>(C);
    case reflenums::llvm__StructLayout::getSizeInBytes:
      return toClientReflType<unsigned long long>(C);
    case reflenums::llvm__StructLayout::getSizeInBits:
      return toClientReflType<unsigned long long>(C);
    case reflenums::llvm__StructLayout::getAlignment:
      return toClientReflType<unsigned int>(C);
    case reflenums::llvm__StructLayout::hasPadding:
      return toClientReflType<bool>(C);
    case reflenums::llvm__StructLayout::getElementContainingOffset:
      return toClientReflType<unsigned int>(C);
    case reflenums::llvm__StructLayout::getElementOffset:
      return toClientReflType<unsigned long long>(C);
    case reflenums::llvm__StructLayout::getElementOffsetInBits:
      return toClientReflType<unsigned long long>(C);
    case reflenums::llvm__StructLayout::getElementOffsetInBits:
      return toClientReflType<unsigned long long>(C);
    case reflenums::llvm__StructLayout::getElementOffsetInBits:
      return toClientReflType<unsigned long long>(C);
    case reflenums::llvm__StructLayout::getElementOffsetInBits:
      return toClientReflType<unsigned long long>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__TargetInfo:
  switch (static_cast<reflenums::clang__TargetInfo::memnames>(MemNum)) {
    case reflenums::clang__TargetInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TargetInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TargetInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TargetInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TargetInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TargetInfo::Retain:
      return toClientReflType<void>(C);
    case reflenums::clang__TargetInfo::Release:
      return toClientReflType<void>(C);
    case reflenums::clang__TargetInfo::Release:
      return toClientReflType<void>(C);
    case reflenums::clang__TargetInfo::Release:
      return toClientReflType<void>(C);
    case reflenums::clang__TargetInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TargetInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TargetInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TargetInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TargetInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TargetInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TargetInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TargetInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TargetInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TargetInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TargetInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TargetInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TargetInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TargetInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TargetInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TargetInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TargetInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TargetInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TargetInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TargetInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TargetInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TargetInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TargetInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TargetInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TargetInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TargetInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TargetInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TargetInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TargetInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TargetInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TargetInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TargetInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TargetInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TargetInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TargetInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TargetInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TargetInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TargetInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TargetInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TargetInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TargetInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TargetInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TargetInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TargetInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TargetInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TargetInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TargetInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TargetInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TargetInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TargetInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TargetInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TargetInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TargetInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TargetInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TargetInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TargetInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TargetInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TargetInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TargetInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TargetInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TargetInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TargetInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TargetInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TargetInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TargetInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TargetInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TargetInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TargetInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TargetInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TargetInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TargetInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TargetInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TargetInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TargetInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TargetInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TargetInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TargetInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TargetInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TargetInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TargetInfo::getTargetOpts:
      return toClientReflType<class clang::TargetOptions &>(C);
    case reflenums::clang__TargetInfo::getTargetOpts:
      return toClientReflType<class clang::TargetOptions &>(C);
    case reflenums::clang__TargetInfo::getTargetOpts:
      return toClientReflType<class clang::TargetOptions &>(C);
    case reflenums::clang__TargetInfo::getTargetOpts:
      return toClientReflType<class clang::TargetOptions &>(C);
    case reflenums::clang__TargetInfo::getTargetOpts:
      return toClientReflType<class clang::TargetOptions &>(C);
    case reflenums::clang__TargetInfo::getTargetOpts:
      return toClientReflType<class clang::TargetOptions &>(C);
    case reflenums::clang__TargetInfo::getTargetOpts:
      return toClientReflType<class clang::TargetOptions &>(C);
    case reflenums::clang__TargetInfo::getTargetOpts:
      return toClientReflType<class clang::TargetOptions &>(C);
    case reflenums::clang__TargetInfo::getTargetOpts:
      return toClientReflType<class clang::TargetOptions &>(C);
    case reflenums::clang__TargetInfo::getTargetOpts:
      return toClientReflType<class clang::TargetOptions &>(C);
    case reflenums::clang__TargetInfo::getTargetOpts:
      return toClientReflType<class clang::TargetOptions &>(C);
    case reflenums::clang__TargetInfo::getTargetOpts:
      return toClientReflType<class clang::TargetOptions &>(C);
    case reflenums::clang__TargetInfo::getTargetOpts:
      return toClientReflType<class clang::TargetOptions &>(C);
    case reflenums::clang__TargetInfo::getTargetOpts:
      return toClientReflType<class clang::TargetOptions &>(C);
    case reflenums::clang__TargetInfo::getTargetOpts:
      return toClientReflType<class clang::TargetOptions &>(C);
    case reflenums::clang__TargetInfo::getTargetOpts:
      return toClientReflType<class clang::TargetOptions &>(C);
    case reflenums::clang__TargetInfo::getTargetOpts:
      return toClientReflType<class clang::TargetOptions &>(C);
    case reflenums::clang__TargetInfo::getTargetOpts:
      return toClientReflType<class clang::TargetOptions &>(C);
    case reflenums::clang__TargetInfo::getTargetOpts:
      return toClientReflType<class clang::TargetOptions &>(C);
    case reflenums::clang__TargetInfo::getTargetOpts:
      return toClientReflType<class clang::TargetOptions &>(C);
    case reflenums::clang__TargetInfo::getTargetOpts:
      return toClientReflType<class clang::TargetOptions &>(C);
    case reflenums::clang__TargetInfo::getTargetOpts:
      return toClientReflType<class clang::TargetOptions &>(C);
    case reflenums::clang__TargetInfo::getTargetOpts:
      return toClientReflType<class clang::TargetOptions &>(C);
    case reflenums::clang__TargetInfo::getSizeType:
      return toClientReflType<enum clang::TargetInfo::IntType>(C);
    case reflenums::clang__TargetInfo::getSignedSizeType:
      return toClientReflType<enum clang::TargetInfo::IntType>(C);
    case reflenums::clang__TargetInfo::getIntMaxType:
      return toClientReflType<enum clang::TargetInfo::IntType>(C);
    case reflenums::clang__TargetInfo::getUIntMaxType:
      return toClientReflType<enum clang::TargetInfo::IntType>(C);
    case reflenums::clang__TargetInfo::getPtrDiffType:
      return toClientReflType<enum clang::TargetInfo::IntType>(C);
    case reflenums::clang__TargetInfo::getUnsignedPtrDiffType:
      return toClientReflType<enum clang::TargetInfo::IntType>(C);
    case reflenums::clang__TargetInfo::getIntPtrType:
      return toClientReflType<enum clang::TargetInfo::IntType>(C);
    case reflenums::clang__TargetInfo::getUIntPtrType:
      return toClientReflType<enum clang::TargetInfo::IntType>(C);
    case reflenums::clang__TargetInfo::getWCharType:
      return toClientReflType<enum clang::TargetInfo::IntType>(C);
    case reflenums::clang__TargetInfo::getWIntType:
      return toClientReflType<enum clang::TargetInfo::IntType>(C);
    case reflenums::clang__TargetInfo::getChar16Type:
      return toClientReflType<enum clang::TargetInfo::IntType>(C);
    case reflenums::clang__TargetInfo::getChar32Type:
      return toClientReflType<enum clang::TargetInfo::IntType>(C);
    case reflenums::clang__TargetInfo::getInt64Type:
      return toClientReflType<enum clang::TargetInfo::IntType>(C);
    case reflenums::clang__TargetInfo::getUInt64Type:
      return toClientReflType<enum clang::TargetInfo::IntType>(C);
    case reflenums::clang__TargetInfo::getSigAtomicType:
      return toClientReflType<enum clang::TargetInfo::IntType>(C);
    case reflenums::clang__TargetInfo::getProcessIDType:
      return toClientReflType<enum clang::TargetInfo::IntType>(C);
    case reflenums::clang__TargetInfo::getCorrespondingUnsignedType:
      return toClientReflType<enum clang::TargetInfo::IntType>(C);
    case reflenums::clang__TargetInfo::getTypeWidth:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__TargetInfo::getIntTypeByWidth:
      return toClientReflType<enum clang::TargetInfo::IntType>(C);
    case reflenums::clang__TargetInfo::getLeastIntTypeByWidth:
      return toClientReflType<enum clang::TargetInfo::IntType>(C);
    case reflenums::clang__TargetInfo::getRealTypeByWidth:
      return toClientReflType<enum clang::TargetInfo::RealType>(C);
    case reflenums::clang__TargetInfo::getTypeAlign:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__TargetInfo::isTypeSigned:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetInfo::getPointerWidth:
      return toClientReflType<unsigned long long>(C);
    case reflenums::clang__TargetInfo::getPointerAlign:
      return toClientReflType<unsigned long long>(C);
    case reflenums::clang__TargetInfo::getMaxPointerWidth:
      return toClientReflType<unsigned long long>(C);
    case reflenums::clang__TargetInfo::getNullPointerValue:
      return toClientReflType<unsigned long long>(C);
    case reflenums::clang__TargetInfo::getBoolWidth:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__TargetInfo::getBoolAlign:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__TargetInfo::getCharWidth:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__TargetInfo::getCharAlign:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__TargetInfo::getShortWidth:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__TargetInfo::getShortAlign:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__TargetInfo::getIntWidth:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__TargetInfo::getIntAlign:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__TargetInfo::getLongWidth:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__TargetInfo::getLongAlign:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__TargetInfo::getLongLongWidth:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__TargetInfo::getLongLongAlign:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__TargetInfo::getShortAccumWidth:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__TargetInfo::getShortAccumAlign:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__TargetInfo::getAccumWidth:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__TargetInfo::getAccumAlign:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__TargetInfo::getLongAccumWidth:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__TargetInfo::getLongAccumAlign:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__TargetInfo::getShortFractWidth:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__TargetInfo::getShortFractAlign:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__TargetInfo::getFractWidth:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__TargetInfo::getFractAlign:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__TargetInfo::getLongFractWidth:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__TargetInfo::getLongFractAlign:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__TargetInfo::getShortAccumScale:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__TargetInfo::getShortAccumIBits:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__TargetInfo::getAccumScale:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__TargetInfo::getAccumIBits:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__TargetInfo::getLongAccumScale:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__TargetInfo::getLongAccumIBits:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__TargetInfo::getUnsignedShortAccumScale:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__TargetInfo::getUnsignedShortAccumIBits:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__TargetInfo::getUnsignedAccumScale:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__TargetInfo::getUnsignedAccumIBits:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__TargetInfo::getUnsignedLongAccumScale:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__TargetInfo::getUnsignedLongAccumIBits:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__TargetInfo::getShortFractScale:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__TargetInfo::getFractScale:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__TargetInfo::getLongFractScale:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__TargetInfo::getUnsignedShortFractScale:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__TargetInfo::getUnsignedFractScale:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__TargetInfo::getUnsignedLongFractScale:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__TargetInfo::hasInt128Type:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetInfo::hasLegalHalfType:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetInfo::hasFloat128Type:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetInfo::getSuitableAlign:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__TargetInfo::getDefaultAlignForAttributeAligned:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__TargetInfo::getMinGlobalAlign:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__TargetInfo::getNewAlign:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__TargetInfo::getWCharWidth:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__TargetInfo::getWCharAlign:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__TargetInfo::getChar16Width:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__TargetInfo::getChar16Align:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__TargetInfo::getChar32Width:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__TargetInfo::getChar32Align:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__TargetInfo::getHalfWidth:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__TargetInfo::getHalfAlign:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__TargetInfo::getHalfAlign:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__TargetInfo::getFloatWidth:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__TargetInfo::getFloatAlign:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__TargetInfo::getFloatAlign:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__TargetInfo::getDoubleWidth:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__TargetInfo::getDoubleAlign:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__TargetInfo::getDoubleAlign:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__TargetInfo::getLongDoubleWidth:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__TargetInfo::getLongDoubleAlign:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__TargetInfo::getLongDoubleAlign:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__TargetInfo::getFloat128Width:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__TargetInfo::getFloat128Align:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__TargetInfo::getFloat128Align:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__TargetInfo::useFloat128ManglingForLongDouble:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetInfo::getFloatEvalMethod:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__TargetInfo::getLargeArrayMinWidth:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__TargetInfo::getLargeArrayAlign:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__TargetInfo::getMaxAtomicPromoteWidth:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__TargetInfo::getMaxAtomicInlineWidth:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__TargetInfo::getMaxAtomicInlineWidth:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__TargetInfo::hasBuiltinAtomic:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetInfo::getMaxVectorAlign:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__TargetInfo::getSimdDefaultAlign:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__TargetInfo::getIntMaxTWidth:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__TargetInfo::getUnwindWordWidth:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__TargetInfo::getRegisterWidth:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__TargetInfo::getMCountName:
      return toClientReflType<const char *>(C);
    case reflenums::clang__TargetInfo::useSignedCharForObjCBool:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetInfo::useSignedCharForObjCBool:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetInfo::useBitFieldTypeAlignment:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetInfo::useZeroLengthBitfieldAlignment:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetInfo::getZeroLengthBitfieldBoundary:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__TargetInfo::useExplicitBitFieldAlignment:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetInfo::hasAlignMac68kSupport:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetInfo::getTypeName:
      return toClientReflType<const char *>(C);
    case reflenums::clang__TargetInfo::getTypeConstantSuffix:
      return toClientReflType<const char *>(C);
    case reflenums::clang__TargetInfo::getTypeFormatModifier:
      return toClientReflType<const char *>(C);
    case reflenums::clang__TargetInfo::useObjCFPRetForRealType:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetInfo::useObjCFP2RetForComplexLongDouble:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetInfo::useFP16ConversionIntrinsics:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetInfo::useAddressSpaceMapMangling:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetInfo::useAddressSpaceMapMangling:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetInfo::useAddressSpaceMapMangling:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetInfo::isCLZForZeroUndef:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetInfo::getBuiltinVaListKind:
      return toClientReflType<enum clang::TargetInfo::BuiltinVaListKind>(C);
    case reflenums::clang__TargetInfo::hasBuiltinMSVaList:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetInfo::isRenderScriptTarget:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetInfo::isValidClobber:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetInfo::isValidGCCRegisterName:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetInfo::getNormalizedGCCRegisterName:
      return toClientReflType<const char *>(C);
    case reflenums::clang__TargetInfo::getConstraintRegister:
      return toClientReflType<const char *>(C);
    case reflenums::clang__TargetInfo::getConstraintRegister:
      return toClientReflType<const char *>(C);
    case reflenums::clang__TargetInfo::getConstraintRegister:
      return toClientReflType<const char *>(C);
    case reflenums::clang__TargetInfo::validateOutputConstraint:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetInfo::validateOutputConstraint:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetInfo::validateOutputSize:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetInfo::validateInputSize:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetInfo::validateInputSize:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetInfo::validateInputSize:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetInfo::validateInputSize:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetInfo::validateInputSize:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetInfo::getClobbers:
      return toClientReflType<const char *>(C);
    case reflenums::clang__TargetInfo::isNan2008:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetInfo::getTriple:
      return toClientReflType<const class llvm::Triple &>(C);
    case reflenums::clang__TargetInfo::getDataLayout:
      return toClientReflType<const class llvm::DataLayout &>(C);
    case reflenums::clang__TargetInfo::getDataLayout:
      return toClientReflType<const class llvm::DataLayout &>(C);
    case reflenums::clang__TargetInfo::getDataLayout:
      return toClientReflType<const class llvm::DataLayout &>(C);
    case reflenums::clang__TargetInfo::hasProtectedVisibility:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetInfo::isValidSectionSpecifier:
      return toClientReflType<const char *>(C);
    case reflenums::clang__TargetInfo::isValidSectionSpecifier:
      return toClientReflType<const char *>(C);
    case reflenums::clang__TargetInfo::isValidSectionSpecifier:
      return toClientReflType<const char *>(C);
    case reflenums::clang__TargetInfo::isValidSectionSpecifier:
      return toClientReflType<const char *>(C);
    case reflenums::clang__TargetInfo::getABI:
      return toClientReflType<const char *>(C);
    case reflenums::clang__TargetInfo::getCXXABI:
      return toClientReflType<class clang::TargetCXXABI>(C);
    case reflenums::clang__TargetInfo::getCXXABI:
      return toClientReflType<class clang::TargetCXXABI>(C);
    case reflenums::clang__TargetInfo::getCXXABI:
      return toClientReflType<class clang::TargetCXXABI>(C);
    case reflenums::clang__TargetInfo::isValidCPUName:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetInfo::isValidCPUName:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetInfo::isValidCPUName:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetInfo::isValidCPUName:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetInfo::isValidFeatureName:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetInfo::isValidFeatureName:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetInfo::hasFeature:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetInfo::supportsMultiVersioning:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetInfo::validateCpuSupports:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetInfo::multiVersionSortPriority:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__TargetInfo::validateCpuIs:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetInfo::validateCPUSpecificCPUDispatch:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetInfo::CPUSpecificManglingCharacter:
      return toClientReflType<char>(C);
    case reflenums::clang__TargetInfo::CPUSpecificManglingCharacter:
      return toClientReflType<char>(C);
    case reflenums::clang__TargetInfo::getRegParmMax:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__TargetInfo::isTLSSupported:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetInfo::getMaxTLSAlign:
      return toClientReflType<unsigned short>(C);
    case reflenums::clang__TargetInfo::isVLASupported:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetInfo::isSEHTrySupported:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetInfo::hasNoAsmVariants:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetInfo::getEHDataRegisterNumber:
      return toClientReflType<int>(C);
    case reflenums::clang__TargetInfo::getStaticInitSectionSpecifier:
      return toClientReflType<const char *>(C);
    case reflenums::clang__TargetInfo::getStaticInitSectionSpecifier:
      return toClientReflType<const char *>(C);
    case reflenums::clang__TargetInfo::getStaticInitSectionSpecifier:
      return toClientReflType<const char *>(C);
    case reflenums::clang__TargetInfo::getPlatformName:
      return toClientReflType<const char *>(C);
    case reflenums::clang__TargetInfo::getPlatformMinVersion:
      return toClientReflType<class llvm::VersionTuple>(C);
    case reflenums::clang__TargetInfo::isBigEndian:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetInfo::isLittleEndian:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetInfo::isLittleEndian:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetInfo::getDefaultCallingConv:
      return toClientReflType<enum clang::CallingConv>(C);
    case reflenums::clang__TargetInfo::getDefaultCallingConv:
      return toClientReflType<enum clang::CallingConv>(C);
    case reflenums::clang__TargetInfo::checkCallingConvention:
      return toClientReflType<enum clang::TargetInfo::CallingConvCheckResult>(C);
    case reflenums::clang__TargetInfo::checkCallingConvention:
      return toClientReflType<enum clang::TargetInfo::CallingConvCheckResult>(C);
    case reflenums::clang__TargetInfo::getCallingConvKind:
      return toClientReflType<enum clang::TargetInfo::CallingConvKind>(C);
    case reflenums::clang__TargetInfo::hasSjLjLowering:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetInfo::checkCFProtectionBranchSupported:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetInfo::checkCFProtectionReturnSupported:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetInfo::allowsLargerPreferedTypeAlignment:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetInfo::allowsLargerPreferedTypeAlignment:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetInfo::allowsLargerPreferedTypeAlignment:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetInfo::allowsLargerPreferedTypeAlignment:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetInfo::getSupportedOpenCLOpts:
      return toClientReflType<const class clang::OpenCLOptions &>(C);
    case reflenums::clang__TargetInfo::getSupportedOpenCLOpts:
      return toClientReflType<const class clang::OpenCLOptions &>(C);
    case reflenums::clang__TargetInfo::getOpenCLTypeAddrSpace:
      return toClientReflType<enum clang::LangAS>(C);
    case reflenums::clang__TargetInfo::getVtblPtrAddressSpace:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__TargetInfo::getVtblPtrAddressSpace:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__TargetInfo::validateTarget:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetInfo::validateTarget:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetInfo::validateTarget:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetInfo::validateTarget:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetInfo::validateTarget:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetInfo::validateTarget:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetInfo::validateTarget:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetInfo::validateTarget:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetInfo::validateTarget:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetInfo::validateTarget:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetInfo::validateTarget:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetInfo::validateTarget:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__TargetInfo__ConstraintInfo:
  switch (static_cast<reflenums::clang__TargetInfo__ConstraintInfo::memnames>(MemNum)) {
    case reflenums::clang__TargetInfo__ConstraintInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TargetInfo__ConstraintInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TargetInfo__ConstraintInfo::Flags:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__TargetInfo__ConstraintInfo::TiedOperand:
      return toClientReflType<int>(C);
    case reflenums::clang__TargetInfo__ConstraintInfo::TiedOperand:
      return toClientReflType<int>(C);
    case reflenums::clang__TargetInfo__ConstraintInfo::TiedOperand:
      return toClientReflType<int>(C);
    case reflenums::clang__TargetInfo__ConstraintInfo::TiedOperand:
      return toClientReflType<int>(C);
    case reflenums::clang__TargetInfo__ConstraintInfo::TiedOperand:
      return toClientReflType<int>(C);
    case reflenums::clang__TargetInfo__ConstraintInfo::TiedOperand:
      return toClientReflType<int>(C);
    case reflenums::clang__TargetInfo__ConstraintInfo::TiedOperand:
      return toClientReflType<int>(C);
    case reflenums::clang__TargetInfo__ConstraintInfo::TiedOperand:
      return toClientReflType<int>(C);
    case reflenums::clang__TargetInfo__ConstraintInfo::TiedOperand:
      return toClientReflType<int>(C);
    case reflenums::clang__TargetInfo__ConstraintInfo::TiedOperand:
      return toClientReflType<int>(C);
    case reflenums::clang__TargetInfo__ConstraintInfo::isReadWrite:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetInfo__ConstraintInfo::isReadWrite:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetInfo__ConstraintInfo::allowsRegister:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetInfo__ConstraintInfo::allowsMemory:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetInfo__ConstraintInfo::hasMatchingInput:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetInfo__ConstraintInfo::hasTiedOperand:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetInfo__ConstraintInfo::getTiedOperand:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__TargetInfo__ConstraintInfo::requiresImmediateConstant:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetInfo__ConstraintInfo::isValidAsmImmediate:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetInfo__ConstraintInfo::isValidAsmImmediate:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetInfo__ConstraintInfo::isValidAsmImmediate:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetInfo__ConstraintInfo::isValidAsmImmediate:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetInfo__ConstraintInfo::isValidAsmImmediate:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetInfo__ConstraintInfo::isValidAsmImmediate:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetInfo__ConstraintInfo::isValidAsmImmediate:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetInfo__ConstraintInfo::isValidAsmImmediate:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetInfo__ConstraintInfo::isValidAsmImmediate:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetInfo__ConstraintInfo::isValidAsmImmediate:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetInfo__ConstraintInfo::isValidAsmImmediate:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetInfo__ConstraintInfo::isValidAsmImmediate:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetInfo__ConstraintInfo::isValidAsmImmediate:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetInfo__ConstraintInfo::isValidAsmImmediate:
      return toClientReflType<bool>(C);
    case reflenums::clang__TargetInfo__ConstraintInfo::isValidAsmImmediate:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__XRayFunctionFilter:
  switch (static_cast<reflenums::clang__XRayFunctionFilter::memnames>(MemNum)) {
    case reflenums::clang__XRayFunctionFilter:::
      return toClientReflType<>(C);
    case reflenums::clang__XRayFunctionFilter:::
      return toClientReflType<>(C);
    case reflenums::clang__XRayFunctionFilter:::
      return toClientReflType<>(C);
    case reflenums::clang__XRayFunctionFilter:::
      return toClientReflType<>(C);
    case reflenums::clang__XRayFunctionFilter:::
      return toClientReflType<>(C);
    case reflenums::clang__XRayFunctionFilter:::
      return toClientReflType<>(C);
    case reflenums::clang__XRayFunctionFilter:::
      return toClientReflType<>(C);
    case reflenums::clang__XRayFunctionFilter:::
      return toClientReflType<>(C);
    case reflenums::clang__XRayFunctionFilter::shouldImbueFunction:
      return toClientReflType<enum clang::XRayFunctionFilter::ImbueAttribute>(C);
    case reflenums::clang__XRayFunctionFilter::shouldImbueFunctionsInFile:
      return toClientReflType<enum clang::XRayFunctionFilter::ImbueAttribute>(C);
    case reflenums::clang__XRayFunctionFilter::shouldImbueLocation:
      return toClientReflType<enum clang::XRayFunctionFilter::ImbueAttribute>(C);
    case reflenums::clang__XRayFunctionFilter::shouldImbueLocation:
      return toClientReflType<enum clang::XRayFunctionFilter::ImbueAttribute>(C);
    case reflenums::clang__XRayFunctionFilter::shouldImbueLocation:
      return toClientReflType<enum clang::XRayFunctionFilter::ImbueAttribute>(C);
    case reflenums::clang__XRayFunctionFilter::shouldImbueLocation:
      return toClientReflType<enum clang::XRayFunctionFilter::ImbueAttribute>(C);
    case reflenums::clang__XRayFunctionFilter::shouldImbueLocation:
      return toClientReflType<enum clang::XRayFunctionFilter::ImbueAttribute>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__TypeInfo:
  switch (static_cast<reflenums::clang__TypeInfo::memnames>(MemNum)) {
    case reflenums::clang__TypeInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__TypeInfo::Width:
      return toClientReflType<unsigned long long>(C);
    case reflenums::clang__TypeInfo::Align:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__TypeInfo::AlignIsRequired:
      return toClientReflType<bool>(C);
    case reflenums::clang__TypeInfo::AlignIsRequired:
      return toClientReflType<bool>(C);
    case reflenums::clang__TypeInfo::AlignIsRequired:
      return toClientReflType<bool>(C);
    case reflenums::clang__TypeInfo::AlignIsRequired:
      return toClientReflType<bool>(C);
    case reflenums::clang__TypeInfo::AlignIsRequired:
      return toClientReflType<bool>(C);
    case reflenums::clang__TypeInfo::AlignIsRequired:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__ASTContext:
  switch (static_cast<reflenums::clang__ASTContext::memnames>(MemNum)) {
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext::Retain:
      return toClientReflType<void>(C);
    case reflenums::clang__ASTContext::Release:
      return toClientReflType<void>(C);
    case reflenums::clang__ASTContext::Release:
      return toClientReflType<void>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext:::
      return toClientReflType<>(C);
    case reflenums::clang__ASTContext::Idents:
      return toClientReflType<class clang::IdentifierTable &>(C);
    case reflenums::clang__ASTContext::Selectors:
      return toClientReflType<class clang::SelectorTable &>(C);
    case reflenums::clang__ASTContext::Selectors:
      return toClientReflType<class clang::SelectorTable &>(C);
    case reflenums::clang__ASTContext::Selectors:
      return toClientReflType<class clang::SelectorTable &>(C);
    case reflenums::clang__ASTContext::Selectors:
      return toClientReflType<class clang::SelectorTable &>(C);
    case reflenums::clang__ASTContext::Selectors:
      return toClientReflType<class clang::SelectorTable &>(C);
    case reflenums::clang__ASTContext::Selectors:
      return toClientReflType<class clang::SelectorTable &>(C);
    case reflenums::clang__ASTContext::Selectors:
      return toClientReflType<class clang::SelectorTable &>(C);
    case reflenums::clang__ASTContext::Selectors:
      return toClientReflType<class clang::SelectorTable &>(C);
    case reflenums::clang__ASTContext::Selectors:
      return toClientReflType<class clang::SelectorTable &>(C);
    case reflenums::clang__ASTContext::Selectors:
      return toClientReflType<class clang::SelectorTable &>(C);
    case reflenums::clang__ASTContext::Selectors:
      return toClientReflType<class clang::SelectorTable &>(C);
    case reflenums::clang__ASTContext::getPrintingPolicy:
      return toClientReflType<const struct clang::PrintingPolicy &>(C);
    case reflenums::clang__ASTContext::getPrintingPolicy:
      return toClientReflType<const struct clang::PrintingPolicy &>(C);
    case reflenums::clang__ASTContext::getPrintingPolicy:
      return toClientReflType<const struct clang::PrintingPolicy &>(C);
    case reflenums::clang__ASTContext::getSourceManager:
      return toClientReflType<const class clang::SourceManager &>(C);
    case reflenums::clang__ASTContext::getSourceManager:
      return toClientReflType<const class clang::SourceManager &>(C);
    case reflenums::clang__ASTContext::Allocate:
      return toClientReflType<void *>(C);
    case reflenums::clang__ASTContext::Allocate:
      return toClientReflType<void *>(C);
    case reflenums::clang__ASTContext::Deallocate:
      return toClientReflType<void>(C);
    case reflenums::clang__ASTContext::getASTAllocatedMemory:
      return toClientReflType<unsigned long>(C);
    case reflenums::clang__ASTContext::getSideTableAllocatedMemory:
      return toClientReflType<unsigned long>(C);
    case reflenums::clang__ASTContext::getSideTableAllocatedMemory:
      return toClientReflType<unsigned long>(C);
    case reflenums::clang__ASTContext::getTargetInfo:
      return toClientReflType<const class clang::TargetInfo &>(C);
    case reflenums::clang__ASTContext::getAuxTargetInfo:
      return toClientReflType<const class clang::TargetInfo *>(C);
    case reflenums::clang__ASTContext::getIntTypeForBitwidth:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getRealTypeForBitwidth:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::AtomicUsesUnsupportedLibcall:
      return toClientReflType<bool>(C);
    case reflenums::clang__ASTContext::getLangOpts:
      return toClientReflType<const class clang::LangOptions &>(C);
    case reflenums::clang__ASTContext::getSanitizerBlacklist:
      return toClientReflType<const class clang::SanitizerBlacklist &>(C);
    case reflenums::clang__ASTContext::getXRayFilter:
      return toClientReflType<const class clang::XRayFunctionFilter &>(C);
    case reflenums::clang__ASTContext::getDiagnostics:
      return toClientReflType<class clang::DiagnosticsEngine &>(C);
    case reflenums::clang__ASTContext::getFullLoc:
      return toClientReflType<class clang::FullSourceLoc>(C);
    case reflenums::clang__ASTContext::getFullLoc:
      return toClientReflType<class clang::FullSourceLoc>(C);
    case reflenums::clang__ASTContext::CommentsLoaded:
      return toClientReflType<bool>(C);
    case reflenums::clang__ASTContext::CommentsLoaded:
      return toClientReflType<bool>(C);
    case reflenums::clang__ASTContext::CommentsLoaded:
      return toClientReflType<bool>(C);
    case reflenums::clang__ASTContext::CommentsLoaded:
      return toClientReflType<bool>(C);
    case reflenums::clang__ASTContext::getRawCommentForDeclNoCache:
      return toClientReflType<class clang::RawComment *>(C);
    case reflenums::clang__ASTContext::getRawCommentForDeclNoCache:
      return toClientReflType<class clang::RawComment *>(C);
    case reflenums::clang__ASTContext::getRawCommentForDeclNoCache:
      return toClientReflType<class clang::RawComment *>(C);
    case reflenums::clang__ASTContext::getRawCommentForDeclNoCache:
      return toClientReflType<class clang::RawComment *>(C);
    case reflenums::clang__ASTContext::getRawCommentForAnyRedecl:
      return toClientReflType<const class clang::RawComment *>(C);
    case reflenums::clang__ASTContext::getRawCommentForAnyRedecl:
      return toClientReflType<const class clang::RawComment *>(C);
    case reflenums::clang__ASTContext::getRawCommentForAnyRedecl:
      return toClientReflType<const class clang::RawComment *>(C);
    case reflenums::clang__ASTContext::getRawCommentForAnyRedecl:
      return toClientReflType<const class clang::RawComment *>(C);
    case reflenums::clang__ASTContext::getRawCommentForAnyRedecl:
      return toClientReflType<const class clang::RawComment *>(C);
    case reflenums::clang__ASTContext::getRawCommentForAnyRedecl:
      return toClientReflType<const class clang::RawComment *>(C);
    case reflenums::clang__ASTContext::getRawCommentForAnyRedecl:
      return toClientReflType<const class clang::RawComment *>(C);
    case reflenums::clang__ASTContext::getRawCommentForAnyRedecl:
      return toClientReflType<const class clang::RawComment *>(C);
    case reflenums::clang__ASTContext::getCommentCommandTraits:
      return toClientReflType<class clang::comments::CommandTraits &>(C);
    case reflenums::clang__ASTContext::getCommentCommandTraits:
      return toClientReflType<class clang::comments::CommandTraits &>(C);
    case reflenums::clang__ASTContext::getCommentCommandTraits:
      return toClientReflType<class clang::comments::CommandTraits &>(C);
    case reflenums::clang__ASTContext::getCommentCommandTraits:
      return toClientReflType<class clang::comments::CommandTraits &>(C);
    case reflenums::clang__ASTContext::getCommentCommandTraits:
      return toClientReflType<class clang::comments::CommandTraits &>(C);
    case reflenums::clang__ASTContext::getCommentCommandTraits:
      return toClientReflType<class clang::comments::CommandTraits &>(C);
    case reflenums::clang__ASTContext::getCommentCommandTraits:
      return toClientReflType<class clang::comments::CommandTraits &>(C);
    case reflenums::clang__ASTContext::getCommentCommandTraits:
      return toClientReflType<class clang::comments::CommandTraits &>(C);
    case reflenums::clang__ASTContext::getCommentCommandTraits:
      return toClientReflType<class clang::comments::CommandTraits &>(C);
    case reflenums::clang__ASTContext::getCommentCommandTraits:
      return toClientReflType<class clang::comments::CommandTraits &>(C);
    case reflenums::clang__ASTContext::getCommentCommandTraits:
      return toClientReflType<class clang::comments::CommandTraits &>(C);
    case reflenums::clang__ASTContext::getCommentCommandTraits:
      return toClientReflType<class clang::comments::CommandTraits &>(C);
    case reflenums::clang__ASTContext::getCommentCommandTraits:
      return toClientReflType<class clang::comments::CommandTraits &>(C);
    case reflenums::clang__ASTContext::getCommentCommandTraits:
      return toClientReflType<class clang::comments::CommandTraits &>(C);
    case reflenums::clang__ASTContext::getCommentCommandTraits:
      return toClientReflType<class clang::comments::CommandTraits &>(C);
    case reflenums::clang__ASTContext::getCommentCommandTraits:
      return toClientReflType<class clang::comments::CommandTraits &>(C);
    case reflenums::clang__ASTContext::getCommentCommandTraits:
      return toClientReflType<class clang::comments::CommandTraits &>(C);
    case reflenums::clang__ASTContext::getCommentCommandTraits:
      return toClientReflType<class clang::comments::CommandTraits &>(C);
    case reflenums::clang__ASTContext::overridden_methods_size:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ASTContext::overridden_methods_size:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ASTContext::overridden_methods_size:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ASTContext::overridden_methods_size:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ASTContext::overridden_methods_size:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ASTContext::overridden_methods_size:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ASTContext::getNextLocalImport:
      return toClientReflType<class clang::ImportDecl *>(C);
    case reflenums::clang__ASTContext::getNextLocalImport:
      return toClientReflType<class clang::ImportDecl *>(C);
    case reflenums::clang__ASTContext::local_imports:
      return toClientReflType<class llvm::iterator_range<class clang::ASTContext::import_iterator>>(C);
    case reflenums::clang__ASTContext::local_imports:
      return toClientReflType<class llvm::iterator_range<class clang::ASTContext::import_iterator>>(C);
    case reflenums::clang__ASTContext::local_imports:
      return toClientReflType<class llvm::iterator_range<class clang::ASTContext::import_iterator>>(C);
    case reflenums::clang__ASTContext::local_imports:
      return toClientReflType<class llvm::iterator_range<class clang::ASTContext::import_iterator>>(C);
    case reflenums::clang__ASTContext::local_imports:
      return toClientReflType<class llvm::iterator_range<class clang::ASTContext::import_iterator>>(C);
    case reflenums::clang__ASTContext::local_imports:
      return toClientReflType<class llvm::iterator_range<class clang::ASTContext::import_iterator>>(C);
    case reflenums::clang__ASTContext::local_imports:
      return toClientReflType<class llvm::iterator_range<class clang::ASTContext::import_iterator>>(C);
    case reflenums::clang__ASTContext::local_imports:
      return toClientReflType<class llvm::iterator_range<class clang::ASTContext::import_iterator>>(C);
    case reflenums::clang__ASTContext::local_imports:
      return toClientReflType<class llvm::iterator_range<class clang::ASTContext::import_iterator>>(C);
    case reflenums::clang__ASTContext::getTranslationUnitDecl:
      return toClientReflType<class clang::TranslationUnitDecl *>(C);
    case reflenums::clang__ASTContext::getExternCContextDecl:
      return toClientReflType<class clang::ExternCContextDecl *>(C);
    case reflenums::clang__ASTContext::getMakeIntegerSeqDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::getTypePackElementDecl:
      return toClientReflType<class clang::BuiltinTemplateDecl *>(C);
    case reflenums::clang__ASTContext::AutoDeductTy:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::AutoRRefDeductTy:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::VaListTagDecl:
      return toClientReflType<class clang::Decl *>(C);
    case reflenums::clang__ASTContext::VaListTagDecl:
      return toClientReflType<class clang::Decl *>(C);
    case reflenums::clang__ASTContext::VaListTagDecl:
      return toClientReflType<class clang::Decl *>(C);
    case reflenums::clang__ASTContext::VaListTagDecl:
      return toClientReflType<class clang::Decl *>(C);
    case reflenums::clang__ASTContext::VaListTagDecl:
      return toClientReflType<class clang::Decl *>(C);
    case reflenums::clang__ASTContext::VaListTagDecl:
      return toClientReflType<class clang::Decl *>(C);
    case reflenums::clang__ASTContext::getExternalSource:
      return toClientReflType<class clang::ExternalASTSource *>(C);
    case reflenums::clang__ASTContext::getExternalSource:
      return toClientReflType<class clang::ExternalASTSource *>(C);
    case reflenums::clang__ASTContext::getExternalSource:
      return toClientReflType<class clang::ExternalASTSource *>(C);
    case reflenums::clang__ASTContext::PrintStats:
      return toClientReflType<void>(C);
    case reflenums::clang__ASTContext::PrintStats:
      return toClientReflType<void>(C);
    case reflenums::clang__ASTContext::PrintStats:
      return toClientReflType<void>(C);
    case reflenums::clang__ASTContext::PrintStats:
      return toClientReflType<void>(C);
    case reflenums::clang__ASTContext::PrintStats:
      return toClientReflType<void>(C);
    case reflenums::clang__ASTContext::getInt128Decl:
      return toClientReflType<class clang::TypedefDecl *>(C);
    case reflenums::clang__ASTContext::getUInt128Decl:
      return toClientReflType<class clang::TypedefDecl *>(C);
    case reflenums::clang__ASTContext::getUInt128Decl:
      return toClientReflType<class clang::TypedefDecl *>(C);
    case reflenums::clang__ASTContext::getUInt128Decl:
      return toClientReflType<class clang::TypedefDecl *>(C);
    case reflenums::clang__ASTContext::getUInt128Decl:
      return toClientReflType<class clang::TypedefDecl *>(C);
    case reflenums::clang__ASTContext::getUInt128Decl:
      return toClientReflType<class clang::TypedefDecl *>(C);
    case reflenums::clang__ASTContext::getUInt128Decl:
      return toClientReflType<class clang::TypedefDecl *>(C);
    case reflenums::clang__ASTContext::getAddrSpaceQualType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::removeAddrSpaceQualType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::removeAddrSpaceQualType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getObjCGCQualType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getRestrictType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getVolatileType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getConstType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getConstType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getConstType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getConstType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getConstType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getConstType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getConstType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getComplexType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getComplexType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getPointerType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getPointerType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getAdjustedType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getAdjustedType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getDecayedType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getDecayedType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getAtomicType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getBlockPointerType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getBlockDescriptorType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getReadPipeType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getWritePipeType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getBlockDescriptorExtendedType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getOpenCLTypeKind:
      return toClientReflType<enum clang::TargetInfo::OpenCLTypeKind>(C);
    case reflenums::clang__ASTContext::getOpenCLTypeAddrSpace:
      return toClientReflType<enum clang::LangAS>(C);
    case reflenums::clang__ASTContext::getOpenCLTypeAddrSpace:
      return toClientReflType<enum clang::LangAS>(C);
    case reflenums::clang__ASTContext::getOpenCLTypeAddrSpace:
      return toClientReflType<enum clang::LangAS>(C);
    case reflenums::clang__ASTContext::getOpenCLTypeAddrSpace:
      return toClientReflType<enum clang::LangAS>(C);
    case reflenums::clang__ASTContext::getOpenCLTypeAddrSpace:
      return toClientReflType<enum clang::LangAS>(C);
    case reflenums::clang__ASTContext::getLValueReferenceType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getRValueReferenceType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getMemberPointerType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getVariableArrayType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getDependentSizedArrayType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getIncompleteArrayType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getConstantArrayType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getVariableArrayDecayedType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getVectorType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getDependentVectorType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getExtVectorType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getDependentSizedExtVectorType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getDependentAddressSpaceType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getFunctionNoProtoType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getFunctionNoProtoType1:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getFunctionNoProtoType1:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::adjustStringLiteralBaseType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::adjustStringLiteralBaseType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::adjustStringLiteralBaseType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::adjustStringLiteralBaseType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getTypeDeclType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getTypedefType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getRecordType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getEnumType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getInjectedClassNameType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getInjectedClassNameType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getSubstTemplateTypeParmType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getSubstTemplateTypeParmType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getTemplateTypeParmType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getTemplateTypeParmType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getTemplateTypeParmType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getTemplateSpecializationType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getTemplateSpecializationTypeInfo:
      return toClientReflType<class clang::TypeSourceInfo *>(C);
    case reflenums::clang__ASTContext::getParenType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getElaboratedType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getDependentNameType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getDependentTemplateSpecializationType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getDependentTemplateSpecializationType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getDependentTemplateSpecializationType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getDependentTemplateSpecializationType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getDependentTemplateSpecializationType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getObjCInterfaceType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getObjCObjectType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getObjCObjectType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getObjCObjectType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getObjCObjectType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getObjCObjectType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getObjCObjectPointerType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getTypeOfExprType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getTypeOfType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getDecltypeType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getReflectedType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getUnaryTransformType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getAutoType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getAutoDeductType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getAutoRRefDeductType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getDeducedTemplateSpecializationType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getTagDeclType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getTagDeclType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getTagDeclType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getTagDeclType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getTagDeclType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getWCharType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getWideCharType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getSignedWCharType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getUnsignedWCharType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getWIntType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getIntPtrType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getUIntPtrType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getPointerDiffType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getUnsignedPointerDiffType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getProcessIDType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getCFConstantStringType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getObjCSuperType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getObjCSuperType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getRawCFConstantStringType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getRawCFConstantStringType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getCFConstantStringDecl:
      return toClientReflType<class clang::TypedefDecl *>(C);
    case reflenums::clang__ASTContext::getCFConstantStringTagDecl:
      return toClientReflType<class clang::RecordDecl *>(C);
    case reflenums::clang__ASTContext::getCFConstantStringTagDecl:
      return toClientReflType<class clang::RecordDecl *>(C);
    case reflenums::clang__ASTContext::getObjCConstantStringInterface:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getObjCNSStringType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getObjCNSStringType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getObjCIdRedefinitionType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getObjCIdRedefinitionType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getObjCClassRedefinitionType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getObjCClassRedefinitionType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getObjCSelRedefinitionType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getObjCSelRedefinitionType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getObjCSelRedefinitionType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getObjCSelRedefinitionType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getObjCSelRedefinitionType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getObjCSelRedefinitionType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getBoolName:
      return toClientReflType<class clang::IdentifierInfo *>(C);
    case reflenums::clang__ASTContext::getMakeIntegerSeqName:
      return toClientReflType<class clang::IdentifierInfo *>(C);
    case reflenums::clang__ASTContext::getTypePackElementName:
      return toClientReflType<class clang::IdentifierInfo *>(C);
    case reflenums::clang__ASTContext::getTypePackElementName:
      return toClientReflType<class clang::IdentifierInfo *>(C);
    case reflenums::clang__ASTContext::getTypePackElementName:
      return toClientReflType<class clang::IdentifierInfo *>(C);
    case reflenums::clang__ASTContext::getTypePackElementName:
      return toClientReflType<class clang::IdentifierInfo *>(C);
    case reflenums::clang__ASTContext::getFILEType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getFILEType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getjmp_bufType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getjmp_bufType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getsigjmp_bufType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getsigjmp_bufType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getucontext_tType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getLogicalOperationType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getLogicalOperationType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getLogicalOperationType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getLegacyIntegralTypeEncoding:
      return toClientReflType<void>(C);
    case reflenums::clang__ASTContext::getLegacyIntegralTypeEncoding:
      return toClientReflType<void>(C);
    case reflenums::clang__ASTContext::getObjCEncodingForFunctionDecl:
      return toClientReflType<const char *>(C);
    case reflenums::clang__ASTContext::getObjCEncodingForMethodDecl:
      return toClientReflType<const char *>(C);
    case reflenums::clang__ASTContext::getObjCEncodingForBlock:
      return toClientReflType<const char *>(C);
    case reflenums::clang__ASTContext::getObjCEncodingForPropertyDecl:
      return toClientReflType<const char *>(C);
    case reflenums::clang__ASTContext::ProtocolCompatibleWithProtocol:
      return toClientReflType<bool>(C);
    case reflenums::clang__ASTContext::getObjCPropertyImplDeclForPropertyDecl:
      return toClientReflType<class clang::ObjCPropertyImplDecl *>(C);
    case reflenums::clang__ASTContext::getObjCEncodingTypeSize:
      return toClientReflType<class clang::CharUnits>(C);
    case reflenums::clang__ASTContext::getObjCIdDecl:
      return toClientReflType<class clang::TypedefDecl *>(C);
    case reflenums::clang__ASTContext::getObjCIdType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getObjCSelDecl:
      return toClientReflType<class clang::TypedefDecl *>(C);
    case reflenums::clang__ASTContext::getObjCSelType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getObjCClassDecl:
      return toClientReflType<class clang::TypedefDecl *>(C);
    case reflenums::clang__ASTContext::getObjCClassType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getObjCProtocolDecl:
      return toClientReflType<class clang::ObjCInterfaceDecl *>(C);
    case reflenums::clang__ASTContext::getBOOLDecl:
      return toClientReflType<class clang::TypedefDecl *>(C);
    case reflenums::clang__ASTContext::getBOOLDecl:
      return toClientReflType<class clang::TypedefDecl *>(C);
    case reflenums::clang__ASTContext::getBOOLType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getObjCProtoType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getBuiltinVaListDecl:
      return toClientReflType<class clang::TypedefDecl *>(C);
    case reflenums::clang__ASTContext::getBuiltinVaListType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getVaListTagDecl:
      return toClientReflType<class clang::Decl *>(C);
    case reflenums::clang__ASTContext::getBuiltinMSVaListDecl:
      return toClientReflType<class clang::TypedefDecl *>(C);
    case reflenums::clang__ASTContext::getBuiltinMSVaListType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::canBuiltinBeRedeclared:
      return toClientReflType<bool>(C);
    case reflenums::clang__ASTContext::getCVRQualifiedType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getQualifiedType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getQualifiedType1:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getQualifiedType2:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getQualifiedType2:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getUnqualifiedObjCPointerType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getFixedPointScale:
      return toClientReflType<unsigned char>(C);
    case reflenums::clang__ASTContext::getFixedPointIBits:
      return toClientReflType<unsigned char>(C);
    case reflenums::clang__ASTContext::getNameForTemplate:
      return toClientReflType<struct clang::DeclarationNameInfo>(C);
    case reflenums::clang__ASTContext::getOverloadedTemplateName:
      return toClientReflType<class clang::TemplateName>(C);
    case reflenums::clang__ASTContext::getQualifiedTemplateName:
      return toClientReflType<class clang::TemplateName>(C);
    case reflenums::clang__ASTContext::getDependentTemplateName:
      return toClientReflType<class clang::TemplateName>(C);
    case reflenums::clang__ASTContext::getDependentTemplateName1:
      return toClientReflType<class clang::TemplateName>(C);
    case reflenums::clang__ASTContext::getSubstTemplateTemplateParm:
      return toClientReflType<class clang::TemplateName>(C);
    case reflenums::clang__ASTContext::getSubstTemplateTemplateParmPack:
      return toClientReflType<class clang::TemplateName>(C);
    case reflenums::clang__ASTContext::getSubstTemplateTemplateParmPack:
      return toClientReflType<class clang::TemplateName>(C);
    case reflenums::clang__ASTContext::getSubstTemplateTemplateParmPack:
      return toClientReflType<class clang::TemplateName>(C);
    case reflenums::clang__ASTContext::getSubstTemplateTemplateParmPack:
      return toClientReflType<class clang::TemplateName>(C);
    case reflenums::clang__ASTContext::getSubstTemplateTemplateParmPack:
      return toClientReflType<class clang::TemplateName>(C);
    case reflenums::clang__ASTContext::getSubstTemplateTemplateParmPack:
      return toClientReflType<class clang::TemplateName>(C);
    case reflenums::clang__ASTContext::getSubstTemplateTemplateParmPack:
      return toClientReflType<class clang::TemplateName>(C);
    case reflenums::clang__ASTContext::getSubstTemplateTemplateParmPack:
      return toClientReflType<class clang::TemplateName>(C);
    case reflenums::clang__ASTContext::getObjCGCAttrKind:
      return toClientReflType<enum clang::Qualifiers::GC>(C);
    case reflenums::clang__ASTContext::getObjCGCAttrKind:
      return toClientReflType<enum clang::Qualifiers::GC>(C);
    case reflenums::clang__ASTContext::isObjCNSObjectType:
      return toClientReflType<bool>(C);
    case reflenums::clang__ASTContext::isObjCNSObjectType:
      return toClientReflType<bool>(C);
    case reflenums::clang__ASTContext::getTypeInfo:
      return toClientReflType<struct clang::TypeInfo>(C);
    case reflenums::clang__ASTContext::getTypeInfo1:
      return toClientReflType<struct clang::TypeInfo>(C);
    case reflenums::clang__ASTContext::getOpenMPDefaultSimdAlign:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ASTContext::getTypeSize:
      return toClientReflType<unsigned long long>(C);
    case reflenums::clang__ASTContext::getTypeSize1:
      return toClientReflType<unsigned long long>(C);
    case reflenums::clang__ASTContext::getCharWidth:
      return toClientReflType<unsigned long long>(C);
    case reflenums::clang__ASTContext::toCharUnitsFromBits:
      return toClientReflType<class clang::CharUnits>(C);
    case reflenums::clang__ASTContext::toBits:
      return toClientReflType<long long>(C);
    case reflenums::clang__ASTContext::getTypeSizeInChars:
      return toClientReflType<class clang::CharUnits>(C);
    case reflenums::clang__ASTContext::getTypeSizeInChars1:
      return toClientReflType<class clang::CharUnits>(C);
    case reflenums::clang__ASTContext::getTypeAlign:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ASTContext::getTypeAlign1:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ASTContext::getTypeUnadjustedAlign:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ASTContext::getTypeUnadjustedAlign1:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ASTContext::getTypeAlignIfKnown:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ASTContext::getTypeAlignInChars:
      return toClientReflType<class clang::CharUnits>(C);
    case reflenums::clang__ASTContext::getTypeAlignInChars1:
      return toClientReflType<class clang::CharUnits>(C);
    case reflenums::clang__ASTContext::getTypeUnadjustedAlignInChars:
      return toClientReflType<class clang::CharUnits>(C);
    case reflenums::clang__ASTContext::getTypeUnadjustedAlignInChars1:
      return toClientReflType<class clang::CharUnits>(C);
    case reflenums::clang__ASTContext::getTypeUnadjustedAlignInChars1:
      return toClientReflType<class clang::CharUnits>(C);
    case reflenums::clang__ASTContext::getTypeUnadjustedAlignInChars1:
      return toClientReflType<class clang::CharUnits>(C);
    case reflenums::clang__ASTContext::getTypeUnadjustedAlignInChars1:
      return toClientReflType<class clang::CharUnits>(C);
    case reflenums::clang__ASTContext::isAlignmentRequired:
      return toClientReflType<bool>(C);
    case reflenums::clang__ASTContext::isAlignmentRequired1:
      return toClientReflType<bool>(C);
    case reflenums::clang__ASTContext::getPreferredTypeAlign:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ASTContext::getTargetDefaultAlignForAttributeAligned:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ASTContext::getAlignOfGlobalVar:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ASTContext::getAlignOfGlobalVarInChars:
      return toClientReflType<class clang::CharUnits>(C);
    case reflenums::clang__ASTContext::getDeclAlign:
      return toClientReflType<class clang::CharUnits>(C);
    case reflenums::clang__ASTContext::getDeclAlign:
      return toClientReflType<class clang::CharUnits>(C);
    case reflenums::clang__ASTContext::getDeclAlign:
      return toClientReflType<class clang::CharUnits>(C);
    case reflenums::clang__ASTContext::DumpRecordLayout:
      return toClientReflType<void>(C);
    case reflenums::clang__ASTContext::DumpRecordLayout:
      return toClientReflType<void>(C);
    case reflenums::clang__ASTContext::DumpRecordLayout:
      return toClientReflType<void>(C);
    case reflenums::clang__ASTContext::DumpRecordLayout:
      return toClientReflType<void>(C);
    case reflenums::clang__ASTContext::getOffsetOfBaseWithVBPtr:
      return toClientReflType<class clang::CharUnits>(C);
    case reflenums::clang__ASTContext::getFieldOffset:
      return toClientReflType<unsigned long long>(C);
    case reflenums::clang__ASTContext::lookupFieldBitOffset:
      return toClientReflType<unsigned long long>(C);
    case reflenums::clang__ASTContext::isNearlyEmpty:
      return toClientReflType<bool>(C);
    case reflenums::clang__ASTContext::isNearlyEmpty:
      return toClientReflType<bool>(C);
    case reflenums::clang__ASTContext::isNearlyEmpty:
      return toClientReflType<bool>(C);
    case reflenums::clang__ASTContext::isNearlyEmpty:
      return toClientReflType<bool>(C);
    case reflenums::clang__ASTContext::CountNonClassIvars:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ASTContext::CountNonClassIvars:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ASTContext::hasUniqueObjectRepresentations:
      return toClientReflType<bool>(C);
    case reflenums::clang__ASTContext::hasUniqueObjectRepresentations:
      return toClientReflType<bool>(C);
    case reflenums::clang__ASTContext::getCanonicalType:
      return toClientReflType<const class clang::Type *>(C);
    case reflenums::clang__ASTContext::getCanonicalType:
      return toClientReflType<const class clang::Type *>(C);
    case reflenums::clang__ASTContext::hasSameType:
      return toClientReflType<bool>(C);
    case reflenums::clang__ASTContext::hasSameType1:
      return toClientReflType<bool>(C);
    case reflenums::clang__ASTContext::hasSameType1:
      return toClientReflType<bool>(C);
    case reflenums::clang__ASTContext::hasSameUnqualifiedType:
      return toClientReflType<bool>(C);
    case reflenums::clang__ASTContext::hasSameNullabilityTypeQualifier:
      return toClientReflType<bool>(C);
    case reflenums::clang__ASTContext::hasSameNullabilityTypeQualifier:
      return toClientReflType<bool>(C);
    case reflenums::clang__ASTContext::hasSameNullabilityTypeQualifier:
      return toClientReflType<bool>(C);
    case reflenums::clang__ASTContext::hasSameNullabilityTypeQualifier:
      return toClientReflType<bool>(C);
    case reflenums::clang__ASTContext::hasSameNullabilityTypeQualifier:
      return toClientReflType<bool>(C);
    case reflenums::clang__ASTContext::hasSameNullabilityTypeQualifier:
      return toClientReflType<bool>(C);
    case reflenums::clang__ASTContext::getCanonicalNestedNameSpecifier:
      return toClientReflType<class clang::NestedNameSpecifier *>(C);
    case reflenums::clang__ASTContext::getDefaultCallingConvention:
      return toClientReflType<enum clang::CallingConv>(C);
    case reflenums::clang__ASTContext::getCanonicalTemplateName:
      return toClientReflType<class clang::TemplateName>(C);
    case reflenums::clang__ASTContext::getCanonicalTemplateName:
      return toClientReflType<class clang::TemplateName>(C);
    case reflenums::clang__ASTContext::getCanonicalTemplateArgument:
      return toClientReflType<class clang::TemplateArgument>(C);
    case reflenums::clang__ASTContext::getAsArrayType:
      return toClientReflType<const class clang::ArrayType *>(C);
    case reflenums::clang__ASTContext::getAsConstantArrayType:
      return toClientReflType<const class clang::ConstantArrayType *>(C);
    case reflenums::clang__ASTContext::getAsVariableArrayType:
      return toClientReflType<const class clang::VariableArrayType *>(C);
    case reflenums::clang__ASTContext::getAsIncompleteArrayType:
      return toClientReflType<const class clang::IncompleteArrayType *>(C);
    case reflenums::clang__ASTContext::getAsDependentSizedArrayType:
      return toClientReflType<const class clang::DependentSizedArrayType *>(C);
    case reflenums::clang__ASTContext::getBaseElementType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getBaseElementType1:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getConstantArrayElementCount:
      return toClientReflType<unsigned long long>(C);
    case reflenums::clang__ASTContext::getAdjustedParameterType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getSignatureParameterType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getExceptionObjectType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getArrayDecayedType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getPromotedIntegerType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getInnerObjCOwnership:
      return toClientReflType<enum clang::Qualifiers::ObjCLifetime>(C);
    case reflenums::clang__ASTContext::isPromotableBitField:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getIntegerTypeOrder:
      return toClientReflType<int>(C);
    case reflenums::clang__ASTContext::getFloatingTypeOrder:
      return toClientReflType<int>(C);
    case reflenums::clang__ASTContext::getFloatingTypeOfSizeWithinDomain:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getTargetAddressSpace:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ASTContext::getTargetAddressSpace1:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ASTContext::getTargetAddressSpace2:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ASTContext::getTargetNullPointerValue:
      return toClientReflType<unsigned long long>(C);
    case reflenums::clang__ASTContext::addressSpaceMapManglingFor:
      return toClientReflType<bool>(C);
    case reflenums::clang__ASTContext::addressSpaceMapManglingFor:
      return toClientReflType<bool>(C);
    case reflenums::clang__ASTContext::addressSpaceMapManglingFor:
      return toClientReflType<bool>(C);
    case reflenums::clang__ASTContext::addressSpaceMapManglingFor:
      return toClientReflType<bool>(C);
    case reflenums::clang__ASTContext::addressSpaceMapManglingFor:
      return toClientReflType<bool>(C);
    case reflenums::clang__ASTContext::addressSpaceMapManglingFor:
      return toClientReflType<bool>(C);
    case reflenums::clang__ASTContext::addressSpaceMapManglingFor:
      return toClientReflType<bool>(C);
    case reflenums::clang__ASTContext::isObjCIdType:
      return toClientReflType<bool>(C);
    case reflenums::clang__ASTContext::isObjCClassType:
      return toClientReflType<bool>(C);
    case reflenums::clang__ASTContext::isObjCSelType:
      return toClientReflType<bool>(C);
    case reflenums::clang__ASTContext::isObjCSelType:
      return toClientReflType<bool>(C);
    case reflenums::clang__ASTContext::isObjCSelType:
      return toClientReflType<bool>(C);
    case reflenums::clang__ASTContext::isObjCSelType:
      return toClientReflType<bool>(C);
    case reflenums::clang__ASTContext::isObjCSelType:
      return toClientReflType<bool>(C);
    case reflenums::clang__ASTContext::isObjCSelType:
      return toClientReflType<bool>(C);
    case reflenums::clang__ASTContext::isObjCSelType:
      return toClientReflType<bool>(C);
    case reflenums::clang__ASTContext::isObjCSelType:
      return toClientReflType<bool>(C);
    case reflenums::clang__ASTContext::isObjCSelType:
      return toClientReflType<bool>(C);
    case reflenums::clang__ASTContext::isObjCSelType:
      return toClientReflType<bool>(C);
    case reflenums::clang__ASTContext::isObjCSelType:
      return toClientReflType<bool>(C);
    case reflenums::clang__ASTContext::isObjCSelType:
      return toClientReflType<bool>(C);
    case reflenums::clang__ASTContext::isObjCSelType:
      return toClientReflType<bool>(C);
    case reflenums::clang__ASTContext::isObjCSelType:
      return toClientReflType<bool>(C);
    case reflenums::clang__ASTContext::isObjCSelType:
      return toClientReflType<bool>(C);
    case reflenums::clang__ASTContext::isObjCSelType:
      return toClientReflType<bool>(C);
    case reflenums::clang__ASTContext::getIntWidth:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ASTContext::getCorrespondingUnsignedType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::getCorrespondingSaturatedType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ASTContext::MakeIntValue:
      return toClientReflType<class llvm::APSInt>(C);
    case reflenums::clang__ASTContext::MakeIntValue:
      return toClientReflType<class llvm::APSInt>(C);
    case reflenums::clang__ASTContext::MakeIntValue:
      return toClientReflType<class llvm::APSInt>(C);
    case reflenums::clang__ASTContext::MakeIntValue:
      return toClientReflType<class llvm::APSInt>(C);
    case reflenums::clang__ASTContext::MakeIntValue:
      return toClientReflType<class llvm::APSInt>(C);
    case reflenums::clang__ASTContext::MakeIntValue:
      return toClientReflType<class llvm::APSInt>(C);
    case reflenums::clang__ASTContext::MakeIntValue:
      return toClientReflType<class llvm::APSInt>(C);
    case reflenums::clang__ASTContext::getObjCMethodRedeclaration:
      return toClientReflType<const class clang::ObjCMethodDecl *>(C);
    case reflenums::clang__ASTContext::getObjCMethodRedeclaration:
      return toClientReflType<const class clang::ObjCMethodDecl *>(C);
    case reflenums::clang__ASTContext::getObjContainingInterface:
      return toClientReflType<const class clang::ObjCInterfaceDecl *>(C);
    case reflenums::clang__ASTContext::getObjContainingInterface:
      return toClientReflType<const class clang::ObjCInterfaceDecl *>(C);
    case reflenums::clang__ASTContext::getObjContainingInterface:
      return toClientReflType<const class clang::ObjCInterfaceDecl *>(C);
    case reflenums::clang__ASTContext::CreateTypeSourceInfo:
      return toClientReflType<class clang::TypeSourceInfo *>(C);
    case reflenums::clang__ASTContext::getTrivialTypeSourceInfo:
      return toClientReflType<class clang::TypeSourceInfo *>(C);
    case reflenums::clang__ASTContext::getTrivialTypeSourceInfo:
      return toClientReflType<class clang::TypeSourceInfo *>(C);
    case reflenums::clang__ASTContext::getTrivialTypeSourceInfo:
      return toClientReflType<class clang::TypeSourceInfo *>(C);
    case reflenums::clang__ASTContext::GetGVALinkageForFunction:
      return toClientReflType<enum clang::GVALinkage>(C);
    case reflenums::clang__ASTContext::GetGVALinkageForFunction:
      return toClientReflType<enum clang::GVALinkage>(C);
    case reflenums::clang__ASTContext::GetGVALinkageForFunction:
      return toClientReflType<enum clang::GVALinkage>(C);
    case reflenums::clang__ASTContext::GetGVALinkageForFunction:
      return toClientReflType<enum clang::GVALinkage>(C);
    case reflenums::clang__ASTContext::GetGVALinkageForFunction:
      return toClientReflType<enum clang::GVALinkage>(C);
    case reflenums::clang__ASTContext::GetGVALinkageForFunction:
      return toClientReflType<enum clang::GVALinkage>(C);
    case reflenums::clang__ASTContext::GetGVALinkageForFunction:
      return toClientReflType<enum clang::GVALinkage>(C);
    case reflenums::clang__ASTContext::GetGVALinkageForFunction:
      return toClientReflType<enum clang::GVALinkage>(C);
    case reflenums::clang__ASTContext::GetGVALinkageForFunction:
      return toClientReflType<enum clang::GVALinkage>(C);
    case reflenums::clang__ASTContext::GetGVALinkageForFunction:
      return toClientReflType<enum clang::GVALinkage>(C);
    case reflenums::clang__ASTContext::GetGVALinkageForFunction:
      return toClientReflType<enum clang::GVALinkage>(C);
    case reflenums::clang__ASTContext::getManglingNumber:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ASTContext::getManglingNumber:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ASTContext::getStaticLocalNumber:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ASTContext::getStaticLocalNumber:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ASTContext::getStaticLocalNumber:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ASTContext::getStaticLocalNumber:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ASTContext::getParameterIndex:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ASTContext::getParameterIndex:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ASTContext::getParameterIndex:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ASTContext::getParameterIndex:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ASTContext::getParameterIndex:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ASTContext::getParameterIndex:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ASTContext::getParameterIndex:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ASTContext::getParameterIndex:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ASTContext::getParameterIndex:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ASTContext::getParameterIndex:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ASTContext::getParameterIndex:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ASTContext::getParameterIndex:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ASTContext::getParameterIndex:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ASTContext::getParameterIndex:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ASTContext::getParameterIndex:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ASTContext::getParameterIndex:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ASTContext::getParameterIndex:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ASTContext::getParameterIndex:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ASTContext::getParameterIndex:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ASTContext::getParameterIndex:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ASTContext::getParameterIndex:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ASTContext::getParameterIndex:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ASTContext::isMSStaticDataMemberInlineDefinition:
      return toClientReflType<bool>(C);
    case reflenums::clang__ASTContext::isMSStaticDataMemberInlineDefinition:
      return toClientReflType<bool>(C);
    case reflenums::clang__ASTContext::getInlineVariableDefinitionKind:
      return toClientReflType<enum clang::ASTContext::InlineVariableDefinitionKind>(C);
    case reflenums::clang__ASTContext::getInlineVariableDefinitionKind:
      return toClientReflType<enum clang::ASTContext::InlineVariableDefinitionKind>(C);
    case reflenums::clang__ASTContext::getInlineVariableDefinitionKind:
      return toClientReflType<enum clang::ASTContext::InlineVariableDefinitionKind>(C);
    case reflenums::clang__ASTContext::getInlineVariableDefinitionKind:
      return toClientReflType<enum clang::ASTContext::InlineVariableDefinitionKind>(C);
    case reflenums::clang__ASTContext::getInlineVariableDefinitionKind:
      return toClientReflType<enum clang::ASTContext::InlineVariableDefinitionKind>(C);
    case reflenums::clang__ASTContext::getInlineVariableDefinitionKind:
      return toClientReflType<enum clang::ASTContext::InlineVariableDefinitionKind>(C);
    case reflenums::clang__ASTContext::getInlineVariableDefinitionKind:
      return toClientReflType<enum clang::ASTContext::InlineVariableDefinitionKind>(C);
    case reflenums::clang__ASTContext::getInlineVariableDefinitionKind:
      return toClientReflType<enum clang::ASTContext::InlineVariableDefinitionKind>(C);
    case reflenums::clang__ASTContext::getInlineVariableDefinitionKind:
      return toClientReflType<enum clang::ASTContext::InlineVariableDefinitionKind>(C);
    case reflenums::clang__ASTContext::getInlineVariableDefinitionKind:
      return toClientReflType<enum clang::ASTContext::InlineVariableDefinitionKind>(C);
    case reflenums::clang__ASTContext::getInlineVariableDefinitionKind:
      return toClientReflType<enum clang::ASTContext::InlineVariableDefinitionKind>(C);
    case reflenums::clang__ASTContext::getInlineVariableDefinitionKind:
      return toClientReflType<enum clang::ASTContext::InlineVariableDefinitionKind>(C);
    case reflenums::clang__ASTContext::getInlineVariableDefinitionKind:
      return toClientReflType<enum clang::ASTContext::InlineVariableDefinitionKind>(C);
    case reflenums::clang__ASTContext::getInlineVariableDefinitionKind:
      return toClientReflType<enum clang::ASTContext::InlineVariableDefinitionKind>(C);
    case reflenums::clang__ASTContext::getInlineVariableDefinitionKind:
      return toClientReflType<enum clang::ASTContext::InlineVariableDefinitionKind>(C);
    case reflenums::clang__ASTContext::getInlineVariableDefinitionKind:
      return toClientReflType<enum clang::ASTContext::InlineVariableDefinitionKind>(C);
    case reflenums::clang__ASTContext::getInlineVariableDefinitionKind:
      return toClientReflType<enum clang::ASTContext::InlineVariableDefinitionKind>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__DeclAccessPair:
  switch (static_cast<reflenums::clang__DeclAccessPair::memnames>(MemNum)) {
    case reflenums::clang__DeclAccessPair:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclAccessPair:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclAccessPair:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclAccessPair:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclAccessPair::make:
      return toClientReflType<class clang::DeclAccessPair>(C);
    case reflenums::clang__DeclAccessPair::getDecl:
      return toClientReflType<class clang::NamedDecl *>(C);
    case reflenums::clang__DeclAccessPair::getAccess:
      return toClientReflType<enum clang::AccessSpecifier>(C);
    case reflenums::clang__DeclAccessPair::getAccess:
      return toClientReflType<enum clang::AccessSpecifier>(C);
    case reflenums::clang__DeclAccessPair::getAccess:
      return toClientReflType<enum clang::AccessSpecifier>(C);
    case reflenums::clang__DeclAccessPair::getAccess:
      return toClientReflType<enum clang::AccessSpecifier>(C);
    case reflenums::clang__DeclAccessPair::getAccess:
      return toClientReflType<enum clang::AccessSpecifier>(C);
    case reflenums::clang__DeclAccessPair::operator_arrow:
      return toClientReflType<class clang::NamedDecl *>(C);
    case reflenums::clang__DeclAccessPair::operator_arrow:
      return toClientReflType<class clang::NamedDecl *>(C);
    case reflenums::clang__DeclAccessPair::operator_arrow:
      return toClientReflType<class clang::NamedDecl *>(C);
    case reflenums::clang__DeclAccessPair::operator_arrow:
      return toClientReflType<class clang::NamedDecl *>(C);
    case reflenums::clang__DeclAccessPair::operator_arrow:
      return toClientReflType<class clang::NamedDecl *>(C);
    case reflenums::clang__DeclAccessPair::operator_arrow:
      return toClientReflType<class clang::NamedDecl *>(C);
    case reflenums::clang__DeclAccessPair::operator_arrow:
      return toClientReflType<class clang::NamedDecl *>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__UnresolvedSetIterator:
  switch (static_cast<reflenums::clang__UnresolvedSetIterator::memnames>(MemNum)) {
    case reflenums::clang__UnresolvedSetIterator:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedSetIterator:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedSetIterator:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedSetIterator:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedSetIterator:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedSetIterator:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedSetIterator:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedSetIterator:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedSetIterator:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedSetIterator:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedSetIterator:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedSetIterator:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedSetIterator:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedSetIterator:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedSetIterator:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedSetIterator::operator_plus:
      return toClientReflType<class clang::UnresolvedSetIterator>(C);
    case reflenums::clang__UnresolvedSetIterator::operator_plus1:
      return toClientReflType<class clang::UnresolvedSetIterator>(C);
    case reflenums::clang__UnresolvedSetIterator::operator_minus:
      return toClientReflType<class clang::UnresolvedSetIterator>(C);
    case reflenums::clang__UnresolvedSetIterator::operator_minus:
      return toClientReflType<class clang::UnresolvedSetIterator>(C);
    case reflenums::clang__UnresolvedSetIterator::operator_minus:
      return toClientReflType<class clang::UnresolvedSetIterator>(C);
    case reflenums::clang__UnresolvedSetIterator::operator_minus:
      return toClientReflType<class clang::UnresolvedSetIterator>(C);
    case reflenums::clang__UnresolvedSetIterator::operator_minus:
      return toClientReflType<class clang::UnresolvedSetIterator>(C);
    case reflenums::clang__UnresolvedSetIterator::operator_not_eq:
      return toClientReflType<bool>(C);
    case reflenums::clang__UnresolvedSetIterator::operator_gr:
      return toClientReflType<bool>(C);
    case reflenums::clang__UnresolvedSetIterator::operator_less_eq:
      return toClientReflType<bool>(C);
    case reflenums::clang__UnresolvedSetIterator::operator_gr_eq:
      return toClientReflType<bool>(C);
    case reflenums::clang__UnresolvedSetIterator::operator_gr_eq:
      return toClientReflType<bool>(C);
    case reflenums::clang__UnresolvedSetIterator::operator_arrow:
      return toClientReflType<class clang::NamedDecl *>(C);
    case reflenums::clang__UnresolvedSetIterator::operator_arrow:
      return toClientReflType<class clang::NamedDecl *>(C);
    case reflenums::clang__UnresolvedSetIterator::operator_arrow:
      return toClientReflType<class clang::NamedDecl *>(C);
    case reflenums::clang__UnresolvedSetIterator::operator_arrow:
      return toClientReflType<class clang::NamedDecl *>(C);
    case reflenums::clang__UnresolvedSetIterator::operator_arrow:
      return toClientReflType<class clang::NamedDecl *>(C);
    case reflenums::clang__UnresolvedSetIterator::operator_arrow:
      return toClientReflType<class clang::NamedDecl *>(C);
    case reflenums::clang__UnresolvedSetIterator::operator_arrow:
      return toClientReflType<class clang::NamedDecl *>(C);
    case reflenums::clang__UnresolvedSetIterator:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedSetIterator:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedSetIterator:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedSetIterator:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedSetIterator:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedSetIterator:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedSetIterator:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedSetIterator:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedSetIterator:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedSetIterator:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedSetIterator:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedSetIterator:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedSetIterator:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedSetIterator::operator_minus1:
      return toClientReflType<long>(C);
    case reflenums::clang__UnresolvedSetIterator::operator_minus1:
      return toClientReflType<long>(C);
    case reflenums::clang__UnresolvedSetIterator::operator_minus1:
      return toClientReflType<long>(C);
    case reflenums::clang__UnresolvedSetIterator::operator_minus1:
      return toClientReflType<long>(C);
    case reflenums::clang__UnresolvedSetIterator::operator_minus1:
      return toClientReflType<long>(C);
    case reflenums::clang__UnresolvedSetIterator::operator_minus1:
      return toClientReflType<long>(C);
    case reflenums::clang__UnresolvedSetIterator::operator_minus1:
      return toClientReflType<long>(C);
    case reflenums::clang__UnresolvedSetIterator::operator_eq_eq:
      return toClientReflType<bool>(C);
    case reflenums::clang__UnresolvedSetIterator::operator_less:
      return toClientReflType<bool>(C);
    case reflenums::clang__UnresolvedSetIterator::operator_star:
      return toClientReflType<class clang::NamedDecl *>(C);
    case reflenums::clang__UnresolvedSetIterator::operator_star:
      return toClientReflType<class clang::NamedDecl *>(C);
    case reflenums::clang__UnresolvedSetIterator::operator_star:
      return toClientReflType<class clang::NamedDecl *>(C);
    case reflenums::clang__UnresolvedSetIterator::operator_star:
      return toClientReflType<class clang::NamedDecl *>(C);
    case reflenums::clang__UnresolvedSetIterator:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedSetIterator:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedSetIterator:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedSetIterator:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedSetIterator:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedSetIterator:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedSetIterator:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedSetIterator:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedSetIterator::getDecl:
      return toClientReflType<class clang::NamedDecl *>(C);
    case reflenums::clang__UnresolvedSetIterator::setDecl:
      return toClientReflType<void>(C);
    case reflenums::clang__UnresolvedSetIterator::getAccess:
      return toClientReflType<enum clang::AccessSpecifier>(C);
    case reflenums::clang__UnresolvedSetIterator::getAccess:
      return toClientReflType<enum clang::AccessSpecifier>(C);
    case reflenums::clang__UnresolvedSetIterator::getPair:
      return toClientReflType<const class clang::DeclAccessPair &>(C);
    case reflenums::clang__UnresolvedSetIterator::getPair:
      return toClientReflType<const class clang::DeclAccessPair &>(C);
    case reflenums::clang__UnresolvedSetIterator::getPair:
      return toClientReflType<const class clang::DeclAccessPair &>(C);
    case reflenums::clang__UnresolvedSetIterator::getPair:
      return toClientReflType<const class clang::DeclAccessPair &>(C);
    case reflenums::clang__UnresolvedSetIterator::getPair:
      return toClientReflType<const class clang::DeclAccessPair &>(C);
    case reflenums::clang__UnresolvedSetIterator::getPair:
      return toClientReflType<const class clang::DeclAccessPair &>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__UnresolvedSetImpl:
  switch (static_cast<reflenums::clang__UnresolvedSetImpl::memnames>(MemNum)) {
    case reflenums::clang__UnresolvedSetImpl::_this_:
      if (IsPtr)
        return toClientReflType<clang::UnresolvedSetImpl *>(C);
      return toClientReflType<clang::UnresolvedSetImpl>(C);
    case reflenums::clang__UnresolvedSetImpl:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedSetImpl:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedSetImpl:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedSetImpl:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedSetImpl:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedSetImpl:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedSetImpl:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedSetImpl:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedSetImpl:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedSetImpl:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedSetImpl:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedSetImpl:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedSetImpl:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedSetImpl:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedSetImpl:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedSetImpl:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedSetImpl:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedSetImpl:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedSetImpl:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedSetImpl:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedSetImpl:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedSetImpl:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedSetImpl:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedSetImpl:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedSetImpl:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedSetImpl:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedSetImpl::empty:
      return toClientReflType<bool>(C);
    case reflenums::clang__UnresolvedSetImpl::size:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__UnresolvedSetImpl::size:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__UnresolvedSetImpl::size:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__UnresolvedSetImpl::operator_sub:
      return toClientReflType<const class clang::DeclAccessPair &>(C);
    case reflenums::clang__UnresolvedSetImpl::operator_sub:
      return toClientReflType<const class clang::DeclAccessPair &>(C);
    case reflenums::clang__UnresolvedSetImpl::operator_sub:
      return toClientReflType<const class clang::DeclAccessPair &>(C);
    case reflenums::clang__UnresolvedSetImpl::operator_sub:
      return toClientReflType<const class clang::DeclAccessPair &>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__Expr:
  switch (static_cast<reflenums::clang__Expr::memnames>(MemNum)) {
    case reflenums::clang__Expr:::
      return toClientReflType<>(C);
    case reflenums::clang__Expr:::
      return toClientReflType<>(C);
    case reflenums::clang__Expr:::
      return toClientReflType<>(C);
    case reflenums::clang__Expr:::
      return toClientReflType<>(C);
    case reflenums::clang__Expr:::
      return toClientReflType<>(C);
    case reflenums::clang__Expr:::
      return toClientReflType<>(C);
    case reflenums::clang__Expr::getType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__Expr::getType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__Expr::isValueDependent:
      return toClientReflType<bool>(C);
    case reflenums::clang__Expr::isValueDependent:
      return toClientReflType<bool>(C);
    case reflenums::clang__Expr::isTypeDependent:
      return toClientReflType<bool>(C);
    case reflenums::clang__Expr::isTypeDependent:
      return toClientReflType<bool>(C);
    case reflenums::clang__Expr::isInstantiationDependent:
      return toClientReflType<bool>(C);
    case reflenums::clang__Expr::isInstantiationDependent:
      return toClientReflType<bool>(C);
    case reflenums::clang__Expr::containsUnexpandedParameterPack:
      return toClientReflType<bool>(C);
    case reflenums::clang__Expr::containsUnexpandedParameterPack:
      return toClientReflType<bool>(C);
    case reflenums::clang__Expr::getExprLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__Expr::isUnusedResultAWarning:
      return toClientReflType<bool>(C);
    case reflenums::clang__Expr::isLValue:
      return toClientReflType<bool>(C);
    case reflenums::clang__Expr::isRValue:
      return toClientReflType<bool>(C);
    case reflenums::clang__Expr::isXValue:
      return toClientReflType<bool>(C);
    case reflenums::clang__Expr::isGLValue:
      return toClientReflType<bool>(C);
    case reflenums::clang__Expr::isGLValue:
      return toClientReflType<bool>(C);
    case reflenums::clang__Expr::ClassifyLValue:
      return toClientReflType<enum clang::Expr::LValueClassification>(C);
    case reflenums::clang__Expr::ClassifyLValue:
      return toClientReflType<enum clang::Expr::LValueClassification>(C);
    case reflenums::clang__Expr::isModifiableLvalue:
      return toClientReflType<enum clang::Expr::isModifiableLvalueResult>(C);
    case reflenums::clang__Expr::isModifiableLvalue:
      return toClientReflType<enum clang::Expr::isModifiableLvalueResult>(C);
    case reflenums::clang__Expr::Classify:
      return toClientReflType<class clang::Expr::Classification>(C);
    case reflenums::clang__Expr::ClassifyModifiable:
      return toClientReflType<class clang::Expr::Classification>(C);
    case reflenums::clang__Expr::getValueKindForType:
      return toClientReflType<enum clang::ExprValueKind>(C);
    case reflenums::clang__Expr::getValueKind:
      return toClientReflType<enum clang::ExprValueKind>(C);
    case reflenums::clang__Expr::getObjectKind:
      return toClientReflType<enum clang::ExprObjectKind>(C);
    case reflenums::clang__Expr::isOrdinaryOrBitFieldObject:
      return toClientReflType<bool>(C);
    case reflenums::clang__Expr::isOrdinaryOrBitFieldObject:
      return toClientReflType<bool>(C);
    case reflenums::clang__Expr::isOrdinaryOrBitFieldObject:
      return toClientReflType<bool>(C);
    case reflenums::clang__Expr::isOrdinaryOrBitFieldObject:
      return toClientReflType<bool>(C);
    case reflenums::clang__Expr::isOrdinaryOrBitFieldObject:
      return toClientReflType<bool>(C);
    case reflenums::clang__Expr::isOrdinaryOrBitFieldObject:
      return toClientReflType<bool>(C);
    case reflenums::clang__Expr::refersToBitField:
      return toClientReflType<bool>(C);
    case reflenums::clang__Expr::refersToBitField:
      return toClientReflType<bool>(C);
    case reflenums::clang__Expr::getSourceBitField:
      return toClientReflType<const class clang::FieldDecl *>(C);
    case reflenums::clang__Expr::getSourceBitField:
      return toClientReflType<const class clang::FieldDecl *>(C);
    case reflenums::clang__Expr::getReferencedDeclOfCallee:
      return toClientReflType<const class clang::Decl *>(C);
    case reflenums::clang__Expr::getObjCProperty:
      return toClientReflType<const class clang::ObjCPropertyRefExpr *>(C);
    case reflenums::clang__Expr::isObjCSelfExpr:
      return toClientReflType<bool>(C);
    case reflenums::clang__Expr::refersToVectorElement:
      return toClientReflType<bool>(C);
    case reflenums::clang__Expr::refersToGlobalRegisterVar:
      return toClientReflType<bool>(C);
    case reflenums::clang__Expr::hasPlaceholderType:
      return toClientReflType<bool>(C);
    case reflenums::clang__Expr::hasPlaceholderType1:
      return toClientReflType<bool>(C);
    case reflenums::clang__Expr::isKnownToHaveBooleanValue:
      return toClientReflType<bool>(C);
    case reflenums::clang__Expr::isIntegerConstantExpr:
      return toClientReflType<bool>(C);
    case reflenums::clang__Expr::isIntegerConstantExpr1:
      return toClientReflType<bool>(C);
    case reflenums::clang__Expr::isCXX98IntegralConstantExpr:
      return toClientReflType<bool>(C);
    case reflenums::clang__Expr::isCXX11ConstantExpr:
      return toClientReflType<bool>(C);
    case reflenums::clang__Expr::isCXX11ConstantExpr:
      return toClientReflType<bool>(C);
    case reflenums::clang__Expr::isCXX11ConstantExpr:
      return toClientReflType<bool>(C);
    case reflenums::clang__Expr::isConstantInitializer:
      return toClientReflType<bool>(C);
    case reflenums::clang__Expr::isConstantInitializer:
      return toClientReflType<bool>(C);
    case reflenums::clang__Expr::isConstantInitializer:
      return toClientReflType<bool>(C);
    case reflenums::clang__Expr::EvaluateAsRValue:
      return toClientReflType<bool>(C);
    case reflenums::clang__Expr::EvaluateAsRValue:
      return toClientReflType<bool>(C);
    case reflenums::clang__Expr::EvaluateAsRValue:
      return toClientReflType<bool>(C);
    case reflenums::clang__Expr::EvaluateAsInt:
      return toClientReflType<bool>(C);
    case reflenums::clang__Expr::EvaluateAsString:
      return toClientReflType<bool>(C);
    case reflenums::clang__Expr::EvaluateAsVoid:
      return toClientReflType<bool>(C);
    case reflenums::clang__Expr::EvaluateAsFloat:
      return toClientReflType<bool>(C);
    case reflenums::clang__Expr::isEvaluatable:
      return toClientReflType<bool>(C);
    case reflenums::clang__Expr::HasSideEffects:
      return toClientReflType<bool>(C);
    case reflenums::clang__Expr::hasNonTrivialCall:
      return toClientReflType<bool>(C);
    case reflenums::clang__Expr::hasNonTrivialCall:
      return toClientReflType<bool>(C);
    case reflenums::clang__Expr::EvaluateForOverflow:
      return toClientReflType<void>(C);
    case reflenums::clang__Expr::EvaluateAsLValue:
      return toClientReflType<bool>(C);
    case reflenums::clang__Expr::EvaluateAsLValue:
      return toClientReflType<bool>(C);
    case reflenums::clang__Expr::EvaluateAsLValue:
      return toClientReflType<bool>(C);
    case reflenums::clang__Expr::EvaluateAsLValue:
      return toClientReflType<bool>(C);
    case reflenums::clang__Expr::EvaluateAsConstantExpr:
      return toClientReflType<bool>(C);
    case reflenums::clang__Expr::EvaluateAsConstantExpr:
      return toClientReflType<bool>(C);
    case reflenums::clang__Expr::EvaluateAsConstantExpr:
      return toClientReflType<bool>(C);
    case reflenums::clang__Expr::EvaluateAsConstantExpr:
      return toClientReflType<bool>(C);
    case reflenums::clang__Expr::isNullPointerConstant:
      return toClientReflType<enum clang::Expr::NullPointerConstantKind>(C);
    case reflenums::clang__Expr::isOBJCGCCandidate:
      return toClientReflType<bool>(C);
    case reflenums::clang__Expr::isBoundMemberFunction:
      return toClientReflType<bool>(C);
    case reflenums::clang__Expr::findBoundMemberType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__Expr::findBoundMemberType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__Expr::findBoundMemberType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__Expr::IgnoreImplicit:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__Expr::IgnoreImplicit:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__Expr::IgnoreImplicit:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__Expr::IgnoreImplicit:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__Expr::IgnoreImplicit:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__Expr::IgnoreImplicit:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__Expr::IgnoreConversionOperator:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__Expr::IgnoreParenImpCasts:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__Expr::IgnoreParenImpCasts:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__Expr::IgnoreParenLValueCasts:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__Expr::IgnoreParenLValueCasts:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__Expr::IgnoreParenLValueCasts:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__Expr::ignoreParenBaseCasts:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__Expr::isDefaultArgument:
      return toClientReflType<bool>(C);
    case reflenums::clang__Expr::isTemporaryObject:
      return toClientReflType<bool>(C);
    case reflenums::clang__Expr::isImplicitCXXThis:
      return toClientReflType<bool>(C);
    case reflenums::clang__Expr::IgnoreImpCasts:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__Expr::IgnoreParens:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__Expr::IgnoreParenCasts:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__Expr::IgnoreCasts:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__Expr::IgnoreParenNoopCasts:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__Expr::IgnoreParenNoopCasts:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__Expr::getBestDynamicClassType:
      return toClientReflType<const class clang::CXXRecordDecl *>(C);
    case reflenums::clang__Expr::getBestDynamicClassTypeExpr:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__Expr::getBestDynamicClassTypeExpr:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__Expr::skipRValueSubobjectAdjustments:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__Expr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__Expr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__Expr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__Expr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__Expr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__Expr::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__Expr__Classification:
  switch (static_cast<reflenums::clang__Expr__Classification::memnames>(MemNum)) {
    case reflenums::clang__Expr__Classification:::
      return toClientReflType<>(C);
    case reflenums::clang__Expr__Classification:::
      return toClientReflType<>(C);
    case reflenums::clang__Expr__Classification:::
      return toClientReflType<>(C);
    case reflenums::clang__Expr__Classification:::
      return toClientReflType<>(C);
    case reflenums::clang__Expr__Classification:::
      return toClientReflType<>(C);
    case reflenums::clang__Expr__Classification:::
      return toClientReflType<>(C);
    case reflenums::clang__Expr__Classification:::
      return toClientReflType<>(C);
    case reflenums::clang__Expr__Classification:::
      return toClientReflType<>(C);
    case reflenums::clang__Expr__Classification:::
      return toClientReflType<>(C);
    case reflenums::clang__Expr__Classification:::
      return toClientReflType<>(C);
    case reflenums::clang__Expr__Classification:::
      return toClientReflType<>(C);
    case reflenums::clang__Expr__Classification::getKind:
      return toClientReflType<enum clang::Expr::Classification::Kinds>(C);
    case reflenums::clang__Expr__Classification::getModifiable:
      return toClientReflType<enum clang::Expr::Classification::ModifiableType>(C);
    case reflenums::clang__Expr__Classification::isLValue:
      return toClientReflType<bool>(C);
    case reflenums::clang__Expr__Classification::isXValue:
      return toClientReflType<bool>(C);
    case reflenums::clang__Expr__Classification::isGLValue:
      return toClientReflType<bool>(C);
    case reflenums::clang__Expr__Classification::isPRValue:
      return toClientReflType<bool>(C);
    case reflenums::clang__Expr__Classification::isRValue:
      return toClientReflType<bool>(C);
    case reflenums::clang__Expr__Classification::isModifiable:
      return toClientReflType<bool>(C);
    case reflenums::clang__Expr__Classification::makeSimpleLValue:
      return toClientReflType<class clang::Expr::Classification>(C);
    case reflenums::clang__Expr__Classification::makeSimpleLValue:
      return toClientReflType<class clang::Expr::Classification>(C);
    case reflenums::clang__Expr__Classification::makeSimpleLValue:
      return toClientReflType<class clang::Expr::Classification>(C);
    case reflenums::clang__Expr__Classification::makeSimpleLValue:
      return toClientReflType<class clang::Expr::Classification>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__Expr__EvalStatus:
  switch (static_cast<reflenums::clang__Expr__EvalStatus::memnames>(MemNum)) {
    case reflenums::clang__Expr__EvalStatus:::
      return toClientReflType<>(C);
    case reflenums::clang__Expr__EvalStatus::HasSideEffects:
      return toClientReflType<bool>(C);
    case reflenums::clang__Expr__EvalStatus::HasUndefinedBehavior:
      return toClientReflType<bool>(C);
    case reflenums::clang__Expr__EvalStatus::HasUndefinedBehavior:
      return toClientReflType<bool>(C);
    case reflenums::clang__Expr__EvalStatus::HasUndefinedBehavior:
      return toClientReflType<bool>(C);
    case reflenums::clang__Expr__EvalStatus::HasUndefinedBehavior:
      return toClientReflType<bool>(C);
    case reflenums::clang__Expr__EvalStatus::hasSideEffects:
      return toClientReflType<bool>(C);
    case reflenums::clang__Expr__EvalStatus::hasSideEffects:
      return toClientReflType<bool>(C);
    case reflenums::clang__Expr__EvalStatus::hasSideEffects:
      return toClientReflType<bool>(C);
    case reflenums::clang__Expr__EvalStatus::hasSideEffects:
      return toClientReflType<bool>(C);
    case reflenums::clang__Expr__EvalStatus::hasSideEffects:
      return toClientReflType<bool>(C);
    case reflenums::clang__Expr__EvalStatus::hasSideEffects:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__Expr__EvalResult:
  switch (static_cast<reflenums::clang__Expr__EvalResult::memnames>(MemNum)) {
    case reflenums::clang__Expr__EvalResult:::
      return toClientReflType<>(C);
    case reflenums::clang__Expr__EvalResult:::
      return toClientReflType<>(C);
    case reflenums::clang__Expr__EvalResult::isGlobalLValue:
      return toClientReflType<bool>(C);
    case reflenums::clang__Expr__EvalResult::isGlobalLValue:
      return toClientReflType<bool>(C);
    case reflenums::clang__Expr__EvalResult::isGlobalLValue:
      return toClientReflType<bool>(C);
    case reflenums::clang__Expr__EvalResult::isGlobalLValue:
      return toClientReflType<bool>(C);
    case reflenums::clang__Expr__EvalResult::isGlobalLValue:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__OpaqueValueExpr:
  switch (static_cast<reflenums::clang__OpaqueValueExpr::memnames>(MemNum)) {
    case reflenums::clang__OpaqueValueExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__OpaqueValueExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__OpaqueValueExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__OpaqueValueExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__OpaqueValueExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__OpaqueValueExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__OpaqueValueExpr::findInCopyConstruct:
      return toClientReflType<const class clang::OpaqueValueExpr *>(C);
    case reflenums::clang__OpaqueValueExpr::findInCopyConstruct:
      return toClientReflType<const class clang::OpaqueValueExpr *>(C);
    case reflenums::clang__OpaqueValueExpr::getLocation:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__OpaqueValueExpr::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__OpaqueValueExpr::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__OpaqueValueExpr::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__OpaqueValueExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__OpaqueValueExpr::getExprLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__OpaqueValueExpr::getExprLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__OpaqueValueExpr::children:
      return toClientReflType<class llvm::iterator_range<struct clang::ConstStmtIterator>>(C);
    case reflenums::clang__OpaqueValueExpr::getSourceExpr:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__OpaqueValueExpr::getSourceExpr:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__OpaqueValueExpr::isUnique:
      return toClientReflType<bool>(C);
    case reflenums::clang__OpaqueValueExpr::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__DeclRefExpr:
  switch (static_cast<reflenums::clang__DeclRefExpr::memnames>(MemNum)) {
    case reflenums::clang__DeclRefExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclRefExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclRefExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclRefExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclRefExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclRefExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclRefExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclRefExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclRefExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclRefExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclRefExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclRefExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclRefExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__DeclRefExpr::Create:
      return toClientReflType<class clang::DeclRefExpr *>(C);
    case reflenums::clang__DeclRefExpr::Create1:
      return toClientReflType<class clang::DeclRefExpr *>(C);
    case reflenums::clang__DeclRefExpr::CreateEmpty:
      return toClientReflType<class clang::DeclRefExpr *>(C);
    case reflenums::clang__DeclRefExpr::CreateEmpty:
      return toClientReflType<class clang::DeclRefExpr *>(C);
    case reflenums::clang__DeclRefExpr::getDecl:
      return toClientReflType<const class clang::ValueDecl *>(C);
    case reflenums::clang__DeclRefExpr::getDecl:
      return toClientReflType<const class clang::ValueDecl *>(C);
    case reflenums::clang__DeclRefExpr::getNameInfo:
      return toClientReflType<struct clang::DeclarationNameInfo>(C);
    case reflenums::clang__DeclRefExpr::getLocation:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__DeclRefExpr::getLocation:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__DeclRefExpr::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__DeclRefExpr::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__DeclRefExpr::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__DeclRefExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__DeclRefExpr::hasQualifier:
      return toClientReflType<bool>(C);
    case reflenums::clang__DeclRefExpr::getQualifierLoc:
      return toClientReflType<class clang::NestedNameSpecifierLoc>(C);
    case reflenums::clang__DeclRefExpr::getQualifier:
      return toClientReflType<class clang::NestedNameSpecifier *>(C);
    case reflenums::clang__DeclRefExpr::getQualifier:
      return toClientReflType<class clang::NestedNameSpecifier *>(C);
    case reflenums::clang__DeclRefExpr::getFoundDecl:
      return toClientReflType<const class clang::NamedDecl *>(C);
    case reflenums::clang__DeclRefExpr::hasTemplateKWAndArgsInfo:
      return toClientReflType<bool>(C);
    case reflenums::clang__DeclRefExpr::getTemplateKeywordLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__DeclRefExpr::getLAngleLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__DeclRefExpr::getRAngleLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__DeclRefExpr::hasTemplateKeyword:
      return toClientReflType<bool>(C);
    case reflenums::clang__DeclRefExpr::hasExplicitTemplateArgs:
      return toClientReflType<bool>(C);
    case reflenums::clang__DeclRefExpr::copyTemplateArgumentsInto:
      return toClientReflType<void>(C);
    case reflenums::clang__DeclRefExpr::getTemplateArgs:
      return toClientReflType<const class clang::TemplateArgumentLoc *>(C);
    case reflenums::clang__DeclRefExpr::getNumTemplateArgs:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__DeclRefExpr::template_arguments:
      return toClientReflType<class llvm::ArrayRef<class clang::TemplateArgumentLoc>>(C);
    case reflenums::clang__DeclRefExpr::hadMultipleCandidates:
      return toClientReflType<bool>(C);
    case reflenums::clang__DeclRefExpr::hadMultipleCandidates:
      return toClientReflType<bool>(C);
    case reflenums::clang__DeclRefExpr::refersToEnclosingVariableOrCapture:
      return toClientReflType<bool>(C);
    case reflenums::clang__DeclRefExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__DeclRefExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__DeclRefExpr::children:
      return toClientReflType<class llvm::iterator_range<struct clang::ConstStmtIterator>>(C);
    case reflenums::clang__DeclRefExpr::children:
      return toClientReflType<class llvm::iterator_range<struct clang::ConstStmtIterator>>(C);
    case reflenums::clang__DeclRefExpr::children:
      return toClientReflType<class llvm::iterator_range<struct clang::ConstStmtIterator>>(C);
    case reflenums::clang__DeclRefExpr::children:
      return toClientReflType<class llvm::iterator_range<struct clang::ConstStmtIterator>>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__PredefinedExpr:
  switch (static_cast<reflenums::clang__PredefinedExpr::memnames>(MemNum)) {
    case reflenums::clang__PredefinedExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__PredefinedExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__PredefinedExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__PredefinedExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__PredefinedExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__PredefinedExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__PredefinedExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__PredefinedExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__PredefinedExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__PredefinedExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__PredefinedExpr::getIdentType:
      return toClientReflType<enum clang::PredefinedExpr::IdentType>(C);
    case reflenums::clang__PredefinedExpr::getLocation:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__PredefinedExpr::getLocation:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__PredefinedExpr::getLocation:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__PredefinedExpr::getFunctionName:
      return toClientReflType<const class clang::StringLiteral *>(C);
    case reflenums::clang__PredefinedExpr::getIdentTypeName:
      return toClientReflType<const char *>(C);
    case reflenums::clang__PredefinedExpr::ComputeName:
      return toClientReflType<const char *>(C);
    case reflenums::clang__PredefinedExpr::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__PredefinedExpr::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__PredefinedExpr::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__PredefinedExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__PredefinedExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__PredefinedExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__PredefinedExpr::children:
      return toClientReflType<class llvm::iterator_range<struct clang::ConstStmtIterator>>(C);
    case reflenums::clang__PredefinedExpr::children:
      return toClientReflType<class llvm::iterator_range<struct clang::ConstStmtIterator>>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__APIntStorage:
  switch (static_cast<reflenums::clang__APIntStorage::memnames>(MemNum)) {
    case reflenums::clang__APIntStorage:::
      return toClientReflType<>(C);
    case reflenums::clang__APIntStorage:::
      return toClientReflType<>(C);
    case reflenums::clang__APIntStorage:::
      return toClientReflType<>(C);
    case reflenums::clang__APIntStorage:::
      return toClientReflType<>(C);
    case reflenums::clang__APIntStorage:::
      return toClientReflType<>(C);
    case reflenums::clang__APIntStorage:::
      return toClientReflType<>(C);
    case reflenums::clang__APIntStorage:::
      return toClientReflType<>(C);
    case reflenums::clang__APIntStorage:::
      return toClientReflType<>(C);
    case reflenums::clang__APIntStorage:::
      return toClientReflType<>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__IntegerLiteral:
  switch (static_cast<reflenums::clang__IntegerLiteral::memnames>(MemNum)) {
    case reflenums::clang__IntegerLiteral:::
      return toClientReflType<>(C);
    case reflenums::clang__IntegerLiteral:::
      return toClientReflType<>(C);
    case reflenums::clang__IntegerLiteral:::
      return toClientReflType<>(C);
    case reflenums::clang__IntegerLiteral:::
      return toClientReflType<>(C);
    case reflenums::clang__IntegerLiteral:::
      return toClientReflType<>(C);
    case reflenums::clang__IntegerLiteral::Create:
      return toClientReflType<class clang::IntegerLiteral *>(C);
    case reflenums::clang__IntegerLiteral::Create1:
      return toClientReflType<class clang::IntegerLiteral *>(C);
    case reflenums::clang__IntegerLiteral::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__IntegerLiteral::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__IntegerLiteral::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__IntegerLiteral::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__IntegerLiteral::getLocation:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__IntegerLiteral::getLocation:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__IntegerLiteral::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__IntegerLiteral::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__IntegerLiteral::children:
      return toClientReflType<class llvm::iterator_range<struct clang::ConstStmtIterator>>(C);
    case reflenums::clang__IntegerLiteral::children:
      return toClientReflType<class llvm::iterator_range<struct clang::ConstStmtIterator>>(C);
    case reflenums::clang__IntegerLiteral::children:
      return toClientReflType<class llvm::iterator_range<struct clang::ConstStmtIterator>>(C);
    case reflenums::clang__IntegerLiteral::children:
      return toClientReflType<class llvm::iterator_range<struct clang::ConstStmtIterator>>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__FixedPointLiteral:
  switch (static_cast<reflenums::clang__FixedPointLiteral::memnames>(MemNum)) {
    case reflenums::clang__FixedPointLiteral:::
      return toClientReflType<>(C);
    case reflenums::clang__FixedPointLiteral:::
      return toClientReflType<>(C);
    case reflenums::clang__FixedPointLiteral:::
      return toClientReflType<>(C);
    case reflenums::clang__FixedPointLiteral:::
      return toClientReflType<>(C);
    case reflenums::clang__FixedPointLiteral:::
      return toClientReflType<>(C);
    case reflenums::clang__FixedPointLiteral:::
      return toClientReflType<>(C);
    case reflenums::clang__FixedPointLiteral::CreateFromRawInt:
      return toClientReflType<class clang::FixedPointLiteral *>(C);
    case reflenums::clang__FixedPointLiteral::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__FixedPointLiteral::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__FixedPointLiteral::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__FixedPointLiteral::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__FixedPointLiteral::getLocation:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__FixedPointLiteral::getLocation:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__FixedPointLiteral::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__FixedPointLiteral::getValueAsString:
      return toClientReflType<const char *>(C);
    case reflenums::clang__FixedPointLiteral::getValueAsString:
      return toClientReflType<const char *>(C);
    case reflenums::clang__FixedPointLiteral::children:
      return toClientReflType<class llvm::iterator_range<struct clang::ConstStmtIterator>>(C);
    case reflenums::clang__FixedPointLiteral::children:
      return toClientReflType<class llvm::iterator_range<struct clang::ConstStmtIterator>>(C);
    case reflenums::clang__FixedPointLiteral::children:
      return toClientReflType<class llvm::iterator_range<struct clang::ConstStmtIterator>>(C);
    case reflenums::clang__FixedPointLiteral::children:
      return toClientReflType<class llvm::iterator_range<struct clang::ConstStmtIterator>>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__CharacterLiteral:
  switch (static_cast<reflenums::clang__CharacterLiteral::memnames>(MemNum)) {
    case reflenums::clang__CharacterLiteral:::
      return toClientReflType<>(C);
    case reflenums::clang__CharacterLiteral:::
      return toClientReflType<>(C);
    case reflenums::clang__CharacterLiteral:::
      return toClientReflType<>(C);
    case reflenums::clang__CharacterLiteral:::
      return toClientReflType<>(C);
    case reflenums::clang__CharacterLiteral:::
      return toClientReflType<>(C);
    case reflenums::clang__CharacterLiteral:::
      return toClientReflType<>(C);
    case reflenums::clang__CharacterLiteral:::
      return toClientReflType<>(C);
    case reflenums::clang__CharacterLiteral:::
      return toClientReflType<>(C);
    case reflenums::clang__CharacterLiteral:::
      return toClientReflType<>(C);
    case reflenums::clang__CharacterLiteral::getLocation:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CharacterLiteral::getKind:
      return toClientReflType<enum clang::CharacterLiteral::CharacterKind>(C);
    case reflenums::clang__CharacterLiteral::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CharacterLiteral::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CharacterLiteral::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CharacterLiteral::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CharacterLiteral::getValue:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__CharacterLiteral::getValue:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__CharacterLiteral::getValue:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__CharacterLiteral::getValue:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__CharacterLiteral::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__CharacterLiteral::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__CharacterLiteral::children:
      return toClientReflType<class llvm::iterator_range<struct clang::ConstStmtIterator>>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__FloatingLiteral:
  switch (static_cast<reflenums::clang__FloatingLiteral::memnames>(MemNum)) {
    case reflenums::clang__FloatingLiteral:::
      return toClientReflType<>(C);
    case reflenums::clang__FloatingLiteral:::
      return toClientReflType<>(C);
    case reflenums::clang__FloatingLiteral:::
      return toClientReflType<>(C);
    case reflenums::clang__FloatingLiteral:::
      return toClientReflType<>(C);
    case reflenums::clang__FloatingLiteral:::
      return toClientReflType<>(C);
    case reflenums::clang__FloatingLiteral::Create:
      return toClientReflType<class clang::FloatingLiteral *>(C);
    case reflenums::clang__FloatingLiteral::Create1:
      return toClientReflType<class clang::FloatingLiteral *>(C);
    case reflenums::clang__FloatingLiteral::Create1:
      return toClientReflType<class clang::FloatingLiteral *>(C);
    case reflenums::clang__FloatingLiteral::Create1:
      return toClientReflType<class clang::FloatingLiteral *>(C);
    case reflenums::clang__FloatingLiteral::Create1:
      return toClientReflType<class clang::FloatingLiteral *>(C);
    case reflenums::clang__FloatingLiteral::Create1:
      return toClientReflType<class clang::FloatingLiteral *>(C);
    case reflenums::clang__FloatingLiteral::Create1:
      return toClientReflType<class clang::FloatingLiteral *>(C);
    case reflenums::clang__FloatingLiteral::Create1:
      return toClientReflType<class clang::FloatingLiteral *>(C);
    case reflenums::clang__FloatingLiteral::isExact:
      return toClientReflType<bool>(C);
    case reflenums::clang__FloatingLiteral::isExact:
      return toClientReflType<bool>(C);
    case reflenums::clang__FloatingLiteral::getValueAsApproximateDouble:
      return toClientReflType<double>(C);
    case reflenums::clang__FloatingLiteral::getLocation:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__FloatingLiteral::getLocation:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__FloatingLiteral::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__FloatingLiteral::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__FloatingLiteral::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__FloatingLiteral::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__FloatingLiteral::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__FloatingLiteral::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__FloatingLiteral::children:
      return toClientReflType<class llvm::iterator_range<struct clang::ConstStmtIterator>>(C);
    case reflenums::clang__FloatingLiteral::children:
      return toClientReflType<class llvm::iterator_range<struct clang::ConstStmtIterator>>(C);
    case reflenums::clang__FloatingLiteral::children:
      return toClientReflType<class llvm::iterator_range<struct clang::ConstStmtIterator>>(C);
    case reflenums::clang__FloatingLiteral::children:
      return toClientReflType<class llvm::iterator_range<struct clang::ConstStmtIterator>>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__ImaginaryLiteral:
  switch (static_cast<reflenums::clang__ImaginaryLiteral::memnames>(MemNum)) {
    case reflenums::clang__ImaginaryLiteral:::
      return toClientReflType<>(C);
    case reflenums::clang__ImaginaryLiteral:::
      return toClientReflType<>(C);
    case reflenums::clang__ImaginaryLiteral:::
      return toClientReflType<>(C);
    case reflenums::clang__ImaginaryLiteral:::
      return toClientReflType<>(C);
    case reflenums::clang__ImaginaryLiteral:::
      return toClientReflType<>(C);
    case reflenums::clang__ImaginaryLiteral::getSubExpr:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__ImaginaryLiteral::getSubExpr:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__ImaginaryLiteral::getSubExpr:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__ImaginaryLiteral::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ImaginaryLiteral::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ImaginaryLiteral::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ImaginaryLiteral::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ImaginaryLiteral::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ImaginaryLiteral::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ImaginaryLiteral::children:
      return toClientReflType<class llvm::iterator_range<struct clang::ConstStmtIterator>>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__StringLiteral:
  switch (static_cast<reflenums::clang__StringLiteral::memnames>(MemNum)) {
    case reflenums::clang__StringLiteral:::
      return toClientReflType<>(C);
    case reflenums::clang__StringLiteral:::
      return toClientReflType<>(C);
    case reflenums::clang__StringLiteral:::
      return toClientReflType<>(C);
    case reflenums::clang__StringLiteral:::
      return toClientReflType<>(C);
    case reflenums::clang__StringLiteral:::
      return toClientReflType<>(C);
    case reflenums::clang__StringLiteral:::
      return toClientReflType<>(C);
    case reflenums::clang__StringLiteral:::
      return toClientReflType<>(C);
    case reflenums::clang__StringLiteral:::
      return toClientReflType<>(C);
    case reflenums::clang__StringLiteral:::
      return toClientReflType<>(C);
    case reflenums::clang__StringLiteral:::
      return toClientReflType<>(C);
    case reflenums::clang__StringLiteral:::
      return toClientReflType<>(C);
    case reflenums::clang__StringLiteral:::
      return toClientReflType<>(C);
    case reflenums::clang__StringLiteral:::
      return toClientReflType<>(C);
    case reflenums::clang__StringLiteral:::
      return toClientReflType<>(C);
    case reflenums::clang__StringLiteral:::
      return toClientReflType<>(C);
    case reflenums::clang__StringLiteral:::
      return toClientReflType<>(C);
    case reflenums::clang__StringLiteral:::
      return toClientReflType<>(C);
    case reflenums::clang__StringLiteral:::
      return toClientReflType<>(C);
    case reflenums::clang__StringLiteral::CreateEmpty:
      return toClientReflType<class clang::StringLiteral *>(C);
    case reflenums::clang__StringLiteral::getString:
      return toClientReflType<const char *>(C);
    case reflenums::clang__StringLiteral::getBytes:
      return toClientReflType<const char *>(C);
    case reflenums::clang__StringLiteral::outputString:
      return toClientReflType<void>(C);
    case reflenums::clang__StringLiteral::getCodeUnit:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__StringLiteral::getByteLength:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__StringLiteral::getLength:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__StringLiteral::getCharByteWidth:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__StringLiteral::getCharByteWidth:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__StringLiteral::getKind:
      return toClientReflType<enum clang::StringLiteral::StringKind>(C);
    case reflenums::clang__StringLiteral::isAscii:
      return toClientReflType<bool>(C);
    case reflenums::clang__StringLiteral::isWide:
      return toClientReflType<bool>(C);
    case reflenums::clang__StringLiteral::isUTF8:
      return toClientReflType<bool>(C);
    case reflenums::clang__StringLiteral::isUTF16:
      return toClientReflType<bool>(C);
    case reflenums::clang__StringLiteral::isUTF32:
      return toClientReflType<bool>(C);
    case reflenums::clang__StringLiteral::isPascal:
      return toClientReflType<bool>(C);
    case reflenums::clang__StringLiteral::containsNonAscii:
      return toClientReflType<bool>(C);
    case reflenums::clang__StringLiteral::containsNonAsciiOrNull:
      return toClientReflType<bool>(C);
    case reflenums::clang__StringLiteral::getNumConcatenated:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__StringLiteral::getStrTokenLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__StringLiteral::getStrTokenLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__StringLiteral::getLocationOfByte:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__StringLiteral::getLocationOfByte:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__StringLiteral::getLocationOfByte:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__StringLiteral::getLocationOfByte:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__StringLiteral::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__StringLiteral::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__StringLiteral::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__StringLiteral::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__StringLiteral::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__StringLiteral::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__StringLiteral::children:
      return toClientReflType<class llvm::iterator_range<struct clang::ConstStmtIterator>>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__ParenExpr:
  switch (static_cast<reflenums::clang__ParenExpr::memnames>(MemNum)) {
    case reflenums::clang__ParenExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ParenExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ParenExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ParenExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ParenExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ParenExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ParenExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ParenExpr::getSubExpr:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__ParenExpr::getSubExpr:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__ParenExpr::getSubExpr:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__ParenExpr::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ParenExpr::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ParenExpr::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ParenExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ParenExpr::getLParen:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ParenExpr::getLParen:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ParenExpr::getRParen:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ParenExpr::getRParen:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ParenExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ParenExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ParenExpr::children:
      return toClientReflType<class llvm::iterator_range<struct clang::ConstStmtIterator>>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__UnaryOperator:
  switch (static_cast<reflenums::clang__UnaryOperator::memnames>(MemNum)) {
    case reflenums::clang__UnaryOperator:::
      return toClientReflType<>(C);
    case reflenums::clang__UnaryOperator:::
      return toClientReflType<>(C);
    case reflenums::clang__UnaryOperator:::
      return toClientReflType<>(C);
    case reflenums::clang__UnaryOperator:::
      return toClientReflType<>(C);
    case reflenums::clang__UnaryOperator:::
      return toClientReflType<>(C);
    case reflenums::clang__UnaryOperator:::
      return toClientReflType<>(C);
    case reflenums::clang__UnaryOperator:::
      return toClientReflType<>(C);
    case reflenums::clang__UnaryOperator:::
      return toClientReflType<>(C);
    case reflenums::clang__UnaryOperator:::
      return toClientReflType<>(C);
    case reflenums::clang__UnaryOperator:::
      return toClientReflType<>(C);
    case reflenums::clang__UnaryOperator:::
      return toClientReflType<>(C);
    case reflenums::clang__UnaryOperator::getOpcode:
      return toClientReflType<enum clang::UnaryOperatorKind>(C);
    case reflenums::clang__UnaryOperator::getOpcode:
      return toClientReflType<enum clang::UnaryOperatorKind>(C);
    case reflenums::clang__UnaryOperator::getSubExpr:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__UnaryOperator::getSubExpr:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__UnaryOperator::getOperatorLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__UnaryOperator::getOperatorLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__UnaryOperator::canOverflow:
      return toClientReflType<bool>(C);
    case reflenums::clang__UnaryOperator::canOverflow:
      return toClientReflType<bool>(C);
    case reflenums::clang__UnaryOperator::isPostfix:
      return toClientReflType<bool>(C);
    case reflenums::clang__UnaryOperator::isPrefix:
      return toClientReflType<bool>(C);
    case reflenums::clang__UnaryOperator::isPrefix1:
      return toClientReflType<bool>(C);
    case reflenums::clang__UnaryOperator::isPostfix1:
      return toClientReflType<bool>(C);
    case reflenums::clang__UnaryOperator::isIncrementOp:
      return toClientReflType<bool>(C);
    case reflenums::clang__UnaryOperator::isIncrementOp1:
      return toClientReflType<bool>(C);
    case reflenums::clang__UnaryOperator::isDecrementOp:
      return toClientReflType<bool>(C);
    case reflenums::clang__UnaryOperator::isDecrementOp1:
      return toClientReflType<bool>(C);
    case reflenums::clang__UnaryOperator::isIncrementDecrementOp:
      return toClientReflType<bool>(C);
    case reflenums::clang__UnaryOperator::isIncrementDecrementOp1:
      return toClientReflType<bool>(C);
    case reflenums::clang__UnaryOperator::isArithmeticOp:
      return toClientReflType<bool>(C);
    case reflenums::clang__UnaryOperator::isArithmeticOp1:
      return toClientReflType<bool>(C);
    case reflenums::clang__UnaryOperator::getOpcodeStr:
      return toClientReflType<const char *>(C);
    case reflenums::clang__UnaryOperator::getOverloadedOpcode:
      return toClientReflType<enum clang::UnaryOperatorKind>(C);
    case reflenums::clang__UnaryOperator::getOverloadedOperator:
      return toClientReflType<enum clang::OverloadedOperatorKind>(C);
    case reflenums::clang__UnaryOperator::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__UnaryOperator::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__UnaryOperator::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__UnaryOperator::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__UnaryOperator::getExprLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__UnaryOperator::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__UnaryOperator::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__UnaryOperator::children:
      return toClientReflType<class llvm::iterator_range<struct clang::ConstStmtIterator>>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__OffsetOfNode:
  switch (static_cast<reflenums::clang__OffsetOfNode::memnames>(MemNum)) {
    case reflenums::clang__OffsetOfNode:::
      return toClientReflType<>(C);
    case reflenums::clang__OffsetOfNode:::
      return toClientReflType<>(C);
    case reflenums::clang__OffsetOfNode:::
      return toClientReflType<>(C);
    case reflenums::clang__OffsetOfNode:::
      return toClientReflType<>(C);
    case reflenums::clang__OffsetOfNode:::
      return toClientReflType<>(C);
    case reflenums::clang__OffsetOfNode:::
      return toClientReflType<>(C);
    case reflenums::clang__OffsetOfNode:::
      return toClientReflType<>(C);
    case reflenums::clang__OffsetOfNode:::
      return toClientReflType<>(C);
    case reflenums::clang__OffsetOfNode:::
      return toClientReflType<>(C);
    case reflenums::clang__OffsetOfNode:::
      return toClientReflType<>(C);
    case reflenums::clang__OffsetOfNode:::
      return toClientReflType<>(C);
    case reflenums::clang__OffsetOfNode:::
      return toClientReflType<>(C);
    case reflenums::clang__OffsetOfNode::getKind:
      return toClientReflType<enum clang::OffsetOfNode::Kind>(C);
    case reflenums::clang__OffsetOfNode::getArrayExprIndex:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__OffsetOfNode::getField:
      return toClientReflType<class clang::FieldDecl *>(C);
    case reflenums::clang__OffsetOfNode::getFieldName:
      return toClientReflType<class clang::IdentifierInfo *>(C);
    case reflenums::clang__OffsetOfNode::getBase:
      return toClientReflType<class clang::CXXBaseSpecifier *>(C);
    case reflenums::clang__OffsetOfNode::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__OffsetOfNode::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__OffsetOfNode::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__OffsetOfNode::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__OffsetOfNode::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__OffsetOfNode::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__OffsetOfNode::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__OffsetOfExpr:
  switch (static_cast<reflenums::clang__OffsetOfExpr::memnames>(MemNum)) {
    case reflenums::clang__OffsetOfExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__OffsetOfExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__OffsetOfExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__OffsetOfExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__OffsetOfExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__OffsetOfExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__OffsetOfExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__OffsetOfExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__OffsetOfExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__OffsetOfExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__OffsetOfExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__OffsetOfExpr::CreateEmpty:
      return toClientReflType<class clang::OffsetOfExpr *>(C);
    case reflenums::clang__OffsetOfExpr::getOperatorLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__OffsetOfExpr::getOperatorLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__OffsetOfExpr::getRParenLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__OffsetOfExpr::getRParenLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__OffsetOfExpr::getTypeSourceInfo:
      return toClientReflType<class clang::TypeSourceInfo *>(C);
    case reflenums::clang__OffsetOfExpr::getTypeSourceInfo:
      return toClientReflType<class clang::TypeSourceInfo *>(C);
    case reflenums::clang__OffsetOfExpr::getComponent:
      return toClientReflType<const class clang::OffsetOfNode &>(C);
    case reflenums::clang__OffsetOfExpr::getComponent:
      return toClientReflType<const class clang::OffsetOfNode &>(C);
    case reflenums::clang__OffsetOfExpr::getNumComponents:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__OffsetOfExpr::getNumComponents:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__OffsetOfExpr::getIndexExpr:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__OffsetOfExpr::getIndexExpr:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__OffsetOfExpr::getNumExpressions:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__OffsetOfExpr::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__OffsetOfExpr::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__OffsetOfExpr::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__OffsetOfExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__OffsetOfExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__OffsetOfExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__OffsetOfExpr::children:
      return toClientReflType<class llvm::iterator_range<struct clang::ConstStmtIterator>>(C);
    case reflenums::clang__OffsetOfExpr::children:
      return toClientReflType<class llvm::iterator_range<struct clang::ConstStmtIterator>>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__UnaryExprOrTypeTraitExpr:
  switch (static_cast<reflenums::clang__UnaryExprOrTypeTraitExpr::memnames>(MemNum)) {
    case reflenums::clang__UnaryExprOrTypeTraitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__UnaryExprOrTypeTraitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__UnaryExprOrTypeTraitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__UnaryExprOrTypeTraitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__UnaryExprOrTypeTraitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__UnaryExprOrTypeTraitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__UnaryExprOrTypeTraitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__UnaryExprOrTypeTraitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__UnaryExprOrTypeTraitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__UnaryExprOrTypeTraitExpr::getKind:
      return toClientReflType<enum clang::UnaryExprOrTypeTrait>(C);
    case reflenums::clang__UnaryExprOrTypeTraitExpr::getKind:
      return toClientReflType<enum clang::UnaryExprOrTypeTrait>(C);
    case reflenums::clang__UnaryExprOrTypeTraitExpr::isArgumentType:
      return toClientReflType<bool>(C);
    case reflenums::clang__UnaryExprOrTypeTraitExpr::getArgumentType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__UnaryExprOrTypeTraitExpr::getArgumentTypeInfo:
      return toClientReflType<class clang::TypeSourceInfo *>(C);
    case reflenums::clang__UnaryExprOrTypeTraitExpr::getArgumentTypeInfo:
      return toClientReflType<class clang::TypeSourceInfo *>(C);
    case reflenums::clang__UnaryExprOrTypeTraitExpr::getArgumentExpr:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__UnaryExprOrTypeTraitExpr::getArgumentExpr:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__UnaryExprOrTypeTraitExpr::getArgumentExpr:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__UnaryExprOrTypeTraitExpr::getTypeOfArgument:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__UnaryExprOrTypeTraitExpr::getOperatorLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__UnaryExprOrTypeTraitExpr::getOperatorLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__UnaryExprOrTypeTraitExpr::getRParenLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__UnaryExprOrTypeTraitExpr::getRParenLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__UnaryExprOrTypeTraitExpr::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__UnaryExprOrTypeTraitExpr::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__UnaryExprOrTypeTraitExpr::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__UnaryExprOrTypeTraitExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__UnaryExprOrTypeTraitExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__UnaryExprOrTypeTraitExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__UnaryExprOrTypeTraitExpr::children:
      return toClientReflType<class llvm::iterator_range<struct clang::ConstStmtIterator>>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__ArraySubscriptExpr:
  switch (static_cast<reflenums::clang__ArraySubscriptExpr::memnames>(MemNum)) {
    case reflenums::clang__ArraySubscriptExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ArraySubscriptExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ArraySubscriptExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ArraySubscriptExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ArraySubscriptExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ArraySubscriptExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ArraySubscriptExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ArraySubscriptExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ArraySubscriptExpr::getLHS:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__ArraySubscriptExpr::getLHS:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__ArraySubscriptExpr::getLHS:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__ArraySubscriptExpr::getRHS:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__ArraySubscriptExpr::getRHS:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__ArraySubscriptExpr::getRHS:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__ArraySubscriptExpr::getBase:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__ArraySubscriptExpr::getBase:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__ArraySubscriptExpr::getIdx:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__ArraySubscriptExpr::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ArraySubscriptExpr::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ArraySubscriptExpr::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ArraySubscriptExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ArraySubscriptExpr::getRBracketLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ArraySubscriptExpr::getRBracketLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ArraySubscriptExpr::getExprLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ArraySubscriptExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ArraySubscriptExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ArraySubscriptExpr::children:
      return toClientReflType<class llvm::iterator_range<struct clang::ConstStmtIterator>>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__CallExpr:
  switch (static_cast<reflenums::clang__CallExpr::memnames>(MemNum)) {
    case reflenums::clang__CallExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CallExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CallExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CallExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CallExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CallExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CallExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CallExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CallExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CallExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CallExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CallExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CallExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CallExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CallExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CallExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CallExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CallExpr::getCallee:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__CallExpr::getCallee:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__CallExpr::getCallee:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__CallExpr::getCallee:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__CallExpr::getCalleeDecl:
      return toClientReflType<const class clang::Decl *>(C);
    case reflenums::clang__CallExpr::getCalleeDecl:
      return toClientReflType<const class clang::Decl *>(C);
    case reflenums::clang__CallExpr::getDirectCallee:
      return toClientReflType<const class clang::FunctionDecl *>(C);
    case reflenums::clang__CallExpr::getNumArgs:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__CallExpr::getNumArgs:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__CallExpr::getArgs:
      return toClientReflType<const class clang::Expr *const *>(C);
    case reflenums::clang__CallExpr::getArgs:
      return toClientReflType<const class clang::Expr *const *>(C);
    case reflenums::clang__CallExpr::getArg:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__CallExpr::getArg:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__CallExpr::getArg:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__CallExpr::getArg:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__CallExpr::getArg:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__CallExpr::getArg:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__CallExpr::getArg:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__CallExpr::getArg:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__CallExpr::arguments:
      return toClientReflType<class llvm::iterator_range<struct clang::Stmt::ConstExprIterator>>(C);
    case reflenums::clang__CallExpr::arguments:
      return toClientReflType<class llvm::iterator_range<struct clang::Stmt::ConstExprIterator>>(C);
    case reflenums::clang__CallExpr::arguments:
      return toClientReflType<class llvm::iterator_range<struct clang::Stmt::ConstExprIterator>>(C);
    case reflenums::clang__CallExpr::arguments:
      return toClientReflType<class llvm::iterator_range<struct clang::Stmt::ConstExprIterator>>(C);
    case reflenums::clang__CallExpr::arguments:
      return toClientReflType<class llvm::iterator_range<struct clang::Stmt::ConstExprIterator>>(C);
    case reflenums::clang__CallExpr::arguments:
      return toClientReflType<class llvm::iterator_range<struct clang::Stmt::ConstExprIterator>>(C);
    case reflenums::clang__CallExpr::getNumCommas:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__CallExpr::getBuiltinCallee:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__CallExpr::isUnevaluatedBuiltinCall:
      return toClientReflType<bool>(C);
    case reflenums::clang__CallExpr::getCallReturnType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__CallExpr::getRParenLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CallExpr::getRParenLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CallExpr::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CallExpr::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CallExpr::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CallExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CallExpr::isBuiltinAssumeFalse:
      return toClientReflType<bool>(C);
    case reflenums::clang__CallExpr::isCallToStdMove:
      return toClientReflType<bool>(C);
    case reflenums::clang__CallExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__CallExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__CallExpr::children:
      return toClientReflType<class llvm::iterator_range<struct clang::ConstStmtIterator>>(C);
    case reflenums::clang__CallExpr::children:
      return toClientReflType<class llvm::iterator_range<struct clang::ConstStmtIterator>>(C);
    case reflenums::clang__CallExpr::children:
      return toClientReflType<class llvm::iterator_range<struct clang::ConstStmtIterator>>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__MemberExpr:
  switch (static_cast<reflenums::clang__MemberExpr::memnames>(MemNum)) {
    case reflenums::clang__MemberExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__MemberExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__MemberExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__MemberExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__MemberExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__MemberExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__MemberExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__MemberExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__MemberExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__MemberExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__MemberExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__MemberExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__MemberExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__MemberExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__MemberExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__MemberExpr::Create:
      return toClientReflType<class clang::MemberExpr *>(C);
    case reflenums::clang__MemberExpr::Create:
      return toClientReflType<class clang::MemberExpr *>(C);
    case reflenums::clang__MemberExpr::getBase:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__MemberExpr::getMemberDecl:
      return toClientReflType<class clang::ValueDecl *>(C);
    case reflenums::clang__MemberExpr::getMemberDecl:
      return toClientReflType<class clang::ValueDecl *>(C);
    case reflenums::clang__MemberExpr::getFoundDecl:
      return toClientReflType<class clang::DeclAccessPair>(C);
    case reflenums::clang__MemberExpr::hasQualifier:
      return toClientReflType<bool>(C);
    case reflenums::clang__MemberExpr::getQualifierLoc:
      return toClientReflType<class clang::NestedNameSpecifierLoc>(C);
    case reflenums::clang__MemberExpr::getQualifier:
      return toClientReflType<class clang::NestedNameSpecifier *>(C);
    case reflenums::clang__MemberExpr::getTemplateKeywordLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__MemberExpr::getLAngleLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__MemberExpr::getRAngleLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__MemberExpr::hasTemplateKeyword:
      return toClientReflType<bool>(C);
    case reflenums::clang__MemberExpr::hasExplicitTemplateArgs:
      return toClientReflType<bool>(C);
    case reflenums::clang__MemberExpr::copyTemplateArgumentsInto:
      return toClientReflType<void>(C);
    case reflenums::clang__MemberExpr::getTemplateArgs:
      return toClientReflType<const class clang::TemplateArgumentLoc *>(C);
    case reflenums::clang__MemberExpr::getNumTemplateArgs:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__MemberExpr::template_arguments:
      return toClientReflType<class llvm::ArrayRef<class clang::TemplateArgumentLoc>>(C);
    case reflenums::clang__MemberExpr::getMemberNameInfo:
      return toClientReflType<struct clang::DeclarationNameInfo>(C);
    case reflenums::clang__MemberExpr::getOperatorLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__MemberExpr::isArrow:
      return toClientReflType<bool>(C);
    case reflenums::clang__MemberExpr::isArrow:
      return toClientReflType<bool>(C);
    case reflenums::clang__MemberExpr::getMemberLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__MemberExpr::getMemberLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__MemberExpr::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__MemberExpr::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__MemberExpr::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__MemberExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__MemberExpr::getExprLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__MemberExpr::isImplicitAccess:
      return toClientReflType<bool>(C);
    case reflenums::clang__MemberExpr::hadMultipleCandidates:
      return toClientReflType<bool>(C);
    case reflenums::clang__MemberExpr::hadMultipleCandidates:
      return toClientReflType<bool>(C);
    case reflenums::clang__MemberExpr::performsVirtualDispatch:
      return toClientReflType<bool>(C);
    case reflenums::clang__MemberExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__MemberExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__MemberExpr::children:
      return toClientReflType<class llvm::iterator_range<struct clang::ConstStmtIterator>>(C);
    case reflenums::clang__MemberExpr::children:
      return toClientReflType<class llvm::iterator_range<struct clang::ConstStmtIterator>>(C);
    case reflenums::clang__MemberExpr::children:
      return toClientReflType<class llvm::iterator_range<struct clang::ConstStmtIterator>>(C);
    case reflenums::clang__MemberExpr::children:
      return toClientReflType<class llvm::iterator_range<struct clang::ConstStmtIterator>>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__CompoundLiteralExpr:
  switch (static_cast<reflenums::clang__CompoundLiteralExpr::memnames>(MemNum)) {
    case reflenums::clang__CompoundLiteralExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CompoundLiteralExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CompoundLiteralExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CompoundLiteralExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CompoundLiteralExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CompoundLiteralExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CompoundLiteralExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CompoundLiteralExpr::getInitializer:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__CompoundLiteralExpr::getInitializer:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__CompoundLiteralExpr::getInitializer:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__CompoundLiteralExpr::isFileScope:
      return toClientReflType<bool>(C);
    case reflenums::clang__CompoundLiteralExpr::isFileScope:
      return toClientReflType<bool>(C);
    case reflenums::clang__CompoundLiteralExpr::getLParenLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CompoundLiteralExpr::getLParenLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CompoundLiteralExpr::getTypeSourceInfo:
      return toClientReflType<class clang::TypeSourceInfo *>(C);
    case reflenums::clang__CompoundLiteralExpr::getTypeSourceInfo:
      return toClientReflType<class clang::TypeSourceInfo *>(C);
    case reflenums::clang__CompoundLiteralExpr::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CompoundLiteralExpr::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CompoundLiteralExpr::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CompoundLiteralExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CompoundLiteralExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__CompoundLiteralExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__CompoundLiteralExpr::children:
      return toClientReflType<class llvm::iterator_range<struct clang::ConstStmtIterator>>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__CastExpr:
  switch (static_cast<reflenums::clang__CastExpr::memnames>(MemNum)) {
    case reflenums::clang__CastExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CastExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CastExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CastExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CastExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CastExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CastExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CastExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CastExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CastExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CastExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CastExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CastExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CastExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CastExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CastExpr::getCastKind:
      return toClientReflType<enum clang::CastKind>(C);
    case reflenums::clang__CastExpr::getCastKind:
      return toClientReflType<enum clang::CastKind>(C);
    case reflenums::clang__CastExpr::getCastKindName:
      return toClientReflType<const char *>(C);
    case reflenums::clang__CastExpr::getCastKindName1:
      return toClientReflType<const char *>(C);
    case reflenums::clang__CastExpr::getCastKindName1:
      return toClientReflType<const char *>(C);
    case reflenums::clang__CastExpr::getSubExpr:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__CastExpr::getSubExpr:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__CastExpr::getSubExpr:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__CastExpr::getSubExprAsWritten:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__CastExpr::getConversionFunction:
      return toClientReflType<class clang::NamedDecl *>(C);
    case reflenums::clang__CastExpr::getConversionFunction:
      return toClientReflType<class clang::NamedDecl *>(C);
    case reflenums::clang__CastExpr::getConversionFunction:
      return toClientReflType<class clang::NamedDecl *>(C);
    case reflenums::clang__CastExpr::path_empty:
      return toClientReflType<bool>(C);
    case reflenums::clang__CastExpr::path_size:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__CastExpr::path_size:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__CastExpr::path_size:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__CastExpr::path_size:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__CastExpr::path_size:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__CastExpr::getTargetUnionField:
      return toClientReflType<const class clang::FieldDecl *>(C);
    case reflenums::clang__CastExpr::getTargetFieldForToUnionCast:
      return toClientReflType<const class clang::FieldDecl *>(C);
    case reflenums::clang__CastExpr::getTargetFieldForToUnionCast1:
      return toClientReflType<const class clang::FieldDecl *>(C);
    case reflenums::clang__CastExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__CastExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__CastExpr::children:
      return toClientReflType<class llvm::iterator_range<struct clang::ConstStmtIterator>>(C);
    case reflenums::clang__CastExpr::children:
      return toClientReflType<class llvm::iterator_range<struct clang::ConstStmtIterator>>(C);
    case reflenums::clang__CastExpr::children:
      return toClientReflType<class llvm::iterator_range<struct clang::ConstStmtIterator>>(C);
    case reflenums::clang__CastExpr::children:
      return toClientReflType<class llvm::iterator_range<struct clang::ConstStmtIterator>>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__ImplicitCastExpr:
  switch (static_cast<reflenums::clang__ImplicitCastExpr::memnames>(MemNum)) {
    case reflenums::clang__ImplicitCastExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ImplicitCastExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ImplicitCastExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ImplicitCastExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ImplicitCastExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ImplicitCastExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ImplicitCastExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ImplicitCastExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ImplicitCastExpr::isPartOfExplicitCast:
      return toClientReflType<bool>(C);
    case reflenums::clang__ImplicitCastExpr::isPartOfExplicitCast:
      return toClientReflType<bool>(C);
    case reflenums::clang__ImplicitCastExpr::isPartOfExplicitCast:
      return toClientReflType<bool>(C);
    case reflenums::clang__ImplicitCastExpr::CreateEmpty:
      return toClientReflType<class clang::ImplicitCastExpr *>(C);
    case reflenums::clang__ImplicitCastExpr::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ImplicitCastExpr::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ImplicitCastExpr::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ImplicitCastExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ImplicitCastExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ImplicitCastExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ImplicitCastExpr::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__ExplicitCastExpr:
  switch (static_cast<reflenums::clang__ExplicitCastExpr::memnames>(MemNum)) {
    case reflenums::clang__ExplicitCastExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ExplicitCastExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ExplicitCastExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ExplicitCastExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ExplicitCastExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ExplicitCastExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ExplicitCastExpr::getTypeInfoAsWritten:
      return toClientReflType<class clang::TypeSourceInfo *>(C);
    case reflenums::clang__ExplicitCastExpr::getTypeInfoAsWritten:
      return toClientReflType<class clang::TypeSourceInfo *>(C);
    case reflenums::clang__ExplicitCastExpr::getTypeAsWritten:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ExplicitCastExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ExplicitCastExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ExplicitCastExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ExplicitCastExpr::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__CStyleCastExpr:
  switch (static_cast<reflenums::clang__CStyleCastExpr::memnames>(MemNum)) {
    case reflenums::clang__CStyleCastExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CStyleCastExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CStyleCastExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CStyleCastExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CStyleCastExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CStyleCastExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CStyleCastExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CStyleCastExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CStyleCastExpr::CreateEmpty:
      return toClientReflType<class clang::CStyleCastExpr *>(C);
    case reflenums::clang__CStyleCastExpr::getLParenLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CStyleCastExpr::getLParenLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CStyleCastExpr::getRParenLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CStyleCastExpr::getRParenLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CStyleCastExpr::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CStyleCastExpr::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CStyleCastExpr::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CStyleCastExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CStyleCastExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__CStyleCastExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__CStyleCastExpr::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__BinaryOperator:
  switch (static_cast<reflenums::clang__BinaryOperator::memnames>(MemNum)) {
    case reflenums::clang__BinaryOperator:::
      return toClientReflType<>(C);
    case reflenums::clang__BinaryOperator:::
      return toClientReflType<>(C);
    case reflenums::clang__BinaryOperator:::
      return toClientReflType<>(C);
    case reflenums::clang__BinaryOperator:::
      return toClientReflType<>(C);
    case reflenums::clang__BinaryOperator:::
      return toClientReflType<>(C);
    case reflenums::clang__BinaryOperator:::
      return toClientReflType<>(C);
    case reflenums::clang__BinaryOperator:::
      return toClientReflType<>(C);
    case reflenums::clang__BinaryOperator:::
      return toClientReflType<>(C);
    case reflenums::clang__BinaryOperator:::
      return toClientReflType<>(C);
    case reflenums::clang__BinaryOperator:::
      return toClientReflType<>(C);
    case reflenums::clang__BinaryOperator:::
      return toClientReflType<>(C);
    case reflenums::clang__BinaryOperator:::
      return toClientReflType<>(C);
    case reflenums::clang__BinaryOperator::getExprLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__BinaryOperator::getOperatorLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__BinaryOperator::getOperatorLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__BinaryOperator::getOpcode:
      return toClientReflType<enum clang::BinaryOperatorKind>(C);
    case reflenums::clang__BinaryOperator::getOpcode:
      return toClientReflType<enum clang::BinaryOperatorKind>(C);
    case reflenums::clang__BinaryOperator::getLHS:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__BinaryOperator::getLHS:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__BinaryOperator::getRHS:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__BinaryOperator::getRHS:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__BinaryOperator::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__BinaryOperator::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__BinaryOperator::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__BinaryOperator::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__BinaryOperator::getOpcodeStr:
      return toClientReflType<const char *>(C);
    case reflenums::clang__BinaryOperator::getOpcodeStr1:
      return toClientReflType<const char *>(C);
    case reflenums::clang__BinaryOperator::getOverloadedOpcode:
      return toClientReflType<enum clang::BinaryOperatorKind>(C);
    case reflenums::clang__BinaryOperator::getOverloadedOperator:
      return toClientReflType<enum clang::OverloadedOperatorKind>(C);
    case reflenums::clang__BinaryOperator::isPtrMemOp:
      return toClientReflType<bool>(C);
    case reflenums::clang__BinaryOperator::isMultiplicativeOp:
      return toClientReflType<bool>(C);
    case reflenums::clang__BinaryOperator::isMultiplicativeOp1:
      return toClientReflType<bool>(C);
    case reflenums::clang__BinaryOperator::isAdditiveOp:
      return toClientReflType<bool>(C);
    case reflenums::clang__BinaryOperator::isAdditiveOp1:
      return toClientReflType<bool>(C);
    case reflenums::clang__BinaryOperator::isShiftOp:
      return toClientReflType<bool>(C);
    case reflenums::clang__BinaryOperator::isShiftOp1:
      return toClientReflType<bool>(C);
    case reflenums::clang__BinaryOperator::isBitwiseOp:
      return toClientReflType<bool>(C);
    case reflenums::clang__BinaryOperator::isBitwiseOp1:
      return toClientReflType<bool>(C);
    case reflenums::clang__BinaryOperator::isRelationalOp:
      return toClientReflType<bool>(C);
    case reflenums::clang__BinaryOperator::isRelationalOp1:
      return toClientReflType<bool>(C);
    case reflenums::clang__BinaryOperator::isEqualityOp:
      return toClientReflType<bool>(C);
    case reflenums::clang__BinaryOperator::isEqualityOp1:
      return toClientReflType<bool>(C);
    case reflenums::clang__BinaryOperator::isComparisonOp:
      return toClientReflType<bool>(C);
    case reflenums::clang__BinaryOperator::isComparisonOp1:
      return toClientReflType<bool>(C);
    case reflenums::clang__BinaryOperator::negateComparisonOp:
      return toClientReflType<enum clang::BinaryOperatorKind>(C);
    case reflenums::clang__BinaryOperator::reverseComparisonOp:
      return toClientReflType<enum clang::BinaryOperatorKind>(C);
    case reflenums::clang__BinaryOperator::isLogicalOp:
      return toClientReflType<bool>(C);
    case reflenums::clang__BinaryOperator::isLogicalOp1:
      return toClientReflType<bool>(C);
    case reflenums::clang__BinaryOperator::isAssignmentOp:
      return toClientReflType<bool>(C);
    case reflenums::clang__BinaryOperator::isAssignmentOp1:
      return toClientReflType<bool>(C);
    case reflenums::clang__BinaryOperator::isCompoundAssignmentOp:
      return toClientReflType<bool>(C);
    case reflenums::clang__BinaryOperator::isCompoundAssignmentOp1:
      return toClientReflType<bool>(C);
    case reflenums::clang__BinaryOperator::getOpForCompoundAssignment:
      return toClientReflType<enum clang::BinaryOperatorKind>(C);
    case reflenums::clang__BinaryOperator::isShiftAssignOp:
      return toClientReflType<bool>(C);
    case reflenums::clang__BinaryOperator::isShiftAssignOp1:
      return toClientReflType<bool>(C);
    case reflenums::clang__BinaryOperator::isNullPointerArithmeticExtension:
      return toClientReflType<bool>(C);
    case reflenums::clang__BinaryOperator::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__BinaryOperator::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__BinaryOperator::children:
      return toClientReflType<class llvm::iterator_range<struct clang::ConstStmtIterator>>(C);
    case reflenums::clang__BinaryOperator::children:
      return toClientReflType<class llvm::iterator_range<struct clang::ConstStmtIterator>>(C);
    case reflenums::clang__BinaryOperator::getFPFeatures:
      return toClientReflType<class clang::FPOptions>(C);
    case reflenums::clang__BinaryOperator::isFPContractableWithinStatement:
      return toClientReflType<bool>(C);
    case reflenums::clang__BinaryOperator::isFPContractableWithinStatement:
      return toClientReflType<bool>(C);
    case reflenums::clang__BinaryOperator::isFPContractableWithinStatement:
      return toClientReflType<bool>(C);
    case reflenums::clang__BinaryOperator::isFPContractableWithinStatement:
      return toClientReflType<bool>(C);
    case reflenums::clang__BinaryOperator::isFPContractableWithinStatement:
      return toClientReflType<bool>(C);
    case reflenums::clang__BinaryOperator::isFPContractableWithinStatement:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__CompoundAssignOperator:
  switch (static_cast<reflenums::clang__CompoundAssignOperator::memnames>(MemNum)) {
    case reflenums::clang__CompoundAssignOperator:::
      return toClientReflType<>(C);
    case reflenums::clang__CompoundAssignOperator:::
      return toClientReflType<>(C);
    case reflenums::clang__CompoundAssignOperator:::
      return toClientReflType<>(C);
    case reflenums::clang__CompoundAssignOperator:::
      return toClientReflType<>(C);
    case reflenums::clang__CompoundAssignOperator:::
      return toClientReflType<>(C);
    case reflenums::clang__CompoundAssignOperator:::
      return toClientReflType<>(C);
    case reflenums::clang__CompoundAssignOperator::getComputationLHSType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__CompoundAssignOperator::getComputationLHSType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__CompoundAssignOperator::getComputationResultType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__CompoundAssignOperator::getComputationResultType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__CompoundAssignOperator::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__AbstractConditionalOperator:
  switch (static_cast<reflenums::clang__AbstractConditionalOperator::memnames>(MemNum)) {
    case reflenums::clang__AbstractConditionalOperator:::
      return toClientReflType<>(C);
    case reflenums::clang__AbstractConditionalOperator:::
      return toClientReflType<>(C);
    case reflenums::clang__AbstractConditionalOperator:::
      return toClientReflType<>(C);
    case reflenums::clang__AbstractConditionalOperator:::
      return toClientReflType<>(C);
    case reflenums::clang__AbstractConditionalOperator:::
      return toClientReflType<>(C);
    case reflenums::clang__AbstractConditionalOperator:::
      return toClientReflType<>(C);
    case reflenums::clang__AbstractConditionalOperator:::
      return toClientReflType<>(C);
    case reflenums::clang__AbstractConditionalOperator:::
      return toClientReflType<>(C);
    case reflenums::clang__AbstractConditionalOperator::getCond:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__AbstractConditionalOperator::getTrueExpr:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__AbstractConditionalOperator::getFalseExpr:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__AbstractConditionalOperator::getQuestionLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__AbstractConditionalOperator::getColonLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__AbstractConditionalOperator::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__AbstractConditionalOperator::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__AbstractConditionalOperator::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__ConditionalOperator:
  switch (static_cast<reflenums::clang__ConditionalOperator::memnames>(MemNum)) {
    case reflenums::clang__ConditionalOperator:::
      return toClientReflType<>(C);
    case reflenums::clang__ConditionalOperator:::
      return toClientReflType<>(C);
    case reflenums::clang__ConditionalOperator:::
      return toClientReflType<>(C);
    case reflenums::clang__ConditionalOperator:::
      return toClientReflType<>(C);
    case reflenums::clang__ConditionalOperator:::
      return toClientReflType<>(C);
    case reflenums::clang__ConditionalOperator:::
      return toClientReflType<>(C);
    case reflenums::clang__ConditionalOperator:::
      return toClientReflType<>(C);
    case reflenums::clang__ConditionalOperator::getCond:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__ConditionalOperator::getTrueExpr:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__ConditionalOperator::getFalseExpr:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__ConditionalOperator::getLHS:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__ConditionalOperator::getRHS:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__ConditionalOperator::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ConditionalOperator::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ConditionalOperator::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ConditionalOperator::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ConditionalOperator::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ConditionalOperator::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ConditionalOperator::children:
      return toClientReflType<class llvm::iterator_range<struct clang::ConstStmtIterator>>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__BinaryConditionalOperator:
  switch (static_cast<reflenums::clang__BinaryConditionalOperator::memnames>(MemNum)) {
    case reflenums::clang__BinaryConditionalOperator:::
      return toClientReflType<>(C);
    case reflenums::clang__BinaryConditionalOperator:::
      return toClientReflType<>(C);
    case reflenums::clang__BinaryConditionalOperator:::
      return toClientReflType<>(C);
    case reflenums::clang__BinaryConditionalOperator:::
      return toClientReflType<>(C);
    case reflenums::clang__BinaryConditionalOperator:::
      return toClientReflType<>(C);
    case reflenums::clang__BinaryConditionalOperator:::
      return toClientReflType<>(C);
    case reflenums::clang__BinaryConditionalOperator:::
      return toClientReflType<>(C);
    case reflenums::clang__BinaryConditionalOperator:::
      return toClientReflType<>(C);
    case reflenums::clang__BinaryConditionalOperator::getCommon:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__BinaryConditionalOperator::getOpaqueValue:
      return toClientReflType<class clang::OpaqueValueExpr *>(C);
    case reflenums::clang__BinaryConditionalOperator::getCond:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__BinaryConditionalOperator::getTrueExpr:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__BinaryConditionalOperator::getFalseExpr:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__BinaryConditionalOperator::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__BinaryConditionalOperator::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__BinaryConditionalOperator::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__BinaryConditionalOperator::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__BinaryConditionalOperator::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__BinaryConditionalOperator::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__BinaryConditionalOperator::children:
      return toClientReflType<class llvm::iterator_range<struct clang::ConstStmtIterator>>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__AddrLabelExpr:
  switch (static_cast<reflenums::clang__AddrLabelExpr::memnames>(MemNum)) {
    case reflenums::clang__AddrLabelExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__AddrLabelExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__AddrLabelExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__AddrLabelExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__AddrLabelExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__AddrLabelExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__AddrLabelExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__AddrLabelExpr::getAmpAmpLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__AddrLabelExpr::getAmpAmpLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__AddrLabelExpr::getLabelLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__AddrLabelExpr::getLabelLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__AddrLabelExpr::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__AddrLabelExpr::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__AddrLabelExpr::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__AddrLabelExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__AddrLabelExpr::getLabel:
      return toClientReflType<class clang::LabelDecl *>(C);
    case reflenums::clang__AddrLabelExpr::getLabel:
      return toClientReflType<class clang::LabelDecl *>(C);
    case reflenums::clang__AddrLabelExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__AddrLabelExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__AddrLabelExpr::children:
      return toClientReflType<class llvm::iterator_range<struct clang::ConstStmtIterator>>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__StmtExpr:
  switch (static_cast<reflenums::clang__StmtExpr::memnames>(MemNum)) {
    case reflenums::clang__StmtExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__StmtExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__StmtExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__StmtExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__StmtExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__StmtExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__StmtExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__StmtExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__StmtExpr::getSubStmt:
      return toClientReflType<const class clang::CompoundStmt *>(C);
    case reflenums::clang__StmtExpr::getSubStmt:
      return toClientReflType<const class clang::CompoundStmt *>(C);
    case reflenums::clang__StmtExpr::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__StmtExpr::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__StmtExpr::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__StmtExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__StmtExpr::getLParenLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__StmtExpr::getLParenLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__StmtExpr::getRParenLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__StmtExpr::getRParenLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__StmtExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__StmtExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__StmtExpr::children:
      return toClientReflType<class llvm::iterator_range<struct clang::ConstStmtIterator>>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__ShuffleVectorExpr:
  switch (static_cast<reflenums::clang__ShuffleVectorExpr::memnames>(MemNum)) {
    case reflenums::clang__ShuffleVectorExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ShuffleVectorExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ShuffleVectorExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ShuffleVectorExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ShuffleVectorExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ShuffleVectorExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ShuffleVectorExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ShuffleVectorExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ShuffleVectorExpr::getBuiltinLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ShuffleVectorExpr::getBuiltinLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ShuffleVectorExpr::getRParenLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ShuffleVectorExpr::getRParenLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ShuffleVectorExpr::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ShuffleVectorExpr::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ShuffleVectorExpr::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ShuffleVectorExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ShuffleVectorExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ShuffleVectorExpr::getNumSubExprs:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ShuffleVectorExpr::getNumSubExprs:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ShuffleVectorExpr::getNumSubExprs:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ShuffleVectorExpr::getExpr:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__ShuffleVectorExpr::getExpr:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__ShuffleVectorExpr::getShuffleMaskIdx:
      return toClientReflType<class llvm::APSInt>(C);
    case reflenums::clang__ShuffleVectorExpr::getShuffleMaskIdx:
      return toClientReflType<class llvm::APSInt>(C);
    case reflenums::clang__ShuffleVectorExpr::children:
      return toClientReflType<class llvm::iterator_range<struct clang::ConstStmtIterator>>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__ConvertVectorExpr:
  switch (static_cast<reflenums::clang__ConvertVectorExpr::memnames>(MemNum)) {
    case reflenums::clang__ConvertVectorExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ConvertVectorExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ConvertVectorExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ConvertVectorExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ConvertVectorExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ConvertVectorExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ConvertVectorExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ConvertVectorExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ConvertVectorExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ConvertVectorExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ConvertVectorExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ConvertVectorExpr::getSrcExpr:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__ConvertVectorExpr::getTypeSourceInfo:
      return toClientReflType<class clang::TypeSourceInfo *>(C);
    case reflenums::clang__ConvertVectorExpr::getTypeSourceInfo:
      return toClientReflType<class clang::TypeSourceInfo *>(C);
    case reflenums::clang__ConvertVectorExpr::getBuiltinLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ConvertVectorExpr::getRParenLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ConvertVectorExpr::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ConvertVectorExpr::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ConvertVectorExpr::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ConvertVectorExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ConvertVectorExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ConvertVectorExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ConvertVectorExpr::children:
      return toClientReflType<class llvm::iterator_range<struct clang::ConstStmtIterator>>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__ChooseExpr:
  switch (static_cast<reflenums::clang__ChooseExpr::memnames>(MemNum)) {
    case reflenums::clang__ChooseExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ChooseExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ChooseExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ChooseExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ChooseExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ChooseExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ChooseExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ChooseExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ChooseExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ChooseExpr::isConditionTrue:
      return toClientReflType<bool>(C);
    case reflenums::clang__ChooseExpr::isConditionTrue:
      return toClientReflType<bool>(C);
    case reflenums::clang__ChooseExpr::isConditionDependent:
      return toClientReflType<bool>(C);
    case reflenums::clang__ChooseExpr::getChosenSubExpr:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__ChooseExpr::getCond:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__ChooseExpr::getCond:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__ChooseExpr::getLHS:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__ChooseExpr::getLHS:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__ChooseExpr::getRHS:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__ChooseExpr::getRHS:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__ChooseExpr::getBuiltinLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ChooseExpr::getBuiltinLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ChooseExpr::getRParenLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ChooseExpr::getRParenLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ChooseExpr::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ChooseExpr::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ChooseExpr::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ChooseExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ChooseExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ChooseExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ChooseExpr::children:
      return toClientReflType<class llvm::iterator_range<struct clang::ConstStmtIterator>>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__GNUNullExpr:
  switch (static_cast<reflenums::clang__GNUNullExpr::memnames>(MemNum)) {
    case reflenums::clang__GNUNullExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__GNUNullExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__GNUNullExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__GNUNullExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__GNUNullExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__GNUNullExpr::getTokenLocation:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__GNUNullExpr::getTokenLocation:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__GNUNullExpr::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__GNUNullExpr::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__GNUNullExpr::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__GNUNullExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__GNUNullExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__GNUNullExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__GNUNullExpr::children:
      return toClientReflType<class llvm::iterator_range<struct clang::ConstStmtIterator>>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__VAArgExpr:
  switch (static_cast<reflenums::clang__VAArgExpr::memnames>(MemNum)) {
    case reflenums::clang__VAArgExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__VAArgExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__VAArgExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__VAArgExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__VAArgExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__VAArgExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__VAArgExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__VAArgExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__VAArgExpr::getSubExpr:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__VAArgExpr::getSubExpr:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__VAArgExpr::getSubExpr:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__VAArgExpr::isMicrosoftABI:
      return toClientReflType<bool>(C);
    case reflenums::clang__VAArgExpr::isMicrosoftABI:
      return toClientReflType<bool>(C);
    case reflenums::clang__VAArgExpr::getWrittenTypeInfo:
      return toClientReflType<class clang::TypeSourceInfo *>(C);
    case reflenums::clang__VAArgExpr::getWrittenTypeInfo:
      return toClientReflType<class clang::TypeSourceInfo *>(C);
    case reflenums::clang__VAArgExpr::getBuiltinLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__VAArgExpr::getBuiltinLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__VAArgExpr::getRParenLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__VAArgExpr::getRParenLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__VAArgExpr::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__VAArgExpr::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__VAArgExpr::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__VAArgExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__VAArgExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__VAArgExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__VAArgExpr::children:
      return toClientReflType<class llvm::iterator_range<struct clang::ConstStmtIterator>>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__InitListExpr:
  switch (static_cast<reflenums::clang__InitListExpr::memnames>(MemNum)) {
    case reflenums::clang__InitListExpr::_this_:
      if (IsPtr)
        return toClientReflType<clang::InitListExpr *>(C);
      return toClientReflType<clang::InitListExpr>(C);
    case reflenums::clang__InitListExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__InitListExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__InitListExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__InitListExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__InitListExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__InitListExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__InitListExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__InitListExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__InitListExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__InitListExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__InitListExpr::getNumInits:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__InitListExpr::getNumInits:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__InitListExpr::getInits:
      return toClientReflType<class clang::Expr *const *>(C);
    case reflenums::clang__InitListExpr::getInits:
      return toClientReflType<class clang::Expr *const *>(C);
    case reflenums::clang__InitListExpr::inits:
      return toClientReflType<class llvm::ArrayRef<class clang::Expr *>>(C);
    case reflenums::clang__InitListExpr::getInit:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__InitListExpr::getInit:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__InitListExpr::getInit:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__InitListExpr::getInit:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__InitListExpr::getInit:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__InitListExpr::getInit:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__InitListExpr::getInit:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__InitListExpr::getArrayFiller:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__InitListExpr::getArrayFiller:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__InitListExpr::hasArrayFiller:
      return toClientReflType<bool>(C);
    case reflenums::clang__InitListExpr::hasArrayFiller:
      return toClientReflType<bool>(C);
    case reflenums::clang__InitListExpr::getInitializedFieldInUnion:
      return toClientReflType<const class clang::FieldDecl *>(C);
    case reflenums::clang__InitListExpr::getInitializedFieldInUnion:
      return toClientReflType<const class clang::FieldDecl *>(C);
    case reflenums::clang__InitListExpr::isExplicit:
      return toClientReflType<bool>(C);
    case reflenums::clang__InitListExpr::isStringLiteralInit:
      return toClientReflType<bool>(C);
    case reflenums::clang__InitListExpr::isTransparent:
      return toClientReflType<bool>(C);
    case reflenums::clang__InitListExpr::isIdiomaticZeroInitializer:
      return toClientReflType<bool>(C);
    case reflenums::clang__InitListExpr::getLBraceLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__InitListExpr::getLBraceLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__InitListExpr::getRBraceLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__InitListExpr::getRBraceLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__InitListExpr::isSemanticForm:
      return toClientReflType<bool>(C);
    case reflenums::clang__InitListExpr::getSemanticForm:
      return toClientReflType<class clang::InitListExpr *>(C);
    case reflenums::clang__InitListExpr::isSyntacticForm:
      return toClientReflType<bool>(C);
    case reflenums::clang__InitListExpr::getSyntacticForm:
      return toClientReflType<class clang::InitListExpr *>(C);
    case reflenums::clang__InitListExpr::getSyntacticForm:
      return toClientReflType<class clang::InitListExpr *>(C);
    case reflenums::clang__InitListExpr::hadArrayRangeDesignator:
      return toClientReflType<bool>(C);
    case reflenums::clang__InitListExpr::hadArrayRangeDesignator:
      return toClientReflType<bool>(C);
    case reflenums::clang__InitListExpr::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__InitListExpr::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__InitListExpr::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__InitListExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__InitListExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__InitListExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__InitListExpr::children:
      return toClientReflType<class llvm::iterator_range<struct clang::ConstStmtIterator>>(C);
    case reflenums::clang__InitListExpr::children:
      return toClientReflType<class llvm::iterator_range<struct clang::ConstStmtIterator>>(C);
    case reflenums::clang__InitListExpr::children:
      return toClientReflType<class llvm::iterator_range<struct clang::ConstStmtIterator>>(C);
    case reflenums::clang__InitListExpr::children:
      return toClientReflType<class llvm::iterator_range<struct clang::ConstStmtIterator>>(C);
    case reflenums::clang__InitListExpr::children:
      return toClientReflType<class llvm::iterator_range<struct clang::ConstStmtIterator>>(C);
    case reflenums::clang__InitListExpr::children:
      return toClientReflType<class llvm::iterator_range<struct clang::ConstStmtIterator>>(C);
    case reflenums::clang__InitListExpr::children:
      return toClientReflType<class llvm::iterator_range<struct clang::ConstStmtIterator>>(C);
    case reflenums::clang__InitListExpr::children:
      return toClientReflType<class llvm::iterator_range<struct clang::ConstStmtIterator>>(C);
    case reflenums::clang__InitListExpr::children:
      return toClientReflType<class llvm::iterator_range<struct clang::ConstStmtIterator>>(C);
    case reflenums::clang__InitListExpr::children:
      return toClientReflType<class llvm::iterator_range<struct clang::ConstStmtIterator>>(C);
    case reflenums::clang__InitListExpr::children:
      return toClientReflType<class llvm::iterator_range<struct clang::ConstStmtIterator>>(C);
    case reflenums::clang__InitListExpr::children:
      return toClientReflType<class llvm::iterator_range<struct clang::ConstStmtIterator>>(C);
    case reflenums::clang__InitListExpr::children:
      return toClientReflType<class llvm::iterator_range<struct clang::ConstStmtIterator>>(C);
    case reflenums::clang__InitListExpr::children:
      return toClientReflType<class llvm::iterator_range<struct clang::ConstStmtIterator>>(C);
    case reflenums::clang__InitListExpr::children:
      return toClientReflType<class llvm::iterator_range<struct clang::ConstStmtIterator>>(C);
    case reflenums::clang__InitListExpr::children:
      return toClientReflType<class llvm::iterator_range<struct clang::ConstStmtIterator>>(C);
    case reflenums::clang__InitListExpr::children:
      return toClientReflType<class llvm::iterator_range<struct clang::ConstStmtIterator>>(C);
    case reflenums::clang__InitListExpr::children:
      return toClientReflType<class llvm::iterator_range<struct clang::ConstStmtIterator>>(C);
    case reflenums::clang__InitListExpr::children:
      return toClientReflType<class llvm::iterator_range<struct clang::ConstStmtIterator>>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__DesignatedInitExpr:
  switch (static_cast<reflenums::clang__DesignatedInitExpr::memnames>(MemNum)) {
    case reflenums::clang__DesignatedInitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__DesignatedInitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__DesignatedInitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__DesignatedInitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__DesignatedInitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__DesignatedInitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__DesignatedInitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__DesignatedInitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__DesignatedInitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__DesignatedInitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__DesignatedInitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__DesignatedInitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__DesignatedInitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__DesignatedInitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__DesignatedInitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__DesignatedInitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__DesignatedInitExpr::CreateEmpty:
      return toClientReflType<class clang::DesignatedInitExpr *>(C);
    case reflenums::clang__DesignatedInitExpr::size:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__DesignatedInitExpr::size:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__DesignatedInitExpr::designators:
      return toClientReflType<class llvm::ArrayRef<class clang::DesignatedInitExpr::Designator>>(C);
    case reflenums::clang__DesignatedInitExpr::designators:
      return toClientReflType<class llvm::ArrayRef<class clang::DesignatedInitExpr::Designator>>(C);
    case reflenums::clang__DesignatedInitExpr::getDesignator:
      return toClientReflType<const class clang::DesignatedInitExpr::Designator *>(C);
    case reflenums::clang__DesignatedInitExpr::getDesignator:
      return toClientReflType<const class clang::DesignatedInitExpr::Designator *>(C);
    case reflenums::clang__DesignatedInitExpr::getArrayIndex:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__DesignatedInitExpr::getArrayRangeStart:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__DesignatedInitExpr::getArrayRangeEnd:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__DesignatedInitExpr::getEqualOrColonLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__DesignatedInitExpr::getEqualOrColonLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__DesignatedInitExpr::usesGNUSyntax:
      return toClientReflType<bool>(C);
    case reflenums::clang__DesignatedInitExpr::usesGNUSyntax:
      return toClientReflType<bool>(C);
    case reflenums::clang__DesignatedInitExpr::getInit:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__DesignatedInitExpr::getInit:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__DesignatedInitExpr::getNumSubExprs:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__DesignatedInitExpr::getSubExpr:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__DesignatedInitExpr::getSubExpr:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__DesignatedInitExpr::getSubExpr:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__DesignatedInitExpr::getDesignatorsSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__DesignatedInitExpr::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__DesignatedInitExpr::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__DesignatedInitExpr::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__DesignatedInitExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__DesignatedInitExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__DesignatedInitExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__DesignatedInitExpr::children:
      return toClientReflType<class llvm::iterator_range<struct clang::ConstStmtIterator>>(C);
    case reflenums::clang__DesignatedInitExpr::children:
      return toClientReflType<class llvm::iterator_range<struct clang::ConstStmtIterator>>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__DesignatedInitExpr__Designator:
  switch (static_cast<reflenums::clang__DesignatedInitExpr__Designator::memnames>(MemNum)) {
    case reflenums::clang__DesignatedInitExpr__Designator:::
      return toClientReflType<>(C);
    case reflenums::clang__DesignatedInitExpr__Designator:::
      return toClientReflType<>(C);
    case reflenums::clang__DesignatedInitExpr__Designator:::
      return toClientReflType<>(C);
    case reflenums::clang__DesignatedInitExpr__Designator:::
      return toClientReflType<>(C);
    case reflenums::clang__DesignatedInitExpr__Designator:::
      return toClientReflType<>(C);
    case reflenums::clang__DesignatedInitExpr__Designator:::
      return toClientReflType<>(C);
    case reflenums::clang__DesignatedInitExpr__Designator:::
      return toClientReflType<>(C);
    case reflenums::clang__DesignatedInitExpr__Designator:::
      return toClientReflType<>(C);
    case reflenums::clang__DesignatedInitExpr__Designator:::
      return toClientReflType<>(C);
    case reflenums::clang__DesignatedInitExpr__Designator:::
      return toClientReflType<>(C);
    case reflenums::clang__DesignatedInitExpr__Designator:::
      return toClientReflType<>(C);
    case reflenums::clang__DesignatedInitExpr__Designator:::
      return toClientReflType<>(C);
    case reflenums::clang__DesignatedInitExpr__Designator:::
      return toClientReflType<>(C);
    case reflenums::clang__DesignatedInitExpr__Designator::isFieldDesignator:
      return toClientReflType<bool>(C);
    case reflenums::clang__DesignatedInitExpr__Designator::isArrayDesignator:
      return toClientReflType<bool>(C);
    case reflenums::clang__DesignatedInitExpr__Designator::isArrayRangeDesignator:
      return toClientReflType<bool>(C);
    case reflenums::clang__DesignatedInitExpr__Designator::getFieldName:
      return toClientReflType<class clang::IdentifierInfo *>(C);
    case reflenums::clang__DesignatedInitExpr__Designator::getField:
      return toClientReflType<class clang::FieldDecl *>(C);
    case reflenums::clang__DesignatedInitExpr__Designator::getField:
      return toClientReflType<class clang::FieldDecl *>(C);
    case reflenums::clang__DesignatedInitExpr__Designator::getDotLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__DesignatedInitExpr__Designator::getFieldLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__DesignatedInitExpr__Designator::getLBracketLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__DesignatedInitExpr__Designator::getRBracketLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__DesignatedInitExpr__Designator::getEllipsisLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__DesignatedInitExpr__Designator::getFirstExprIndex:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__DesignatedInitExpr__Designator::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__DesignatedInitExpr__Designator::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__DesignatedInitExpr__Designator::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__DesignatedInitExpr__Designator::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__DesignatedInitExpr__Designator::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__DesignatedInitExpr__Designator::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__DesignatedInitExpr__Designator::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__NoInitExpr:
  switch (static_cast<reflenums::clang__NoInitExpr::memnames>(MemNum)) {
    case reflenums::clang__NoInitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__NoInitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__NoInitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__NoInitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__NoInitExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__NoInitExpr::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__NoInitExpr::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__NoInitExpr::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__NoInitExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__NoInitExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__NoInitExpr::children:
      return toClientReflType<class llvm::iterator_range<struct clang::ConstStmtIterator>>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__DesignatedInitUpdateExpr:
  switch (static_cast<reflenums::clang__DesignatedInitUpdateExpr::memnames>(MemNum)) {
    case reflenums::clang__DesignatedInitUpdateExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__DesignatedInitUpdateExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__DesignatedInitUpdateExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__DesignatedInitUpdateExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__DesignatedInitUpdateExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__DesignatedInitUpdateExpr::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__DesignatedInitUpdateExpr::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__DesignatedInitUpdateExpr::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__DesignatedInitUpdateExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__DesignatedInitUpdateExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__DesignatedInitUpdateExpr::getBase:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__DesignatedInitUpdateExpr::getBase:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__DesignatedInitUpdateExpr::getUpdater:
      return toClientReflType<class clang::InitListExpr *>(C);
    case reflenums::clang__DesignatedInitUpdateExpr::getUpdater:
      return toClientReflType<class clang::InitListExpr *>(C);
    case reflenums::clang__DesignatedInitUpdateExpr::getUpdater:
      return toClientReflType<class clang::InitListExpr *>(C);
    case reflenums::clang__DesignatedInitUpdateExpr::children:
      return toClientReflType<class llvm::iterator_range<struct clang::ConstStmtIterator>>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__ArrayInitLoopExpr:
  switch (static_cast<reflenums::clang__ArrayInitLoopExpr::memnames>(MemNum)) {
    case reflenums::clang__ArrayInitLoopExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ArrayInitLoopExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ArrayInitLoopExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ArrayInitLoopExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ArrayInitLoopExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ArrayInitLoopExpr::getCommonExpr:
      return toClientReflType<class clang::OpaqueValueExpr *>(C);
    case reflenums::clang__ArrayInitLoopExpr::getSubExpr:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__ArrayInitLoopExpr::getSubExpr:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__ArrayInitLoopExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ArrayInitLoopExpr::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ArrayInitLoopExpr::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ArrayInitLoopExpr::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ArrayInitLoopExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ArrayInitLoopExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ArrayInitLoopExpr::children:
      return toClientReflType<class llvm::iterator_range<struct clang::ConstStmtIterator>>(C);
    case reflenums::clang__ArrayInitLoopExpr::children:
      return toClientReflType<class llvm::iterator_range<struct clang::ConstStmtIterator>>(C);
    case reflenums::clang__ArrayInitLoopExpr::children:
      return toClientReflType<class llvm::iterator_range<struct clang::ConstStmtIterator>>(C);
    case reflenums::clang__ArrayInitLoopExpr::children:
      return toClientReflType<class llvm::iterator_range<struct clang::ConstStmtIterator>>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__ArrayInitIndexExpr:
  switch (static_cast<reflenums::clang__ArrayInitIndexExpr::memnames>(MemNum)) {
    case reflenums::clang__ArrayInitIndexExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ArrayInitIndexExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ArrayInitIndexExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ArrayInitIndexExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ArrayInitIndexExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ArrayInitIndexExpr::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ArrayInitIndexExpr::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ArrayInitIndexExpr::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ArrayInitIndexExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ArrayInitIndexExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ArrayInitIndexExpr::children:
      return toClientReflType<class llvm::iterator_range<struct clang::ConstStmtIterator>>(C);
    case reflenums::clang__ArrayInitIndexExpr::children:
      return toClientReflType<class llvm::iterator_range<struct clang::ConstStmtIterator>>(C);
    case reflenums::clang__ArrayInitIndexExpr::children:
      return toClientReflType<class llvm::iterator_range<struct clang::ConstStmtIterator>>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__ImplicitValueInitExpr:
  switch (static_cast<reflenums::clang__ImplicitValueInitExpr::memnames>(MemNum)) {
    case reflenums::clang__ImplicitValueInitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ImplicitValueInitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ImplicitValueInitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ImplicitValueInitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ImplicitValueInitExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ImplicitValueInitExpr::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ImplicitValueInitExpr::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ImplicitValueInitExpr::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ImplicitValueInitExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ImplicitValueInitExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ImplicitValueInitExpr::children:
      return toClientReflType<class llvm::iterator_range<struct clang::ConstStmtIterator>>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__ParenListExpr:
  switch (static_cast<reflenums::clang__ParenListExpr::memnames>(MemNum)) {
    case reflenums::clang__ParenListExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ParenListExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ParenListExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ParenListExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ParenListExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ParenListExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ParenListExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ParenListExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ParenListExpr::getNumExprs:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ParenListExpr::getExpr:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__ParenListExpr::getExpr:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__ParenListExpr::getExpr:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__ParenListExpr::getExpr:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__ParenListExpr::getLParenLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ParenListExpr::getRParenLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ParenListExpr::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ParenListExpr::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ParenListExpr::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ParenListExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ParenListExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ParenListExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ParenListExpr::children:
      return toClientReflType<class llvm::iterator_range<struct clang::ConstStmtIterator>>(C);
    case reflenums::clang__ParenListExpr::children:
      return toClientReflType<class llvm::iterator_range<struct clang::ConstStmtIterator>>(C);
    case reflenums::clang__ParenListExpr::children:
      return toClientReflType<class llvm::iterator_range<struct clang::ConstStmtIterator>>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__GenericSelectionExpr:
  switch (static_cast<reflenums::clang__GenericSelectionExpr::memnames>(MemNum)) {
    case reflenums::clang__GenericSelectionExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__GenericSelectionExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__GenericSelectionExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__GenericSelectionExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__GenericSelectionExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__GenericSelectionExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__GenericSelectionExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__GenericSelectionExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__GenericSelectionExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__GenericSelectionExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__GenericSelectionExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__GenericSelectionExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__GenericSelectionExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__GenericSelectionExpr::getNumAssocs:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__GenericSelectionExpr::getGenericLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__GenericSelectionExpr::getDefaultLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__GenericSelectionExpr::getRParenLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__GenericSelectionExpr::getAssocExpr:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__GenericSelectionExpr::getAssocExpr:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__GenericSelectionExpr::getAssocExprs:
      return toClientReflType<class llvm::ArrayRef<class clang::Expr *>>(C);
    case reflenums::clang__GenericSelectionExpr::getAssocTypeSourceInfo:
      return toClientReflType<const class clang::TypeSourceInfo *>(C);
    case reflenums::clang__GenericSelectionExpr::getAssocTypeSourceInfo:
      return toClientReflType<const class clang::TypeSourceInfo *>(C);
    case reflenums::clang__GenericSelectionExpr::getAssocTypeSourceInfos:
      return toClientReflType<class llvm::ArrayRef<class clang::TypeSourceInfo *>>(C);
    case reflenums::clang__GenericSelectionExpr::getAssocType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__GenericSelectionExpr::getControllingExpr:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__GenericSelectionExpr::getControllingExpr:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__GenericSelectionExpr::isResultDependent:
      return toClientReflType<bool>(C);
    case reflenums::clang__GenericSelectionExpr::getResultIndex:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__GenericSelectionExpr::getResultExpr:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__GenericSelectionExpr::getResultExpr:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__GenericSelectionExpr::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__GenericSelectionExpr::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__GenericSelectionExpr::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__GenericSelectionExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__GenericSelectionExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__GenericSelectionExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__GenericSelectionExpr::children:
      return toClientReflType<class llvm::iterator_range<struct clang::ConstStmtIterator>>(C);
    case reflenums::clang__GenericSelectionExpr::children:
      return toClientReflType<class llvm::iterator_range<struct clang::ConstStmtIterator>>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__ExtVectorElementExpr:
  switch (static_cast<reflenums::clang__ExtVectorElementExpr::memnames>(MemNum)) {
    case reflenums::clang__ExtVectorElementExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ExtVectorElementExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ExtVectorElementExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ExtVectorElementExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ExtVectorElementExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ExtVectorElementExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ExtVectorElementExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ExtVectorElementExpr::getBase:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__ExtVectorElementExpr::getBase:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__ExtVectorElementExpr::getBase:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__ExtVectorElementExpr::getAccessor:
      return toClientReflType<class clang::IdentifierInfo &>(C);
    case reflenums::clang__ExtVectorElementExpr::getAccessor:
      return toClientReflType<class clang::IdentifierInfo &>(C);
    case reflenums::clang__ExtVectorElementExpr::getAccessorLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ExtVectorElementExpr::getAccessorLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ExtVectorElementExpr::getNumElements:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ExtVectorElementExpr::containsDuplicateElements:
      return toClientReflType<bool>(C);
    case reflenums::clang__ExtVectorElementExpr::containsDuplicateElements:
      return toClientReflType<bool>(C);
    case reflenums::clang__ExtVectorElementExpr::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ExtVectorElementExpr::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ExtVectorElementExpr::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ExtVectorElementExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ExtVectorElementExpr::isArrow:
      return toClientReflType<bool>(C);
    case reflenums::clang__ExtVectorElementExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ExtVectorElementExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ExtVectorElementExpr::children:
      return toClientReflType<class llvm::iterator_range<struct clang::ConstStmtIterator>>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__BlockExpr:
  switch (static_cast<reflenums::clang__BlockExpr::memnames>(MemNum)) {
    case reflenums::clang__BlockExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__BlockExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__BlockExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__BlockExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__BlockExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__BlockExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__BlockExpr::getBlockDecl:
      return toClientReflType<const class clang::BlockDecl *>(C);
    case reflenums::clang__BlockExpr::getBlockDecl:
      return toClientReflType<const class clang::BlockDecl *>(C);
    case reflenums::clang__BlockExpr::getBlockDecl:
      return toClientReflType<const class clang::BlockDecl *>(C);
    case reflenums::clang__BlockExpr::getCaretLocation:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__BlockExpr::getBody:
      return toClientReflType<const class clang::Stmt *>(C);
    case reflenums::clang__BlockExpr::getBody:
      return toClientReflType<const class clang::Stmt *>(C);
    case reflenums::clang__BlockExpr::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__BlockExpr::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__BlockExpr::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__BlockExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__BlockExpr::getFunctionType:
      return toClientReflType<const class clang::FunctionProtoType *>(C);
    case reflenums::clang__BlockExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__BlockExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__BlockExpr::children:
      return toClientReflType<class llvm::iterator_range<struct clang::ConstStmtIterator>>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__AsTypeExpr:
  switch (static_cast<reflenums::clang__AsTypeExpr::memnames>(MemNum)) {
    case reflenums::clang__AsTypeExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__AsTypeExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__AsTypeExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__AsTypeExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__AsTypeExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__AsTypeExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__AsTypeExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__AsTypeExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__AsTypeExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__AsTypeExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__AsTypeExpr::getSrcExpr:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__AsTypeExpr::getBuiltinLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__AsTypeExpr::getRParenLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__AsTypeExpr::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__AsTypeExpr::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__AsTypeExpr::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__AsTypeExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__AsTypeExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__AsTypeExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__AsTypeExpr::children:
      return toClientReflType<class llvm::iterator_range<struct clang::ConstStmtIterator>>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__PseudoObjectExpr:
  switch (static_cast<reflenums::clang__PseudoObjectExpr::memnames>(MemNum)) {
    case reflenums::clang__PseudoObjectExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__PseudoObjectExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__PseudoObjectExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__PseudoObjectExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__PseudoObjectExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__PseudoObjectExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__PseudoObjectExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__PseudoObjectExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__PseudoObjectExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__PseudoObjectExpr::Create:
      return toClientReflType<class clang::PseudoObjectExpr *>(C);
    case reflenums::clang__PseudoObjectExpr::Create:
      return toClientReflType<class clang::PseudoObjectExpr *>(C);
    case reflenums::clang__PseudoObjectExpr::getSyntacticForm:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__PseudoObjectExpr::getResultExprIndex:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__PseudoObjectExpr::getResultExprIndex:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__PseudoObjectExpr::getResultExpr:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__PseudoObjectExpr::getNumSemanticExprs:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__PseudoObjectExpr::getNumSemanticExprs:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__PseudoObjectExpr::getNumSemanticExprs:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__PseudoObjectExpr::getNumSemanticExprs:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__PseudoObjectExpr::getNumSemanticExprs:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__PseudoObjectExpr::getNumSemanticExprs:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__PseudoObjectExpr::getNumSemanticExprs:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__PseudoObjectExpr::getNumSemanticExprs:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__PseudoObjectExpr::semantics:
      return toClientReflType<class llvm::iterator_range<const class clang::Expr *const *>>(C);
    case reflenums::clang__PseudoObjectExpr::semantics:
      return toClientReflType<class llvm::iterator_range<const class clang::Expr *const *>>(C);
    case reflenums::clang__PseudoObjectExpr::getSemanticExpr:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__PseudoObjectExpr::getExprLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__PseudoObjectExpr::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__PseudoObjectExpr::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__PseudoObjectExpr::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__PseudoObjectExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__PseudoObjectExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__PseudoObjectExpr::children:
      return toClientReflType<class llvm::iterator_range<struct clang::ConstStmtIterator>>(C);
    case reflenums::clang__PseudoObjectExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__PseudoObjectExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__PseudoObjectExpr::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__AtomicExpr:
  switch (static_cast<reflenums::clang__AtomicExpr::memnames>(MemNum)) {
    case reflenums::clang__AtomicExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__AtomicExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__AtomicExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__AtomicExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__AtomicExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__AtomicExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__AtomicExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__AtomicExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__AtomicExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__AtomicExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__AtomicExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__AtomicExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__AtomicExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__AtomicExpr::getNumSubExprs:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__AtomicExpr::getNumSubExprs:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__AtomicExpr::getPtr:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__AtomicExpr::getOrder:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__AtomicExpr::getScope:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__AtomicExpr::getVal1:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__AtomicExpr::getOrderFail:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__AtomicExpr::getVal2:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__AtomicExpr::getWeak:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__AtomicExpr::getValueType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__AtomicExpr::getOp:
      return toClientReflType<enum clang::AtomicExpr::AtomicOp>(C);
    case reflenums::clang__AtomicExpr::getNumSubExprs1:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__AtomicExpr::getNumSubExprs1:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__AtomicExpr::getSubExprs:
      return toClientReflType<const class clang::Expr *const *>(C);
    case reflenums::clang__AtomicExpr::isVolatile:
      return toClientReflType<bool>(C);
    case reflenums::clang__AtomicExpr::isCmpXChg:
      return toClientReflType<bool>(C);
    case reflenums::clang__AtomicExpr::isOpenCL:
      return toClientReflType<bool>(C);
    case reflenums::clang__AtomicExpr::getBuiltinLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__AtomicExpr::getRParenLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__AtomicExpr::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__AtomicExpr::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__AtomicExpr::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__AtomicExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__AtomicExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__AtomicExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__AtomicExpr::children:
      return toClientReflType<class llvm::iterator_range<struct clang::ConstStmtIterator>>(C);
    case reflenums::clang__AtomicExpr::children:
      return toClientReflType<class llvm::iterator_range<struct clang::ConstStmtIterator>>(C);
    case reflenums::clang__AtomicExpr::children:
      return toClientReflType<class llvm::iterator_range<struct clang::ConstStmtIterator>>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__TypoExpr:
  switch (static_cast<reflenums::clang__TypoExpr::memnames>(MemNum)) {
    case reflenums::clang__TypoExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__TypoExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__TypoExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__TypoExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__TypoExpr::children:
      return toClientReflType<class llvm::iterator_range<struct clang::ConstStmtIterator>>(C);
    case reflenums::clang__TypoExpr::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__TypoExpr::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__TypoExpr::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__TypoExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__TypoExpr::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__Attr:
  switch (static_cast<reflenums::clang__Attr::memnames>(MemNum)) {
    case reflenums::clang__Attr:::
      return toClientReflType<>(C);
    case reflenums::clang__Attr:::
      return toClientReflType<>(C);
    case reflenums::clang__Attr:::
      return toClientReflType<>(C);
    case reflenums::clang__Attr:::
      return toClientReflType<>(C);
    case reflenums::clang__Attr:::
      return toClientReflType<>(C);
    case reflenums::clang__Attr:::
      return toClientReflType<>(C);
    case reflenums::clang__Attr:::
      return toClientReflType<>(C);
    case reflenums::clang__Attr:::
      return toClientReflType<>(C);
    case reflenums::clang__Attr:::
      return toClientReflType<>(C);
    case reflenums::clang__Attr:::
      return toClientReflType<>(C);
    case reflenums::clang__Attr:::
      return toClientReflType<>(C);
    case reflenums::clang__Attr:::
      return toClientReflType<>(C);
    case reflenums::clang__Attr:::
      return toClientReflType<>(C);
    case reflenums::clang__Attr:::
      return toClientReflType<>(C);
    case reflenums::clang__Attr::operator_new:
      return toClientReflType<void *>(C);
    case reflenums::clang__Attr::operator_delete:
      return toClientReflType<void>(C);
    case reflenums::clang__Attr::operator_delete:
      return toClientReflType<void>(C);
    case reflenums::clang__Attr::operator_delete:
      return toClientReflType<void>(C);
    case reflenums::clang__Attr::operator_delete:
      return toClientReflType<void>(C);
    case reflenums::clang__Attr::getKind:
      return toClientReflType<enum clang::attr::Kind>(C);
    case reflenums::clang__Attr::getSpellingListIndex:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__Attr::getSpelling:
      return toClientReflType<const char *>(C);
    case reflenums::clang__Attr::getLocation:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__Attr::getRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__Attr::getRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__Attr::isInherited:
      return toClientReflType<bool>(C);
    case reflenums::clang__Attr::isImplicit:
      return toClientReflType<bool>(C);
    case reflenums::clang__Attr::isImplicit:
      return toClientReflType<bool>(C);
    case reflenums::clang__Attr::isImplicit:
      return toClientReflType<bool>(C);
    case reflenums::clang__Attr::isPackExpansion:
      return toClientReflType<bool>(C);
    case reflenums::clang__Attr::clone:
      return toClientReflType<class clang::Attr *>(C);
    case reflenums::clang__Attr::isLateParsed:
      return toClientReflType<bool>(C);
    case reflenums::clang__Attr::printPretty:
      return toClientReflType<void>(C);
    case reflenums::clang__Attr::printPretty:
      return toClientReflType<void>(C);
    case reflenums::clang__Attr::printPretty:
      return toClientReflType<void>(C);
    case reflenums::clang__Attr::printPretty:
      return toClientReflType<void>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__InheritableAttr:
  switch (static_cast<reflenums::clang__InheritableAttr::memnames>(MemNum)) {
    case reflenums::clang__InheritableAttr:::
      return toClientReflType<>(C);
    case reflenums::clang__InheritableAttr:::
      return toClientReflType<>(C);
    case reflenums::clang__InheritableAttr:::
      return toClientReflType<>(C);
    case reflenums::clang__InheritableAttr:::
      return toClientReflType<>(C);
    case reflenums::clang__InheritableAttr:::
      return toClientReflType<>(C);
    case reflenums::clang__InheritableAttr::shouldInheritEvenIfAlreadyPresent:
      return toClientReflType<bool>(C);
    case reflenums::clang__InheritableAttr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__InheritableAttr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__InheritableAttr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__InheritableAttr::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__ExternalSourceSymbolAttr:
  switch (static_cast<reflenums::clang__ExternalSourceSymbolAttr::memnames>(MemNum)) {
    case reflenums::clang__ExternalSourceSymbolAttr:::
      return toClientReflType<>(C);
    case reflenums::clang__ExternalSourceSymbolAttr:::
      return toClientReflType<>(C);
    case reflenums::clang__ExternalSourceSymbolAttr:::
      return toClientReflType<>(C);
    case reflenums::clang__ExternalSourceSymbolAttr:::
      return toClientReflType<>(C);
    case reflenums::clang__ExternalSourceSymbolAttr:::
      return toClientReflType<>(C);
    case reflenums::clang__ExternalSourceSymbolAttr:::
      return toClientReflType<>(C);
    case reflenums::clang__ExternalSourceSymbolAttr:::
      return toClientReflType<>(C);
    case reflenums::clang__ExternalSourceSymbolAttr:::
      return toClientReflType<>(C);
    case reflenums::clang__ExternalSourceSymbolAttr:::
      return toClientReflType<>(C);
    case reflenums::clang__ExternalSourceSymbolAttr:::
      return toClientReflType<>(C);
    case reflenums::clang__ExternalSourceSymbolAttr::clone:
      return toClientReflType<class clang::ExternalSourceSymbolAttr *>(C);
    case reflenums::clang__ExternalSourceSymbolAttr::printPretty:
      return toClientReflType<void>(C);
    case reflenums::clang__ExternalSourceSymbolAttr::getSpelling:
      return toClientReflType<const char *>(C);
    case reflenums::clang__ExternalSourceSymbolAttr::getLanguage:
      return toClientReflType<const char *>(C);
    case reflenums::clang__ExternalSourceSymbolAttr::getLanguageLength:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ExternalSourceSymbolAttr::getLanguageLength:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ExternalSourceSymbolAttr::getDefinedIn:
      return toClientReflType<const char *>(C);
    case reflenums::clang__ExternalSourceSymbolAttr::getDefinedInLength:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ExternalSourceSymbolAttr::getDefinedInLength:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ExternalSourceSymbolAttr::getGeneratedDeclaration:
      return toClientReflType<bool>(C);
    case reflenums::clang__ExternalSourceSymbolAttr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ExternalSourceSymbolAttr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ExternalSourceSymbolAttr::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__MSInheritanceAttr:
  switch (static_cast<reflenums::clang__MSInheritanceAttr::memnames>(MemNum)) {
    case reflenums::clang__MSInheritanceAttr:::
      return toClientReflType<>(C);
    case reflenums::clang__MSInheritanceAttr:::
      return toClientReflType<>(C);
    case reflenums::clang__MSInheritanceAttr:::
      return toClientReflType<>(C);
    case reflenums::clang__MSInheritanceAttr:::
      return toClientReflType<>(C);
    case reflenums::clang__MSInheritanceAttr::CreateImplicit:
      return toClientReflType<class clang::MSInheritanceAttr *>(C);
    case reflenums::clang__MSInheritanceAttr::CreateImplicit1:
      return toClientReflType<class clang::MSInheritanceAttr *>(C);
    case reflenums::clang__MSInheritanceAttr::CreateImplicit1:
      return toClientReflType<class clang::MSInheritanceAttr *>(C);
    case reflenums::clang__MSInheritanceAttr::CreateImplicit1:
      return toClientReflType<class clang::MSInheritanceAttr *>(C);
    case reflenums::clang__MSInheritanceAttr::clone:
      return toClientReflType<class clang::MSInheritanceAttr *>(C);
    case reflenums::clang__MSInheritanceAttr::printPretty:
      return toClientReflType<void>(C);
    case reflenums::clang__MSInheritanceAttr::getSpelling:
      return toClientReflType<const char *>(C);
    case reflenums::clang__MSInheritanceAttr::getSemanticSpelling:
      return toClientReflType<enum clang::MSInheritanceAttr::Spelling>(C);
    case reflenums::clang__MSInheritanceAttr::getBestCase:
      return toClientReflType<bool>(C);
    case reflenums::clang__MSInheritanceAttr::getBestCase:
      return toClientReflType<bool>(C);
    case reflenums::clang__MSInheritanceAttr::hasVBPtrOffsetField:
      return toClientReflType<bool>(C);
    case reflenums::clang__MSInheritanceAttr::hasNVOffsetField:
      return toClientReflType<bool>(C);
    case reflenums::clang__MSInheritanceAttr::hasVBTableOffsetField:
      return toClientReflType<bool>(C);
    case reflenums::clang__MSInheritanceAttr::hasOnlyOneField:
      return toClientReflType<bool>(C);
    case reflenums::clang__MSInheritanceAttr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__MSInheritanceAttr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__MSInheritanceAttr::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__MSVtorDispAttr:
  switch (static_cast<reflenums::clang__MSVtorDispAttr::memnames>(MemNum)) {
    case reflenums::clang__MSVtorDispAttr:::
      return toClientReflType<>(C);
    case reflenums::clang__MSVtorDispAttr:::
      return toClientReflType<>(C);
    case reflenums::clang__MSVtorDispAttr:::
      return toClientReflType<>(C);
    case reflenums::clang__MSVtorDispAttr::CreateImplicit:
      return toClientReflType<class clang::MSVtorDispAttr *>(C);
    case reflenums::clang__MSVtorDispAttr::CreateImplicit:
      return toClientReflType<class clang::MSVtorDispAttr *>(C);
    case reflenums::clang__MSVtorDispAttr::clone:
      return toClientReflType<class clang::MSVtorDispAttr *>(C);
    case reflenums::clang__MSVtorDispAttr::printPretty:
      return toClientReflType<void>(C);
    case reflenums::clang__MSVtorDispAttr::getSpelling:
      return toClientReflType<const char *>(C);
    case reflenums::clang__MSVtorDispAttr::getVdm:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__MSVtorDispAttr::getVdm:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__MSVtorDispAttr::getVtorDispMode:
      return toClientReflType<enum clang::MSVtorDispAttr::Mode>(C);
    case reflenums::clang__MSVtorDispAttr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__MSVtorDispAttr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__MSVtorDispAttr::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__LambdaCapture:
  switch (static_cast<reflenums::clang__LambdaCapture::memnames>(MemNum)) {
    case reflenums::clang__LambdaCapture:::
      return toClientReflType<>(C);
    case reflenums::clang__LambdaCapture:::
      return toClientReflType<>(C);
    case reflenums::clang__LambdaCapture:::
      return toClientReflType<>(C);
    case reflenums::clang__LambdaCapture:::
      return toClientReflType<>(C);
    case reflenums::clang__LambdaCapture:::
      return toClientReflType<>(C);
    case reflenums::clang__LambdaCapture:::
      return toClientReflType<>(C);
    case reflenums::clang__LambdaCapture:::
      return toClientReflType<>(C);
    case reflenums::clang__LambdaCapture:::
      return toClientReflType<>(C);
    case reflenums::clang__LambdaCapture:::
      return toClientReflType<>(C);
    case reflenums::clang__LambdaCapture::getCaptureKind:
      return toClientReflType<enum clang::LambdaCaptureKind>(C);
    case reflenums::clang__LambdaCapture::capturesThis:
      return toClientReflType<bool>(C);
    case reflenums::clang__LambdaCapture::capturesVariable:
      return toClientReflType<bool>(C);
    case reflenums::clang__LambdaCapture::capturesVLAType:
      return toClientReflType<bool>(C);
    case reflenums::clang__LambdaCapture::getCapturedVar:
      return toClientReflType<class clang::VarDecl *>(C);
    case reflenums::clang__LambdaCapture::isImplicit:
      return toClientReflType<bool>(C);
    case reflenums::clang__LambdaCapture::isExplicit:
      return toClientReflType<bool>(C);
    case reflenums::clang__LambdaCapture::getLocation:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__LambdaCapture::isPackExpansion:
      return toClientReflType<bool>(C);
    case reflenums::clang__LambdaCapture::getEllipsisLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__AccessSpecDecl:
  switch (static_cast<reflenums::clang__AccessSpecDecl::memnames>(MemNum)) {
    case reflenums::clang__AccessSpecDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__AccessSpecDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__AccessSpecDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__AccessSpecDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__AccessSpecDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__AccessSpecDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__AccessSpecDecl::getAccessSpecifierLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__AccessSpecDecl::getAccessSpecifierLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__AccessSpecDecl::getColonLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__AccessSpecDecl::getColonLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__AccessSpecDecl::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__AccessSpecDecl::Create:
      return toClientReflType<class clang::AccessSpecDecl *>(C);
    case reflenums::clang__AccessSpecDecl::CreateDeserialized:
      return toClientReflType<class clang::AccessSpecDecl *>(C);
    case reflenums::clang__AccessSpecDecl::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__AccessSpecDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__AccessSpecDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__AccessSpecDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__AccessSpecDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__AccessSpecDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__AccessSpecDecl::classofKind:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__CXXBaseSpecifier:
  switch (static_cast<reflenums::clang__CXXBaseSpecifier::memnames>(MemNum)) {
    case reflenums::clang__CXXBaseSpecifier:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXBaseSpecifier:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXBaseSpecifier:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXBaseSpecifier:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXBaseSpecifier:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXBaseSpecifier:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXBaseSpecifier:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXBaseSpecifier:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXBaseSpecifier:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXBaseSpecifier:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXBaseSpecifier:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXBaseSpecifier::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__CXXBaseSpecifier::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXBaseSpecifier::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXBaseSpecifier::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXBaseSpecifier::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXBaseSpecifier::getBaseTypeLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXBaseSpecifier::isVirtual:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXBaseSpecifier::isBaseOfClass:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXBaseSpecifier::isPackExpansion:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXBaseSpecifier::getInheritConstructors:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXBaseSpecifier::getInheritConstructors:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXBaseSpecifier::getEllipsisLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXBaseSpecifier::getAccessSpecifier:
      return toClientReflType<enum clang::AccessSpecifier>(C);
    case reflenums::clang__CXXBaseSpecifier::getAccessSpecifierAsWritten:
      return toClientReflType<enum clang::AccessSpecifier>(C);
    case reflenums::clang__CXXBaseSpecifier::getType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__CXXBaseSpecifier::getTypeSourceInfo:
      return toClientReflType<class clang::TypeSourceInfo *>(C);
    case reflenums::clang__CXXBaseSpecifier::getTypeSourceInfo:
      return toClientReflType<class clang::TypeSourceInfo *>(C);
    case reflenums::clang__CXXBaseSpecifier::getTypeSourceInfo:
      return toClientReflType<class clang::TypeSourceInfo *>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__CXXRecordDecl:
  switch (static_cast<reflenums::clang__CXXRecordDecl::memnames>(MemNum)) {
    case reflenums::clang__CXXRecordDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXRecordDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXRecordDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXRecordDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXRecordDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXRecordDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXRecordDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXRecordDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXRecordDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXRecordDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXRecordDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXRecordDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXRecordDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXRecordDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXRecordDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXRecordDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXRecordDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXRecordDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXRecordDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXRecordDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXRecordDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXRecordDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXRecordDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXRecordDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXRecordDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXRecordDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXRecordDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXRecordDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXRecordDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXRecordDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXRecordDecl::getCanonicalDecl:
      return toClientReflType<const class clang::CXXRecordDecl *>(C);
    case reflenums::clang__CXXRecordDecl::getCanonicalDecl:
      return toClientReflType<const class clang::CXXRecordDecl *>(C);
    case reflenums::clang__CXXRecordDecl::getPreviousDecl:
      return toClientReflType<const class clang::CXXRecordDecl *>(C);
    case reflenums::clang__CXXRecordDecl::getPreviousDecl:
      return toClientReflType<const class clang::CXXRecordDecl *>(C);
    case reflenums::clang__CXXRecordDecl::getMostRecentDecl:
      return toClientReflType<const class clang::CXXRecordDecl *>(C);
    case reflenums::clang__CXXRecordDecl::getMostRecentDecl:
      return toClientReflType<const class clang::CXXRecordDecl *>(C);
    case reflenums::clang__CXXRecordDecl::getMostRecentNonInjectedDecl:
      return toClientReflType<const class clang::CXXRecordDecl *>(C);
    case reflenums::clang__CXXRecordDecl::getDefinition:
      return toClientReflType<class clang::CXXRecordDecl *>(C);
    case reflenums::clang__CXXRecordDecl::hasDefinition:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::Create:
      return toClientReflType<class clang::CXXRecordDecl *>(C);
    case reflenums::clang__CXXRecordDecl::CreateLambda:
      return toClientReflType<class clang::CXXRecordDecl *>(C);
    case reflenums::clang__CXXRecordDecl::CreateDeserialized:
      return toClientReflType<class clang::CXXRecordDecl *>(C);
    case reflenums::clang__CXXRecordDecl::isDynamicClass:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::mayBeDynamicClass:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::mayBeNonDynamicClass:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::mayBeNonDynamicClass:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::isParsingBaseSpecifiers:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::isInstantiation:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::isInstantiation:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::getODRHash:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__CXXRecordDecl::getODRHash:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__CXXRecordDecl::getNumBases:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__CXXRecordDecl::getNumBases:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__CXXRecordDecl::getNumBases:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__CXXRecordDecl::getNumBases:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__CXXRecordDecl::bases:
      return toClientReflType<class llvm::iterator_range<const class clang::CXXBaseSpecifier *>>(C);
    case reflenums::clang__CXXRecordDecl::bases:
      return toClientReflType<class llvm::iterator_range<const class clang::CXXBaseSpecifier *>>(C);
    case reflenums::clang__CXXRecordDecl::bases:
      return toClientReflType<class llvm::iterator_range<const class clang::CXXBaseSpecifier *>>(C);
    case reflenums::clang__CXXRecordDecl::bases:
      return toClientReflType<class llvm::iterator_range<const class clang::CXXBaseSpecifier *>>(C);
    case reflenums::clang__CXXRecordDecl::bases:
      return toClientReflType<class llvm::iterator_range<const class clang::CXXBaseSpecifier *>>(C);
    case reflenums::clang__CXXRecordDecl::getNumVBases:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__CXXRecordDecl::getNumVBases:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__CXXRecordDecl::vbases:
      return toClientReflType<class llvm::iterator_range<const class clang::CXXBaseSpecifier *>>(C);
    case reflenums::clang__CXXRecordDecl::vbases:
      return toClientReflType<class llvm::iterator_range<const class clang::CXXBaseSpecifier *>>(C);
    case reflenums::clang__CXXRecordDecl::vbases:
      return toClientReflType<class llvm::iterator_range<const class clang::CXXBaseSpecifier *>>(C);
    case reflenums::clang__CXXRecordDecl::vbases:
      return toClientReflType<class llvm::iterator_range<const class clang::CXXBaseSpecifier *>>(C);
    case reflenums::clang__CXXRecordDecl::vbases:
      return toClientReflType<class llvm::iterator_range<const class clang::CXXBaseSpecifier *>>(C);
    case reflenums::clang__CXXRecordDecl::hasAnyDependentBases:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::hasAnyDependentBases:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::hasAnyDependentBases:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::methods:
      return toClientReflType<class llvm::iterator_range<class clang::DeclContext::specific_decl_iterator<class clang::CXXMethodDecl> >>(C);
    case reflenums::clang__CXXRecordDecl::methods:
      return toClientReflType<class llvm::iterator_range<class clang::DeclContext::specific_decl_iterator<class clang::CXXMethodDecl> >>(C);
    case reflenums::clang__CXXRecordDecl::methods:
      return toClientReflType<class llvm::iterator_range<class clang::DeclContext::specific_decl_iterator<class clang::CXXMethodDecl> >>(C);
    case reflenums::clang__CXXRecordDecl::methods:
      return toClientReflType<class llvm::iterator_range<class clang::DeclContext::specific_decl_iterator<class clang::CXXMethodDecl> >>(C);
    case reflenums::clang__CXXRecordDecl::methods:
      return toClientReflType<class llvm::iterator_range<class clang::DeclContext::specific_decl_iterator<class clang::CXXMethodDecl> >>(C);
    case reflenums::clang__CXXRecordDecl::ctors:
      return toClientReflType<class llvm::iterator_range<class clang::DeclContext::specific_decl_iterator<class clang::CXXConstructorDecl> >>(C);
    case reflenums::clang__CXXRecordDecl::ctors:
      return toClientReflType<class llvm::iterator_range<class clang::DeclContext::specific_decl_iterator<class clang::CXXConstructorDecl> >>(C);
    case reflenums::clang__CXXRecordDecl::ctors:
      return toClientReflType<class llvm::iterator_range<class clang::DeclContext::specific_decl_iterator<class clang::CXXConstructorDecl> >>(C);
    case reflenums::clang__CXXRecordDecl::ctors:
      return toClientReflType<class llvm::iterator_range<class clang::DeclContext::specific_decl_iterator<class clang::CXXConstructorDecl> >>(C);
    case reflenums::clang__CXXRecordDecl::ctors:
      return toClientReflType<class llvm::iterator_range<class clang::DeclContext::specific_decl_iterator<class clang::CXXConstructorDecl> >>(C);
    case reflenums::clang__CXXRecordDecl::friends:
      return toClientReflType<class llvm::iterator_range<class clang::CXXRecordDecl::friend_iterator>>(C);
    case reflenums::clang__CXXRecordDecl::friends:
      return toClientReflType<class llvm::iterator_range<class clang::CXXRecordDecl::friend_iterator>>(C);
    case reflenums::clang__CXXRecordDecl::friends:
      return toClientReflType<class llvm::iterator_range<class clang::CXXRecordDecl::friend_iterator>>(C);
    case reflenums::clang__CXXRecordDecl::friends:
      return toClientReflType<class llvm::iterator_range<class clang::CXXRecordDecl::friend_iterator>>(C);
    case reflenums::clang__CXXRecordDecl::hasFriends:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::defaultedCopyConstructorIsDeleted:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::defaultedMoveConstructorIsDeleted:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::defaultedDestructorIsDeleted:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::hasSimpleCopyConstructor:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::hasSimpleMoveConstructor:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::hasSimpleMoveAssignment:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::hasSimpleDestructor:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::hasDefaultConstructor:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::needsImplicitDefaultConstructor:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::hasUserDeclaredConstructor:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::hasUserProvidedDefaultConstructor:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::hasUserDeclaredCopyConstructor:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::needsImplicitCopyConstructor:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::needsOverloadResolutionForCopyConstructor:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::implicitCopyConstructorHasConstParam:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::hasCopyConstructorWithConstParam:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::hasUserDeclaredMoveOperation:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::hasUserDeclaredMoveConstructor:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::hasMoveConstructor:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::hasMoveConstructor:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::hasMoveConstructor:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::hasMoveConstructor:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::needsImplicitMoveConstructor:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::needsOverloadResolutionForMoveConstructor:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::hasUserDeclaredCopyAssignment:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::needsImplicitCopyAssignment:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::needsOverloadResolutionForCopyAssignment:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::implicitCopyAssignmentHasConstParam:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::hasCopyAssignmentWithConstParam:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::hasUserDeclaredMoveAssignment:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::hasMoveAssignment:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::hasMoveAssignment:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::needsImplicitMoveAssignment:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::needsOverloadResolutionForMoveAssignment:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::hasUserDeclaredDestructor:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::needsImplicitDestructor:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::needsOverloadResolutionForDestructor:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::isLambda:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::isGenericLambda:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::getLambdaCallOperator:
      return toClientReflType<class clang::CXXMethodDecl *>(C);
    case reflenums::clang__CXXRecordDecl::getLambdaStaticInvoker:
      return toClientReflType<class clang::CXXMethodDecl *>(C);
    case reflenums::clang__CXXRecordDecl::getGenericLambdaTemplateParameterList:
      return toClientReflType<class clang::TemplateParameterList *>(C);
    case reflenums::clang__CXXRecordDecl::getLambdaCaptureDefault:
      return toClientReflType<enum clang::LambdaCaptureDefault>(C);
    case reflenums::clang__CXXRecordDecl::getLambdaCaptureDefault:
      return toClientReflType<enum clang::LambdaCaptureDefault>(C);
    case reflenums::clang__CXXRecordDecl::getLambdaCaptureDefault:
      return toClientReflType<enum clang::LambdaCaptureDefault>(C);
    case reflenums::clang__CXXRecordDecl::getLambdaCaptureDefault:
      return toClientReflType<enum clang::LambdaCaptureDefault>(C);
    case reflenums::clang__CXXRecordDecl::captures:
      return toClientReflType<class llvm::iterator_range<const class clang::LambdaCapture *>>(C);
    case reflenums::clang__CXXRecordDecl::captures:
      return toClientReflType<class llvm::iterator_range<const class clang::LambdaCapture *>>(C);
    case reflenums::clang__CXXRecordDecl::captures:
      return toClientReflType<class llvm::iterator_range<const class clang::LambdaCapture *>>(C);
    case reflenums::clang__CXXRecordDecl::captures:
      return toClientReflType<class llvm::iterator_range<const class clang::LambdaCapture *>>(C);
    case reflenums::clang__CXXRecordDecl::captures:
      return toClientReflType<class llvm::iterator_range<const class clang::LambdaCapture *>>(C);
    case reflenums::clang__CXXRecordDecl::captures:
      return toClientReflType<class llvm::iterator_range<const class clang::LambdaCapture *>>(C);
    case reflenums::clang__CXXRecordDecl::captures:
      return toClientReflType<class llvm::iterator_range<const class clang::LambdaCapture *>>(C);
    case reflenums::clang__CXXRecordDecl::captures:
      return toClientReflType<class llvm::iterator_range<const class clang::LambdaCapture *>>(C);
    case reflenums::clang__CXXRecordDecl::isAggregate:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::hasInClassInitializer:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::hasUninitializedReferenceMember:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::isPOD:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::isCLike:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::isEmpty:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::hasDirectFields:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::isPolymorphic:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::isAbstract:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::isStandardLayout:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::isCXX11StandardLayout:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::hasMutableFields:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::hasVariantMembers:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::hasTrivialDefaultConstructor:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::hasNonTrivialDefaultConstructor:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::hasConstexprNonCopyMoveConstructor:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::defaultedDefaultConstructorIsConstexpr:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::hasConstexprDefaultConstructor:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::hasTrivialCopyConstructor:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::hasTrivialCopyConstructorForCall:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::hasNonTrivialCopyConstructor:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::hasNonTrivialCopyConstructorForCall:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::hasTrivialMoveConstructor:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::hasTrivialMoveConstructorForCall:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::hasNonTrivialMoveConstructor:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::hasNonTrivialMoveConstructorForCall:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::hasTrivialCopyAssignment:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::hasNonTrivialCopyAssignment:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::hasTrivialMoveAssignment:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::hasNonTrivialMoveAssignment:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::hasTrivialDestructor:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::hasTrivialDestructorForCall:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::hasNonTrivialDestructor:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::hasNonTrivialDestructorForCall:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::hasNonTrivialDestructorForCall:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::allowConstDefaultInit:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::hasIrrelevantDestructor:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::hasNonLiteralTypeFieldsOrBases:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::hasInheritedConstructor:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::hasInheritedAssignment:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::isTriviallyCopyable:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::isTrivial:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::isLiteral:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::getInstantiatedFromMemberClass:
      return toClientReflType<class clang::CXXRecordDecl *>(C);
    case reflenums::clang__CXXRecordDecl::getMemberSpecializationInfo:
      return toClientReflType<class clang::MemberSpecializationInfo *>(C);
    case reflenums::clang__CXXRecordDecl::getMemberSpecializationInfo:
      return toClientReflType<class clang::MemberSpecializationInfo *>(C);
    case reflenums::clang__CXXRecordDecl::getDescribedClassTemplate:
      return toClientReflType<class clang::ClassTemplateDecl *>(C);
    case reflenums::clang__CXXRecordDecl::getDescribedClassTemplate:
      return toClientReflType<class clang::ClassTemplateDecl *>(C);
    case reflenums::clang__CXXRecordDecl::getTemplateSpecializationKind:
      return toClientReflType<enum clang::TemplateSpecializationKind>(C);
    case reflenums::clang__CXXRecordDecl::getTemplateSpecializationKind:
      return toClientReflType<enum clang::TemplateSpecializationKind>(C);
    case reflenums::clang__CXXRecordDecl::getTemplateInstantiationPattern:
      return toClientReflType<const class clang::CXXRecordDecl *>(C);
    case reflenums::clang__CXXRecordDecl::getTemplateInstantiationPattern:
      return toClientReflType<const class clang::CXXRecordDecl *>(C);
    case reflenums::clang__CXXRecordDecl::getDestructor:
      return toClientReflType<class clang::CXXDestructorDecl *>(C);
    case reflenums::clang__CXXRecordDecl::isAnyDestructorNoReturn:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::isLocalClass:
      return toClientReflType<const class clang::FunctionDecl *>(C);
    case reflenums::clang__CXXRecordDecl::isLocalClass:
      return toClientReflType<const class clang::FunctionDecl *>(C);
    case reflenums::clang__CXXRecordDecl::isCurrentInstantiation:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::isDerivedFrom:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::isDerivedFrom:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::isVirtuallyDerivedFrom:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::isProvablyNotDerivedFrom:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::isProvablyNotDerivedFrom:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::isProvablyNotDerivedFrom:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::isProvablyNotDerivedFrom:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::isProvablyNotDerivedFrom:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::isProvablyNotDerivedFrom:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::isProvablyNotDerivedFrom:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::isProvablyNotDerivedFrom:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::isProvablyNotDerivedFrom:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::isProvablyNotDerivedFrom:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::isProvablyNotDerivedFrom:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::isProvablyNotDerivedFrom:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::isProvablyNotDerivedFrom:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::isProvablyNotDerivedFrom:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::isProvablyNotDerivedFrom:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::viewInheritance:
      return toClientReflType<void>(C);
    case reflenums::clang__CXXRecordDecl::MergeAccess:
      return toClientReflType<enum clang::AccessSpecifier>(C);
    case reflenums::clang__CXXRecordDecl::MergeAccess:
      return toClientReflType<enum clang::AccessSpecifier>(C);
    case reflenums::clang__CXXRecordDecl::MergeAccess:
      return toClientReflType<enum clang::AccessSpecifier>(C);
    case reflenums::clang__CXXRecordDecl::MergeAccess:
      return toClientReflType<enum clang::AccessSpecifier>(C);
    case reflenums::clang__CXXRecordDecl::MergeAccess:
      return toClientReflType<enum clang::AccessSpecifier>(C);
    case reflenums::clang__CXXRecordDecl::mayBeAbstract:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::getLambdaManglingNumber:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__CXXRecordDecl::getLambdaContextDecl:
      return toClientReflType<class clang::Decl *>(C);
    case reflenums::clang__CXXRecordDecl::getLambdaContextDecl:
      return toClientReflType<class clang::Decl *>(C);
    case reflenums::clang__CXXRecordDecl::getMSInheritanceModel:
      return toClientReflType<enum clang::MSInheritanceAttr::Spelling>(C);
    case reflenums::clang__CXXRecordDecl::calculateInheritanceModel:
      return toClientReflType<enum clang::MSInheritanceAttr::Spelling>(C);
    case reflenums::clang__CXXRecordDecl::nullFieldOffsetIsZero:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::getMSVtorDispMode:
      return toClientReflType<enum clang::MSVtorDispAttr::Mode>(C);
    case reflenums::clang__CXXRecordDecl::isDependentLambda:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::getLambdaTypeInfo:
      return toClientReflType<class clang::TypeSourceInfo *>(C);
    case reflenums::clang__CXXRecordDecl::isInterfaceLike:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXRecordDecl::classofKind:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__CXXDeductionGuideDecl:
  switch (static_cast<reflenums::clang__CXXDeductionGuideDecl::memnames>(MemNum)) {
    case reflenums::clang__CXXDeductionGuideDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXDeductionGuideDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXDeductionGuideDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXDeductionGuideDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXDeductionGuideDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXDeductionGuideDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXDeductionGuideDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXDeductionGuideDecl::Create:
      return toClientReflType<class clang::CXXDeductionGuideDecl *>(C);
    case reflenums::clang__CXXDeductionGuideDecl::CreateDeserialized:
      return toClientReflType<class clang::CXXDeductionGuideDecl *>(C);
    case reflenums::clang__CXXDeductionGuideDecl::isExplicit:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXDeductionGuideDecl::isExplicitSpecified:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXDeductionGuideDecl::getDeducedTemplate:
      return toClientReflType<class clang::TemplateDecl *>(C);
    case reflenums::clang__CXXDeductionGuideDecl::getDeducedTemplate:
      return toClientReflType<class clang::TemplateDecl *>(C);
    case reflenums::clang__CXXDeductionGuideDecl::isCopyDeductionCandidate:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXDeductionGuideDecl::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXDeductionGuideDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXDeductionGuideDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXDeductionGuideDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXDeductionGuideDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXDeductionGuideDecl::classofKind:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__CXXMethodDecl:
  switch (static_cast<reflenums::clang__CXXMethodDecl::memnames>(MemNum)) {
    case reflenums::clang__CXXMethodDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXMethodDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXMethodDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXMethodDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXMethodDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXMethodDecl::Create:
      return toClientReflType<class clang::CXXMethodDecl *>(C);
    case reflenums::clang__CXXMethodDecl::CreateDeserialized:
      return toClientReflType<class clang::CXXMethodDecl *>(C);
    case reflenums::clang__CXXMethodDecl::isStatic:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXMethodDecl::isInstance:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXMethodDecl::isStaticOverloadedOperator:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXMethodDecl::isConst:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXMethodDecl::isVolatile:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXMethodDecl::isVirtual:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXMethodDecl::isVirtual:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXMethodDecl::getDevirtualizedMethod:
      return toClientReflType<const class clang::CXXMethodDecl *>(C);
    case reflenums::clang__CXXMethodDecl::isUsualDeallocationFunction:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXMethodDecl::isCopyAssignmentOperator:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXMethodDecl::isMoveAssignmentOperator:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXMethodDecl::isMoveAssignmentOperator:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXMethodDecl::getCanonicalDecl:
      return toClientReflType<const class clang::CXXMethodDecl *>(C);
    case reflenums::clang__CXXMethodDecl::getCanonicalDecl:
      return toClientReflType<const class clang::CXXMethodDecl *>(C);
    case reflenums::clang__CXXMethodDecl::getMostRecentDecl:
      return toClientReflType<const class clang::CXXMethodDecl *>(C);
    case reflenums::clang__CXXMethodDecl::isUserProvided:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXMethodDecl::isUserProvided:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXMethodDecl::isUserProvided:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXMethodDecl::isUserProvided:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXMethodDecl::isUserProvided:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXMethodDecl::size_overridden_methods:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__CXXMethodDecl::size_overridden_methods:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__CXXMethodDecl::size_overridden_methods:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__CXXMethodDecl::getParent:
      return toClientReflType<const class clang::CXXRecordDecl *>(C);
    case reflenums::clang__CXXMethodDecl::getParent:
      return toClientReflType<const class clang::CXXRecordDecl *>(C);
    case reflenums::clang__CXXMethodDecl::getThisType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__CXXMethodDecl::getTypeQualifiers:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__CXXMethodDecl::getRefQualifier:
      return toClientReflType<enum clang::RefQualifierKind>(C);
    case reflenums::clang__CXXMethodDecl::hasInlineBody:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXMethodDecl::isLambdaStaticInvoker:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXMethodDecl::isLambdaStaticInvoker:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXMethodDecl::getCorrespondingMethodInClass:
      return toClientReflType<const class clang::CXXMethodDecl *>(C);
    case reflenums::clang__CXXMethodDecl::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXMethodDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXMethodDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXMethodDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXMethodDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXMethodDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXMethodDecl::classofKind:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__CXXCtorInitializer:
  switch (static_cast<reflenums::clang__CXXCtorInitializer::memnames>(MemNum)) {
    case reflenums::clang__CXXCtorInitializer:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXCtorInitializer:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXCtorInitializer:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXCtorInitializer:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXCtorInitializer:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXCtorInitializer:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXCtorInitializer:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXCtorInitializer:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXCtorInitializer:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXCtorInitializer:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXCtorInitializer:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXCtorInitializer:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXCtorInitializer:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXCtorInitializer:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXCtorInitializer:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXCtorInitializer::isBaseInitializer:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXCtorInitializer::isMemberInitializer:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXCtorInitializer::isAnyMemberInitializer:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXCtorInitializer::isIndirectMemberInitializer:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXCtorInitializer::isInClassMemberInitializer:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXCtorInitializer::isDelegatingInitializer:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXCtorInitializer::isPackExpansion:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXCtorInitializer::getEllipsisLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXCtorInitializer::getBaseClassLoc:
      return toClientReflType<class clang::TypeLoc>(C);
    case reflenums::clang__CXXCtorInitializer::getBaseClass:
      return toClientReflType<const class clang::Type *>(C);
    case reflenums::clang__CXXCtorInitializer::isBaseVirtual:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXCtorInitializer::getTypeSourceInfo:
      return toClientReflType<class clang::TypeSourceInfo *>(C);
    case reflenums::clang__CXXCtorInitializer::getMember:
      return toClientReflType<class clang::FieldDecl *>(C);
    case reflenums::clang__CXXCtorInitializer::getAnyMember:
      return toClientReflType<class clang::FieldDecl *>(C);
    case reflenums::clang__CXXCtorInitializer::getIndirectMember:
      return toClientReflType<class clang::IndirectFieldDecl *>(C);
    case reflenums::clang__CXXCtorInitializer::getMemberLocation:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXCtorInitializer::getSourceLocation:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXCtorInitializer::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__CXXCtorInitializer::isWritten:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXCtorInitializer::getSourceOrder:
      return toClientReflType<int>(C);
    case reflenums::clang__CXXCtorInitializer::getSourceOrder:
      return toClientReflType<int>(C);
    case reflenums::clang__CXXCtorInitializer::getLParenLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXCtorInitializer::getRParenLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXCtorInitializer::getInit:
      return toClientReflType<class clang::Expr *>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__InheritedConstructor:
  switch (static_cast<reflenums::clang__InheritedConstructor::memnames>(MemNum)) {
    case reflenums::clang__InheritedConstructor:::
      return toClientReflType<>(C);
    case reflenums::clang__InheritedConstructor:::
      return toClientReflType<>(C);
    case reflenums::clang__InheritedConstructor:::
      return toClientReflType<>(C);
    case reflenums::clang__InheritedConstructor:::
      return toClientReflType<>(C);
    case reflenums::clang__InheritedConstructor:::
      return toClientReflType<>(C);
    case reflenums::clang__InheritedConstructor:::
      return toClientReflType<>(C);
    case reflenums::clang__InheritedConstructor::operator_bool:
      return toClientReflType<bool>(C);
    case reflenums::clang__InheritedConstructor::getShadowDecl:
      return toClientReflType<class clang::ConstructorUsingShadowDecl *>(C);
    case reflenums::clang__InheritedConstructor::getConstructor:
      return toClientReflType<class clang::CXXConstructorDecl *>(C);
    case reflenums::clang__InheritedConstructor::getConstructor:
      return toClientReflType<class clang::CXXConstructorDecl *>(C);
    case reflenums::clang__InheritedConstructor::getConstructor:
      return toClientReflType<class clang::CXXConstructorDecl *>(C);
    case reflenums::clang__InheritedConstructor::getConstructor:
      return toClientReflType<class clang::CXXConstructorDecl *>(C);
    case reflenums::clang__InheritedConstructor::getConstructor:
      return toClientReflType<class clang::CXXConstructorDecl *>(C);
    case reflenums::clang__InheritedConstructor::getConstructor:
      return toClientReflType<class clang::CXXConstructorDecl *>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__CXXConstructorDecl:
  switch (static_cast<reflenums::clang__CXXConstructorDecl::memnames>(MemNum)) {
    case reflenums::clang__CXXConstructorDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXConstructorDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXConstructorDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXConstructorDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXConstructorDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXConstructorDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXConstructorDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXConstructorDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXConstructorDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXConstructorDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXConstructorDecl::CreateDeserialized:
      return toClientReflType<class clang::CXXConstructorDecl *>(C);
    case reflenums::clang__CXXConstructorDecl::Create:
      return toClientReflType<class clang::CXXConstructorDecl *>(C);
    case reflenums::clang__CXXConstructorDecl::Create:
      return toClientReflType<class clang::CXXConstructorDecl *>(C);
    case reflenums::clang__CXXConstructorDecl::Create:
      return toClientReflType<class clang::CXXConstructorDecl *>(C);
    case reflenums::clang__CXXConstructorDecl::Create:
      return toClientReflType<class clang::CXXConstructorDecl *>(C);
    case reflenums::clang__CXXConstructorDecl::Create:
      return toClientReflType<class clang::CXXConstructorDecl *>(C);
    case reflenums::clang__CXXConstructorDecl::Create:
      return toClientReflType<class clang::CXXConstructorDecl *>(C);
    case reflenums::clang__CXXConstructorDecl::inits:
      return toClientReflType<class llvm::iterator_range<class clang::CXXCtorInitializer *const *>>(C);
    case reflenums::clang__CXXConstructorDecl::inits:
      return toClientReflType<class llvm::iterator_range<class clang::CXXCtorInitializer *const *>>(C);
    case reflenums::clang__CXXConstructorDecl::inits:
      return toClientReflType<class llvm::iterator_range<class clang::CXXCtorInitializer *const *>>(C);
    case reflenums::clang__CXXConstructorDecl::inits:
      return toClientReflType<class llvm::iterator_range<class clang::CXXCtorInitializer *const *>>(C);
    case reflenums::clang__CXXConstructorDecl::inits:
      return toClientReflType<class llvm::iterator_range<class clang::CXXCtorInitializer *const *>>(C);
    case reflenums::clang__CXXConstructorDecl::inits:
      return toClientReflType<class llvm::iterator_range<class clang::CXXCtorInitializer *const *>>(C);
    case reflenums::clang__CXXConstructorDecl::inits:
      return toClientReflType<class llvm::iterator_range<class clang::CXXCtorInitializer *const *>>(C);
    case reflenums::clang__CXXConstructorDecl::inits:
      return toClientReflType<class llvm::iterator_range<class clang::CXXCtorInitializer *const *>>(C);
    case reflenums::clang__CXXConstructorDecl::inits:
      return toClientReflType<class llvm::iterator_range<class clang::CXXCtorInitializer *const *>>(C);
    case reflenums::clang__CXXConstructorDecl::inits:
      return toClientReflType<class llvm::iterator_range<class clang::CXXCtorInitializer *const *>>(C);
    case reflenums::clang__CXXConstructorDecl::inits:
      return toClientReflType<class llvm::iterator_range<class clang::CXXCtorInitializer *const *>>(C);
    case reflenums::clang__CXXConstructorDecl::getNumCtorInitializers:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__CXXConstructorDecl::getNumCtorInitializers:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__CXXConstructorDecl::getNumCtorInitializers:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__CXXConstructorDecl::isExplicitSpecified:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXConstructorDecl::isExplicit:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXConstructorDecl::isDelegatingConstructor:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXConstructorDecl::getTargetConstructor:
      return toClientReflType<class clang::CXXConstructorDecl *>(C);
    case reflenums::clang__CXXConstructorDecl::isDefaultConstructor:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXConstructorDecl::isDefaultConstructor:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXConstructorDecl::isCopyConstructor:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXConstructorDecl::isCopyConstructor:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXConstructorDecl::isMoveConstructor:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXConstructorDecl::isMoveConstructor:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXConstructorDecl::isCopyOrMoveConstructor:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXConstructorDecl::isConvertingConstructor:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXConstructorDecl::isSpecializationCopyingObject:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXConstructorDecl::isInheritingConstructor:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXConstructorDecl::getInheritedConstructor:
      return toClientReflType<class clang::InheritedConstructor>(C);
    case reflenums::clang__CXXConstructorDecl::getInheritedConstructor:
      return toClientReflType<class clang::InheritedConstructor>(C);
    case reflenums::clang__CXXConstructorDecl::getCanonicalDecl:
      return toClientReflType<const class clang::CXXConstructorDecl *>(C);
    case reflenums::clang__CXXConstructorDecl::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXConstructorDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXConstructorDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXConstructorDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXConstructorDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXConstructorDecl::classofKind:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__CXXDestructorDecl:
  switch (static_cast<reflenums::clang__CXXDestructorDecl::memnames>(MemNum)) {
    case reflenums::clang__CXXDestructorDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXDestructorDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXDestructorDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXDestructorDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXDestructorDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXDestructorDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXDestructorDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXDestructorDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXDestructorDecl::Create:
      return toClientReflType<class clang::CXXDestructorDecl *>(C);
    case reflenums::clang__CXXDestructorDecl::CreateDeserialized:
      return toClientReflType<class clang::CXXDestructorDecl *>(C);
    case reflenums::clang__CXXDestructorDecl::CreateDeserialized:
      return toClientReflType<class clang::CXXDestructorDecl *>(C);
    case reflenums::clang__CXXDestructorDecl::getOperatorDelete:
      return toClientReflType<const class clang::FunctionDecl *>(C);
    case reflenums::clang__CXXDestructorDecl::getOperatorDeleteThisArg:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__CXXDestructorDecl::getOperatorDeleteThisArg:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__CXXDestructorDecl::getCanonicalDecl:
      return toClientReflType<const class clang::CXXDestructorDecl *>(C);
    case reflenums::clang__CXXDestructorDecl::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXDestructorDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXDestructorDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXDestructorDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXDestructorDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXDestructorDecl::classofKind:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__CXXConversionDecl:
  switch (static_cast<reflenums::clang__CXXConversionDecl::memnames>(MemNum)) {
    case reflenums::clang__CXXConversionDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXConversionDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXConversionDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXConversionDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXConversionDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXConversionDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXConversionDecl::Create:
      return toClientReflType<class clang::CXXConversionDecl *>(C);
    case reflenums::clang__CXXConversionDecl::CreateDeserialized:
      return toClientReflType<class clang::CXXConversionDecl *>(C);
    case reflenums::clang__CXXConversionDecl::isExplicitSpecified:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXConversionDecl::isExplicit:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXConversionDecl::getConversionType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__CXXConversionDecl::isLambdaToBlockPointerConversion:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXConversionDecl::isLambdaToBlockPointerConversion:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXConversionDecl::getCanonicalDecl:
      return toClientReflType<const class clang::CXXConversionDecl *>(C);
    case reflenums::clang__CXXConversionDecl::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXConversionDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXConversionDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXConversionDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXConversionDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXConversionDecl::classofKind:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__LinkageSpecDecl:
  switch (static_cast<reflenums::clang__LinkageSpecDecl::memnames>(MemNum)) {
    case reflenums::clang__LinkageSpecDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__LinkageSpecDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__LinkageSpecDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__LinkageSpecDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__LinkageSpecDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__LinkageSpecDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__LinkageSpecDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__LinkageSpecDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__LinkageSpecDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__LinkageSpecDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__LinkageSpecDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__LinkageSpecDecl::Create:
      return toClientReflType<class clang::LinkageSpecDecl *>(C);
    case reflenums::clang__LinkageSpecDecl::CreateDeserialized:
      return toClientReflType<class clang::LinkageSpecDecl *>(C);
    case reflenums::clang__LinkageSpecDecl::getLanguage:
      return toClientReflType<enum clang::LinkageSpecDecl::LanguageIDs>(C);
    case reflenums::clang__LinkageSpecDecl::getLanguage:
      return toClientReflType<enum clang::LinkageSpecDecl::LanguageIDs>(C);
    case reflenums::clang__LinkageSpecDecl::hasBraces:
      return toClientReflType<bool>(C);
    case reflenums::clang__LinkageSpecDecl::getExternLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__LinkageSpecDecl::getRBraceLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__LinkageSpecDecl::getRBraceLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__LinkageSpecDecl::getRBraceLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__LinkageSpecDecl::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__LinkageSpecDecl::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__LinkageSpecDecl::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__LinkageSpecDecl::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__LinkageSpecDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__LinkageSpecDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__LinkageSpecDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__LinkageSpecDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__LinkageSpecDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__LinkageSpecDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__LinkageSpecDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__LinkageSpecDecl::classofKind:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__UsingDirectiveDecl:
  switch (static_cast<reflenums::clang__UsingDirectiveDecl::memnames>(MemNum)) {
    case reflenums::clang__UsingDirectiveDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__UsingDirectiveDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__UsingDirectiveDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__UsingDirectiveDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__UsingDirectiveDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__UsingDirectiveDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__UsingDirectiveDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__UsingDirectiveDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__UsingDirectiveDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__UsingDirectiveDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__UsingDirectiveDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__UsingDirectiveDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__UsingDirectiveDecl::getQualifierLoc:
      return toClientReflType<class clang::NestedNameSpecifierLoc>(C);
    case reflenums::clang__UsingDirectiveDecl::getQualifier:
      return toClientReflType<class clang::NestedNameSpecifier *>(C);
    case reflenums::clang__UsingDirectiveDecl::getQualifier:
      return toClientReflType<class clang::NestedNameSpecifier *>(C);
    case reflenums::clang__UsingDirectiveDecl::getNominatedNamespaceAsWritten:
      return toClientReflType<const class clang::NamedDecl *>(C);
    case reflenums::clang__UsingDirectiveDecl::getNominatedNamespaceAsWritten:
      return toClientReflType<const class clang::NamedDecl *>(C);
    case reflenums::clang__UsingDirectiveDecl::getNominatedNamespace:
      return toClientReflType<const class clang::NamespaceDecl *>(C);
    case reflenums::clang__UsingDirectiveDecl::getNominatedNamespace:
      return toClientReflType<const class clang::NamespaceDecl *>(C);
    case reflenums::clang__UsingDirectiveDecl::getCommonAncestor:
      return toClientReflType<const class clang::DeclContext *>(C);
    case reflenums::clang__UsingDirectiveDecl::getUsingLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__UsingDirectiveDecl::getNamespaceKeyLocation:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__UsingDirectiveDecl::getIdentLocation:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__UsingDirectiveDecl::Create:
      return toClientReflType<class clang::UsingDirectiveDecl *>(C);
    case reflenums::clang__UsingDirectiveDecl::CreateDeserialized:
      return toClientReflType<class clang::UsingDirectiveDecl *>(C);
    case reflenums::clang__UsingDirectiveDecl::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__UsingDirectiveDecl::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__UsingDirectiveDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__UsingDirectiveDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__UsingDirectiveDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__UsingDirectiveDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__UsingDirectiveDecl::classofKind:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__NamespaceAliasDecl:
  switch (static_cast<reflenums::clang__NamespaceAliasDecl::memnames>(MemNum)) {
    case reflenums::clang__NamespaceAliasDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__NamespaceAliasDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__NamespaceAliasDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__NamespaceAliasDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__NamespaceAliasDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__NamespaceAliasDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__NamespaceAliasDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__NamespaceAliasDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__NamespaceAliasDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__NamespaceAliasDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__NamespaceAliasDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__NamespaceAliasDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__NamespaceAliasDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__NamespaceAliasDecl::getPreviousDecl:
      return toClientReflType<const class clang::NamespaceAliasDecl *>(C);
    case reflenums::clang__NamespaceAliasDecl::getPreviousDecl:
      return toClientReflType<const class clang::NamespaceAliasDecl *>(C);
    case reflenums::clang__NamespaceAliasDecl::getFirstDecl:
      return toClientReflType<const class clang::NamespaceAliasDecl *>(C);
    case reflenums::clang__NamespaceAliasDecl::getFirstDecl:
      return toClientReflType<const class clang::NamespaceAliasDecl *>(C);
    case reflenums::clang__NamespaceAliasDecl::getFirstDecl:
      return toClientReflType<const class clang::NamespaceAliasDecl *>(C);
    case reflenums::clang__NamespaceAliasDecl::getMostRecentDecl:
      return toClientReflType<const class clang::NamespaceAliasDecl *>(C);
    case reflenums::clang__NamespaceAliasDecl::getMostRecentDecl:
      return toClientReflType<const class clang::NamespaceAliasDecl *>(C);
    case reflenums::clang__NamespaceAliasDecl::getMostRecentDecl:
      return toClientReflType<const class clang::NamespaceAliasDecl *>(C);
    case reflenums::clang__NamespaceAliasDecl::getMostRecentDecl:
      return toClientReflType<const class clang::NamespaceAliasDecl *>(C);
    case reflenums::clang__NamespaceAliasDecl::getMostRecentDecl:
      return toClientReflType<const class clang::NamespaceAliasDecl *>(C);
    case reflenums::clang__NamespaceAliasDecl::getMostRecentDecl:
      return toClientReflType<const class clang::NamespaceAliasDecl *>(C);
    case reflenums::clang__NamespaceAliasDecl::getMostRecentDecl:
      return toClientReflType<const class clang::NamespaceAliasDecl *>(C);
    case reflenums::clang__NamespaceAliasDecl::getMostRecentDecl:
      return toClientReflType<const class clang::NamespaceAliasDecl *>(C);
    case reflenums::clang__NamespaceAliasDecl::getMostRecentDecl:
      return toClientReflType<const class clang::NamespaceAliasDecl *>(C);
    case reflenums::clang__NamespaceAliasDecl::getMostRecentDecl:
      return toClientReflType<const class clang::NamespaceAliasDecl *>(C);
    case reflenums::clang__NamespaceAliasDecl::getMostRecentDecl:
      return toClientReflType<const class clang::NamespaceAliasDecl *>(C);
    case reflenums::clang__NamespaceAliasDecl::getMostRecentDecl:
      return toClientReflType<const class clang::NamespaceAliasDecl *>(C);
    case reflenums::clang__NamespaceAliasDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__NamespaceAliasDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__NamespaceAliasDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__NamespaceAliasDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__NamespaceAliasDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__NamespaceAliasDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__NamespaceAliasDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__NamespaceAliasDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__NamespaceAliasDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__NamespaceAliasDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__NamespaceAliasDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__NamespaceAliasDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__NamespaceAliasDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__NamespaceAliasDecl::Create:
      return toClientReflType<class clang::NamespaceAliasDecl *>(C);
    case reflenums::clang__NamespaceAliasDecl::CreateDeserialized:
      return toClientReflType<class clang::NamespaceAliasDecl *>(C);
    case reflenums::clang__NamespaceAliasDecl::CreateDeserialized:
      return toClientReflType<class clang::NamespaceAliasDecl *>(C);
    case reflenums::clang__NamespaceAliasDecl::CreateDeserialized:
      return toClientReflType<class clang::NamespaceAliasDecl *>(C);
    case reflenums::clang__NamespaceAliasDecl::CreateDeserialized:
      return toClientReflType<class clang::NamespaceAliasDecl *>(C);
    case reflenums::clang__NamespaceAliasDecl::CreateDeserialized:
      return toClientReflType<class clang::NamespaceAliasDecl *>(C);
    case reflenums::clang__NamespaceAliasDecl::CreateDeserialized:
      return toClientReflType<class clang::NamespaceAliasDecl *>(C);
    case reflenums::clang__NamespaceAliasDecl::CreateDeserialized:
      return toClientReflType<class clang::NamespaceAliasDecl *>(C);
    case reflenums::clang__NamespaceAliasDecl::CreateDeserialized:
      return toClientReflType<class clang::NamespaceAliasDecl *>(C);
    case reflenums::clang__NamespaceAliasDecl::CreateDeserialized:
      return toClientReflType<class clang::NamespaceAliasDecl *>(C);
    case reflenums::clang__NamespaceAliasDecl::CreateDeserialized:
      return toClientReflType<class clang::NamespaceAliasDecl *>(C);
    case reflenums::clang__NamespaceAliasDecl::CreateDeserialized:
      return toClientReflType<class clang::NamespaceAliasDecl *>(C);
    case reflenums::clang__NamespaceAliasDecl::CreateDeserialized:
      return toClientReflType<class clang::NamespaceAliasDecl *>(C);
    case reflenums::clang__NamespaceAliasDecl::CreateDeserialized:
      return toClientReflType<class clang::NamespaceAliasDecl *>(C);
    case reflenums::clang__NamespaceAliasDecl::CreateDeserialized:
      return toClientReflType<class clang::NamespaceAliasDecl *>(C);
    case reflenums::clang__NamespaceAliasDecl::CreateDeserialized:
      return toClientReflType<class clang::NamespaceAliasDecl *>(C);
    case reflenums::clang__NamespaceAliasDecl::CreateDeserialized:
      return toClientReflType<class clang::NamespaceAliasDecl *>(C);
    case reflenums::clang__NamespaceAliasDecl::getCanonicalDecl:
      return toClientReflType<const class clang::NamespaceAliasDecl *>(C);
    case reflenums::clang__NamespaceAliasDecl::getQualifierLoc:
      return toClientReflType<class clang::NestedNameSpecifierLoc>(C);
    case reflenums::clang__NamespaceAliasDecl::getQualifier:
      return toClientReflType<class clang::NestedNameSpecifier *>(C);
    case reflenums::clang__NamespaceAliasDecl::getQualifier:
      return toClientReflType<class clang::NestedNameSpecifier *>(C);
    case reflenums::clang__NamespaceAliasDecl::getNamespace:
      return toClientReflType<const class clang::NamespaceDecl *>(C);
    case reflenums::clang__NamespaceAliasDecl::getAliasLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__NamespaceAliasDecl::getNamespaceLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__NamespaceAliasDecl::getTargetNameLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__NamespaceAliasDecl::getAliasedNamespace:
      return toClientReflType<class clang::NamedDecl *>(C);
    case reflenums::clang__NamespaceAliasDecl::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__NamespaceAliasDecl::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__NamespaceAliasDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__NamespaceAliasDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__NamespaceAliasDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__NamespaceAliasDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__NamespaceAliasDecl::classofKind:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__UsingShadowDecl:
  switch (static_cast<reflenums::clang__UsingShadowDecl::memnames>(MemNum)) {
    case reflenums::clang__UsingShadowDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__UsingShadowDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__UsingShadowDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__UsingShadowDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__UsingShadowDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__UsingShadowDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__UsingShadowDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__UsingShadowDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__UsingShadowDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__UsingShadowDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__UsingShadowDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__UsingShadowDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__UsingShadowDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__UsingShadowDecl::getPreviousDecl:
      return toClientReflType<const class clang::UsingShadowDecl *>(C);
    case reflenums::clang__UsingShadowDecl::getPreviousDecl:
      return toClientReflType<const class clang::UsingShadowDecl *>(C);
    case reflenums::clang__UsingShadowDecl::getFirstDecl:
      return toClientReflType<const class clang::UsingShadowDecl *>(C);
    case reflenums::clang__UsingShadowDecl::getFirstDecl:
      return toClientReflType<const class clang::UsingShadowDecl *>(C);
    case reflenums::clang__UsingShadowDecl::getFirstDecl:
      return toClientReflType<const class clang::UsingShadowDecl *>(C);
    case reflenums::clang__UsingShadowDecl::getMostRecentDecl:
      return toClientReflType<const class clang::UsingShadowDecl *>(C);
    case reflenums::clang__UsingShadowDecl::getMostRecentDecl:
      return toClientReflType<const class clang::UsingShadowDecl *>(C);
    case reflenums::clang__UsingShadowDecl::getMostRecentDecl:
      return toClientReflType<const class clang::UsingShadowDecl *>(C);
    case reflenums::clang__UsingShadowDecl::getMostRecentDecl:
      return toClientReflType<const class clang::UsingShadowDecl *>(C);
    case reflenums::clang__UsingShadowDecl::getMostRecentDecl:
      return toClientReflType<const class clang::UsingShadowDecl *>(C);
    case reflenums::clang__UsingShadowDecl::getMostRecentDecl:
      return toClientReflType<const class clang::UsingShadowDecl *>(C);
    case reflenums::clang__UsingShadowDecl::getMostRecentDecl:
      return toClientReflType<const class clang::UsingShadowDecl *>(C);
    case reflenums::clang__UsingShadowDecl::getMostRecentDecl:
      return toClientReflType<const class clang::UsingShadowDecl *>(C);
    case reflenums::clang__UsingShadowDecl::getMostRecentDecl:
      return toClientReflType<const class clang::UsingShadowDecl *>(C);
    case reflenums::clang__UsingShadowDecl::getMostRecentDecl:
      return toClientReflType<const class clang::UsingShadowDecl *>(C);
    case reflenums::clang__UsingShadowDecl::getMostRecentDecl:
      return toClientReflType<const class clang::UsingShadowDecl *>(C);
    case reflenums::clang__UsingShadowDecl::getMostRecentDecl:
      return toClientReflType<const class clang::UsingShadowDecl *>(C);
    case reflenums::clang__UsingShadowDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__UsingShadowDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__UsingShadowDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__UsingShadowDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__UsingShadowDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__UsingShadowDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__UsingShadowDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__UsingShadowDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__UsingShadowDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__UsingShadowDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__UsingShadowDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__UsingShadowDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__UsingShadowDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__UsingShadowDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__UsingShadowDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__UsingShadowDecl::Create:
      return toClientReflType<class clang::UsingShadowDecl *>(C);
    case reflenums::clang__UsingShadowDecl::CreateDeserialized:
      return toClientReflType<class clang::UsingShadowDecl *>(C);
    case reflenums::clang__UsingShadowDecl::CreateDeserialized:
      return toClientReflType<class clang::UsingShadowDecl *>(C);
    case reflenums::clang__UsingShadowDecl::CreateDeserialized:
      return toClientReflType<class clang::UsingShadowDecl *>(C);
    case reflenums::clang__UsingShadowDecl::CreateDeserialized:
      return toClientReflType<class clang::UsingShadowDecl *>(C);
    case reflenums::clang__UsingShadowDecl::CreateDeserialized:
      return toClientReflType<class clang::UsingShadowDecl *>(C);
    case reflenums::clang__UsingShadowDecl::CreateDeserialized:
      return toClientReflType<class clang::UsingShadowDecl *>(C);
    case reflenums::clang__UsingShadowDecl::CreateDeserialized:
      return toClientReflType<class clang::UsingShadowDecl *>(C);
    case reflenums::clang__UsingShadowDecl::CreateDeserialized:
      return toClientReflType<class clang::UsingShadowDecl *>(C);
    case reflenums::clang__UsingShadowDecl::CreateDeserialized:
      return toClientReflType<class clang::UsingShadowDecl *>(C);
    case reflenums::clang__UsingShadowDecl::CreateDeserialized:
      return toClientReflType<class clang::UsingShadowDecl *>(C);
    case reflenums::clang__UsingShadowDecl::CreateDeserialized:
      return toClientReflType<class clang::UsingShadowDecl *>(C);
    case reflenums::clang__UsingShadowDecl::CreateDeserialized:
      return toClientReflType<class clang::UsingShadowDecl *>(C);
    case reflenums::clang__UsingShadowDecl::CreateDeserialized:
      return toClientReflType<class clang::UsingShadowDecl *>(C);
    case reflenums::clang__UsingShadowDecl::CreateDeserialized:
      return toClientReflType<class clang::UsingShadowDecl *>(C);
    case reflenums::clang__UsingShadowDecl::CreateDeserialized:
      return toClientReflType<class clang::UsingShadowDecl *>(C);
    case reflenums::clang__UsingShadowDecl::CreateDeserialized:
      return toClientReflType<class clang::UsingShadowDecl *>(C);
    case reflenums::clang__UsingShadowDecl::CreateDeserialized:
      return toClientReflType<class clang::UsingShadowDecl *>(C);
    case reflenums::clang__UsingShadowDecl::CreateDeserialized:
      return toClientReflType<class clang::UsingShadowDecl *>(C);
    case reflenums::clang__UsingShadowDecl::getCanonicalDecl:
      return toClientReflType<const class clang::UsingShadowDecl *>(C);
    case reflenums::clang__UsingShadowDecl::getTargetDecl:
      return toClientReflType<class clang::NamedDecl *>(C);
    case reflenums::clang__UsingShadowDecl::getTargetDecl:
      return toClientReflType<class clang::NamedDecl *>(C);
    case reflenums::clang__UsingShadowDecl::getUsingDecl:
      return toClientReflType<class clang::UsingDecl *>(C);
    case reflenums::clang__UsingShadowDecl::getNextUsingShadowDecl:
      return toClientReflType<class clang::UsingShadowDecl *>(C);
    case reflenums::clang__UsingShadowDecl::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__UsingShadowDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__UsingShadowDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__UsingShadowDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__UsingShadowDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__UsingShadowDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__UsingShadowDecl::classofKind:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__ConstructorUsingShadowDecl:
  switch (static_cast<reflenums::clang__ConstructorUsingShadowDecl::memnames>(MemNum)) {
    case reflenums::clang__ConstructorUsingShadowDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ConstructorUsingShadowDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ConstructorUsingShadowDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ConstructorUsingShadowDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ConstructorUsingShadowDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ConstructorUsingShadowDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ConstructorUsingShadowDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ConstructorUsingShadowDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ConstructorUsingShadowDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ConstructorUsingShadowDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ConstructorUsingShadowDecl::Create:
      return toClientReflType<class clang::ConstructorUsingShadowDecl *>(C);
    case reflenums::clang__ConstructorUsingShadowDecl::CreateDeserialized:
      return toClientReflType<class clang::ConstructorUsingShadowDecl *>(C);
    case reflenums::clang__ConstructorUsingShadowDecl::getParent:
      return toClientReflType<const class clang::CXXRecordDecl *>(C);
    case reflenums::clang__ConstructorUsingShadowDecl::getParent:
      return toClientReflType<const class clang::CXXRecordDecl *>(C);
    case reflenums::clang__ConstructorUsingShadowDecl::getNominatedBaseClassShadowDecl:
      return toClientReflType<class clang::ConstructorUsingShadowDecl *>(C);
    case reflenums::clang__ConstructorUsingShadowDecl::getConstructedBaseClassShadowDecl:
      return toClientReflType<class clang::ConstructorUsingShadowDecl *>(C);
    case reflenums::clang__ConstructorUsingShadowDecl::getNominatedBaseClass:
      return toClientReflType<class clang::CXXRecordDecl *>(C);
    case reflenums::clang__ConstructorUsingShadowDecl::getConstructedBaseClass:
      return toClientReflType<class clang::CXXRecordDecl *>(C);
    case reflenums::clang__ConstructorUsingShadowDecl::constructsVirtualBase:
      return toClientReflType<bool>(C);
    case reflenums::clang__ConstructorUsingShadowDecl::getConstructor:
      return toClientReflType<class clang::CXXConstructorDecl *>(C);
    case reflenums::clang__ConstructorUsingShadowDecl::getConstructor:
      return toClientReflType<class clang::CXXConstructorDecl *>(C);
    case reflenums::clang__ConstructorUsingShadowDecl::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ConstructorUsingShadowDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ConstructorUsingShadowDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ConstructorUsingShadowDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ConstructorUsingShadowDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ConstructorUsingShadowDecl::classofKind:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__UsingDecl:
  switch (static_cast<reflenums::clang__UsingDecl::memnames>(MemNum)) {
    case reflenums::clang__UsingDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__UsingDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__UsingDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__UsingDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__UsingDecl::getFirstDecl:
      return toClientReflType<const class clang::UsingDecl *>(C);
    case reflenums::clang__UsingDecl::getFirstDecl:
      return toClientReflType<const class clang::UsingDecl *>(C);
    case reflenums::clang__UsingDecl::getFirstDecl:
      return toClientReflType<const class clang::UsingDecl *>(C);
    case reflenums::clang__UsingDecl::getFirstDecl:
      return toClientReflType<const class clang::UsingDecl *>(C);
    case reflenums::clang__UsingDecl::getFirstDecl:
      return toClientReflType<const class clang::UsingDecl *>(C);
    case reflenums::clang__UsingDecl::getFirstDecl:
      return toClientReflType<const class clang::UsingDecl *>(C);
    case reflenums::clang__UsingDecl::getFirstDecl:
      return toClientReflType<const class clang::UsingDecl *>(C);
    case reflenums::clang__UsingDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__UsingDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__UsingDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__UsingDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__UsingDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__UsingDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__UsingDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__UsingDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__UsingDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__UsingDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__UsingDecl::getUsingLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__UsingDecl::getUsingLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__UsingDecl::getQualifierLoc:
      return toClientReflType<class clang::NestedNameSpecifierLoc>(C);
    case reflenums::clang__UsingDecl::getQualifier:
      return toClientReflType<class clang::NestedNameSpecifier *>(C);
    case reflenums::clang__UsingDecl::getNameInfo:
      return toClientReflType<struct clang::DeclarationNameInfo>(C);
    case reflenums::clang__UsingDecl::isAccessDeclaration:
      return toClientReflType<bool>(C);
    case reflenums::clang__UsingDecl::hasTypename:
      return toClientReflType<bool>(C);
    case reflenums::clang__UsingDecl::hasTypename:
      return toClientReflType<bool>(C);
    case reflenums::clang__UsingDecl::hasTypename:
      return toClientReflType<bool>(C);
    case reflenums::clang__UsingDecl::hasTypename:
      return toClientReflType<bool>(C);
    case reflenums::clang__UsingDecl::shadows:
      return toClientReflType<class llvm::iterator_range<class clang::UsingDecl::shadow_iterator>>(C);
    case reflenums::clang__UsingDecl::shadows:
      return toClientReflType<class llvm::iterator_range<class clang::UsingDecl::shadow_iterator>>(C);
    case reflenums::clang__UsingDecl::shadows:
      return toClientReflType<class llvm::iterator_range<class clang::UsingDecl::shadow_iterator>>(C);
    case reflenums::clang__UsingDecl::shadow_size:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__UsingDecl::shadow_size:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__UsingDecl::shadow_size:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__UsingDecl::Create:
      return toClientReflType<class clang::UsingDecl *>(C);
    case reflenums::clang__UsingDecl::CreateDeserialized:
      return toClientReflType<class clang::UsingDecl *>(C);
    case reflenums::clang__UsingDecl::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__UsingDecl::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__UsingDecl::getCanonicalDecl:
      return toClientReflType<const class clang::UsingDecl *>(C);
    case reflenums::clang__UsingDecl::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__UsingDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__UsingDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__UsingDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__UsingDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__UsingDecl::classofKind:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__UsingPackDecl:
  switch (static_cast<reflenums::clang__UsingPackDecl::memnames>(MemNum)) {
    case reflenums::clang__UsingPackDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__UsingPackDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__UsingPackDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__UsingPackDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__UsingPackDecl::getFirstDecl:
      return toClientReflType<const class clang::UsingPackDecl *>(C);
    case reflenums::clang__UsingPackDecl::getFirstDecl:
      return toClientReflType<const class clang::UsingPackDecl *>(C);
    case reflenums::clang__UsingPackDecl::getFirstDecl:
      return toClientReflType<const class clang::UsingPackDecl *>(C);
    case reflenums::clang__UsingPackDecl::getFirstDecl:
      return toClientReflType<const class clang::UsingPackDecl *>(C);
    case reflenums::clang__UsingPackDecl::getFirstDecl:
      return toClientReflType<const class clang::UsingPackDecl *>(C);
    case reflenums::clang__UsingPackDecl::getFirstDecl:
      return toClientReflType<const class clang::UsingPackDecl *>(C);
    case reflenums::clang__UsingPackDecl::getFirstDecl:
      return toClientReflType<const class clang::UsingPackDecl *>(C);
    case reflenums::clang__UsingPackDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__UsingPackDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__UsingPackDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__UsingPackDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__UsingPackDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__UsingPackDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__UsingPackDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__UsingPackDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__UsingPackDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__UsingPackDecl::getInstantiatedFromUsingDecl:
      return toClientReflType<class clang::NamedDecl *>(C);
    case reflenums::clang__UsingPackDecl::expansions:
      return toClientReflType<class llvm::ArrayRef<class clang::NamedDecl *>>(C);
    case reflenums::clang__UsingPackDecl::expansions:
      return toClientReflType<class llvm::ArrayRef<class clang::NamedDecl *>>(C);
    case reflenums::clang__UsingPackDecl::CreateDeserialized:
      return toClientReflType<class clang::UsingPackDecl *>(C);
    case reflenums::clang__UsingPackDecl::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__UsingPackDecl::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__UsingPackDecl::getCanonicalDecl:
      return toClientReflType<const class clang::UsingPackDecl *>(C);
    case reflenums::clang__UsingPackDecl::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__UsingPackDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__UsingPackDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__UsingPackDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__UsingPackDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__UsingPackDecl::classofKind:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__UnresolvedUsingValueDecl:
  switch (static_cast<reflenums::clang__UnresolvedUsingValueDecl::memnames>(MemNum)) {
    case reflenums::clang__UnresolvedUsingValueDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedUsingValueDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedUsingValueDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedUsingValueDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedUsingValueDecl::getFirstDecl:
      return toClientReflType<const class clang::UnresolvedUsingValueDecl *>(C);
    case reflenums::clang__UnresolvedUsingValueDecl::getFirstDecl:
      return toClientReflType<const class clang::UnresolvedUsingValueDecl *>(C);
    case reflenums::clang__UnresolvedUsingValueDecl::getFirstDecl:
      return toClientReflType<const class clang::UnresolvedUsingValueDecl *>(C);
    case reflenums::clang__UnresolvedUsingValueDecl::getFirstDecl:
      return toClientReflType<const class clang::UnresolvedUsingValueDecl *>(C);
    case reflenums::clang__UnresolvedUsingValueDecl::getFirstDecl:
      return toClientReflType<const class clang::UnresolvedUsingValueDecl *>(C);
    case reflenums::clang__UnresolvedUsingValueDecl::getFirstDecl:
      return toClientReflType<const class clang::UnresolvedUsingValueDecl *>(C);
    case reflenums::clang__UnresolvedUsingValueDecl::getFirstDecl:
      return toClientReflType<const class clang::UnresolvedUsingValueDecl *>(C);
    case reflenums::clang__UnresolvedUsingValueDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedUsingValueDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedUsingValueDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedUsingValueDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedUsingValueDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedUsingValueDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedUsingValueDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedUsingValueDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedUsingValueDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedUsingValueDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedUsingValueDecl::getUsingLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__UnresolvedUsingValueDecl::getUsingLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__UnresolvedUsingValueDecl::isAccessDeclaration:
      return toClientReflType<bool>(C);
    case reflenums::clang__UnresolvedUsingValueDecl::getQualifierLoc:
      return toClientReflType<class clang::NestedNameSpecifierLoc>(C);
    case reflenums::clang__UnresolvedUsingValueDecl::getQualifier:
      return toClientReflType<class clang::NestedNameSpecifier *>(C);
    case reflenums::clang__UnresolvedUsingValueDecl::getNameInfo:
      return toClientReflType<struct clang::DeclarationNameInfo>(C);
    case reflenums::clang__UnresolvedUsingValueDecl::isPackExpansion:
      return toClientReflType<bool>(C);
    case reflenums::clang__UnresolvedUsingValueDecl::getEllipsisLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__UnresolvedUsingValueDecl::Create:
      return toClientReflType<class clang::UnresolvedUsingValueDecl *>(C);
    case reflenums::clang__UnresolvedUsingValueDecl::CreateDeserialized:
      return toClientReflType<class clang::UnresolvedUsingValueDecl *>(C);
    case reflenums::clang__UnresolvedUsingValueDecl::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__UnresolvedUsingValueDecl::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__UnresolvedUsingValueDecl::getCanonicalDecl:
      return toClientReflType<const class clang::UnresolvedUsingValueDecl *>(C);
    case reflenums::clang__UnresolvedUsingValueDecl::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__UnresolvedUsingValueDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__UnresolvedUsingValueDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__UnresolvedUsingValueDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__UnresolvedUsingValueDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__UnresolvedUsingValueDecl::classofKind:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__UnresolvedUsingTypenameDecl:
  switch (static_cast<reflenums::clang__UnresolvedUsingTypenameDecl::memnames>(MemNum)) {
    case reflenums::clang__UnresolvedUsingTypenameDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedUsingTypenameDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedUsingTypenameDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedUsingTypenameDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedUsingTypenameDecl::getFirstDecl:
      return toClientReflType<const class clang::UnresolvedUsingTypenameDecl *>(C);
    case reflenums::clang__UnresolvedUsingTypenameDecl::getFirstDecl:
      return toClientReflType<const class clang::UnresolvedUsingTypenameDecl *>(C);
    case reflenums::clang__UnresolvedUsingTypenameDecl::getFirstDecl:
      return toClientReflType<const class clang::UnresolvedUsingTypenameDecl *>(C);
    case reflenums::clang__UnresolvedUsingTypenameDecl::getFirstDecl:
      return toClientReflType<const class clang::UnresolvedUsingTypenameDecl *>(C);
    case reflenums::clang__UnresolvedUsingTypenameDecl::getFirstDecl:
      return toClientReflType<const class clang::UnresolvedUsingTypenameDecl *>(C);
    case reflenums::clang__UnresolvedUsingTypenameDecl::getFirstDecl:
      return toClientReflType<const class clang::UnresolvedUsingTypenameDecl *>(C);
    case reflenums::clang__UnresolvedUsingTypenameDecl::getFirstDecl:
      return toClientReflType<const class clang::UnresolvedUsingTypenameDecl *>(C);
    case reflenums::clang__UnresolvedUsingTypenameDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedUsingTypenameDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedUsingTypenameDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedUsingTypenameDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedUsingTypenameDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedUsingTypenameDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedUsingTypenameDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedUsingTypenameDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedUsingTypenameDecl::getUsingLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__UnresolvedUsingTypenameDecl::getTypenameLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__UnresolvedUsingTypenameDecl::getQualifierLoc:
      return toClientReflType<class clang::NestedNameSpecifierLoc>(C);
    case reflenums::clang__UnresolvedUsingTypenameDecl::getQualifier:
      return toClientReflType<class clang::NestedNameSpecifier *>(C);
    case reflenums::clang__UnresolvedUsingTypenameDecl::getNameInfo:
      return toClientReflType<struct clang::DeclarationNameInfo>(C);
    case reflenums::clang__UnresolvedUsingTypenameDecl::isPackExpansion:
      return toClientReflType<bool>(C);
    case reflenums::clang__UnresolvedUsingTypenameDecl::getEllipsisLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__UnresolvedUsingTypenameDecl::Create:
      return toClientReflType<class clang::UnresolvedUsingTypenameDecl *>(C);
    case reflenums::clang__UnresolvedUsingTypenameDecl::CreateDeserialized:
      return toClientReflType<class clang::UnresolvedUsingTypenameDecl *>(C);
    case reflenums::clang__UnresolvedUsingTypenameDecl::CreateDeserialized:
      return toClientReflType<class clang::UnresolvedUsingTypenameDecl *>(C);
    case reflenums::clang__UnresolvedUsingTypenameDecl::getCanonicalDecl:
      return toClientReflType<const class clang::UnresolvedUsingTypenameDecl *>(C);
    case reflenums::clang__UnresolvedUsingTypenameDecl::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__UnresolvedUsingTypenameDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__UnresolvedUsingTypenameDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__UnresolvedUsingTypenameDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__UnresolvedUsingTypenameDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__UnresolvedUsingTypenameDecl::classofKind:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__StaticAssertDecl:
  switch (static_cast<reflenums::clang__StaticAssertDecl::memnames>(MemNum)) {
    case reflenums::clang__StaticAssertDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__StaticAssertDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__StaticAssertDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__StaticAssertDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__StaticAssertDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__StaticAssertDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__StaticAssertDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__StaticAssertDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__StaticAssertDecl::Create:
      return toClientReflType<class clang::StaticAssertDecl *>(C);
    case reflenums::clang__StaticAssertDecl::CreateDeserialized:
      return toClientReflType<class clang::StaticAssertDecl *>(C);
    case reflenums::clang__StaticAssertDecl::CreateDeserialized:
      return toClientReflType<class clang::StaticAssertDecl *>(C);
    case reflenums::clang__StaticAssertDecl::getAssertExpr:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__StaticAssertDecl::getAssertExpr:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__StaticAssertDecl::getMessage:
      return toClientReflType<const class clang::StringLiteral *>(C);
    case reflenums::clang__StaticAssertDecl::isFailed:
      return toClientReflType<bool>(C);
    case reflenums::clang__StaticAssertDecl::getRParenLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__StaticAssertDecl::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__StaticAssertDecl::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__StaticAssertDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__StaticAssertDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__StaticAssertDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__StaticAssertDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__StaticAssertDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__StaticAssertDecl::classofKind:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__BindingDecl:
  switch (static_cast<reflenums::clang__BindingDecl::memnames>(MemNum)) {
    case reflenums::clang__BindingDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__BindingDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__BindingDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__BindingDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__BindingDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__BindingDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__BindingDecl::Create:
      return toClientReflType<class clang::BindingDecl *>(C);
    case reflenums::clang__BindingDecl::CreateDeserialized:
      return toClientReflType<class clang::BindingDecl *>(C);
    case reflenums::clang__BindingDecl::getBinding:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__BindingDecl::getHoldingVar:
      return toClientReflType<class clang::VarDecl *>(C);
    case reflenums::clang__BindingDecl::getHoldingVar:
      return toClientReflType<class clang::VarDecl *>(C);
    case reflenums::clang__BindingDecl::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__BindingDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__BindingDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__BindingDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__BindingDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__BindingDecl::classofKind:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__DecompositionDecl:
  switch (static_cast<reflenums::clang__DecompositionDecl::memnames>(MemNum)) {
    case reflenums::clang__DecompositionDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__DecompositionDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__DecompositionDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__DecompositionDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__DecompositionDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__DecompositionDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__DecompositionDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__DecompositionDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__DecompositionDecl::CreateDeserialized:
      return toClientReflType<class clang::DecompositionDecl *>(C);
    case reflenums::clang__DecompositionDecl::bindings:
      return toClientReflType<class llvm::ArrayRef<class clang::BindingDecl *>>(C);
    case reflenums::clang__DecompositionDecl::printName:
      return toClientReflType<void>(C);
    case reflenums::clang__DecompositionDecl::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__DecompositionDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__DecompositionDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__DecompositionDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__DecompositionDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__DecompositionDecl::classofKind:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__MSPropertyDecl:
  switch (static_cast<reflenums::clang__MSPropertyDecl::memnames>(MemNum)) {
    case reflenums::clang__MSPropertyDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__MSPropertyDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__MSPropertyDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__MSPropertyDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__MSPropertyDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__MSPropertyDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__MSPropertyDecl::Create:
      return toClientReflType<class clang::MSPropertyDecl *>(C);
    case reflenums::clang__MSPropertyDecl::CreateDeserialized:
      return toClientReflType<class clang::MSPropertyDecl *>(C);
    case reflenums::clang__MSPropertyDecl::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__MSPropertyDecl::hasGetter:
      return toClientReflType<bool>(C);
    case reflenums::clang__MSPropertyDecl::getGetterId:
      return toClientReflType<class clang::IdentifierInfo *>(C);
    case reflenums::clang__MSPropertyDecl::hasSetter:
      return toClientReflType<bool>(C);
    case reflenums::clang__MSPropertyDecl::getSetterId:
      return toClientReflType<class clang::IdentifierInfo *>(C);
    case reflenums::clang__MSPropertyDecl::getSetterId:
      return toClientReflType<class clang::IdentifierInfo *>(C);
    case reflenums::clang__MSPropertyDecl::getSetterId:
      return toClientReflType<class clang::IdentifierInfo *>(C);
    case reflenums::clang__MSPropertyDecl::getSetterId:
      return toClientReflType<class clang::IdentifierInfo *>(C);
    case reflenums::clang__MSPropertyDecl::getSetterId:
      return toClientReflType<class clang::IdentifierInfo *>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__ConstexprDecl:
  switch (static_cast<reflenums::clang__ConstexprDecl::memnames>(MemNum)) {
    case reflenums::clang__ConstexprDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ConstexprDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ConstexprDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ConstexprDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ConstexprDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ConstexprDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ConstexprDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ConstexprDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ConstexprDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ConstexprDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ConstexprDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ConstexprDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ConstexprDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ConstexprDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ConstexprDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ConstexprDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ConstexprDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ConstexprDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ConstexprDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ConstexprDecl::getLambdaExpr:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__ConstexprDecl::getLambdaExpr:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__ConstexprDecl::isDependent:
      return toClientReflType<bool>(C);
    case reflenums::clang__ConstexprDecl::isDependent:
      return toClientReflType<bool>(C);
    case reflenums::clang__ConstexprDecl::CreateDeserialized:
      return toClientReflType<class clang::ConstexprDecl *>(C);
    case reflenums::clang__ConstexprDecl::hasFunctionRepresentation:
      return toClientReflType<bool>(C);
    case reflenums::clang__ConstexprDecl::hasLambdaRepresentation:
      return toClientReflType<bool>(C);
    case reflenums::clang__ConstexprDecl::getFunctionDecl:
      return toClientReflType<class clang::FunctionDecl *>(C);
    case reflenums::clang__ConstexprDecl::getClosureDecl:
      return toClientReflType<class clang::CXXRecordDecl *>(C);
    case reflenums::clang__ConstexprDecl::getClosureCallOperator:
      return toClientReflType<class clang::CXXMethodDecl *>(C);
    case reflenums::clang__ConstexprDecl::hasBody:
      return toClientReflType<bool>(C);
    case reflenums::clang__ConstexprDecl::getBody:
      return toClientReflType<class clang::Stmt *>(C);
    case reflenums::clang__ConstexprDecl::getCallExpr:
      return toClientReflType<class clang::CallExpr *>(C);
    case reflenums::clang__ConstexprDecl::getCallExpr:
      return toClientReflType<class clang::CallExpr *>(C);
    case reflenums::clang__ConstexprDecl::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__ConstexprDecl::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ConstexprDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ConstexprDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ConstexprDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ConstexprDecl::classofKind:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__TemplateParameterList:
  switch (static_cast<reflenums::clang__TemplateParameterList::memnames>(MemNum)) {
    case reflenums::clang__TemplateParameterList::_this_:
      if (IsPtr)
        return toClientReflType<clang::TemplateParameterList *>(C);
      return toClientReflType<clang::TemplateParameterList>(C);
    case reflenums::clang__TemplateParameterList:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateParameterList:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateParameterList:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateParameterList:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateParameterList:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateParameterList:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateParameterList:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateParameterList:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateParameterList:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateParameterList:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateParameterList:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateParameterList:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateParameterList:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateParameterList:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateParameterList:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateParameterList:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateParameterList:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateParameterList:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateParameterList:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateParameterList:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateParameterList:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateParameterList::size:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__TemplateParameterList::size:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__TemplateParameterList::asArray:
      return toClientReflType<class llvm::ArrayRef<const class clang::NamedDecl *>>(C);
    case reflenums::clang__TemplateParameterList::asArray:
      return toClientReflType<class llvm::ArrayRef<const class clang::NamedDecl *>>(C);
    case reflenums::clang__TemplateParameterList::getParam:
      return toClientReflType<const class clang::NamedDecl *>(C);
    case reflenums::clang__TemplateParameterList::getMinRequiredArguments:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__TemplateParameterList::getDepth:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__TemplateParameterList::containsUnexpandedParameterPack:
      return toClientReflType<bool>(C);
    case reflenums::clang__TemplateParameterList::containsUnexpandedParameterPack:
      return toClientReflType<bool>(C);
    case reflenums::clang__TemplateParameterList::getRequiresClause:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__TemplateParameterList::getTemplateLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__TemplateParameterList::getLAngleLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__TemplateParameterList::getRAngleLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__TemplateParameterList::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__TemplateParameterList::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__TemplateParameterList::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__TemplateParameterList::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__TemplateParameterList::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__TemplateArgumentList:
  switch (static_cast<reflenums::clang__TemplateArgumentList::memnames>(MemNum)) {
    case reflenums::clang__TemplateArgumentList:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateArgumentList:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateArgumentList:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateArgumentList:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateArgumentList:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateArgumentList:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateArgumentList:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateArgumentList:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateArgumentList:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateArgumentList:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateArgumentList:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateArgumentList:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateArgumentList::get:
      return toClientReflType<const class clang::TemplateArgument &>(C);
    case reflenums::clang__TemplateArgumentList::operator_sub:
      return toClientReflType<const class clang::TemplateArgument &>(C);
    case reflenums::clang__TemplateArgumentList::asArray:
      return toClientReflType<class llvm::ArrayRef<class clang::TemplateArgument>>(C);
    case reflenums::clang__TemplateArgumentList::size:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__TemplateArgumentList::data:
      return toClientReflType<const class clang::TemplateArgument *>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__TemplateDecl:
  switch (static_cast<reflenums::clang__TemplateDecl::memnames>(MemNum)) {
    case reflenums::clang__TemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateDecl::getTemplateParameters:
      return toClientReflType<class clang::TemplateParameterList *>(C);
    case reflenums::clang__TemplateDecl::getRequiresClause:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__TemplateDecl::getAssociatedConstraints:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__TemplateDecl::getTemplatedDecl:
      return toClientReflType<class clang::NamedDecl *>(C);
    case reflenums::clang__TemplateDecl::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__TemplateDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__TemplateDecl::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__TemplateDecl::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__TemplateDecl::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__TemplateDecl::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__TemplateDecl::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__TemplateDecl::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__TemplateDecl::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__TemplateDecl::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__TemplateDecl::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__TemplateDecl::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__TemplateDecl::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__TemplateDecl::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__TemplateDecl::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__FunctionTemplateSpecializationInfo:
  switch (static_cast<reflenums::clang__FunctionTemplateSpecializationInfo::memnames>(MemNum)) {
    case reflenums::clang__FunctionTemplateSpecializationInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionTemplateSpecializationInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionTemplateSpecializationInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionTemplateSpecializationInfo::Create:
      return toClientReflType<class clang::FunctionTemplateSpecializationInfo *>(C);
    case reflenums::clang__FunctionTemplateSpecializationInfo::Function:
      return toClientReflType<class clang::FunctionDecl *>(C);
    case reflenums::clang__FunctionTemplateSpecializationInfo::Function:
      return toClientReflType<class clang::FunctionDecl *>(C);
    case reflenums::clang__FunctionTemplateSpecializationInfo::TemplateArguments:
      return toClientReflType<const class clang::TemplateArgumentList *>(C);
    case reflenums::clang__FunctionTemplateSpecializationInfo::TemplateArgumentsAsWritten:
      return toClientReflType<const struct clang::ASTTemplateArgumentListInfo *>(C);
    case reflenums::clang__FunctionTemplateSpecializationInfo::PointOfInstantiation:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__FunctionTemplateSpecializationInfo::getTemplate:
      return toClientReflType<class clang::FunctionTemplateDecl *>(C);
    case reflenums::clang__FunctionTemplateSpecializationInfo::getTemplateSpecializationKind:
      return toClientReflType<enum clang::TemplateSpecializationKind>(C);
    case reflenums::clang__FunctionTemplateSpecializationInfo::isExplicitSpecialization:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionTemplateSpecializationInfo::isExplicitInstantiationOrSpecialization:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionTemplateSpecializationInfo::isExplicitInstantiationOrSpecialization:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionTemplateSpecializationInfo::getPointOfInstantiation:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__FunctionTemplateSpecializationInfo::getPointOfInstantiation:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__FunctionTemplateSpecializationInfo::getPointOfInstantiation:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__FunctionTemplateSpecializationInfo::getPointOfInstantiation:
      return toClientReflType<class clang::SourceLocation>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__MemberSpecializationInfo:
  switch (static_cast<reflenums::clang__MemberSpecializationInfo::memnames>(MemNum)) {
    case reflenums::clang__MemberSpecializationInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__MemberSpecializationInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__MemberSpecializationInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__MemberSpecializationInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__MemberSpecializationInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__MemberSpecializationInfo::getInstantiatedFrom:
      return toClientReflType<class clang::NamedDecl *>(C);
    case reflenums::clang__MemberSpecializationInfo::getTemplateSpecializationKind:
      return toClientReflType<enum clang::TemplateSpecializationKind>(C);
    case reflenums::clang__MemberSpecializationInfo::isExplicitSpecialization:
      return toClientReflType<bool>(C);
    case reflenums::clang__MemberSpecializationInfo::isExplicitSpecialization:
      return toClientReflType<bool>(C);
    case reflenums::clang__MemberSpecializationInfo::getPointOfInstantiation:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__MemberSpecializationInfo::getPointOfInstantiation:
      return toClientReflType<class clang::SourceLocation>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__DependentFunctionTemplateSpecializationInfo:
  switch (static_cast<reflenums::clang__DependentFunctionTemplateSpecializationInfo::memnames>(MemNum)) {
    case reflenums::clang__DependentFunctionTemplateSpecializationInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__DependentFunctionTemplateSpecializationInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__DependentFunctionTemplateSpecializationInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__DependentFunctionTemplateSpecializationInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__DependentFunctionTemplateSpecializationInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__DependentFunctionTemplateSpecializationInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__DependentFunctionTemplateSpecializationInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__DependentFunctionTemplateSpecializationInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__DependentFunctionTemplateSpecializationInfo:::
      return toClientReflType<>(C);
    case reflenums::clang__DependentFunctionTemplateSpecializationInfo::Create:
      return toClientReflType<class clang::DependentFunctionTemplateSpecializationInfo *>(C);
    case reflenums::clang__DependentFunctionTemplateSpecializationInfo::getNumTemplates:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__DependentFunctionTemplateSpecializationInfo::getTemplate:
      return toClientReflType<class clang::FunctionTemplateDecl *>(C);
    case reflenums::clang__DependentFunctionTemplateSpecializationInfo::getTemplateArgs:
      return toClientReflType<const class clang::TemplateArgumentLoc *>(C);
    case reflenums::clang__DependentFunctionTemplateSpecializationInfo::getNumTemplateArgs:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__DependentFunctionTemplateSpecializationInfo::getTemplateArg:
      return toClientReflType<const class clang::TemplateArgumentLoc &>(C);
    case reflenums::clang__DependentFunctionTemplateSpecializationInfo::getLAngleLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__DependentFunctionTemplateSpecializationInfo::getRAngleLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__RedeclarableTemplateDecl:
  switch (static_cast<reflenums::clang__RedeclarableTemplateDecl::memnames>(MemNum)) {
    case reflenums::clang__RedeclarableTemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__RedeclarableTemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__RedeclarableTemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__RedeclarableTemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__RedeclarableTemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__RedeclarableTemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__RedeclarableTemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__RedeclarableTemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__RedeclarableTemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__RedeclarableTemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__RedeclarableTemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__RedeclarableTemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__RedeclarableTemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__RedeclarableTemplateDecl::getPreviousDecl:
      return toClientReflType<const class clang::RedeclarableTemplateDecl *>(C);
    case reflenums::clang__RedeclarableTemplateDecl::getPreviousDecl:
      return toClientReflType<const class clang::RedeclarableTemplateDecl *>(C);
    case reflenums::clang__RedeclarableTemplateDecl::getFirstDecl:
      return toClientReflType<const class clang::RedeclarableTemplateDecl *>(C);
    case reflenums::clang__RedeclarableTemplateDecl::getFirstDecl:
      return toClientReflType<const class clang::RedeclarableTemplateDecl *>(C);
    case reflenums::clang__RedeclarableTemplateDecl::getFirstDecl:
      return toClientReflType<const class clang::RedeclarableTemplateDecl *>(C);
    case reflenums::clang__RedeclarableTemplateDecl::getMostRecentDecl:
      return toClientReflType<const class clang::RedeclarableTemplateDecl *>(C);
    case reflenums::clang__RedeclarableTemplateDecl::getMostRecentDecl:
      return toClientReflType<const class clang::RedeclarableTemplateDecl *>(C);
    case reflenums::clang__RedeclarableTemplateDecl::getMostRecentDecl:
      return toClientReflType<const class clang::RedeclarableTemplateDecl *>(C);
    case reflenums::clang__RedeclarableTemplateDecl::getMostRecentDecl:
      return toClientReflType<const class clang::RedeclarableTemplateDecl *>(C);
    case reflenums::clang__RedeclarableTemplateDecl::getMostRecentDecl:
      return toClientReflType<const class clang::RedeclarableTemplateDecl *>(C);
    case reflenums::clang__RedeclarableTemplateDecl::getMostRecentDecl:
      return toClientReflType<const class clang::RedeclarableTemplateDecl *>(C);
    case reflenums::clang__RedeclarableTemplateDecl::getMostRecentDecl:
      return toClientReflType<const class clang::RedeclarableTemplateDecl *>(C);
    case reflenums::clang__RedeclarableTemplateDecl::getMostRecentDecl:
      return toClientReflType<const class clang::RedeclarableTemplateDecl *>(C);
    case reflenums::clang__RedeclarableTemplateDecl::getMostRecentDecl:
      return toClientReflType<const class clang::RedeclarableTemplateDecl *>(C);
    case reflenums::clang__RedeclarableTemplateDecl::getMostRecentDecl:
      return toClientReflType<const class clang::RedeclarableTemplateDecl *>(C);
    case reflenums::clang__RedeclarableTemplateDecl::getMostRecentDecl:
      return toClientReflType<const class clang::RedeclarableTemplateDecl *>(C);
    case reflenums::clang__RedeclarableTemplateDecl::getMostRecentDecl:
      return toClientReflType<const class clang::RedeclarableTemplateDecl *>(C);
    case reflenums::clang__RedeclarableTemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__RedeclarableTemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__RedeclarableTemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__RedeclarableTemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__RedeclarableTemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__RedeclarableTemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__RedeclarableTemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__RedeclarableTemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__RedeclarableTemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__RedeclarableTemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__RedeclarableTemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__RedeclarableTemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__RedeclarableTemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__RedeclarableTemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__RedeclarableTemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__RedeclarableTemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__RedeclarableTemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__RedeclarableTemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__RedeclarableTemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__RedeclarableTemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__RedeclarableTemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__RedeclarableTemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__RedeclarableTemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__RedeclarableTemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__RedeclarableTemplateDecl::getCanonicalDecl:
      return toClientReflType<const class clang::RedeclarableTemplateDecl *>(C);
    case reflenums::clang__RedeclarableTemplateDecl::isMemberSpecialization:
      return toClientReflType<bool>(C);
    case reflenums::clang__RedeclarableTemplateDecl::isMemberSpecialization:
      return toClientReflType<bool>(C);
    case reflenums::clang__RedeclarableTemplateDecl::getInstantiatedFromMemberTemplate:
      return toClientReflType<class clang::RedeclarableTemplateDecl *>(C);
    case reflenums::clang__RedeclarableTemplateDecl::getInstantiatedFromMemberTemplate:
      return toClientReflType<class clang::RedeclarableTemplateDecl *>(C);
    case reflenums::clang__RedeclarableTemplateDecl::getInstantiatedFromMemberTemplate:
      return toClientReflType<class clang::RedeclarableTemplateDecl *>(C);
    case reflenums::clang__RedeclarableTemplateDecl::getInstantiatedFromMemberTemplate:
      return toClientReflType<class clang::RedeclarableTemplateDecl *>(C);
    case reflenums::clang__RedeclarableTemplateDecl::getInstantiatedFromMemberTemplate:
      return toClientReflType<class clang::RedeclarableTemplateDecl *>(C);
    case reflenums::clang__RedeclarableTemplateDecl::getInstantiatedFromMemberTemplate:
      return toClientReflType<class clang::RedeclarableTemplateDecl *>(C);
    case reflenums::clang__RedeclarableTemplateDecl::getInstantiatedFromMemberTemplate:
      return toClientReflType<class clang::RedeclarableTemplateDecl *>(C);
    case reflenums::clang__RedeclarableTemplateDecl::getInstantiatedFromMemberTemplate:
      return toClientReflType<class clang::RedeclarableTemplateDecl *>(C);
    case reflenums::clang__RedeclarableTemplateDecl::getInstantiatedFromMemberTemplate:
      return toClientReflType<class clang::RedeclarableTemplateDecl *>(C);
    case reflenums::clang__RedeclarableTemplateDecl::getInstantiatedFromMemberTemplate:
      return toClientReflType<class clang::RedeclarableTemplateDecl *>(C);
    case reflenums::clang__RedeclarableTemplateDecl::getInstantiatedFromMemberTemplate:
      return toClientReflType<class clang::RedeclarableTemplateDecl *>(C);
    case reflenums::clang__RedeclarableTemplateDecl::getInstantiatedFromMemberTemplate:
      return toClientReflType<class clang::RedeclarableTemplateDecl *>(C);
    case reflenums::clang__RedeclarableTemplateDecl::getInstantiatedFromMemberTemplate:
      return toClientReflType<class clang::RedeclarableTemplateDecl *>(C);
    case reflenums::clang__RedeclarableTemplateDecl::getInstantiatedFromMemberTemplate:
      return toClientReflType<class clang::RedeclarableTemplateDecl *>(C);
    case reflenums::clang__RedeclarableTemplateDecl::getInstantiatedFromMemberTemplate:
      return toClientReflType<class clang::RedeclarableTemplateDecl *>(C);
    case reflenums::clang__RedeclarableTemplateDecl::getInstantiatedFromMemberTemplate:
      return toClientReflType<class clang::RedeclarableTemplateDecl *>(C);
    case reflenums::clang__RedeclarableTemplateDecl::getInstantiatedFromMemberTemplate:
      return toClientReflType<class clang::RedeclarableTemplateDecl *>(C);
    case reflenums::clang__RedeclarableTemplateDecl::getInstantiatedFromMemberTemplate:
      return toClientReflType<class clang::RedeclarableTemplateDecl *>(C);
    case reflenums::clang__RedeclarableTemplateDecl::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__RedeclarableTemplateDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__RedeclarableTemplateDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__RedeclarableTemplateDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__RedeclarableTemplateDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__RedeclarableTemplateDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__RedeclarableTemplateDecl::classofKind:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__FunctionTemplateDecl:
  switch (static_cast<reflenums::clang__FunctionTemplateDecl::memnames>(MemNum)) {
    case reflenums::clang__FunctionTemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionTemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionTemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionTemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionTemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionTemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionTemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionTemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionTemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionTemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionTemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionTemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionTemplateDecl::LoadLazySpecializations:
      return toClientReflType<void>(C);
    case reflenums::clang__FunctionTemplateDecl::getTemplatedDecl:
      return toClientReflType<class clang::FunctionDecl *>(C);
    case reflenums::clang__FunctionTemplateDecl::isThisDeclarationADefinition:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionTemplateDecl::isThisDeclarationADefinition:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionTemplateDecl::isThisDeclarationADefinition:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionTemplateDecl::getCanonicalDecl:
      return toClientReflType<const class clang::FunctionTemplateDecl *>(C);
    case reflenums::clang__FunctionTemplateDecl::getCanonicalDecl:
      return toClientReflType<const class clang::FunctionTemplateDecl *>(C);
    case reflenums::clang__FunctionTemplateDecl::getPreviousDecl:
      return toClientReflType<const class clang::FunctionTemplateDecl *>(C);
    case reflenums::clang__FunctionTemplateDecl::getPreviousDecl:
      return toClientReflType<const class clang::FunctionTemplateDecl *>(C);
    case reflenums::clang__FunctionTemplateDecl::getMostRecentDecl:
      return toClientReflType<const class clang::FunctionTemplateDecl *>(C);
    case reflenums::clang__FunctionTemplateDecl::getInstantiatedFromMemberTemplate:
      return toClientReflType<class clang::FunctionTemplateDecl *>(C);
    case reflenums::clang__FunctionTemplateDecl::getInstantiatedFromMemberTemplate:
      return toClientReflType<class clang::FunctionTemplateDecl *>(C);
    case reflenums::clang__FunctionTemplateDecl::getInstantiatedFromMemberTemplate:
      return toClientReflType<class clang::FunctionTemplateDecl *>(C);
    case reflenums::clang__FunctionTemplateDecl::specializations:
      return toClientReflType<class llvm::iterator_range<struct clang::RedeclarableTemplateDecl::SpecIterator<class clang::FunctionTemplateSpecializationInfo, struct clang::RedeclarableTemplateDecl::SpecEntryTraits<class clang::FunctionTemplateSpecializationInfo>, class clang::FunctionDecl> >>(C);
    case reflenums::clang__FunctionTemplateDecl::specializations:
      return toClientReflType<class llvm::iterator_range<struct clang::RedeclarableTemplateDecl::SpecIterator<class clang::FunctionTemplateSpecializationInfo, struct clang::RedeclarableTemplateDecl::SpecEntryTraits<class clang::FunctionTemplateSpecializationInfo>, class clang::FunctionDecl> >>(C);
    case reflenums::clang__FunctionTemplateDecl::specializations:
      return toClientReflType<class llvm::iterator_range<struct clang::RedeclarableTemplateDecl::SpecIterator<class clang::FunctionTemplateSpecializationInfo, struct clang::RedeclarableTemplateDecl::SpecEntryTraits<class clang::FunctionTemplateSpecializationInfo>, class clang::FunctionDecl> >>(C);
    case reflenums::clang__FunctionTemplateDecl::specializations:
      return toClientReflType<class llvm::iterator_range<struct clang::RedeclarableTemplateDecl::SpecIterator<class clang::FunctionTemplateSpecializationInfo, struct clang::RedeclarableTemplateDecl::SpecEntryTraits<class clang::FunctionTemplateSpecializationInfo>, class clang::FunctionDecl> >>(C);
    case reflenums::clang__FunctionTemplateDecl::Create:
      return toClientReflType<class clang::FunctionTemplateDecl *>(C);
    case reflenums::clang__FunctionTemplateDecl::CreateDeserialized:
      return toClientReflType<class clang::FunctionTemplateDecl *>(C);
    case reflenums::clang__FunctionTemplateDecl::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionTemplateDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionTemplateDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionTemplateDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionTemplateDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionTemplateDecl::classofKind:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__TemplateTypeParmDecl:
  switch (static_cast<reflenums::clang__TemplateTypeParmDecl::memnames>(MemNum)) {
    case reflenums::clang__TemplateTypeParmDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateTypeParmDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateTypeParmDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateTypeParmDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateTypeParmDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateTypeParmDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateTypeParmDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateTypeParmDecl::Create:
      return toClientReflType<class clang::TemplateTypeParmDecl *>(C);
    case reflenums::clang__TemplateTypeParmDecl::CreateDeserialized:
      return toClientReflType<class clang::TemplateTypeParmDecl *>(C);
    case reflenums::clang__TemplateTypeParmDecl::wasDeclaredWithTypename:
      return toClientReflType<bool>(C);
    case reflenums::clang__TemplateTypeParmDecl::wasDeclaredWithTypename:
      return toClientReflType<bool>(C);
    case reflenums::clang__TemplateTypeParmDecl::hasDefaultArgument:
      return toClientReflType<bool>(C);
    case reflenums::clang__TemplateTypeParmDecl::getDefaultArgument:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__TemplateTypeParmDecl::getDefaultArgumentInfo:
      return toClientReflType<class clang::TypeSourceInfo *>(C);
    case reflenums::clang__TemplateTypeParmDecl::getDefaultArgumentLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__TemplateTypeParmDecl::defaultArgumentWasInherited:
      return toClientReflType<bool>(C);
    case reflenums::clang__TemplateTypeParmDecl::defaultArgumentWasInherited:
      return toClientReflType<bool>(C);
    case reflenums::clang__TemplateTypeParmDecl::defaultArgumentWasInherited:
      return toClientReflType<bool>(C);
    case reflenums::clang__TemplateTypeParmDecl::defaultArgumentWasInherited:
      return toClientReflType<bool>(C);
    case reflenums::clang__TemplateTypeParmDecl::defaultArgumentWasInherited:
      return toClientReflType<bool>(C);
    case reflenums::clang__TemplateTypeParmDecl::getDepth:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__TemplateTypeParmDecl::getIndex:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__TemplateTypeParmDecl::isParameterPack:
      return toClientReflType<bool>(C);
    case reflenums::clang__TemplateTypeParmDecl::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__TemplateTypeParmDecl::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__TemplateTypeParmDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__TemplateTypeParmDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__TemplateTypeParmDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__TemplateTypeParmDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__TemplateTypeParmDecl::classofKind:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__NonTypeTemplateParmDecl:
  switch (static_cast<reflenums::clang__NonTypeTemplateParmDecl::memnames>(MemNum)) {
    case reflenums::clang__NonTypeTemplateParmDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__NonTypeTemplateParmDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__NonTypeTemplateParmDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__NonTypeTemplateParmDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__NonTypeTemplateParmDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__NonTypeTemplateParmDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__NonTypeTemplateParmDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__NonTypeTemplateParmDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__NonTypeTemplateParmDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__NonTypeTemplateParmDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__NonTypeTemplateParmDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__NonTypeTemplateParmDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__NonTypeTemplateParmDecl::Create:
      return toClientReflType<class clang::NonTypeTemplateParmDecl *>(C);
    case reflenums::clang__NonTypeTemplateParmDecl::Create:
      return toClientReflType<class clang::NonTypeTemplateParmDecl *>(C);
    case reflenums::clang__NonTypeTemplateParmDecl::CreateDeserialized:
      return toClientReflType<class clang::NonTypeTemplateParmDecl *>(C);
    case reflenums::clang__NonTypeTemplateParmDecl::CreateDeserialized1:
      return toClientReflType<class clang::NonTypeTemplateParmDecl *>(C);
    case reflenums::clang__NonTypeTemplateParmDecl::CreateDeserialized1:
      return toClientReflType<class clang::NonTypeTemplateParmDecl *>(C);
    case reflenums::clang__NonTypeTemplateParmDecl::CreateDeserialized1:
      return toClientReflType<class clang::NonTypeTemplateParmDecl *>(C);
    case reflenums::clang__NonTypeTemplateParmDecl::CreateDeserialized1:
      return toClientReflType<class clang::NonTypeTemplateParmDecl *>(C);
    case reflenums::clang__NonTypeTemplateParmDecl::CreateDeserialized1:
      return toClientReflType<class clang::NonTypeTemplateParmDecl *>(C);
    case reflenums::clang__NonTypeTemplateParmDecl::CreateDeserialized1:
      return toClientReflType<class clang::NonTypeTemplateParmDecl *>(C);
    case reflenums::clang__NonTypeTemplateParmDecl::CreateDeserialized1:
      return toClientReflType<class clang::NonTypeTemplateParmDecl *>(C);
    case reflenums::clang__NonTypeTemplateParmDecl::CreateDeserialized1:
      return toClientReflType<class clang::NonTypeTemplateParmDecl *>(C);
    case reflenums::clang__NonTypeTemplateParmDecl::CreateDeserialized1:
      return toClientReflType<class clang::NonTypeTemplateParmDecl *>(C);
    case reflenums::clang__NonTypeTemplateParmDecl::CreateDeserialized1:
      return toClientReflType<class clang::NonTypeTemplateParmDecl *>(C);
    case reflenums::clang__NonTypeTemplateParmDecl::CreateDeserialized1:
      return toClientReflType<class clang::NonTypeTemplateParmDecl *>(C);
    case reflenums::clang__NonTypeTemplateParmDecl::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__NonTypeTemplateParmDecl::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__NonTypeTemplateParmDecl::hasDefaultArgument:
      return toClientReflType<bool>(C);
    case reflenums::clang__NonTypeTemplateParmDecl::getDefaultArgument:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__NonTypeTemplateParmDecl::getDefaultArgumentLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__NonTypeTemplateParmDecl::defaultArgumentWasInherited:
      return toClientReflType<bool>(C);
    case reflenums::clang__NonTypeTemplateParmDecl::defaultArgumentWasInherited:
      return toClientReflType<bool>(C);
    case reflenums::clang__NonTypeTemplateParmDecl::defaultArgumentWasInherited:
      return toClientReflType<bool>(C);
    case reflenums::clang__NonTypeTemplateParmDecl::defaultArgumentWasInherited:
      return toClientReflType<bool>(C);
    case reflenums::clang__NonTypeTemplateParmDecl::isParameterPack:
      return toClientReflType<bool>(C);
    case reflenums::clang__NonTypeTemplateParmDecl::isPackExpansion:
      return toClientReflType<bool>(C);
    case reflenums::clang__NonTypeTemplateParmDecl::isExpandedParameterPack:
      return toClientReflType<bool>(C);
    case reflenums::clang__NonTypeTemplateParmDecl::getNumExpansionTypes:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__NonTypeTemplateParmDecl::getExpansionType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__NonTypeTemplateParmDecl::getExpansionTypeSourceInfo:
      return toClientReflType<class clang::TypeSourceInfo *>(C);
    case reflenums::clang__NonTypeTemplateParmDecl::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__NonTypeTemplateParmDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__NonTypeTemplateParmDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__NonTypeTemplateParmDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__NonTypeTemplateParmDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__NonTypeTemplateParmDecl::classofKind:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__TemplateTemplateParmDecl:
  switch (static_cast<reflenums::clang__TemplateTemplateParmDecl::memnames>(MemNum)) {
    case reflenums::clang__TemplateTemplateParmDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateTemplateParmDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateTemplateParmDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateTemplateParmDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateTemplateParmDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateTemplateParmDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateTemplateParmDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateTemplateParmDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateTemplateParmDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateTemplateParmDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateTemplateParmDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateTemplateParmDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateTemplateParmDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TemplateTemplateParmDecl::Create:
      return toClientReflType<class clang::TemplateTemplateParmDecl *>(C);
    case reflenums::clang__TemplateTemplateParmDecl::Create:
      return toClientReflType<class clang::TemplateTemplateParmDecl *>(C);
    case reflenums::clang__TemplateTemplateParmDecl::CreateDeserialized:
      return toClientReflType<class clang::TemplateTemplateParmDecl *>(C);
    case reflenums::clang__TemplateTemplateParmDecl::CreateDeserialized1:
      return toClientReflType<class clang::TemplateTemplateParmDecl *>(C);
    case reflenums::clang__TemplateTemplateParmDecl::CreateDeserialized1:
      return toClientReflType<class clang::TemplateTemplateParmDecl *>(C);
    case reflenums::clang__TemplateTemplateParmDecl::CreateDeserialized1:
      return toClientReflType<class clang::TemplateTemplateParmDecl *>(C);
    case reflenums::clang__TemplateTemplateParmDecl::CreateDeserialized1:
      return toClientReflType<class clang::TemplateTemplateParmDecl *>(C);
    case reflenums::clang__TemplateTemplateParmDecl::CreateDeserialized1:
      return toClientReflType<class clang::TemplateTemplateParmDecl *>(C);
    case reflenums::clang__TemplateTemplateParmDecl::CreateDeserialized1:
      return toClientReflType<class clang::TemplateTemplateParmDecl *>(C);
    case reflenums::clang__TemplateTemplateParmDecl::CreateDeserialized1:
      return toClientReflType<class clang::TemplateTemplateParmDecl *>(C);
    case reflenums::clang__TemplateTemplateParmDecl::CreateDeserialized1:
      return toClientReflType<class clang::TemplateTemplateParmDecl *>(C);
    case reflenums::clang__TemplateTemplateParmDecl::CreateDeserialized1:
      return toClientReflType<class clang::TemplateTemplateParmDecl *>(C);
    case reflenums::clang__TemplateTemplateParmDecl::CreateDeserialized1:
      return toClientReflType<class clang::TemplateTemplateParmDecl *>(C);
    case reflenums::clang__TemplateTemplateParmDecl::CreateDeserialized1:
      return toClientReflType<class clang::TemplateTemplateParmDecl *>(C);
    case reflenums::clang__TemplateTemplateParmDecl::isParameterPack:
      return toClientReflType<bool>(C);
    case reflenums::clang__TemplateTemplateParmDecl::isPackExpansion:
      return toClientReflType<bool>(C);
    case reflenums::clang__TemplateTemplateParmDecl::isExpandedParameterPack:
      return toClientReflType<bool>(C);
    case reflenums::clang__TemplateTemplateParmDecl::getNumExpansionTemplateParameters:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__TemplateTemplateParmDecl::getExpansionTemplateParameters:
      return toClientReflType<class clang::TemplateParameterList *>(C);
    case reflenums::clang__TemplateTemplateParmDecl::getExpansionTemplateParameters:
      return toClientReflType<class clang::TemplateParameterList *>(C);
    case reflenums::clang__TemplateTemplateParmDecl::hasDefaultArgument:
      return toClientReflType<bool>(C);
    case reflenums::clang__TemplateTemplateParmDecl::getDefaultArgument:
      return toClientReflType<const class clang::TemplateArgumentLoc &>(C);
    case reflenums::clang__TemplateTemplateParmDecl::getDefaultArgumentLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__TemplateTemplateParmDecl::defaultArgumentWasInherited:
      return toClientReflType<bool>(C);
    case reflenums::clang__TemplateTemplateParmDecl::defaultArgumentWasInherited:
      return toClientReflType<bool>(C);
    case reflenums::clang__TemplateTemplateParmDecl::defaultArgumentWasInherited:
      return toClientReflType<bool>(C);
    case reflenums::clang__TemplateTemplateParmDecl::defaultArgumentWasInherited:
      return toClientReflType<bool>(C);
    case reflenums::clang__TemplateTemplateParmDecl::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__TemplateTemplateParmDecl::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__TemplateTemplateParmDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__TemplateTemplateParmDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__TemplateTemplateParmDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__TemplateTemplateParmDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__TemplateTemplateParmDecl::classofKind:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__BuiltinTemplateDecl:
  switch (static_cast<reflenums::clang__BuiltinTemplateDecl::memnames>(MemNum)) {
    case reflenums::clang__BuiltinTemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__BuiltinTemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__BuiltinTemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__BuiltinTemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__BuiltinTemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__BuiltinTemplateDecl::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__BuiltinTemplateDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__BuiltinTemplateDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__BuiltinTemplateDecl::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__BuiltinTemplateDecl::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__BuiltinTemplateDecl::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__BuiltinTemplateDecl::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__BuiltinTemplateDecl::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__BuiltinTemplateDecl::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__BuiltinTemplateDecl::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__ClassTemplateSpecializationDecl:
  switch (static_cast<reflenums::clang__ClassTemplateSpecializationDecl::memnames>(MemNum)) {
    case reflenums::clang__ClassTemplateSpecializationDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ClassTemplateSpecializationDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ClassTemplateSpecializationDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ClassTemplateSpecializationDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ClassTemplateSpecializationDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ClassTemplateSpecializationDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ClassTemplateSpecializationDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ClassTemplateSpecializationDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ClassTemplateSpecializationDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ClassTemplateSpecializationDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ClassTemplateSpecializationDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ClassTemplateSpecializationDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ClassTemplateSpecializationDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ClassTemplateSpecializationDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ClassTemplateSpecializationDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ClassTemplateSpecializationDecl::CreateDeserialized:
      return toClientReflType<class clang::ClassTemplateSpecializationDecl *>(C);
    case reflenums::clang__ClassTemplateSpecializationDecl::getNameForDiagnostic:
      return toClientReflType<void>(C);
    case reflenums::clang__ClassTemplateSpecializationDecl::getNameForDiagnostic:
      return toClientReflType<void>(C);
    case reflenums::clang__ClassTemplateSpecializationDecl::getSpecializedTemplate:
      return toClientReflType<class clang::ClassTemplateDecl *>(C);
    case reflenums::clang__ClassTemplateSpecializationDecl::getTemplateArgs:
      return toClientReflType<const class clang::TemplateArgumentList &>(C);
    case reflenums::clang__ClassTemplateSpecializationDecl::getSpecializationKind:
      return toClientReflType<enum clang::TemplateSpecializationKind>(C);
    case reflenums::clang__ClassTemplateSpecializationDecl::isExplicitSpecialization:
      return toClientReflType<bool>(C);
    case reflenums::clang__ClassTemplateSpecializationDecl::isExplicitInstantiationOrSpecialization:
      return toClientReflType<bool>(C);
    case reflenums::clang__ClassTemplateSpecializationDecl::isExplicitInstantiationOrSpecialization:
      return toClientReflType<bool>(C);
    case reflenums::clang__ClassTemplateSpecializationDecl::getPointOfInstantiation:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ClassTemplateSpecializationDecl::getPointOfInstantiation:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ClassTemplateSpecializationDecl::getPointOfInstantiation:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ClassTemplateSpecializationDecl::getPointOfInstantiation:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ClassTemplateSpecializationDecl::getTemplateInstantiationArgs:
      return toClientReflType<const class clang::TemplateArgumentList &>(C);
    case reflenums::clang__ClassTemplateSpecializationDecl::getTemplateInstantiationArgs:
      return toClientReflType<const class clang::TemplateArgumentList &>(C);
    case reflenums::clang__ClassTemplateSpecializationDecl::getTemplateInstantiationArgs:
      return toClientReflType<const class clang::TemplateArgumentList &>(C);
    case reflenums::clang__ClassTemplateSpecializationDecl::getTemplateInstantiationArgs:
      return toClientReflType<const class clang::TemplateArgumentList &>(C);
    case reflenums::clang__ClassTemplateSpecializationDecl::getTypeAsWritten:
      return toClientReflType<class clang::TypeSourceInfo *>(C);
    case reflenums::clang__ClassTemplateSpecializationDecl::getExternLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ClassTemplateSpecializationDecl::getExternLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ClassTemplateSpecializationDecl::getExternLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ClassTemplateSpecializationDecl::getTemplateKeywordLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ClassTemplateSpecializationDecl::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__ClassTemplateSpecializationDecl::Profile:
      return toClientReflType<void>(C);
    case reflenums::clang__ClassTemplateSpecializationDecl::Profile:
      return toClientReflType<void>(C);
    case reflenums::clang__ClassTemplateSpecializationDecl::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ClassTemplateSpecializationDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ClassTemplateSpecializationDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ClassTemplateSpecializationDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ClassTemplateSpecializationDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ClassTemplateSpecializationDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ClassTemplateSpecializationDecl::classofKind:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__ClassTemplatePartialSpecializationDecl:
  switch (static_cast<reflenums::clang__ClassTemplatePartialSpecializationDecl::memnames>(MemNum)) {
    case reflenums::clang__ClassTemplatePartialSpecializationDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ClassTemplatePartialSpecializationDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ClassTemplatePartialSpecializationDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ClassTemplatePartialSpecializationDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ClassTemplatePartialSpecializationDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ClassTemplatePartialSpecializationDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ClassTemplatePartialSpecializationDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ClassTemplatePartialSpecializationDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ClassTemplatePartialSpecializationDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ClassTemplatePartialSpecializationDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ClassTemplatePartialSpecializationDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ClassTemplatePartialSpecializationDecl::CreateDeserialized:
      return toClientReflType<class clang::ClassTemplatePartialSpecializationDecl *>(C);
    case reflenums::clang__ClassTemplatePartialSpecializationDecl::CreateDeserialized:
      return toClientReflType<class clang::ClassTemplatePartialSpecializationDecl *>(C);
    case reflenums::clang__ClassTemplatePartialSpecializationDecl::getTemplateParameters:
      return toClientReflType<class clang::TemplateParameterList *>(C);
    case reflenums::clang__ClassTemplatePartialSpecializationDecl::getTemplateArgsAsWritten:
      return toClientReflType<const struct clang::ASTTemplateArgumentListInfo *>(C);
    case reflenums::clang__ClassTemplatePartialSpecializationDecl::getInstantiatedFromMember:
      return toClientReflType<class clang::ClassTemplatePartialSpecializationDecl *>(C);
    case reflenums::clang__ClassTemplatePartialSpecializationDecl::getInstantiatedFromMemberTemplate:
      return toClientReflType<class clang::ClassTemplatePartialSpecializationDecl *>(C);
    case reflenums::clang__ClassTemplatePartialSpecializationDecl::getInstantiatedFromMemberTemplate:
      return toClientReflType<class clang::ClassTemplatePartialSpecializationDecl *>(C);
    case reflenums::clang__ClassTemplatePartialSpecializationDecl::getInstantiatedFromMemberTemplate:
      return toClientReflType<class clang::ClassTemplatePartialSpecializationDecl *>(C);
    case reflenums::clang__ClassTemplatePartialSpecializationDecl::getInstantiatedFromMemberTemplate:
      return toClientReflType<class clang::ClassTemplatePartialSpecializationDecl *>(C);
    case reflenums::clang__ClassTemplatePartialSpecializationDecl::getInjectedSpecializationType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ClassTemplatePartialSpecializationDecl::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ClassTemplatePartialSpecializationDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ClassTemplatePartialSpecializationDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ClassTemplatePartialSpecializationDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ClassTemplatePartialSpecializationDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ClassTemplatePartialSpecializationDecl::classofKind:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__ClassTemplateDecl:
  switch (static_cast<reflenums::clang__ClassTemplateDecl::memnames>(MemNum)) {
    case reflenums::clang__ClassTemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ClassTemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ClassTemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ClassTemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ClassTemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ClassTemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ClassTemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ClassTemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ClassTemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ClassTemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ClassTemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ClassTemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ClassTemplateDecl::LoadLazySpecializations:
      return toClientReflType<void>(C);
    case reflenums::clang__ClassTemplateDecl::getTemplatedDecl:
      return toClientReflType<class clang::CXXRecordDecl *>(C);
    case reflenums::clang__ClassTemplateDecl::isThisDeclarationADefinition:
      return toClientReflType<bool>(C);
    case reflenums::clang__ClassTemplateDecl::Create:
      return toClientReflType<class clang::ClassTemplateDecl *>(C);
    case reflenums::clang__ClassTemplateDecl::CreateDeserialized:
      return toClientReflType<class clang::ClassTemplateDecl *>(C);
    case reflenums::clang__ClassTemplateDecl::CreateDeserialized:
      return toClientReflType<class clang::ClassTemplateDecl *>(C);
    case reflenums::clang__ClassTemplateDecl::CreateDeserialized:
      return toClientReflType<class clang::ClassTemplateDecl *>(C);
    case reflenums::clang__ClassTemplateDecl::CreateDeserialized:
      return toClientReflType<class clang::ClassTemplateDecl *>(C);
    case reflenums::clang__ClassTemplateDecl::getCanonicalDecl:
      return toClientReflType<const class clang::ClassTemplateDecl *>(C);
    case reflenums::clang__ClassTemplateDecl::getCanonicalDecl:
      return toClientReflType<const class clang::ClassTemplateDecl *>(C);
    case reflenums::clang__ClassTemplateDecl::getPreviousDecl:
      return toClientReflType<const class clang::ClassTemplateDecl *>(C);
    case reflenums::clang__ClassTemplateDecl::getPreviousDecl:
      return toClientReflType<const class clang::ClassTemplateDecl *>(C);
    case reflenums::clang__ClassTemplateDecl::getMostRecentDecl:
      return toClientReflType<const class clang::ClassTemplateDecl *>(C);
    case reflenums::clang__ClassTemplateDecl::getInstantiatedFromMemberTemplate:
      return toClientReflType<class clang::ClassTemplateDecl *>(C);
    case reflenums::clang__ClassTemplateDecl::getInstantiatedFromMemberTemplate:
      return toClientReflType<class clang::ClassTemplateDecl *>(C);
    case reflenums::clang__ClassTemplateDecl::getInstantiatedFromMemberTemplate:
      return toClientReflType<class clang::ClassTemplateDecl *>(C);
    case reflenums::clang__ClassTemplateDecl::getInstantiatedFromMemberTemplate:
      return toClientReflType<class clang::ClassTemplateDecl *>(C);
    case reflenums::clang__ClassTemplateDecl::getInstantiatedFromMemberTemplate:
      return toClientReflType<class clang::ClassTemplateDecl *>(C);
    case reflenums::clang__ClassTemplateDecl::getInstantiatedFromMemberTemplate:
      return toClientReflType<class clang::ClassTemplateDecl *>(C);
    case reflenums::clang__ClassTemplateDecl::getInstantiatedFromMemberTemplate:
      return toClientReflType<class clang::ClassTemplateDecl *>(C);
    case reflenums::clang__ClassTemplateDecl::getInstantiatedFromMemberTemplate:
      return toClientReflType<class clang::ClassTemplateDecl *>(C);
    case reflenums::clang__ClassTemplateDecl::getInstantiatedFromMemberTemplate:
      return toClientReflType<class clang::ClassTemplateDecl *>(C);
    case reflenums::clang__ClassTemplateDecl::specializations:
      return toClientReflType<class llvm::iterator_range<struct clang::RedeclarableTemplateDecl::SpecIterator<class clang::ClassTemplateSpecializationDecl, struct clang::RedeclarableTemplateDecl::SpecEntryTraits<class clang::ClassTemplateSpecializationDecl>, class clang::ClassTemplateSpecializationDecl> >>(C);
    case reflenums::clang__ClassTemplateDecl::specializations:
      return toClientReflType<class llvm::iterator_range<struct clang::RedeclarableTemplateDecl::SpecIterator<class clang::ClassTemplateSpecializationDecl, struct clang::RedeclarableTemplateDecl::SpecEntryTraits<class clang::ClassTemplateSpecializationDecl>, class clang::ClassTemplateSpecializationDecl> >>(C);
    case reflenums::clang__ClassTemplateDecl::specializations:
      return toClientReflType<class llvm::iterator_range<struct clang::RedeclarableTemplateDecl::SpecIterator<class clang::ClassTemplateSpecializationDecl, struct clang::RedeclarableTemplateDecl::SpecEntryTraits<class clang::ClassTemplateSpecializationDecl>, class clang::ClassTemplateSpecializationDecl> >>(C);
    case reflenums::clang__ClassTemplateDecl::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ClassTemplateDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ClassTemplateDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ClassTemplateDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ClassTemplateDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ClassTemplateDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ClassTemplateDecl::classofKind:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__FriendTemplateDecl:
  switch (static_cast<reflenums::clang__FriendTemplateDecl::memnames>(MemNum)) {
    case reflenums::clang__FriendTemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FriendTemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FriendTemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FriendTemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FriendTemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FriendTemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FriendTemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FriendTemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FriendTemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FriendTemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FriendTemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FriendTemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FriendTemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FriendTemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FriendTemplateDecl::CreateDeserialized:
      return toClientReflType<class clang::FriendTemplateDecl *>(C);
    case reflenums::clang__FriendTemplateDecl::getFriendType:
      return toClientReflType<class clang::TypeSourceInfo *>(C);
    case reflenums::clang__FriendTemplateDecl::getFriendDecl:
      return toClientReflType<class clang::NamedDecl *>(C);
    case reflenums::clang__FriendTemplateDecl::getFriendLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__FriendTemplateDecl::getTemplateParameterList:
      return toClientReflType<class clang::TemplateParameterList *>(C);
    case reflenums::clang__FriendTemplateDecl::getNumTemplateParameters:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__FriendTemplateDecl::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__FriendTemplateDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__FriendTemplateDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__FriendTemplateDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__FriendTemplateDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__FriendTemplateDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__FriendTemplateDecl::classofKind:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__TypeAliasTemplateDecl:
  switch (static_cast<reflenums::clang__TypeAliasTemplateDecl::memnames>(MemNum)) {
    case reflenums::clang__TypeAliasTemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TypeAliasTemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TypeAliasTemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TypeAliasTemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TypeAliasTemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TypeAliasTemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TypeAliasTemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TypeAliasTemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TypeAliasTemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__TypeAliasTemplateDecl::getTemplatedDecl:
      return toClientReflType<class clang::TypeAliasDecl *>(C);
    case reflenums::clang__TypeAliasTemplateDecl::getTemplatedDecl:
      return toClientReflType<class clang::TypeAliasDecl *>(C);
    case reflenums::clang__TypeAliasTemplateDecl::getCanonicalDecl:
      return toClientReflType<const class clang::TypeAliasTemplateDecl *>(C);
    case reflenums::clang__TypeAliasTemplateDecl::getCanonicalDecl:
      return toClientReflType<const class clang::TypeAliasTemplateDecl *>(C);
    case reflenums::clang__TypeAliasTemplateDecl::getPreviousDecl:
      return toClientReflType<const class clang::TypeAliasTemplateDecl *>(C);
    case reflenums::clang__TypeAliasTemplateDecl::getInstantiatedFromMemberTemplate:
      return toClientReflType<class clang::TypeAliasTemplateDecl *>(C);
    case reflenums::clang__TypeAliasTemplateDecl::Create:
      return toClientReflType<class clang::TypeAliasTemplateDecl *>(C);
    case reflenums::clang__TypeAliasTemplateDecl::CreateDeserialized:
      return toClientReflType<class clang::TypeAliasTemplateDecl *>(C);
    case reflenums::clang__TypeAliasTemplateDecl::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__TypeAliasTemplateDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__TypeAliasTemplateDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__TypeAliasTemplateDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__TypeAliasTemplateDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__TypeAliasTemplateDecl::classofKind:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__ClassScopeFunctionSpecializationDecl:
  switch (static_cast<reflenums::clang__ClassScopeFunctionSpecializationDecl::memnames>(MemNum)) {
    case reflenums::clang__ClassScopeFunctionSpecializationDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ClassScopeFunctionSpecializationDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ClassScopeFunctionSpecializationDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ClassScopeFunctionSpecializationDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ClassScopeFunctionSpecializationDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ClassScopeFunctionSpecializationDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ClassScopeFunctionSpecializationDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ClassScopeFunctionSpecializationDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ClassScopeFunctionSpecializationDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ClassScopeFunctionSpecializationDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ClassScopeFunctionSpecializationDecl::getSpecialization:
      return toClientReflType<class clang::CXXMethodDecl *>(C);
    case reflenums::clang__ClassScopeFunctionSpecializationDecl::hasExplicitTemplateArgs:
      return toClientReflType<bool>(C);
    case reflenums::clang__ClassScopeFunctionSpecializationDecl::templateArgs:
      return toClientReflType<const class clang::TemplateArgumentListInfo &>(C);
    case reflenums::clang__ClassScopeFunctionSpecializationDecl::Create:
      return toClientReflType<class clang::ClassScopeFunctionSpecializationDecl *>(C);
    case reflenums::clang__ClassScopeFunctionSpecializationDecl::CreateDeserialized:
      return toClientReflType<class clang::ClassScopeFunctionSpecializationDecl *>(C);
    case reflenums::clang__ClassScopeFunctionSpecializationDecl::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ClassScopeFunctionSpecializationDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ClassScopeFunctionSpecializationDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ClassScopeFunctionSpecializationDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ClassScopeFunctionSpecializationDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ClassScopeFunctionSpecializationDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ClassScopeFunctionSpecializationDecl::classofKind:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__VarTemplateSpecializationDecl:
  switch (static_cast<reflenums::clang__VarTemplateSpecializationDecl::memnames>(MemNum)) {
    case reflenums::clang__VarTemplateSpecializationDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__VarTemplateSpecializationDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__VarTemplateSpecializationDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__VarTemplateSpecializationDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__VarTemplateSpecializationDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__VarTemplateSpecializationDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__VarTemplateSpecializationDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__VarTemplateSpecializationDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__VarTemplateSpecializationDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__VarTemplateSpecializationDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__VarTemplateSpecializationDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__VarTemplateSpecializationDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__VarTemplateSpecializationDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__VarTemplateSpecializationDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__VarTemplateSpecializationDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__VarTemplateSpecializationDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__VarTemplateSpecializationDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__VarTemplateSpecializationDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__VarTemplateSpecializationDecl::CreateDeserialized:
      return toClientReflType<class clang::VarTemplateSpecializationDecl *>(C);
    case reflenums::clang__VarTemplateSpecializationDecl::getNameForDiagnostic:
      return toClientReflType<void>(C);
    case reflenums::clang__VarTemplateSpecializationDecl::getNameForDiagnostic:
      return toClientReflType<void>(C);
    case reflenums::clang__VarTemplateSpecializationDecl::getSpecializedTemplate:
      return toClientReflType<class clang::VarTemplateDecl *>(C);
    case reflenums::clang__VarTemplateSpecializationDecl::getTemplateArgs:
      return toClientReflType<const class clang::TemplateArgumentList &>(C);
    case reflenums::clang__VarTemplateSpecializationDecl::getTemplateArgs:
      return toClientReflType<const class clang::TemplateArgumentList &>(C);
    case reflenums::clang__VarTemplateSpecializationDecl::getTemplateArgsInfo:
      return toClientReflType<const class clang::TemplateArgumentListInfo &>(C);
    case reflenums::clang__VarTemplateSpecializationDecl::getSpecializationKind:
      return toClientReflType<enum clang::TemplateSpecializationKind>(C);
    case reflenums::clang__VarTemplateSpecializationDecl::isExplicitSpecialization:
      return toClientReflType<bool>(C);
    case reflenums::clang__VarTemplateSpecializationDecl::isExplicitInstantiationOrSpecialization:
      return toClientReflType<bool>(C);
    case reflenums::clang__VarTemplateSpecializationDecl::isExplicitInstantiationOrSpecialization:
      return toClientReflType<bool>(C);
    case reflenums::clang__VarTemplateSpecializationDecl::getPointOfInstantiation:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__VarTemplateSpecializationDecl::getPointOfInstantiation:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__VarTemplateSpecializationDecl::getPointOfInstantiation:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__VarTemplateSpecializationDecl::getPointOfInstantiation:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__VarTemplateSpecializationDecl::getPointOfInstantiation:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__VarTemplateSpecializationDecl::getTemplateInstantiationArgs:
      return toClientReflType<const class clang::TemplateArgumentList &>(C);
    case reflenums::clang__VarTemplateSpecializationDecl::getTemplateInstantiationArgs:
      return toClientReflType<const class clang::TemplateArgumentList &>(C);
    case reflenums::clang__VarTemplateSpecializationDecl::getTemplateInstantiationArgs:
      return toClientReflType<const class clang::TemplateArgumentList &>(C);
    case reflenums::clang__VarTemplateSpecializationDecl::getTemplateInstantiationArgs:
      return toClientReflType<const class clang::TemplateArgumentList &>(C);
    case reflenums::clang__VarTemplateSpecializationDecl::getTypeAsWritten:
      return toClientReflType<class clang::TypeSourceInfo *>(C);
    case reflenums::clang__VarTemplateSpecializationDecl::getExternLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__VarTemplateSpecializationDecl::getExternLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__VarTemplateSpecializationDecl::getExternLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__VarTemplateSpecializationDecl::getTemplateKeywordLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__VarTemplateSpecializationDecl::Profile:
      return toClientReflType<void>(C);
    case reflenums::clang__VarTemplateSpecializationDecl::Profile:
      return toClientReflType<void>(C);
    case reflenums::clang__VarTemplateSpecializationDecl::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__VarTemplateSpecializationDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__VarTemplateSpecializationDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__VarTemplateSpecializationDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__VarTemplateSpecializationDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__VarTemplateSpecializationDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__VarTemplateSpecializationDecl::classofKind:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__VarTemplatePartialSpecializationDecl:
  switch (static_cast<reflenums::clang__VarTemplatePartialSpecializationDecl::memnames>(MemNum)) {
    case reflenums::clang__VarTemplatePartialSpecializationDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__VarTemplatePartialSpecializationDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__VarTemplatePartialSpecializationDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__VarTemplatePartialSpecializationDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__VarTemplatePartialSpecializationDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__VarTemplatePartialSpecializationDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__VarTemplatePartialSpecializationDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__VarTemplatePartialSpecializationDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__VarTemplatePartialSpecializationDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__VarTemplatePartialSpecializationDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__VarTemplatePartialSpecializationDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__VarTemplatePartialSpecializationDecl::CreateDeserialized:
      return toClientReflType<class clang::VarTemplatePartialSpecializationDecl *>(C);
    case reflenums::clang__VarTemplatePartialSpecializationDecl::CreateDeserialized:
      return toClientReflType<class clang::VarTemplatePartialSpecializationDecl *>(C);
    case reflenums::clang__VarTemplatePartialSpecializationDecl::getTemplateParameters:
      return toClientReflType<class clang::TemplateParameterList *>(C);
    case reflenums::clang__VarTemplatePartialSpecializationDecl::getTemplateArgsAsWritten:
      return toClientReflType<const struct clang::ASTTemplateArgumentListInfo *>(C);
    case reflenums::clang__VarTemplatePartialSpecializationDecl::getInstantiatedFromMember:
      return toClientReflType<class clang::VarTemplatePartialSpecializationDecl *>(C);
    case reflenums::clang__VarTemplatePartialSpecializationDecl::getInstantiatedFromMember:
      return toClientReflType<class clang::VarTemplatePartialSpecializationDecl *>(C);
    case reflenums::clang__VarTemplatePartialSpecializationDecl::getInstantiatedFromMember:
      return toClientReflType<class clang::VarTemplatePartialSpecializationDecl *>(C);
    case reflenums::clang__VarTemplatePartialSpecializationDecl::getInstantiatedFromMember:
      return toClientReflType<class clang::VarTemplatePartialSpecializationDecl *>(C);
    case reflenums::clang__VarTemplatePartialSpecializationDecl::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__VarTemplatePartialSpecializationDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__VarTemplatePartialSpecializationDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__VarTemplatePartialSpecializationDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__VarTemplatePartialSpecializationDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__VarTemplatePartialSpecializationDecl::classofKind:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__VarTemplateDecl:
  switch (static_cast<reflenums::clang__VarTemplateDecl::memnames>(MemNum)) {
    case reflenums::clang__VarTemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__VarTemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__VarTemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__VarTemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__VarTemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__VarTemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__VarTemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__VarTemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__VarTemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__VarTemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__VarTemplateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__VarTemplateDecl::LoadLazySpecializations:
      return toClientReflType<void>(C);
    case reflenums::clang__VarTemplateDecl::getTemplatedDecl:
      return toClientReflType<class clang::VarDecl *>(C);
    case reflenums::clang__VarTemplateDecl::isThisDeclarationADefinition:
      return toClientReflType<bool>(C);
    case reflenums::clang__VarTemplateDecl::isThisDeclarationADefinition:
      return toClientReflType<bool>(C);
    case reflenums::clang__VarTemplateDecl::Create:
      return toClientReflType<class clang::VarTemplateDecl *>(C);
    case reflenums::clang__VarTemplateDecl::CreateDeserialized:
      return toClientReflType<class clang::VarTemplateDecl *>(C);
    case reflenums::clang__VarTemplateDecl::CreateDeserialized:
      return toClientReflType<class clang::VarTemplateDecl *>(C);
    case reflenums::clang__VarTemplateDecl::CreateDeserialized:
      return toClientReflType<class clang::VarTemplateDecl *>(C);
    case reflenums::clang__VarTemplateDecl::CreateDeserialized:
      return toClientReflType<class clang::VarTemplateDecl *>(C);
    case reflenums::clang__VarTemplateDecl::getCanonicalDecl:
      return toClientReflType<const class clang::VarTemplateDecl *>(C);
    case reflenums::clang__VarTemplateDecl::getCanonicalDecl:
      return toClientReflType<const class clang::VarTemplateDecl *>(C);
    case reflenums::clang__VarTemplateDecl::getPreviousDecl:
      return toClientReflType<const class clang::VarTemplateDecl *>(C);
    case reflenums::clang__VarTemplateDecl::getPreviousDecl:
      return toClientReflType<const class clang::VarTemplateDecl *>(C);
    case reflenums::clang__VarTemplateDecl::getMostRecentDecl:
      return toClientReflType<const class clang::VarTemplateDecl *>(C);
    case reflenums::clang__VarTemplateDecl::getInstantiatedFromMemberTemplate:
      return toClientReflType<class clang::VarTemplateDecl *>(C);
    case reflenums::clang__VarTemplateDecl::getInstantiatedFromMemberTemplate:
      return toClientReflType<class clang::VarTemplateDecl *>(C);
    case reflenums::clang__VarTemplateDecl::getInstantiatedFromMemberTemplate:
      return toClientReflType<class clang::VarTemplateDecl *>(C);
    case reflenums::clang__VarTemplateDecl::getInstantiatedFromMemberTemplate:
      return toClientReflType<class clang::VarTemplateDecl *>(C);
    case reflenums::clang__VarTemplateDecl::getInstantiatedFromMemberTemplate:
      return toClientReflType<class clang::VarTemplateDecl *>(C);
    case reflenums::clang__VarTemplateDecl::getInstantiatedFromMemberTemplate:
      return toClientReflType<class clang::VarTemplateDecl *>(C);
    case reflenums::clang__VarTemplateDecl::getInstantiatedFromMemberTemplate:
      return toClientReflType<class clang::VarTemplateDecl *>(C);
    case reflenums::clang__VarTemplateDecl::specializations:
      return toClientReflType<class llvm::iterator_range<struct clang::RedeclarableTemplateDecl::SpecIterator<class clang::VarTemplateSpecializationDecl, struct clang::RedeclarableTemplateDecl::SpecEntryTraits<class clang::VarTemplateSpecializationDecl>, class clang::VarTemplateSpecializationDecl> >>(C);
    case reflenums::clang__VarTemplateDecl::specializations:
      return toClientReflType<class llvm::iterator_range<struct clang::RedeclarableTemplateDecl::SpecIterator<class clang::VarTemplateSpecializationDecl, struct clang::RedeclarableTemplateDecl::SpecEntryTraits<class clang::VarTemplateSpecializationDecl>, class clang::VarTemplateSpecializationDecl> >>(C);
    case reflenums::clang__VarTemplateDecl::specializations:
      return toClientReflType<class llvm::iterator_range<struct clang::RedeclarableTemplateDecl::SpecIterator<class clang::VarTemplateSpecializationDecl, struct clang::RedeclarableTemplateDecl::SpecEntryTraits<class clang::VarTemplateSpecializationDecl>, class clang::VarTemplateSpecializationDecl> >>(C);
    case reflenums::clang__VarTemplateDecl::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__VarTemplateDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__VarTemplateDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__VarTemplateDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__VarTemplateDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__VarTemplateDecl::classofKind:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__FriendDecl:
  switch (static_cast<reflenums::clang__FriendDecl::memnames>(MemNum)) {
    case reflenums::clang__FriendDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FriendDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FriendDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FriendDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FriendDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FriendDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FriendDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FriendDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FriendDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FriendDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FriendDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FriendDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FriendDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FriendDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FriendDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FriendDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FriendDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FriendDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FriendDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FriendDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FriendDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FriendDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__FriendDecl::CreateDeserialized:
      return toClientReflType<class clang::FriendDecl *>(C);
    case reflenums::clang__FriendDecl::getFriendType:
      return toClientReflType<class clang::TypeSourceInfo *>(C);
    case reflenums::clang__FriendDecl::getFriendTypeNumTemplateParameterLists:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__FriendDecl::getFriendTypeTemplateParameterList:
      return toClientReflType<class clang::TemplateParameterList *>(C);
    case reflenums::clang__FriendDecl::getFriendDecl:
      return toClientReflType<class clang::NamedDecl *>(C);
    case reflenums::clang__FriendDecl::getFriendLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__FriendDecl::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__FriendDecl::isUnsupportedFriend:
      return toClientReflType<bool>(C);
    case reflenums::clang__FriendDecl::isUnsupportedFriend:
      return toClientReflType<bool>(C);
    case reflenums::clang__FriendDecl::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__FriendDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__FriendDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__FriendDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__FriendDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__FriendDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__FriendDecl::classofKind:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__ObjCListBase:
  switch (static_cast<reflenums::clang__ObjCListBase::memnames>(MemNum)) {
    case reflenums::clang__ObjCListBase:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCListBase:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCListBase:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCListBase:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCListBase:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCListBase:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCListBase:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCListBase:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCListBase::size:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ObjCListBase::empty:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCListBase::empty:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCListBase::empty:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCListBase::empty:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__ObjCProtocolList:
  switch (static_cast<reflenums::clang__ObjCProtocolList::memnames>(MemNum)) {
    case reflenums::clang__ObjCProtocolList::_this_:
      if (IsPtr)
        return toClientReflType<clang::ObjCProtocolList *>(C);
      return toClientReflType<clang::ObjCProtocolList>(C);
    case reflenums::clang__ObjCProtocolList:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCProtocolList:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCProtocolList:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCProtocolList:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCProtocolList:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCProtocolList:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCProtocolList::operator_sub:
      return toClientReflType<class clang::ObjCProtocolDecl *>(C);
    case reflenums::clang__ObjCProtocolList::operator_sub:
      return toClientReflType<class clang::ObjCProtocolDecl *>(C);
    case reflenums::clang__ObjCProtocolList::operator_sub:
      return toClientReflType<class clang::ObjCProtocolDecl *>(C);
    case reflenums::clang__ObjCProtocolList::operator_sub:
      return toClientReflType<class clang::ObjCProtocolDecl *>(C);
    case reflenums::clang__ObjCProtocolList::operator_sub:
      return toClientReflType<class clang::ObjCProtocolDecl *>(C);
    case reflenums::clang__ObjCProtocolList::operator_sub:
      return toClientReflType<class clang::ObjCProtocolDecl *>(C);
    case reflenums::clang__ObjCProtocolList::operator_sub:
      return toClientReflType<class clang::ObjCProtocolDecl *>(C);
    case reflenums::clang__ObjCProtocolList:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCProtocolList:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCProtocolList:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCProtocolList:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCProtocolList:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCProtocolList:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCProtocolList:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCProtocolList:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCProtocolList:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCProtocolList:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCProtocolList:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCProtocolList:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCProtocolList:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCProtocolList:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCProtocolList:::
      return toClientReflType<>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__ObjCMethodDecl:
  switch (static_cast<reflenums::clang__ObjCMethodDecl::memnames>(MemNum)) {
    case reflenums::clang__ObjCMethodDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCMethodDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCMethodDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCMethodDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCMethodDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCMethodDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCMethodDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCMethodDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCMethodDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCMethodDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCMethodDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCMethodDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCMethodDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCMethodDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCMethodDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCMethodDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCMethodDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCMethodDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCMethodDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCMethodDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCMethodDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCMethodDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCMethodDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCMethodDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCMethodDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCMethodDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCMethodDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCMethodDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCMethodDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCMethodDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCMethodDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCMethodDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCMethodDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCMethodDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCMethodDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCMethodDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCMethodDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCMethodDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCMethodDecl::Create:
      return toClientReflType<class clang::ObjCMethodDecl *>(C);
    case reflenums::clang__ObjCMethodDecl::CreateDeserialized:
      return toClientReflType<class clang::ObjCMethodDecl *>(C);
    case reflenums::clang__ObjCMethodDecl::CreateDeserialized:
      return toClientReflType<class clang::ObjCMethodDecl *>(C);
    case reflenums::clang__ObjCMethodDecl::getCanonicalDecl:
      return toClientReflType<const class clang::ObjCMethodDecl *>(C);
    case reflenums::clang__ObjCMethodDecl::getObjCDeclQualifier:
      return toClientReflType<enum clang::Decl::ObjCDeclQualifier>(C);
    case reflenums::clang__ObjCMethodDecl::getObjCDeclQualifier:
      return toClientReflType<enum clang::Decl::ObjCDeclQualifier>(C);
    case reflenums::clang__ObjCMethodDecl::hasRelatedResultType:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCMethodDecl::hasRelatedResultType:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCMethodDecl::isRedeclaration:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCMethodDecl::isRedeclaration:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCMethodDecl::getDeclaratorEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCMethodDecl::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCMethodDecl::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCMethodDecl::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCMethodDecl::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCMethodDecl::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__ObjCMethodDecl::getSelectorStartLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCMethodDecl::getSelectorLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCMethodDecl::getSelectorLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCMethodDecl::getNumSelectorLocs:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ObjCMethodDecl::getNumSelectorLocs:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ObjCMethodDecl::getClassInterface:
      return toClientReflType<const class clang::ObjCInterfaceDecl *>(C);
    case reflenums::clang__ObjCMethodDecl::getSelector:
      return toClientReflType<class clang::Selector>(C);
    case reflenums::clang__ObjCMethodDecl::getReturnType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ObjCMethodDecl::getReturnType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ObjCMethodDecl::getReturnTypeSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__ObjCMethodDecl::getSendResultType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ObjCMethodDecl::getSendResultType1:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ObjCMethodDecl::getReturnTypeSourceInfo:
      return toClientReflType<class clang::TypeSourceInfo *>(C);
    case reflenums::clang__ObjCMethodDecl::getReturnTypeSourceInfo:
      return toClientReflType<class clang::TypeSourceInfo *>(C);
    case reflenums::clang__ObjCMethodDecl::param_size:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ObjCMethodDecl::param_size:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ObjCMethodDecl::param_size:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ObjCMethodDecl::param_size:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ObjCMethodDecl::param_size:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ObjCMethodDecl::param_size:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ObjCMethodDecl::param_size:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ObjCMethodDecl::param_size:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ObjCMethodDecl::param_size:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ObjCMethodDecl::param_size:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ObjCMethodDecl::parameters:
      return toClientReflType<class llvm::ArrayRef<class clang::ParmVarDecl *>>(C);
    case reflenums::clang__ObjCMethodDecl::parameters:
      return toClientReflType<class llvm::ArrayRef<class clang::ParmVarDecl *>>(C);
    case reflenums::clang__ObjCMethodDecl::parameters:
      return toClientReflType<class llvm::ArrayRef<class clang::ParmVarDecl *>>(C);
    case reflenums::clang__ObjCMethodDecl::parameters:
      return toClientReflType<class llvm::ArrayRef<class clang::ParmVarDecl *>>(C);
    case reflenums::clang__ObjCMethodDecl::parameters:
      return toClientReflType<class llvm::ArrayRef<class clang::ParmVarDecl *>>(C);
    case reflenums::clang__ObjCMethodDecl::parameters:
      return toClientReflType<class llvm::ArrayRef<class clang::ParmVarDecl *>>(C);
    case reflenums::clang__ObjCMethodDecl::parameters:
      return toClientReflType<class llvm::ArrayRef<class clang::ParmVarDecl *>>(C);
    case reflenums::clang__ObjCMethodDecl::parameters:
      return toClientReflType<class llvm::ArrayRef<class clang::ParmVarDecl *>>(C);
    case reflenums::clang__ObjCMethodDecl::getSelfDecl:
      return toClientReflType<class clang::ImplicitParamDecl *>(C);
    case reflenums::clang__ObjCMethodDecl::getSelfDecl:
      return toClientReflType<class clang::ImplicitParamDecl *>(C);
    case reflenums::clang__ObjCMethodDecl::getCmdDecl:
      return toClientReflType<class clang::ImplicitParamDecl *>(C);
    case reflenums::clang__ObjCMethodDecl::getCmdDecl:
      return toClientReflType<class clang::ImplicitParamDecl *>(C);
    case reflenums::clang__ObjCMethodDecl::getMethodFamily:
      return toClientReflType<enum clang::ObjCMethodFamily>(C);
    case reflenums::clang__ObjCMethodDecl::isInstanceMethod:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCMethodDecl::isInstanceMethod:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCMethodDecl::isVariadic:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCMethodDecl::isVariadic:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCMethodDecl::isClassMethod:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCMethodDecl::isPropertyAccessor:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCMethodDecl::isPropertyAccessor:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCMethodDecl::isDefined:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCMethodDecl::isDefined:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCMethodDecl::isOverriding:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCMethodDecl::isOverriding:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCMethodDecl::isOverriding:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCMethodDecl::hasSkippedBody:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCMethodDecl::hasSkippedBody:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCMethodDecl::findPropertyDecl:
      return toClientReflType<const class clang::ObjCPropertyDecl *>(C);
    case reflenums::clang__ObjCMethodDecl::findPropertyDecl:
      return toClientReflType<const class clang::ObjCPropertyDecl *>(C);
    case reflenums::clang__ObjCMethodDecl::getImplementationControl:
      return toClientReflType<enum clang::ObjCMethodDecl::ImplementationControl>(C);
    case reflenums::clang__ObjCMethodDecl::isOptional:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCMethodDecl::isThisDeclarationADesignatedInitializer:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCMethodDecl::isDesignatedInitializerForTheInterface:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCMethodDecl::hasBody:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCMethodDecl::getBody:
      return toClientReflType<class clang::Stmt *>(C);
    case reflenums::clang__ObjCMethodDecl::getBody:
      return toClientReflType<class clang::Stmt *>(C);
    case reflenums::clang__ObjCMethodDecl::getBody:
      return toClientReflType<class clang::Stmt *>(C);
    case reflenums::clang__ObjCMethodDecl::getBody:
      return toClientReflType<class clang::Stmt *>(C);
    case reflenums::clang__ObjCMethodDecl::isThisDeclarationADefinition:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCMethodDecl::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCMethodDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCMethodDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCMethodDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCMethodDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCMethodDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCMethodDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCMethodDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCMethodDecl::classofKind:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__ObjCTypeParamDecl:
  switch (static_cast<reflenums::clang__ObjCTypeParamDecl::memnames>(MemNum)) {
    case reflenums::clang__ObjCTypeParamDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCTypeParamDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCTypeParamDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCTypeParamDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCTypeParamDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCTypeParamDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCTypeParamDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCTypeParamDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCTypeParamDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCTypeParamDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCTypeParamDecl::Create:
      return toClientReflType<class clang::ObjCTypeParamDecl *>(C);
    case reflenums::clang__ObjCTypeParamDecl::CreateDeserialized:
      return toClientReflType<class clang::ObjCTypeParamDecl *>(C);
    case reflenums::clang__ObjCTypeParamDecl::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__ObjCTypeParamDecl::getVariance:
      return toClientReflType<enum clang::ObjCTypeParamVariance>(C);
    case reflenums::clang__ObjCTypeParamDecl::getVariance:
      return toClientReflType<enum clang::ObjCTypeParamVariance>(C);
    case reflenums::clang__ObjCTypeParamDecl::getVarianceLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCTypeParamDecl::getIndex:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ObjCTypeParamDecl::hasExplicitBound:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCTypeParamDecl::getColonLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCTypeParamDecl::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCTypeParamDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCTypeParamDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCTypeParamDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCTypeParamDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCTypeParamDecl::classofKind:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__ObjCTypeParamList:
  switch (static_cast<reflenums::clang__ObjCTypeParamList::memnames>(MemNum)) {
    case reflenums::clang__ObjCTypeParamList::_this_:
      if (IsPtr)
        return toClientReflType<clang::ObjCTypeParamList *>(C);
      return toClientReflType<clang::ObjCTypeParamList>(C);
    case reflenums::clang__ObjCTypeParamList:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCTypeParamList:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCTypeParamList:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCTypeParamList:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCTypeParamList:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCTypeParamList:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCTypeParamList:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCTypeParamList:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCTypeParamList:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCTypeParamList:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCTypeParamList:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCTypeParamList:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCTypeParamList:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCTypeParamList:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCTypeParamList::size:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ObjCTypeParamList::size:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ObjCTypeParamList::size:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ObjCTypeParamList::size:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ObjCTypeParamList::front:
      return toClientReflType<class clang::ObjCTypeParamDecl *>(C);
    case reflenums::clang__ObjCTypeParamList::back:
      return toClientReflType<class clang::ObjCTypeParamDecl *>(C);
    case reflenums::clang__ObjCTypeParamList::getLAngleLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCTypeParamList::getRAngleLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCTypeParamList::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__ObjCTypeParamList::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__ObjCPropertyDecl:
  switch (static_cast<reflenums::clang__ObjCPropertyDecl::memnames>(MemNum)) {
    case reflenums::clang__ObjCPropertyDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCPropertyDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCPropertyDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCPropertyDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCPropertyDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCPropertyDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCPropertyDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCPropertyDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCPropertyDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCPropertyDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCPropertyDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCPropertyDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCPropertyDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCPropertyDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCPropertyDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCPropertyDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCPropertyDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCPropertyDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCPropertyDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCPropertyDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCPropertyDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCPropertyDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCPropertyDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCPropertyDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCPropertyDecl::Create:
      return toClientReflType<class clang::ObjCPropertyDecl *>(C);
    case reflenums::clang__ObjCPropertyDecl::CreateDeserialized:
      return toClientReflType<class clang::ObjCPropertyDecl *>(C);
    case reflenums::clang__ObjCPropertyDecl::getAtLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCPropertyDecl::getAtLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCPropertyDecl::getLParenLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCPropertyDecl::getLParenLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCPropertyDecl::getTypeSourceInfo:
      return toClientReflType<class clang::TypeSourceInfo *>(C);
    case reflenums::clang__ObjCPropertyDecl::getType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ObjCPropertyDecl::getType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ObjCPropertyDecl::getUsageType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ObjCPropertyDecl::getPropertyAttributes:
      return toClientReflType<enum clang::ObjCPropertyDecl::PropertyAttributeKind>(C);
    case reflenums::clang__ObjCPropertyDecl::getPropertyAttributes:
      return toClientReflType<enum clang::ObjCPropertyDecl::PropertyAttributeKind>(C);
    case reflenums::clang__ObjCPropertyDecl::getPropertyAttributes:
      return toClientReflType<enum clang::ObjCPropertyDecl::PropertyAttributeKind>(C);
    case reflenums::clang__ObjCPropertyDecl::getPropertyAttributesAsWritten:
      return toClientReflType<enum clang::ObjCPropertyDecl::PropertyAttributeKind>(C);
    case reflenums::clang__ObjCPropertyDecl::getPropertyAttributesAsWritten:
      return toClientReflType<enum clang::ObjCPropertyDecl::PropertyAttributeKind>(C);
    case reflenums::clang__ObjCPropertyDecl::isReadOnly:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCPropertyDecl::isAtomic:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCPropertyDecl::isRetaining:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCPropertyDecl::isInstanceProperty:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCPropertyDecl::isClassProperty:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCPropertyDecl::getQueryKind:
      return toClientReflType<enum clang::ObjCPropertyQueryKind>(C);
    case reflenums::clang__ObjCPropertyDecl::getQueryKind1:
      return toClientReflType<enum clang::ObjCPropertyQueryKind>(C);
    case reflenums::clang__ObjCPropertyDecl::getSetterKind:
      return toClientReflType<enum clang::ObjCPropertyDecl::SetterKind>(C);
    case reflenums::clang__ObjCPropertyDecl::getGetterName:
      return toClientReflType<class clang::Selector>(C);
    case reflenums::clang__ObjCPropertyDecl::getGetterNameLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCPropertyDecl::getGetterNameLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCPropertyDecl::getSetterName:
      return toClientReflType<class clang::Selector>(C);
    case reflenums::clang__ObjCPropertyDecl::getSetterNameLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCPropertyDecl::getSetterNameLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCPropertyDecl::getGetterMethodDecl:
      return toClientReflType<class clang::ObjCMethodDecl *>(C);
    case reflenums::clang__ObjCPropertyDecl::getGetterMethodDecl:
      return toClientReflType<class clang::ObjCMethodDecl *>(C);
    case reflenums::clang__ObjCPropertyDecl::getSetterMethodDecl:
      return toClientReflType<class clang::ObjCMethodDecl *>(C);
    case reflenums::clang__ObjCPropertyDecl::getSetterMethodDecl:
      return toClientReflType<class clang::ObjCMethodDecl *>(C);
    case reflenums::clang__ObjCPropertyDecl::getSetterMethodDecl:
      return toClientReflType<class clang::ObjCMethodDecl *>(C);
    case reflenums::clang__ObjCPropertyDecl::getPropertyImplementation:
      return toClientReflType<enum clang::ObjCPropertyDecl::PropertyControl>(C);
    case reflenums::clang__ObjCPropertyDecl::isOptional:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCPropertyDecl::isOptional:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCPropertyDecl::getPropertyIvarDecl:
      return toClientReflType<class clang::ObjCIvarDecl *>(C);
    case reflenums::clang__ObjCPropertyDecl::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__ObjCPropertyDecl::getDefaultSynthIvarName:
      return toClientReflType<class clang::IdentifierInfo *>(C);
    case reflenums::clang__ObjCPropertyDecl::findPropertyDecl:
      return toClientReflType<class clang::ObjCPropertyDecl *>(C);
    case reflenums::clang__ObjCPropertyDecl::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCPropertyDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCPropertyDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCPropertyDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCPropertyDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCPropertyDecl::classofKind:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__ObjCContainerDecl:
  switch (static_cast<reflenums::clang__ObjCContainerDecl::memnames>(MemNum)) {
    case reflenums::clang__ObjCContainerDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCContainerDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCContainerDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCContainerDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCContainerDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCContainerDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCContainerDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCContainerDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCContainerDecl::properties:
      return toClientReflType<class llvm::iterator_range<class clang::DeclContext::specific_decl_iterator<class clang::ObjCPropertyDecl> >>(C);
    case reflenums::clang__ObjCContainerDecl::properties:
      return toClientReflType<class llvm::iterator_range<class clang::DeclContext::specific_decl_iterator<class clang::ObjCPropertyDecl> >>(C);
    case reflenums::clang__ObjCContainerDecl::properties:
      return toClientReflType<class llvm::iterator_range<class clang::DeclContext::specific_decl_iterator<class clang::ObjCPropertyDecl> >>(C);
    case reflenums::clang__ObjCContainerDecl::properties:
      return toClientReflType<class llvm::iterator_range<class clang::DeclContext::specific_decl_iterator<class clang::ObjCPropertyDecl> >>(C);
    case reflenums::clang__ObjCContainerDecl::properties:
      return toClientReflType<class llvm::iterator_range<class clang::DeclContext::specific_decl_iterator<class clang::ObjCPropertyDecl> >>(C);
    case reflenums::clang__ObjCContainerDecl::instance_properties:
      return toClientReflType<class llvm::iterator_range<class clang::DeclContext::filtered_decl_iterator<class clang::ObjCPropertyDecl, &clang::ObjCPropertyDecl::isInstanceProperty> >>(C);
    case reflenums::clang__ObjCContainerDecl::instance_properties:
      return toClientReflType<class llvm::iterator_range<class clang::DeclContext::filtered_decl_iterator<class clang::ObjCPropertyDecl, &clang::ObjCPropertyDecl::isInstanceProperty> >>(C);
    case reflenums::clang__ObjCContainerDecl::instance_properties:
      return toClientReflType<class llvm::iterator_range<class clang::DeclContext::filtered_decl_iterator<class clang::ObjCPropertyDecl, &clang::ObjCPropertyDecl::isInstanceProperty> >>(C);
    case reflenums::clang__ObjCContainerDecl::instance_properties:
      return toClientReflType<class llvm::iterator_range<class clang::DeclContext::filtered_decl_iterator<class clang::ObjCPropertyDecl, &clang::ObjCPropertyDecl::isInstanceProperty> >>(C);
    case reflenums::clang__ObjCContainerDecl::instance_properties:
      return toClientReflType<class llvm::iterator_range<class clang::DeclContext::filtered_decl_iterator<class clang::ObjCPropertyDecl, &clang::ObjCPropertyDecl::isInstanceProperty> >>(C);
    case reflenums::clang__ObjCContainerDecl::class_properties:
      return toClientReflType<class llvm::iterator_range<class clang::DeclContext::filtered_decl_iterator<class clang::ObjCPropertyDecl, &clang::ObjCPropertyDecl::isClassProperty> >>(C);
    case reflenums::clang__ObjCContainerDecl::class_properties:
      return toClientReflType<class llvm::iterator_range<class clang::DeclContext::filtered_decl_iterator<class clang::ObjCPropertyDecl, &clang::ObjCPropertyDecl::isClassProperty> >>(C);
    case reflenums::clang__ObjCContainerDecl::class_properties:
      return toClientReflType<class llvm::iterator_range<class clang::DeclContext::filtered_decl_iterator<class clang::ObjCPropertyDecl, &clang::ObjCPropertyDecl::isClassProperty> >>(C);
    case reflenums::clang__ObjCContainerDecl::class_properties:
      return toClientReflType<class llvm::iterator_range<class clang::DeclContext::filtered_decl_iterator<class clang::ObjCPropertyDecl, &clang::ObjCPropertyDecl::isClassProperty> >>(C);
    case reflenums::clang__ObjCContainerDecl::class_properties:
      return toClientReflType<class llvm::iterator_range<class clang::DeclContext::filtered_decl_iterator<class clang::ObjCPropertyDecl, &clang::ObjCPropertyDecl::isClassProperty> >>(C);
    case reflenums::clang__ObjCContainerDecl::methods:
      return toClientReflType<class llvm::iterator_range<class clang::DeclContext::specific_decl_iterator<class clang::ObjCMethodDecl> >>(C);
    case reflenums::clang__ObjCContainerDecl::methods:
      return toClientReflType<class llvm::iterator_range<class clang::DeclContext::specific_decl_iterator<class clang::ObjCMethodDecl> >>(C);
    case reflenums::clang__ObjCContainerDecl::methods:
      return toClientReflType<class llvm::iterator_range<class clang::DeclContext::specific_decl_iterator<class clang::ObjCMethodDecl> >>(C);
    case reflenums::clang__ObjCContainerDecl::methods:
      return toClientReflType<class llvm::iterator_range<class clang::DeclContext::specific_decl_iterator<class clang::ObjCMethodDecl> >>(C);
    case reflenums::clang__ObjCContainerDecl::methods:
      return toClientReflType<class llvm::iterator_range<class clang::DeclContext::specific_decl_iterator<class clang::ObjCMethodDecl> >>(C);
    case reflenums::clang__ObjCContainerDecl::instance_methods:
      return toClientReflType<class llvm::iterator_range<class clang::DeclContext::filtered_decl_iterator<class clang::ObjCMethodDecl, &clang::ObjCMethodDecl::isInstanceMethod> >>(C);
    case reflenums::clang__ObjCContainerDecl::instance_methods:
      return toClientReflType<class llvm::iterator_range<class clang::DeclContext::filtered_decl_iterator<class clang::ObjCMethodDecl, &clang::ObjCMethodDecl::isInstanceMethod> >>(C);
    case reflenums::clang__ObjCContainerDecl::instance_methods:
      return toClientReflType<class llvm::iterator_range<class clang::DeclContext::filtered_decl_iterator<class clang::ObjCMethodDecl, &clang::ObjCMethodDecl::isInstanceMethod> >>(C);
    case reflenums::clang__ObjCContainerDecl::instance_methods:
      return toClientReflType<class llvm::iterator_range<class clang::DeclContext::filtered_decl_iterator<class clang::ObjCMethodDecl, &clang::ObjCMethodDecl::isInstanceMethod> >>(C);
    case reflenums::clang__ObjCContainerDecl::instance_methods:
      return toClientReflType<class llvm::iterator_range<class clang::DeclContext::filtered_decl_iterator<class clang::ObjCMethodDecl, &clang::ObjCMethodDecl::isInstanceMethod> >>(C);
    case reflenums::clang__ObjCContainerDecl::class_methods:
      return toClientReflType<class llvm::iterator_range<class clang::DeclContext::filtered_decl_iterator<class clang::ObjCMethodDecl, &clang::ObjCMethodDecl::isClassMethod> >>(C);
    case reflenums::clang__ObjCContainerDecl::class_methods:
      return toClientReflType<class llvm::iterator_range<class clang::DeclContext::filtered_decl_iterator<class clang::ObjCMethodDecl, &clang::ObjCMethodDecl::isClassMethod> >>(C);
    case reflenums::clang__ObjCContainerDecl::class_methods:
      return toClientReflType<class llvm::iterator_range<class clang::DeclContext::filtered_decl_iterator<class clang::ObjCMethodDecl, &clang::ObjCMethodDecl::isClassMethod> >>(C);
    case reflenums::clang__ObjCContainerDecl::getMethod:
      return toClientReflType<class clang::ObjCMethodDecl *>(C);
    case reflenums::clang__ObjCContainerDecl::getInstanceMethod:
      return toClientReflType<class clang::ObjCMethodDecl *>(C);
    case reflenums::clang__ObjCContainerDecl::getClassMethod:
      return toClientReflType<class clang::ObjCMethodDecl *>(C);
    case reflenums::clang__ObjCContainerDecl::HasUserDeclaredSetterMethod:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCContainerDecl::getIvarDecl:
      return toClientReflType<class clang::ObjCIvarDecl *>(C);
    case reflenums::clang__ObjCContainerDecl::FindPropertyDeclaration:
      return toClientReflType<class clang::ObjCPropertyDecl *>(C);
    case reflenums::clang__ObjCContainerDecl::FindPropertyDeclaration:
      return toClientReflType<class clang::ObjCPropertyDecl *>(C);
    case reflenums::clang__ObjCContainerDecl::FindPropertyDeclaration:
      return toClientReflType<class clang::ObjCPropertyDecl *>(C);
    case reflenums::clang__ObjCContainerDecl::FindPropertyDeclaration:
      return toClientReflType<class clang::ObjCPropertyDecl *>(C);
    case reflenums::clang__ObjCContainerDecl::FindPropertyDeclaration:
      return toClientReflType<class clang::ObjCPropertyDecl *>(C);
    case reflenums::clang__ObjCContainerDecl::getAtStartLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCContainerDecl::getAtStartLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCContainerDecl::getAtEndRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__ObjCContainerDecl::getAtEndRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__ObjCContainerDecl::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__ObjCContainerDecl::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCContainerDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCContainerDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCContainerDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCContainerDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCContainerDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCContainerDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCContainerDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCContainerDecl::classofKind:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__ObjCInterfaceDecl:
  switch (static_cast<reflenums::clang__ObjCInterfaceDecl::memnames>(MemNum)) {
    case reflenums::clang__ObjCInterfaceDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCInterfaceDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCInterfaceDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCInterfaceDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCInterfaceDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCInterfaceDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCInterfaceDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCInterfaceDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCInterfaceDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCInterfaceDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCInterfaceDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCInterfaceDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCInterfaceDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCInterfaceDecl::getPreviousDecl:
      return toClientReflType<const class clang::ObjCInterfaceDecl *>(C);
    case reflenums::clang__ObjCInterfaceDecl::getPreviousDecl:
      return toClientReflType<const class clang::ObjCInterfaceDecl *>(C);
    case reflenums::clang__ObjCInterfaceDecl::getFirstDecl:
      return toClientReflType<const class clang::ObjCInterfaceDecl *>(C);
    case reflenums::clang__ObjCInterfaceDecl::getFirstDecl:
      return toClientReflType<const class clang::ObjCInterfaceDecl *>(C);
    case reflenums::clang__ObjCInterfaceDecl::getFirstDecl:
      return toClientReflType<const class clang::ObjCInterfaceDecl *>(C);
    case reflenums::clang__ObjCInterfaceDecl::getMostRecentDecl:
      return toClientReflType<const class clang::ObjCInterfaceDecl *>(C);
    case reflenums::clang__ObjCInterfaceDecl::getMostRecentDecl:
      return toClientReflType<const class clang::ObjCInterfaceDecl *>(C);
    case reflenums::clang__ObjCInterfaceDecl::getMostRecentDecl:
      return toClientReflType<const class clang::ObjCInterfaceDecl *>(C);
    case reflenums::clang__ObjCInterfaceDecl::getMostRecentDecl:
      return toClientReflType<const class clang::ObjCInterfaceDecl *>(C);
    case reflenums::clang__ObjCInterfaceDecl::getMostRecentDecl:
      return toClientReflType<const class clang::ObjCInterfaceDecl *>(C);
    case reflenums::clang__ObjCInterfaceDecl::getMostRecentDecl:
      return toClientReflType<const class clang::ObjCInterfaceDecl *>(C);
    case reflenums::clang__ObjCInterfaceDecl::getMostRecentDecl:
      return toClientReflType<const class clang::ObjCInterfaceDecl *>(C);
    case reflenums::clang__ObjCInterfaceDecl::getMostRecentDecl:
      return toClientReflType<const class clang::ObjCInterfaceDecl *>(C);
    case reflenums::clang__ObjCInterfaceDecl::getMostRecentDecl:
      return toClientReflType<const class clang::ObjCInterfaceDecl *>(C);
    case reflenums::clang__ObjCInterfaceDecl::getMostRecentDecl:
      return toClientReflType<const class clang::ObjCInterfaceDecl *>(C);
    case reflenums::clang__ObjCInterfaceDecl::getMostRecentDecl:
      return toClientReflType<const class clang::ObjCInterfaceDecl *>(C);
    case reflenums::clang__ObjCInterfaceDecl::getMostRecentDecl:
      return toClientReflType<const class clang::ObjCInterfaceDecl *>(C);
    case reflenums::clang__ObjCInterfaceDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCInterfaceDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCInterfaceDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCInterfaceDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCInterfaceDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCInterfaceDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCInterfaceDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCInterfaceDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCInterfaceDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCInterfaceDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCInterfaceDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCInterfaceDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCInterfaceDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCInterfaceDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCInterfaceDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCInterfaceDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCInterfaceDecl::Create:
      return toClientReflType<class clang::ObjCInterfaceDecl *>(C);
    case reflenums::clang__ObjCInterfaceDecl::CreateDeserialized:
      return toClientReflType<class clang::ObjCInterfaceDecl *>(C);
    case reflenums::clang__ObjCInterfaceDecl::getTypeParamList:
      return toClientReflType<class clang::ObjCTypeParamList *>(C);
    case reflenums::clang__ObjCInterfaceDecl::getTypeParamList:
      return toClientReflType<class clang::ObjCTypeParamList *>(C);
    case reflenums::clang__ObjCInterfaceDecl::getTypeParamListAsWritten:
      return toClientReflType<class clang::ObjCTypeParamList *>(C);
    case reflenums::clang__ObjCInterfaceDecl::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__ObjCInterfaceDecl::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__ObjCInterfaceDecl::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__ObjCInterfaceDecl::hasDesignatedInitializers:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCInterfaceDecl::declaresOrInheritsDesignatedInitializers:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCInterfaceDecl::getReferencedProtocols:
      return toClientReflType<const class clang::ObjCProtocolList &>(C);
    case reflenums::clang__ObjCInterfaceDecl::getImplementation:
      return toClientReflType<class clang::ObjCImplementationDecl *>(C);
    case reflenums::clang__ObjCInterfaceDecl::getImplementation:
      return toClientReflType<class clang::ObjCImplementationDecl *>(C);
    case reflenums::clang__ObjCInterfaceDecl::FindCategoryDeclaration:
      return toClientReflType<class clang::ObjCCategoryDecl *>(C);
    case reflenums::clang__ObjCInterfaceDecl::getCategoryInstanceMethod:
      return toClientReflType<class clang::ObjCMethodDecl *>(C);
    case reflenums::clang__ObjCInterfaceDecl::getCategoryClassMethod:
      return toClientReflType<class clang::ObjCMethodDecl *>(C);
    case reflenums::clang__ObjCInterfaceDecl::getCategoryMethod:
      return toClientReflType<class clang::ObjCMethodDecl *>(C);
    case reflenums::clang__ObjCInterfaceDecl::getCategoryMethod:
      return toClientReflType<class clang::ObjCMethodDecl *>(C);
    case reflenums::clang__ObjCInterfaceDecl::getCategoryMethod:
      return toClientReflType<class clang::ObjCMethodDecl *>(C);
    case reflenums::clang__ObjCInterfaceDecl::protocols:
      return toClientReflType<class llvm::iterator_range<class clang::ObjCProtocolDecl *const *>>(C);
    case reflenums::clang__ObjCInterfaceDecl::protocols:
      return toClientReflType<class llvm::iterator_range<class clang::ObjCProtocolDecl *const *>>(C);
    case reflenums::clang__ObjCInterfaceDecl::protocols:
      return toClientReflType<class llvm::iterator_range<class clang::ObjCProtocolDecl *const *>>(C);
    case reflenums::clang__ObjCInterfaceDecl::protocols:
      return toClientReflType<class llvm::iterator_range<class clang::ObjCProtocolDecl *const *>>(C);
    case reflenums::clang__ObjCInterfaceDecl::protocols:
      return toClientReflType<class llvm::iterator_range<class clang::ObjCProtocolDecl *const *>>(C);
    case reflenums::clang__ObjCInterfaceDecl::protocol_locs:
      return toClientReflType<class llvm::iterator_range<const class clang::SourceLocation *>>(C);
    case reflenums::clang__ObjCInterfaceDecl::protocol_locs:
      return toClientReflType<class llvm::iterator_range<const class clang::SourceLocation *>>(C);
    case reflenums::clang__ObjCInterfaceDecl::protocol_locs:
      return toClientReflType<class llvm::iterator_range<const class clang::SourceLocation *>>(C);
    case reflenums::clang__ObjCInterfaceDecl::protocol_locs:
      return toClientReflType<class llvm::iterator_range<const class clang::SourceLocation *>>(C);
    case reflenums::clang__ObjCInterfaceDecl::protocol_locs:
      return toClientReflType<class llvm::iterator_range<const class clang::SourceLocation *>>(C);
    case reflenums::clang__ObjCInterfaceDecl::all_referenced_protocols:
      return toClientReflType<class llvm::iterator_range<class clang::ObjCProtocolDecl *const *>>(C);
    case reflenums::clang__ObjCInterfaceDecl::all_referenced_protocols:
      return toClientReflType<class llvm::iterator_range<class clang::ObjCProtocolDecl *const *>>(C);
    case reflenums::clang__ObjCInterfaceDecl::all_referenced_protocols:
      return toClientReflType<class llvm::iterator_range<class clang::ObjCProtocolDecl *const *>>(C);
    case reflenums::clang__ObjCInterfaceDecl::all_referenced_protocols:
      return toClientReflType<class llvm::iterator_range<class clang::ObjCProtocolDecl *const *>>(C);
    case reflenums::clang__ObjCInterfaceDecl::all_referenced_protocols:
      return toClientReflType<class llvm::iterator_range<class clang::ObjCProtocolDecl *const *>>(C);
    case reflenums::clang__ObjCInterfaceDecl::ivars:
      return toClientReflType<class llvm::iterator_range<class clang::DeclContext::specific_decl_iterator<class clang::ObjCIvarDecl> >>(C);
    case reflenums::clang__ObjCInterfaceDecl::ivars:
      return toClientReflType<class llvm::iterator_range<class clang::DeclContext::specific_decl_iterator<class clang::ObjCIvarDecl> >>(C);
    case reflenums::clang__ObjCInterfaceDecl::ivars:
      return toClientReflType<class llvm::iterator_range<class clang::DeclContext::specific_decl_iterator<class clang::ObjCIvarDecl> >>(C);
    case reflenums::clang__ObjCInterfaceDecl::ivar_size:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ObjCInterfaceDecl::ivar_empty:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCInterfaceDecl::ivar_empty:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCInterfaceDecl::ivar_empty:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCInterfaceDecl::ivar_empty:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCInterfaceDecl::ivar_empty:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCInterfaceDecl::ivar_empty:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCInterfaceDecl::getObjCRuntimeNameAsString:
      return toClientReflType<const char *>(C);
    case reflenums::clang__ObjCInterfaceDecl::getObjCRuntimeNameAsString:
      return toClientReflType<const char *>(C);
    case reflenums::clang__ObjCInterfaceDecl::isDesignatedInitializer:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCInterfaceDecl::isThisDeclarationADefinition:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCInterfaceDecl::hasDefinition:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCInterfaceDecl::hasDefinition:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCInterfaceDecl::getDefinition:
      return toClientReflType<const class clang::ObjCInterfaceDecl *>(C);
    case reflenums::clang__ObjCInterfaceDecl::getDefinition:
      return toClientReflType<const class clang::ObjCInterfaceDecl *>(C);
    case reflenums::clang__ObjCInterfaceDecl::getSuperClassType:
      return toClientReflType<const class clang::ObjCObjectType *>(C);
    case reflenums::clang__ObjCInterfaceDecl::getSuperClassTInfo:
      return toClientReflType<class clang::TypeSourceInfo *>(C);
    case reflenums::clang__ObjCInterfaceDecl::getSuperClass:
      return toClientReflType<class clang::ObjCInterfaceDecl *>(C);
    case reflenums::clang__ObjCInterfaceDecl::getSuperClass:
      return toClientReflType<class clang::ObjCInterfaceDecl *>(C);
    case reflenums::clang__ObjCInterfaceDecl::getSuperClass:
      return toClientReflType<class clang::ObjCInterfaceDecl *>(C);
    case reflenums::clang__ObjCInterfaceDecl::getSuperClass:
      return toClientReflType<class clang::ObjCInterfaceDecl *>(C);
    case reflenums::clang__ObjCInterfaceDecl::getSuperClass:
      return toClientReflType<class clang::ObjCInterfaceDecl *>(C);
    case reflenums::clang__ObjCInterfaceDecl::getSuperClass:
      return toClientReflType<class clang::ObjCInterfaceDecl *>(C);
    case reflenums::clang__ObjCInterfaceDecl::getSuperClass:
      return toClientReflType<class clang::ObjCInterfaceDecl *>(C);
    case reflenums::clang__ObjCInterfaceDecl::getSuperClass:
      return toClientReflType<class clang::ObjCInterfaceDecl *>(C);
    case reflenums::clang__ObjCInterfaceDecl::visible_categories:
      return toClientReflType<class llvm::iterator_range<class clang::ObjCInterfaceDecl::filtered_category_iterator<&clang::ObjCInterfaceDecl::isVisibleCategory> >>(C);
    case reflenums::clang__ObjCInterfaceDecl::visible_categories:
      return toClientReflType<class llvm::iterator_range<class clang::ObjCInterfaceDecl::filtered_category_iterator<&clang::ObjCInterfaceDecl::isVisibleCategory> >>(C);
    case reflenums::clang__ObjCInterfaceDecl::visible_categories:
      return toClientReflType<class llvm::iterator_range<class clang::ObjCInterfaceDecl::filtered_category_iterator<&clang::ObjCInterfaceDecl::isVisibleCategory> >>(C);
    case reflenums::clang__ObjCInterfaceDecl::visible_categories_empty:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCInterfaceDecl::visible_categories_empty:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCInterfaceDecl::visible_categories_empty:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCInterfaceDecl::visible_categories_empty:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCInterfaceDecl::visible_categories_empty:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCInterfaceDecl::visible_categories_empty:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCInterfaceDecl::known_categories:
      return toClientReflType<class llvm::iterator_range<class clang::ObjCInterfaceDecl::filtered_category_iterator<&clang::ObjCInterfaceDecl::isKnownCategory> >>(C);
    case reflenums::clang__ObjCInterfaceDecl::known_categories:
      return toClientReflType<class llvm::iterator_range<class clang::ObjCInterfaceDecl::filtered_category_iterator<&clang::ObjCInterfaceDecl::isKnownCategory> >>(C);
    case reflenums::clang__ObjCInterfaceDecl::known_categories:
      return toClientReflType<class llvm::iterator_range<class clang::ObjCInterfaceDecl::filtered_category_iterator<&clang::ObjCInterfaceDecl::isKnownCategory> >>(C);
    case reflenums::clang__ObjCInterfaceDecl::known_categories_empty:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCInterfaceDecl::known_categories_empty:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCInterfaceDecl::known_categories_empty:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCInterfaceDecl::known_categories_empty:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCInterfaceDecl::known_categories_empty:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCInterfaceDecl::known_categories_empty:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCInterfaceDecl::visible_extensions:
      return toClientReflType<class llvm::iterator_range<class clang::ObjCInterfaceDecl::filtered_category_iterator<&clang::ObjCInterfaceDecl::isVisibleExtension> >>(C);
    case reflenums::clang__ObjCInterfaceDecl::visible_extensions:
      return toClientReflType<class llvm::iterator_range<class clang::ObjCInterfaceDecl::filtered_category_iterator<&clang::ObjCInterfaceDecl::isVisibleExtension> >>(C);
    case reflenums::clang__ObjCInterfaceDecl::visible_extensions:
      return toClientReflType<class llvm::iterator_range<class clang::ObjCInterfaceDecl::filtered_category_iterator<&clang::ObjCInterfaceDecl::isVisibleExtension> >>(C);
    case reflenums::clang__ObjCInterfaceDecl::visible_extensions_empty:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCInterfaceDecl::visible_extensions_empty:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCInterfaceDecl::visible_extensions_empty:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCInterfaceDecl::visible_extensions_empty:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCInterfaceDecl::visible_extensions_empty:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCInterfaceDecl::visible_extensions_empty:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCInterfaceDecl::visible_extensions_empty:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCInterfaceDecl::visible_extensions_empty:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCInterfaceDecl::visible_extensions_empty:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCInterfaceDecl::known_extensions:
      return toClientReflType<class llvm::iterator_range<class clang::ObjCInterfaceDecl::filtered_category_iterator<&clang::ObjCInterfaceDecl::isKnownExtension> >>(C);
    case reflenums::clang__ObjCInterfaceDecl::known_extensions:
      return toClientReflType<class llvm::iterator_range<class clang::ObjCInterfaceDecl::filtered_category_iterator<&clang::ObjCInterfaceDecl::isKnownExtension> >>(C);
    case reflenums::clang__ObjCInterfaceDecl::known_extensions:
      return toClientReflType<class llvm::iterator_range<class clang::ObjCInterfaceDecl::filtered_category_iterator<&clang::ObjCInterfaceDecl::isKnownExtension> >>(C);
    case reflenums::clang__ObjCInterfaceDecl::known_extensions_empty:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCInterfaceDecl::getCategoryListRaw:
      return toClientReflType<class clang::ObjCCategoryDecl *>(C);
    case reflenums::clang__ObjCInterfaceDecl::getCategoryListRaw:
      return toClientReflType<class clang::ObjCCategoryDecl *>(C);
    case reflenums::clang__ObjCInterfaceDecl::FindPropertyVisibleInPrimaryClass:
      return toClientReflType<class clang::ObjCPropertyDecl *>(C);
    case reflenums::clang__ObjCInterfaceDecl::FindPropertyVisibleInPrimaryClass:
      return toClientReflType<class clang::ObjCPropertyDecl *>(C);
    case reflenums::clang__ObjCInterfaceDecl::isSuperClassOf:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCInterfaceDecl::isArcWeakrefUnavailable:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCInterfaceDecl::isObjCRequiresPropertyDefs:
      return toClientReflType<const class clang::ObjCInterfaceDecl *>(C);
    case reflenums::clang__ObjCInterfaceDecl::isObjCRequiresPropertyDefs:
      return toClientReflType<const class clang::ObjCInterfaceDecl *>(C);
    case reflenums::clang__ObjCInterfaceDecl::isObjCRequiresPropertyDefs:
      return toClientReflType<const class clang::ObjCInterfaceDecl *>(C);
    case reflenums::clang__ObjCInterfaceDecl::isObjCRequiresPropertyDefs:
      return toClientReflType<const class clang::ObjCInterfaceDecl *>(C);
    case reflenums::clang__ObjCInterfaceDecl::lookupMethod:
      return toClientReflType<class clang::ObjCMethodDecl *>(C);
    case reflenums::clang__ObjCInterfaceDecl::lookupInstanceMethod:
      return toClientReflType<class clang::ObjCMethodDecl *>(C);
    case reflenums::clang__ObjCInterfaceDecl::lookupClassMethod:
      return toClientReflType<class clang::ObjCMethodDecl *>(C);
    case reflenums::clang__ObjCInterfaceDecl::lookupClassMethod:
      return toClientReflType<class clang::ObjCMethodDecl *>(C);
    case reflenums::clang__ObjCInterfaceDecl::lookupPrivateMethod:
      return toClientReflType<class clang::ObjCMethodDecl *>(C);
    case reflenums::clang__ObjCInterfaceDecl::lookupPrivateMethod:
      return toClientReflType<class clang::ObjCMethodDecl *>(C);
    case reflenums::clang__ObjCInterfaceDecl::lookupPropertyAccessor:
      return toClientReflType<class clang::ObjCMethodDecl *>(C);
    case reflenums::clang__ObjCInterfaceDecl::getEndOfDefinitionLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCInterfaceDecl::getEndOfDefinitionLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCInterfaceDecl::getSuperClassLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCInterfaceDecl::isImplicitInterfaceDecl:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCInterfaceDecl::isImplicitInterfaceDecl:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCInterfaceDecl::isImplicitInterfaceDecl:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCInterfaceDecl::isImplicitInterfaceDecl:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCInterfaceDecl::isImplicitInterfaceDecl:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCInterfaceDecl::isImplicitInterfaceDecl:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCInterfaceDecl::isImplicitInterfaceDecl:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCInterfaceDecl::isImplicitInterfaceDecl:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCInterfaceDecl::isImplicitInterfaceDecl:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCInterfaceDecl::isImplicitInterfaceDecl:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCInterfaceDecl::isImplicitInterfaceDecl:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCInterfaceDecl::isImplicitInterfaceDecl:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCInterfaceDecl::isImplicitInterfaceDecl:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCInterfaceDecl::isImplicitInterfaceDecl:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCInterfaceDecl::isImplicitInterfaceDecl:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCInterfaceDecl::isImplicitInterfaceDecl:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCInterfaceDecl::isImplicitInterfaceDecl:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCInterfaceDecl::isImplicitInterfaceDecl:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCInterfaceDecl::isImplicitInterfaceDecl:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCInterfaceDecl::getCanonicalDecl:
      return toClientReflType<const class clang::ObjCInterfaceDecl *>(C);
    case reflenums::clang__ObjCInterfaceDecl::getTypeForDecl:
      return toClientReflType<const class clang::Type *>(C);
    case reflenums::clang__ObjCInterfaceDecl::setTypeForDecl:
      return toClientReflType<void>(C);
    case reflenums::clang__ObjCInterfaceDecl::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCInterfaceDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCInterfaceDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCInterfaceDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCInterfaceDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCInterfaceDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCInterfaceDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCInterfaceDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCInterfaceDecl::classofKind:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__ObjCIvarDecl:
  switch (static_cast<reflenums::clang__ObjCIvarDecl::memnames>(MemNum)) {
    case reflenums::clang__ObjCIvarDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCIvarDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCIvarDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCIvarDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCIvarDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCIvarDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCIvarDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCIvarDecl::Create:
      return toClientReflType<class clang::ObjCIvarDecl *>(C);
    case reflenums::clang__ObjCIvarDecl::CreateDeserialized:
      return toClientReflType<class clang::ObjCIvarDecl *>(C);
    case reflenums::clang__ObjCIvarDecl::getContainingInterface:
      return toClientReflType<const class clang::ObjCInterfaceDecl *>(C);
    case reflenums::clang__ObjCIvarDecl::getContainingInterface:
      return toClientReflType<const class clang::ObjCInterfaceDecl *>(C);
    case reflenums::clang__ObjCIvarDecl::getNextIvar:
      return toClientReflType<const class clang::ObjCIvarDecl *>(C);
    case reflenums::clang__ObjCIvarDecl::getNextIvar:
      return toClientReflType<const class clang::ObjCIvarDecl *>(C);
    case reflenums::clang__ObjCIvarDecl::getNextIvar:
      return toClientReflType<const class clang::ObjCIvarDecl *>(C);
    case reflenums::clang__ObjCIvarDecl::getAccessControl:
      return toClientReflType<enum clang::ObjCIvarDecl::AccessControl>(C);
    case reflenums::clang__ObjCIvarDecl::getCanonicalAccessControl:
      return toClientReflType<enum clang::ObjCIvarDecl::AccessControl>(C);
    case reflenums::clang__ObjCIvarDecl::getCanonicalAccessControl:
      return toClientReflType<enum clang::ObjCIvarDecl::AccessControl>(C);
    case reflenums::clang__ObjCIvarDecl::getSynthesize:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCIvarDecl::getUsageType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ObjCIvarDecl::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCIvarDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCIvarDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCIvarDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCIvarDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCIvarDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCIvarDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCIvarDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCIvarDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCIvarDecl::classofKind:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__ObjCAtDefsFieldDecl:
  switch (static_cast<reflenums::clang__ObjCAtDefsFieldDecl::memnames>(MemNum)) {
    case reflenums::clang__ObjCAtDefsFieldDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCAtDefsFieldDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCAtDefsFieldDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCAtDefsFieldDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCAtDefsFieldDecl::Create:
      return toClientReflType<class clang::ObjCAtDefsFieldDecl *>(C);
    case reflenums::clang__ObjCAtDefsFieldDecl::CreateDeserialized:
      return toClientReflType<class clang::ObjCAtDefsFieldDecl *>(C);
    case reflenums::clang__ObjCAtDefsFieldDecl::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCAtDefsFieldDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCAtDefsFieldDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCAtDefsFieldDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCAtDefsFieldDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCAtDefsFieldDecl::classofKind:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__ObjCProtocolDecl:
  switch (static_cast<reflenums::clang__ObjCProtocolDecl::memnames>(MemNum)) {
    case reflenums::clang__ObjCProtocolDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCProtocolDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCProtocolDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCProtocolDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCProtocolDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCProtocolDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCProtocolDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCProtocolDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCProtocolDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCProtocolDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCProtocolDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCProtocolDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCProtocolDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCProtocolDecl::getPreviousDecl:
      return toClientReflType<const class clang::ObjCProtocolDecl *>(C);
    case reflenums::clang__ObjCProtocolDecl::getPreviousDecl:
      return toClientReflType<const class clang::ObjCProtocolDecl *>(C);
    case reflenums::clang__ObjCProtocolDecl::getFirstDecl:
      return toClientReflType<const class clang::ObjCProtocolDecl *>(C);
    case reflenums::clang__ObjCProtocolDecl::getFirstDecl:
      return toClientReflType<const class clang::ObjCProtocolDecl *>(C);
    case reflenums::clang__ObjCProtocolDecl::getFirstDecl:
      return toClientReflType<const class clang::ObjCProtocolDecl *>(C);
    case reflenums::clang__ObjCProtocolDecl::getMostRecentDecl:
      return toClientReflType<const class clang::ObjCProtocolDecl *>(C);
    case reflenums::clang__ObjCProtocolDecl::getMostRecentDecl:
      return toClientReflType<const class clang::ObjCProtocolDecl *>(C);
    case reflenums::clang__ObjCProtocolDecl::getMostRecentDecl:
      return toClientReflType<const class clang::ObjCProtocolDecl *>(C);
    case reflenums::clang__ObjCProtocolDecl::getMostRecentDecl:
      return toClientReflType<const class clang::ObjCProtocolDecl *>(C);
    case reflenums::clang__ObjCProtocolDecl::getMostRecentDecl:
      return toClientReflType<const class clang::ObjCProtocolDecl *>(C);
    case reflenums::clang__ObjCProtocolDecl::getMostRecentDecl:
      return toClientReflType<const class clang::ObjCProtocolDecl *>(C);
    case reflenums::clang__ObjCProtocolDecl::getMostRecentDecl:
      return toClientReflType<const class clang::ObjCProtocolDecl *>(C);
    case reflenums::clang__ObjCProtocolDecl::getMostRecentDecl:
      return toClientReflType<const class clang::ObjCProtocolDecl *>(C);
    case reflenums::clang__ObjCProtocolDecl::getMostRecentDecl:
      return toClientReflType<const class clang::ObjCProtocolDecl *>(C);
    case reflenums::clang__ObjCProtocolDecl::getMostRecentDecl:
      return toClientReflType<const class clang::ObjCProtocolDecl *>(C);
    case reflenums::clang__ObjCProtocolDecl::getMostRecentDecl:
      return toClientReflType<const class clang::ObjCProtocolDecl *>(C);
    case reflenums::clang__ObjCProtocolDecl::getMostRecentDecl:
      return toClientReflType<const class clang::ObjCProtocolDecl *>(C);
    case reflenums::clang__ObjCProtocolDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCProtocolDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCProtocolDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCProtocolDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCProtocolDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCProtocolDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCProtocolDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCProtocolDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCProtocolDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCProtocolDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCProtocolDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCProtocolDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCProtocolDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCProtocolDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCProtocolDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCProtocolDecl::Create:
      return toClientReflType<class clang::ObjCProtocolDecl *>(C);
    case reflenums::clang__ObjCProtocolDecl::CreateDeserialized:
      return toClientReflType<class clang::ObjCProtocolDecl *>(C);
    case reflenums::clang__ObjCProtocolDecl::getReferencedProtocols:
      return toClientReflType<const class clang::ObjCProtocolList &>(C);
    case reflenums::clang__ObjCProtocolDecl::getReferencedProtocols:
      return toClientReflType<const class clang::ObjCProtocolList &>(C);
    case reflenums::clang__ObjCProtocolDecl::getReferencedProtocols:
      return toClientReflType<const class clang::ObjCProtocolList &>(C);
    case reflenums::clang__ObjCProtocolDecl::protocols:
      return toClientReflType<class llvm::iterator_range<class clang::ObjCProtocolDecl *const *>>(C);
    case reflenums::clang__ObjCProtocolDecl::protocols:
      return toClientReflType<class llvm::iterator_range<class clang::ObjCProtocolDecl *const *>>(C);
    case reflenums::clang__ObjCProtocolDecl::protocols:
      return toClientReflType<class llvm::iterator_range<class clang::ObjCProtocolDecl *const *>>(C);
    case reflenums::clang__ObjCProtocolDecl::protocols:
      return toClientReflType<class llvm::iterator_range<class clang::ObjCProtocolDecl *const *>>(C);
    case reflenums::clang__ObjCProtocolDecl::protocols:
      return toClientReflType<class llvm::iterator_range<class clang::ObjCProtocolDecl *const *>>(C);
    case reflenums::clang__ObjCProtocolDecl::protocol_locs:
      return toClientReflType<class llvm::iterator_range<const class clang::SourceLocation *>>(C);
    case reflenums::clang__ObjCProtocolDecl::protocol_locs:
      return toClientReflType<class llvm::iterator_range<const class clang::SourceLocation *>>(C);
    case reflenums::clang__ObjCProtocolDecl::protocol_locs:
      return toClientReflType<class llvm::iterator_range<const class clang::SourceLocation *>>(C);
    case reflenums::clang__ObjCProtocolDecl::protocol_size:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ObjCProtocolDecl::protocol_size:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ObjCProtocolDecl::protocol_size:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ObjCProtocolDecl::lookupMethod:
      return toClientReflType<class clang::ObjCMethodDecl *>(C);
    case reflenums::clang__ObjCProtocolDecl::lookupInstanceMethod:
      return toClientReflType<class clang::ObjCMethodDecl *>(C);
    case reflenums::clang__ObjCProtocolDecl::lookupClassMethod:
      return toClientReflType<class clang::ObjCMethodDecl *>(C);
    case reflenums::clang__ObjCProtocolDecl::hasDefinition:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCProtocolDecl::hasDefinition:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCProtocolDecl::getDefinition:
      return toClientReflType<const class clang::ObjCProtocolDecl *>(C);
    case reflenums::clang__ObjCProtocolDecl::isThisDeclarationADefinition:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCProtocolDecl::isThisDeclarationADefinition:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCProtocolDecl::getObjCRuntimeNameAsString:
      return toClientReflType<const char *>(C);
    case reflenums::clang__ObjCProtocolDecl::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__ObjCProtocolDecl::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__ObjCProtocolDecl::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__ObjCProtocolDecl::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__ObjCProtocolDecl::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__ObjCProtocolDecl::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__ObjCProtocolDecl::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__ObjCProtocolDecl::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__ObjCProtocolDecl::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__ObjCProtocolDecl::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__ObjCProtocolDecl::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__ObjCProtocolDecl::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__ObjCProtocolDecl::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__ObjCProtocolDecl::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__ObjCProtocolDecl::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__ObjCProtocolDecl::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__ObjCProtocolDecl::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__ObjCProtocolDecl::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__ObjCProtocolDecl::getCanonicalDecl:
      return toClientReflType<const class clang::ObjCProtocolDecl *>(C);
    case reflenums::clang__ObjCProtocolDecl::getCanonicalDecl:
      return toClientReflType<const class clang::ObjCProtocolDecl *>(C);
    case reflenums::clang__ObjCProtocolDecl::getCanonicalDecl:
      return toClientReflType<const class clang::ObjCProtocolDecl *>(C);
    case reflenums::clang__ObjCProtocolDecl::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCProtocolDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCProtocolDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCProtocolDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCProtocolDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCProtocolDecl::classofKind:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__ObjCCategoryDecl:
  switch (static_cast<reflenums::clang__ObjCCategoryDecl::memnames>(MemNum)) {
    case reflenums::clang__ObjCCategoryDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCCategoryDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCCategoryDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCCategoryDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCCategoryDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCCategoryDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCCategoryDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCCategoryDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCCategoryDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCCategoryDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCCategoryDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCCategoryDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCCategoryDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCCategoryDecl::Create:
      return toClientReflType<class clang::ObjCCategoryDecl *>(C);
    case reflenums::clang__ObjCCategoryDecl::CreateDeserialized:
      return toClientReflType<class clang::ObjCCategoryDecl *>(C);
    case reflenums::clang__ObjCCategoryDecl::CreateDeserialized:
      return toClientReflType<class clang::ObjCCategoryDecl *>(C);
    case reflenums::clang__ObjCCategoryDecl::getClassInterface:
      return toClientReflType<const class clang::ObjCInterfaceDecl *>(C);
    case reflenums::clang__ObjCCategoryDecl::getTypeParamList:
      return toClientReflType<class clang::ObjCTypeParamList *>(C);
    case reflenums::clang__ObjCCategoryDecl::getTypeParamList:
      return toClientReflType<class clang::ObjCTypeParamList *>(C);
    case reflenums::clang__ObjCCategoryDecl::getImplementation:
      return toClientReflType<class clang::ObjCCategoryImplDecl *>(C);
    case reflenums::clang__ObjCCategoryDecl::getImplementation:
      return toClientReflType<class clang::ObjCCategoryImplDecl *>(C);
    case reflenums::clang__ObjCCategoryDecl::getImplementation:
      return toClientReflType<class clang::ObjCCategoryImplDecl *>(C);
    case reflenums::clang__ObjCCategoryDecl::getReferencedProtocols:
      return toClientReflType<const class clang::ObjCProtocolList &>(C);
    case reflenums::clang__ObjCCategoryDecl::getReferencedProtocols:
      return toClientReflType<const class clang::ObjCProtocolList &>(C);
    case reflenums::clang__ObjCCategoryDecl::getReferencedProtocols:
      return toClientReflType<const class clang::ObjCProtocolList &>(C);
    case reflenums::clang__ObjCCategoryDecl::protocols:
      return toClientReflType<class llvm::iterator_range<class clang::ObjCProtocolDecl *const *>>(C);
    case reflenums::clang__ObjCCategoryDecl::protocols:
      return toClientReflType<class llvm::iterator_range<class clang::ObjCProtocolDecl *const *>>(C);
    case reflenums::clang__ObjCCategoryDecl::protocols:
      return toClientReflType<class llvm::iterator_range<class clang::ObjCProtocolDecl *const *>>(C);
    case reflenums::clang__ObjCCategoryDecl::protocol_size:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ObjCCategoryDecl::protocol_size:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ObjCCategoryDecl::protocol_size:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ObjCCategoryDecl::protocol_locs:
      return toClientReflType<class llvm::iterator_range<const class clang::SourceLocation *>>(C);
    case reflenums::clang__ObjCCategoryDecl::protocol_locs:
      return toClientReflType<class llvm::iterator_range<const class clang::SourceLocation *>>(C);
    case reflenums::clang__ObjCCategoryDecl::protocol_locs:
      return toClientReflType<class llvm::iterator_range<const class clang::SourceLocation *>>(C);
    case reflenums::clang__ObjCCategoryDecl::getNextClassCategory:
      return toClientReflType<class clang::ObjCCategoryDecl *>(C);
    case reflenums::clang__ObjCCategoryDecl::getNextClassCategoryRaw:
      return toClientReflType<class clang::ObjCCategoryDecl *>(C);
    case reflenums::clang__ObjCCategoryDecl::IsClassExtension:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCCategoryDecl::IsClassExtension:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCCategoryDecl::IsClassExtension:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCCategoryDecl::ivars:
      return toClientReflType<class llvm::iterator_range<class clang::DeclContext::specific_decl_iterator<class clang::ObjCIvarDecl> >>(C);
    case reflenums::clang__ObjCCategoryDecl::ivars:
      return toClientReflType<class llvm::iterator_range<class clang::DeclContext::specific_decl_iterator<class clang::ObjCIvarDecl> >>(C);
    case reflenums::clang__ObjCCategoryDecl::ivars:
      return toClientReflType<class llvm::iterator_range<class clang::DeclContext::specific_decl_iterator<class clang::ObjCIvarDecl> >>(C);
    case reflenums::clang__ObjCCategoryDecl::ivar_size:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ObjCCategoryDecl::ivar_empty:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCCategoryDecl::getCategoryNameLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCCategoryDecl::getCategoryNameLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCCategoryDecl::getCategoryNameLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCCategoryDecl::getIvarLBraceLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCCategoryDecl::getIvarLBraceLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCCategoryDecl::getIvarRBraceLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCCategoryDecl::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCCategoryDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCCategoryDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCCategoryDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCCategoryDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCCategoryDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCCategoryDecl::classofKind:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__ObjCImplDecl:
  switch (static_cast<reflenums::clang__ObjCImplDecl::memnames>(MemNum)) {
    case reflenums::clang__ObjCImplDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCImplDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCImplDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCImplDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCImplDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCImplDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCImplDecl::getClassInterface:
      return toClientReflType<const class clang::ObjCInterfaceDecl *>(C);
    case reflenums::clang__ObjCImplDecl::getClassInterface:
      return toClientReflType<const class clang::ObjCInterfaceDecl *>(C);
    case reflenums::clang__ObjCImplDecl::getClassInterface:
      return toClientReflType<const class clang::ObjCInterfaceDecl *>(C);
    case reflenums::clang__ObjCImplDecl::getClassInterface:
      return toClientReflType<const class clang::ObjCInterfaceDecl *>(C);
    case reflenums::clang__ObjCImplDecl::getClassInterface:
      return toClientReflType<const class clang::ObjCInterfaceDecl *>(C);
    case reflenums::clang__ObjCImplDecl::getClassInterface:
      return toClientReflType<const class clang::ObjCInterfaceDecl *>(C);
    case reflenums::clang__ObjCImplDecl::FindPropertyImplDecl:
      return toClientReflType<class clang::ObjCPropertyImplDecl *>(C);
    case reflenums::clang__ObjCImplDecl::FindPropertyImplIvarDecl:
      return toClientReflType<class clang::ObjCPropertyImplDecl *>(C);
    case reflenums::clang__ObjCImplDecl::FindPropertyImplIvarDecl:
      return toClientReflType<class clang::ObjCPropertyImplDecl *>(C);
    case reflenums::clang__ObjCImplDecl::FindPropertyImplIvarDecl:
      return toClientReflType<class clang::ObjCPropertyImplDecl *>(C);
    case reflenums::clang__ObjCImplDecl::property_impls:
      return toClientReflType<class llvm::iterator_range<class clang::DeclContext::specific_decl_iterator<class clang::ObjCPropertyImplDecl> >>(C);
    case reflenums::clang__ObjCImplDecl::property_impls:
      return toClientReflType<class llvm::iterator_range<class clang::DeclContext::specific_decl_iterator<class clang::ObjCPropertyImplDecl> >>(C);
    case reflenums::clang__ObjCImplDecl::property_impls:
      return toClientReflType<class llvm::iterator_range<class clang::DeclContext::specific_decl_iterator<class clang::ObjCPropertyImplDecl> >>(C);
    case reflenums::clang__ObjCImplDecl::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCImplDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCImplDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCImplDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCImplDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCImplDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCImplDecl::classofKind:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__ObjCCategoryImplDecl:
  switch (static_cast<reflenums::clang__ObjCCategoryImplDecl::memnames>(MemNum)) {
    case reflenums::clang__ObjCCategoryImplDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCCategoryImplDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCCategoryImplDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCCategoryImplDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCCategoryImplDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCCategoryImplDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCCategoryImplDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCCategoryImplDecl::Create:
      return toClientReflType<class clang::ObjCCategoryImplDecl *>(C);
    case reflenums::clang__ObjCCategoryImplDecl::CreateDeserialized:
      return toClientReflType<class clang::ObjCCategoryImplDecl *>(C);
    case reflenums::clang__ObjCCategoryImplDecl::getCategoryDecl:
      return toClientReflType<class clang::ObjCCategoryDecl *>(C);
    case reflenums::clang__ObjCCategoryImplDecl::getCategoryNameLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCCategoryImplDecl::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCCategoryImplDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCCategoryImplDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCCategoryImplDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCCategoryImplDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCCategoryImplDecl::classofKind:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__ObjCImplementationDecl:
  switch (static_cast<reflenums::clang__ObjCImplementationDecl::memnames>(MemNum)) {
    case reflenums::clang__ObjCImplementationDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCImplementationDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCImplementationDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCImplementationDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCImplementationDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCImplementationDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCImplementationDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCImplementationDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCImplementationDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCImplementationDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCImplementationDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCImplementationDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCImplementationDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCImplementationDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCImplementationDecl::Create:
      return toClientReflType<class clang::ObjCImplementationDecl *>(C);
    case reflenums::clang__ObjCImplementationDecl::CreateDeserialized:
      return toClientReflType<class clang::ObjCImplementationDecl *>(C);
    case reflenums::clang__ObjCImplementationDecl::CreateDeserialized:
      return toClientReflType<class clang::ObjCImplementationDecl *>(C);
    case reflenums::clang__ObjCImplementationDecl::CreateDeserialized:
      return toClientReflType<class clang::ObjCImplementationDecl *>(C);
    case reflenums::clang__ObjCImplementationDecl::CreateDeserialized:
      return toClientReflType<class clang::ObjCImplementationDecl *>(C);
    case reflenums::clang__ObjCImplementationDecl::CreateDeserialized:
      return toClientReflType<class clang::ObjCImplementationDecl *>(C);
    case reflenums::clang__ObjCImplementationDecl::CreateDeserialized:
      return toClientReflType<class clang::ObjCImplementationDecl *>(C);
    case reflenums::clang__ObjCImplementationDecl::inits:
      return toClientReflType<class llvm::iterator_range<class clang::CXXCtorInitializer *const *>>(C);
    case reflenums::clang__ObjCImplementationDecl::inits:
      return toClientReflType<class llvm::iterator_range<class clang::CXXCtorInitializer *const *>>(C);
    case reflenums::clang__ObjCImplementationDecl::inits:
      return toClientReflType<class llvm::iterator_range<class clang::CXXCtorInitializer *const *>>(C);
    case reflenums::clang__ObjCImplementationDecl::inits:
      return toClientReflType<class llvm::iterator_range<class clang::CXXCtorInitializer *const *>>(C);
    case reflenums::clang__ObjCImplementationDecl::inits:
      return toClientReflType<class llvm::iterator_range<class clang::CXXCtorInitializer *const *>>(C);
    case reflenums::clang__ObjCImplementationDecl::getNumIvarInitializers:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ObjCImplementationDecl::getNumIvarInitializers:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ObjCImplementationDecl::getNumIvarInitializers:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ObjCImplementationDecl::hasNonZeroConstructors:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCImplementationDecl::hasNonZeroConstructors:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCImplementationDecl::hasDestructors:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCImplementationDecl::hasDestructors:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCImplementationDecl::getIdentifier:
      return toClientReflType<class clang::IdentifierInfo *>(C);
    case reflenums::clang__ObjCImplementationDecl::getName:
      return toClientReflType<const char *>(C);
    case reflenums::clang__ObjCImplementationDecl::getNameAsString:
      return toClientReflType<const char *>(C);
    case reflenums::clang__ObjCImplementationDecl::getObjCRuntimeNameAsString:
      return toClientReflType<const char *>(C);
    case reflenums::clang__ObjCImplementationDecl::getSuperClass:
      return toClientReflType<const class clang::ObjCInterfaceDecl *>(C);
    case reflenums::clang__ObjCImplementationDecl::getSuperClass:
      return toClientReflType<const class clang::ObjCInterfaceDecl *>(C);
    case reflenums::clang__ObjCImplementationDecl::getSuperClassLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCImplementationDecl::getSuperClassLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCImplementationDecl::getSuperClassLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCImplementationDecl::getIvarLBraceLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCImplementationDecl::getIvarLBraceLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCImplementationDecl::getIvarRBraceLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCImplementationDecl::getIvarRBraceLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCImplementationDecl::getIvarRBraceLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCImplementationDecl::ivars:
      return toClientReflType<class llvm::iterator_range<class clang::DeclContext::specific_decl_iterator<class clang::ObjCIvarDecl> >>(C);
    case reflenums::clang__ObjCImplementationDecl::ivars:
      return toClientReflType<class llvm::iterator_range<class clang::DeclContext::specific_decl_iterator<class clang::ObjCIvarDecl> >>(C);
    case reflenums::clang__ObjCImplementationDecl::ivars:
      return toClientReflType<class llvm::iterator_range<class clang::DeclContext::specific_decl_iterator<class clang::ObjCIvarDecl> >>(C);
    case reflenums::clang__ObjCImplementationDecl::ivar_size:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ObjCImplementationDecl::ivar_empty:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCImplementationDecl::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCImplementationDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCImplementationDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCImplementationDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCImplementationDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCImplementationDecl::classofKind:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__ObjCCompatibleAliasDecl:
  switch (static_cast<reflenums::clang__ObjCCompatibleAliasDecl::memnames>(MemNum)) {
    case reflenums::clang__ObjCCompatibleAliasDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCCompatibleAliasDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCCompatibleAliasDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCCompatibleAliasDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCCompatibleAliasDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCCompatibleAliasDecl::Create:
      return toClientReflType<class clang::ObjCCompatibleAliasDecl *>(C);
    case reflenums::clang__ObjCCompatibleAliasDecl::CreateDeserialized:
      return toClientReflType<class clang::ObjCCompatibleAliasDecl *>(C);
    case reflenums::clang__ObjCCompatibleAliasDecl::getClassInterface:
      return toClientReflType<const class clang::ObjCInterfaceDecl *>(C);
    case reflenums::clang__ObjCCompatibleAliasDecl::getClassInterface:
      return toClientReflType<const class clang::ObjCInterfaceDecl *>(C);
    case reflenums::clang__ObjCCompatibleAliasDecl::getClassInterface:
      return toClientReflType<const class clang::ObjCInterfaceDecl *>(C);
    case reflenums::clang__ObjCCompatibleAliasDecl::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCCompatibleAliasDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCCompatibleAliasDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCCompatibleAliasDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCCompatibleAliasDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCCompatibleAliasDecl::classofKind:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__ObjCPropertyImplDecl:
  switch (static_cast<reflenums::clang__ObjCPropertyImplDecl::memnames>(MemNum)) {
    case reflenums::clang__ObjCPropertyImplDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCPropertyImplDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCPropertyImplDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCPropertyImplDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCPropertyImplDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCPropertyImplDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCPropertyImplDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCPropertyImplDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCPropertyImplDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCPropertyImplDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCPropertyImplDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCPropertyImplDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCPropertyImplDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCPropertyImplDecl::Create:
      return toClientReflType<class clang::ObjCPropertyImplDecl *>(C);
    case reflenums::clang__ObjCPropertyImplDecl::CreateDeserialized:
      return toClientReflType<class clang::ObjCPropertyImplDecl *>(C);
    case reflenums::clang__ObjCPropertyImplDecl::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__ObjCPropertyImplDecl::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCPropertyImplDecl::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCPropertyImplDecl::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCPropertyImplDecl::getPropertyDecl:
      return toClientReflType<class clang::ObjCPropertyDecl *>(C);
    case reflenums::clang__ObjCPropertyImplDecl::getPropertyDecl:
      return toClientReflType<class clang::ObjCPropertyDecl *>(C);
    case reflenums::clang__ObjCPropertyImplDecl::getPropertyImplementation:
      return toClientReflType<enum clang::ObjCPropertyImplDecl::Kind>(C);
    case reflenums::clang__ObjCPropertyImplDecl::getPropertyIvarDecl:
      return toClientReflType<class clang::ObjCIvarDecl *>(C);
    case reflenums::clang__ObjCPropertyImplDecl::getPropertyIvarDeclLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCPropertyImplDecl::getPropertyIvarDeclLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCPropertyImplDecl::isIvarNameSpecified:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCPropertyImplDecl::getGetterCXXConstructor:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__ObjCPropertyImplDecl::getGetterCXXConstructor:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__ObjCPropertyImplDecl::getSetterCXXAssignment:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__ObjCPropertyImplDecl::getSetterCXXAssignment:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__ObjCPropertyImplDecl::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCPropertyImplDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCPropertyImplDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCPropertyImplDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCPropertyImplDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCPropertyImplDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCPropertyImplDecl::classofKind:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__OMPThreadPrivateDecl:
  switch (static_cast<reflenums::clang__OMPThreadPrivateDecl::memnames>(MemNum)) {
    case reflenums::clang__OMPThreadPrivateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPThreadPrivateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPThreadPrivateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPThreadPrivateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPThreadPrivateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPThreadPrivateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPThreadPrivateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPThreadPrivateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPThreadPrivateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPThreadPrivateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPThreadPrivateDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPThreadPrivateDecl::CreateDeserialized:
      return toClientReflType<class clang::OMPThreadPrivateDecl *>(C);
    case reflenums::clang__OMPThreadPrivateDecl::CreateDeserialized:
      return toClientReflType<class clang::OMPThreadPrivateDecl *>(C);
    case reflenums::clang__OMPThreadPrivateDecl::CreateDeserialized:
      return toClientReflType<class clang::OMPThreadPrivateDecl *>(C);
    case reflenums::clang__OMPThreadPrivateDecl::CreateDeserialized:
      return toClientReflType<class clang::OMPThreadPrivateDecl *>(C);
    case reflenums::clang__OMPThreadPrivateDecl::CreateDeserialized:
      return toClientReflType<class clang::OMPThreadPrivateDecl *>(C);
    case reflenums::clang__OMPThreadPrivateDecl::varlist_size:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__OMPThreadPrivateDecl::varlist_empty:
      return toClientReflType<bool>(C);
    case reflenums::clang__OMPThreadPrivateDecl::varlist_empty:
      return toClientReflType<bool>(C);
    case reflenums::clang__OMPThreadPrivateDecl::varlists:
      return toClientReflType<class llvm::iterator_range<const class clang::Expr *const *>>(C);
    case reflenums::clang__OMPThreadPrivateDecl::varlists:
      return toClientReflType<class llvm::iterator_range<const class clang::Expr *const *>>(C);
    case reflenums::clang__OMPThreadPrivateDecl::varlists:
      return toClientReflType<class llvm::iterator_range<const class clang::Expr *const *>>(C);
    case reflenums::clang__OMPThreadPrivateDecl::varlists:
      return toClientReflType<class llvm::iterator_range<const class clang::Expr *const *>>(C);
    case reflenums::clang__OMPThreadPrivateDecl::varlists:
      return toClientReflType<class llvm::iterator_range<const class clang::Expr *const *>>(C);
    case reflenums::clang__OMPThreadPrivateDecl::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__OMPThreadPrivateDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__OMPThreadPrivateDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__OMPThreadPrivateDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__OMPThreadPrivateDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__OMPThreadPrivateDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__OMPThreadPrivateDecl::classofKind:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__OMPDeclareReductionDecl:
  switch (static_cast<reflenums::clang__OMPDeclareReductionDecl::memnames>(MemNum)) {
    case reflenums::clang__OMPDeclareReductionDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPDeclareReductionDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPDeclareReductionDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPDeclareReductionDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPDeclareReductionDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPDeclareReductionDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPDeclareReductionDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPDeclareReductionDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPDeclareReductionDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPDeclareReductionDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPDeclareReductionDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPDeclareReductionDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPDeclareReductionDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPDeclareReductionDecl::Create:
      return toClientReflType<class clang::OMPDeclareReductionDecl *>(C);
    case reflenums::clang__OMPDeclareReductionDecl::CreateDeserialized:
      return toClientReflType<class clang::OMPDeclareReductionDecl *>(C);
    case reflenums::clang__OMPDeclareReductionDecl::CreateDeserialized:
      return toClientReflType<class clang::OMPDeclareReductionDecl *>(C);
    case reflenums::clang__OMPDeclareReductionDecl::getCombiner:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__OMPDeclareReductionDecl::getCombiner:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__OMPDeclareReductionDecl::getCombiner:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__OMPDeclareReductionDecl::getInitializer:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__OMPDeclareReductionDecl::getInitializerKind:
      return toClientReflType<enum clang::OMPDeclareReductionDecl::InitKind>(C);
    case reflenums::clang__OMPDeclareReductionDecl::getInitializerKind:
      return toClientReflType<enum clang::OMPDeclareReductionDecl::InitKind>(C);
    case reflenums::clang__OMPDeclareReductionDecl::getInitializerKind:
      return toClientReflType<enum clang::OMPDeclareReductionDecl::InitKind>(C);
    case reflenums::clang__OMPDeclareReductionDecl::getPrevDeclInScope:
      return toClientReflType<const class clang::OMPDeclareReductionDecl *>(C);
    case reflenums::clang__OMPDeclareReductionDecl::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__OMPDeclareReductionDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__OMPDeclareReductionDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__OMPDeclareReductionDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__OMPDeclareReductionDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__OMPDeclareReductionDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__OMPDeclareReductionDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__OMPDeclareReductionDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__OMPDeclareReductionDecl::classofKind:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__OMPCapturedExprDecl:
  switch (static_cast<reflenums::clang__OMPCapturedExprDecl::memnames>(MemNum)) {
    case reflenums::clang__OMPCapturedExprDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPCapturedExprDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPCapturedExprDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPCapturedExprDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPCapturedExprDecl:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPCapturedExprDecl::Create:
      return toClientReflType<class clang::OMPCapturedExprDecl *>(C);
    case reflenums::clang__OMPCapturedExprDecl::CreateDeserialized:
      return toClientReflType<class clang::OMPCapturedExprDecl *>(C);
    case reflenums::clang__OMPCapturedExprDecl::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__OMPCapturedExprDecl::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__OMPCapturedExprDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__OMPCapturedExprDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__OMPCapturedExprDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__OMPCapturedExprDecl::classofKind:
      return toClientReflType<bool>(C);
    case reflenums::clang__OMPCapturedExprDecl::classofKind:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__CXXOperatorCallExpr:
  switch (static_cast<reflenums::clang__CXXOperatorCallExpr::memnames>(MemNum)) {
    case reflenums::clang__CXXOperatorCallExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXOperatorCallExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXOperatorCallExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXOperatorCallExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXOperatorCallExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXOperatorCallExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXOperatorCallExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXOperatorCallExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXOperatorCallExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXOperatorCallExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXOperatorCallExpr::getOperator:
      return toClientReflType<enum clang::OverloadedOperatorKind>(C);
    case reflenums::clang__CXXOperatorCallExpr::isAssignmentOp:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXOperatorCallExpr::isAssignmentOp1:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXOperatorCallExpr::isInfixBinaryOp:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXOperatorCallExpr::getOperatorLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXOperatorCallExpr::getExprLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXOperatorCallExpr::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXOperatorCallExpr::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXOperatorCallExpr::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXOperatorCallExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXOperatorCallExpr::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__CXXOperatorCallExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXOperatorCallExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXOperatorCallExpr::getFPFeatures:
      return toClientReflType<class clang::FPOptions>(C);
    case reflenums::clang__CXXOperatorCallExpr::isFPContractableWithinStatement:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__CXXMemberCallExpr:
  switch (static_cast<reflenums::clang__CXXMemberCallExpr::memnames>(MemNum)) {
    case reflenums::clang__CXXMemberCallExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXMemberCallExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXMemberCallExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXMemberCallExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXMemberCallExpr::getImplicitObjectArgument:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__CXXMemberCallExpr::getMethodDecl:
      return toClientReflType<class clang::CXXMethodDecl *>(C);
    case reflenums::clang__CXXMemberCallExpr::getRecordDecl:
      return toClientReflType<class clang::CXXRecordDecl *>(C);
    case reflenums::clang__CXXMemberCallExpr::getExprLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXMemberCallExpr::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__CUDAKernelCallExpr:
  switch (static_cast<reflenums::clang__CUDAKernelCallExpr::memnames>(MemNum)) {
    case reflenums::clang__CUDAKernelCallExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CUDAKernelCallExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CUDAKernelCallExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CUDAKernelCallExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CUDAKernelCallExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CUDAKernelCallExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CUDAKernelCallExpr::getConfig:
      return toClientReflType<const class clang::CallExpr *>(C);
    case reflenums::clang__CUDAKernelCallExpr::getConfig:
      return toClientReflType<const class clang::CallExpr *>(C);
    case reflenums::clang__CUDAKernelCallExpr::getConfig:
      return toClientReflType<const class clang::CallExpr *>(C);
    case reflenums::clang__CUDAKernelCallExpr::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__CXXNamedCastExpr:
  switch (static_cast<reflenums::clang__CXXNamedCastExpr::memnames>(MemNum)) {
    case reflenums::clang__CXXNamedCastExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXNamedCastExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXNamedCastExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXNamedCastExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXNamedCastExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXNamedCastExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXNamedCastExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXNamedCastExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXNamedCastExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXNamedCastExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXNamedCastExpr::getCastName:
      return toClientReflType<const char *>(C);
    case reflenums::clang__CXXNamedCastExpr::getOperatorLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXNamedCastExpr::getRParenLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXNamedCastExpr::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXNamedCastExpr::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXNamedCastExpr::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXNamedCastExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXNamedCastExpr::getAngleBrackets:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__CXXNamedCastExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXNamedCastExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXNamedCastExpr::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__CXXStaticCastExpr:
  switch (static_cast<reflenums::clang__CXXStaticCastExpr::memnames>(MemNum)) {
    case reflenums::clang__CXXStaticCastExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXStaticCastExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXStaticCastExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXStaticCastExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXStaticCastExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXStaticCastExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXStaticCastExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXStaticCastExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXStaticCastExpr::CreateEmpty:
      return toClientReflType<class clang::CXXStaticCastExpr *>(C);
    case reflenums::clang__CXXStaticCastExpr::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__CXXDynamicCastExpr:
  switch (static_cast<reflenums::clang__CXXDynamicCastExpr::memnames>(MemNum)) {
    case reflenums::clang__CXXDynamicCastExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXDynamicCastExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXDynamicCastExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXDynamicCastExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXDynamicCastExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXDynamicCastExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXDynamicCastExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXDynamicCastExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXDynamicCastExpr::CreateEmpty:
      return toClientReflType<class clang::CXXDynamicCastExpr *>(C);
    case reflenums::clang__CXXDynamicCastExpr::isAlwaysNull:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXDynamicCastExpr::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__CXXReinterpretCastExpr:
  switch (static_cast<reflenums::clang__CXXReinterpretCastExpr::memnames>(MemNum)) {
    case reflenums::clang__CXXReinterpretCastExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXReinterpretCastExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXReinterpretCastExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXReinterpretCastExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXReinterpretCastExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXReinterpretCastExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXReinterpretCastExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXReinterpretCastExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXReinterpretCastExpr::CreateEmpty:
      return toClientReflType<class clang::CXXReinterpretCastExpr *>(C);
    case reflenums::clang__CXXReinterpretCastExpr::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__CXXConstCastExpr:
  switch (static_cast<reflenums::clang__CXXConstCastExpr::memnames>(MemNum)) {
    case reflenums::clang__CXXConstCastExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXConstCastExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXConstCastExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXConstCastExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXConstCastExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXConstCastExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXConstCastExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXConstCastExpr::Create:
      return toClientReflType<class clang::CXXConstCastExpr *>(C);
    case reflenums::clang__CXXConstCastExpr::CreateEmpty:
      return toClientReflType<class clang::CXXConstCastExpr *>(C);
    case reflenums::clang__CXXConstCastExpr::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__UserDefinedLiteral:
  switch (static_cast<reflenums::clang__UserDefinedLiteral::memnames>(MemNum)) {
    case reflenums::clang__UserDefinedLiteral:::
      return toClientReflType<>(C);
    case reflenums::clang__UserDefinedLiteral:::
      return toClientReflType<>(C);
    case reflenums::clang__UserDefinedLiteral:::
      return toClientReflType<>(C);
    case reflenums::clang__UserDefinedLiteral:::
      return toClientReflType<>(C);
    case reflenums::clang__UserDefinedLiteral:::
      return toClientReflType<>(C);
    case reflenums::clang__UserDefinedLiteral:::
      return toClientReflType<>(C);
    case reflenums::clang__UserDefinedLiteral:::
      return toClientReflType<>(C);
    case reflenums::clang__UserDefinedLiteral:::
      return toClientReflType<>(C);
    case reflenums::clang__UserDefinedLiteral::getLiteralOperatorKind:
      return toClientReflType<enum clang::UserDefinedLiteral::LiteralOperatorKind>(C);
    case reflenums::clang__UserDefinedLiteral::getLiteralOperatorKind:
      return toClientReflType<enum clang::UserDefinedLiteral::LiteralOperatorKind>(C);
    case reflenums::clang__UserDefinedLiteral::getCookedLiteral:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__UserDefinedLiteral::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__UserDefinedLiteral::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__UserDefinedLiteral::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__UserDefinedLiteral::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__UserDefinedLiteral::getUDSuffixLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__UserDefinedLiteral::getUDSuffix:
      return toClientReflType<const class clang::IdentifierInfo *>(C);
    case reflenums::clang__UserDefinedLiteral::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__CXXBoolLiteralExpr:
  switch (static_cast<reflenums::clang__CXXBoolLiteralExpr::memnames>(MemNum)) {
    case reflenums::clang__CXXBoolLiteralExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXBoolLiteralExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXBoolLiteralExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXBoolLiteralExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXBoolLiteralExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXBoolLiteralExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXBoolLiteralExpr::getValue:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXBoolLiteralExpr::getValue:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXBoolLiteralExpr::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXBoolLiteralExpr::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXBoolLiteralExpr::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXBoolLiteralExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXBoolLiteralExpr::getLocation:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXBoolLiteralExpr::getLocation:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXBoolLiteralExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXBoolLiteralExpr::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__CXXNullPtrLiteralExpr:
  switch (static_cast<reflenums::clang__CXXNullPtrLiteralExpr::memnames>(MemNum)) {
    case reflenums::clang__CXXNullPtrLiteralExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXNullPtrLiteralExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXNullPtrLiteralExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXNullPtrLiteralExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXNullPtrLiteralExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXNullPtrLiteralExpr::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXNullPtrLiteralExpr::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXNullPtrLiteralExpr::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXNullPtrLiteralExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXNullPtrLiteralExpr::getLocation:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXNullPtrLiteralExpr::getLocation:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXNullPtrLiteralExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXNullPtrLiteralExpr::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__CXXStdInitializerListExpr:
  switch (static_cast<reflenums::clang__CXXStdInitializerListExpr::memnames>(MemNum)) {
    case reflenums::clang__CXXStdInitializerListExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXStdInitializerListExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXStdInitializerListExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXStdInitializerListExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXStdInitializerListExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXStdInitializerListExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXStdInitializerListExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXStdInitializerListExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXStdInitializerListExpr::getSubExpr:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__CXXStdInitializerListExpr::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXStdInitializerListExpr::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXStdInitializerListExpr::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXStdInitializerListExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXStdInitializerListExpr::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__CXXStdInitializerListExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXStdInitializerListExpr::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__CXXTypeidExpr:
  switch (static_cast<reflenums::clang__CXXTypeidExpr::memnames>(MemNum)) {
    case reflenums::clang__CXXTypeidExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXTypeidExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXTypeidExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXTypeidExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXTypeidExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXTypeidExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXTypeidExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXTypeidExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXTypeidExpr::isPotentiallyEvaluated:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXTypeidExpr::isTypeOperand:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXTypeidExpr::getTypeOperand:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__CXXTypeidExpr::getTypeOperandSourceInfo:
      return toClientReflType<class clang::TypeSourceInfo *>(C);
    case reflenums::clang__CXXTypeidExpr::getTypeOperandSourceInfo:
      return toClientReflType<class clang::TypeSourceInfo *>(C);
    case reflenums::clang__CXXTypeidExpr::getExprOperand:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__CXXTypeidExpr::getExprOperand:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__CXXTypeidExpr::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXTypeidExpr::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXTypeidExpr::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXTypeidExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXTypeidExpr::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__CXXTypeidExpr::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__CXXTypeidExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXTypeidExpr::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__MSPropertyRefExpr:
  switch (static_cast<reflenums::clang__MSPropertyRefExpr::memnames>(MemNum)) {
    case reflenums::clang__MSPropertyRefExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__MSPropertyRefExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__MSPropertyRefExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__MSPropertyRefExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__MSPropertyRefExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__MSPropertyRefExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__MSPropertyRefExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__MSPropertyRefExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__MSPropertyRefExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__MSPropertyRefExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__MSPropertyRefExpr::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__MSPropertyRefExpr::isImplicitAccess:
      return toClientReflType<bool>(C);
    case reflenums::clang__MSPropertyRefExpr::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__MSPropertyRefExpr::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__MSPropertyRefExpr::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__MSPropertyRefExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__MSPropertyRefExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__MSPropertyRefExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__MSPropertyRefExpr::getBaseExpr:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__MSPropertyRefExpr::getPropertyDecl:
      return toClientReflType<class clang::MSPropertyDecl *>(C);
    case reflenums::clang__MSPropertyRefExpr::isArrow:
      return toClientReflType<bool>(C);
    case reflenums::clang__MSPropertyRefExpr::getMemberLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__MSPropertyRefExpr::getQualifierLoc:
      return toClientReflType<class clang::NestedNameSpecifierLoc>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__MSPropertySubscriptExpr:
  switch (static_cast<reflenums::clang__MSPropertySubscriptExpr::memnames>(MemNum)) {
    case reflenums::clang__MSPropertySubscriptExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__MSPropertySubscriptExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__MSPropertySubscriptExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__MSPropertySubscriptExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__MSPropertySubscriptExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__MSPropertySubscriptExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__MSPropertySubscriptExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__MSPropertySubscriptExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__MSPropertySubscriptExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__MSPropertySubscriptExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__MSPropertySubscriptExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__MSPropertySubscriptExpr::getBase:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__MSPropertySubscriptExpr::getBase:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__MSPropertySubscriptExpr::getIdx:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__MSPropertySubscriptExpr::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__MSPropertySubscriptExpr::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__MSPropertySubscriptExpr::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__MSPropertySubscriptExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__MSPropertySubscriptExpr::getRBracketLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__MSPropertySubscriptExpr::getRBracketLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__MSPropertySubscriptExpr::getExprLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__MSPropertySubscriptExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__MSPropertySubscriptExpr::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__CXXUuidofExpr:
  switch (static_cast<reflenums::clang__CXXUuidofExpr::memnames>(MemNum)) {
    case reflenums::clang__CXXUuidofExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXUuidofExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXUuidofExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXUuidofExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXUuidofExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXUuidofExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXUuidofExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXUuidofExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXUuidofExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXUuidofExpr::isTypeOperand:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXUuidofExpr::getTypeOperand:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__CXXUuidofExpr::getTypeOperandSourceInfo:
      return toClientReflType<class clang::TypeSourceInfo *>(C);
    case reflenums::clang__CXXUuidofExpr::getTypeOperandSourceInfo:
      return toClientReflType<class clang::TypeSourceInfo *>(C);
    case reflenums::clang__CXXUuidofExpr::getExprOperand:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__CXXUuidofExpr::getExprOperand:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__CXXUuidofExpr::getExprOperand:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__CXXUuidofExpr::getUuidStr:
      return toClientReflType<const char *>(C);
    case reflenums::clang__CXXUuidofExpr::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXUuidofExpr::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXUuidofExpr::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXUuidofExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXUuidofExpr::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__CXXUuidofExpr::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__CXXUuidofExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXUuidofExpr::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__CXXThisExpr:
  switch (static_cast<reflenums::clang__CXXThisExpr::memnames>(MemNum)) {
    case reflenums::clang__CXXThisExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXThisExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXThisExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXThisExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXThisExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXThisExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXThisExpr::getLocation:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXThisExpr::getLocation:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXThisExpr::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXThisExpr::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXThisExpr::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXThisExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXThisExpr::isImplicit:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXThisExpr::isImplicit:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXThisExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXThisExpr::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__CXXThrowExpr:
  switch (static_cast<reflenums::clang__CXXThrowExpr::memnames>(MemNum)) {
    case reflenums::clang__CXXThrowExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXThrowExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXThrowExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXThrowExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXThrowExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXThrowExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXThrowExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXThrowExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXThrowExpr::getSubExpr:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__CXXThrowExpr::getSubExpr:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__CXXThrowExpr::getThrowLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXThrowExpr::isThrownVariableInScope:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXThrowExpr::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXThrowExpr::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXThrowExpr::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXThrowExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXThrowExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXThrowExpr::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__CXXDefaultArgExpr:
  switch (static_cast<reflenums::clang__CXXDefaultArgExpr::memnames>(MemNum)) {
    case reflenums::clang__CXXDefaultArgExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXDefaultArgExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXDefaultArgExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXDefaultArgExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXDefaultArgExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXDefaultArgExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXDefaultArgExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXDefaultArgExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXDefaultArgExpr::Create:
      return toClientReflType<class clang::CXXDefaultArgExpr *>(C);
    case reflenums::clang__CXXDefaultArgExpr::getParam:
      return toClientReflType<const class clang::ParmVarDecl *>(C);
    case reflenums::clang__CXXDefaultArgExpr::getParam:
      return toClientReflType<const class clang::ParmVarDecl *>(C);
    case reflenums::clang__CXXDefaultArgExpr::getExpr:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__CXXDefaultArgExpr::getExpr:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__CXXDefaultArgExpr::getUsedLocation:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXDefaultArgExpr::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXDefaultArgExpr::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXDefaultArgExpr::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXDefaultArgExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXDefaultArgExpr::getExprLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXDefaultArgExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXDefaultArgExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXDefaultArgExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXDefaultArgExpr::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__CXXDefaultInitExpr:
  switch (static_cast<reflenums::clang__CXXDefaultInitExpr::memnames>(MemNum)) {
    case reflenums::clang__CXXDefaultInitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXDefaultInitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXDefaultInitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXDefaultInitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXDefaultInitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXDefaultInitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXDefaultInitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXDefaultInitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXDefaultInitExpr::Create:
      return toClientReflType<class clang::CXXDefaultInitExpr *>(C);
    case reflenums::clang__CXXDefaultInitExpr::Create:
      return toClientReflType<class clang::CXXDefaultInitExpr *>(C);
    case reflenums::clang__CXXDefaultInitExpr::getField:
      return toClientReflType<const class clang::FieldDecl *>(C);
    case reflenums::clang__CXXDefaultInitExpr::getExpr:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__CXXDefaultInitExpr::getExpr:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__CXXDefaultInitExpr::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXDefaultInitExpr::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXDefaultInitExpr::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXDefaultInitExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXDefaultInitExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXDefaultInitExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXDefaultInitExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXDefaultInitExpr::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__CXXTemporary:
  switch (static_cast<reflenums::clang__CXXTemporary::memnames>(MemNum)) {
    case reflenums::clang__CXXTemporary:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXTemporary:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXTemporary:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXTemporary:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXTemporary::Create:
      return toClientReflType<class clang::CXXTemporary *>(C);
    case reflenums::clang__CXXTemporary::getDestructor:
      return toClientReflType<const class clang::CXXDestructorDecl *>(C);
    case reflenums::clang__CXXTemporary::getDestructor:
      return toClientReflType<const class clang::CXXDestructorDecl *>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__CXXBindTemporaryExpr:
  switch (static_cast<reflenums::clang__CXXBindTemporaryExpr::memnames>(MemNum)) {
    case reflenums::clang__CXXBindTemporaryExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXBindTemporaryExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXBindTemporaryExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXBindTemporaryExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXBindTemporaryExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXBindTemporaryExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXBindTemporaryExpr::Create:
      return toClientReflType<class clang::CXXBindTemporaryExpr *>(C);
    case reflenums::clang__CXXBindTemporaryExpr::Create:
      return toClientReflType<class clang::CXXBindTemporaryExpr *>(C);
    case reflenums::clang__CXXBindTemporaryExpr::getTemporary:
      return toClientReflType<const class clang::CXXTemporary *>(C);
    case reflenums::clang__CXXBindTemporaryExpr::getTemporary:
      return toClientReflType<const class clang::CXXTemporary *>(C);
    case reflenums::clang__CXXBindTemporaryExpr::getSubExpr:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__CXXBindTemporaryExpr::getSubExpr:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__CXXBindTemporaryExpr::getSubExpr:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__CXXBindTemporaryExpr::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXBindTemporaryExpr::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXBindTemporaryExpr::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXBindTemporaryExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXBindTemporaryExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXBindTemporaryExpr::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__CXXConstructExpr:
  switch (static_cast<reflenums::clang__CXXConstructExpr::memnames>(MemNum)) {
    case reflenums::clang__CXXConstructExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXConstructExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXConstructExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXConstructExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXConstructExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXConstructExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXConstructExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXConstructExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXConstructExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXConstructExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXConstructExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXConstructExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXConstructExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXConstructExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXConstructExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXConstructExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXConstructExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXConstructExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXConstructExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXConstructExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXConstructExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXConstructExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXConstructExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXConstructExpr::getConstructor:
      return toClientReflType<class clang::CXXConstructorDecl *>(C);
    case reflenums::clang__CXXConstructExpr::getLocation:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXConstructExpr::getLocation:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXConstructExpr::isElidable:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXConstructExpr::isElidable:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXConstructExpr::hadMultipleCandidates:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXConstructExpr::hadMultipleCandidates:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXConstructExpr::isListInitialization:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXConstructExpr::isListInitialization:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXConstructExpr::isStdInitListInitialization:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXConstructExpr::isStdInitListInitialization:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXConstructExpr::requiresZeroInitialization:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXConstructExpr::requiresZeroInitialization:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXConstructExpr::getConstructionKind:
      return toClientReflType<enum clang::CXXConstructExpr::ConstructionKind>(C);
    case reflenums::clang__CXXConstructExpr::getConstructionKind:
      return toClientReflType<enum clang::CXXConstructExpr::ConstructionKind>(C);
    case reflenums::clang__CXXConstructExpr::getConstructionKind:
      return toClientReflType<enum clang::CXXConstructExpr::ConstructionKind>(C);
    case reflenums::clang__CXXConstructExpr::getConstructionKind:
      return toClientReflType<enum clang::CXXConstructExpr::ConstructionKind>(C);
    case reflenums::clang__CXXConstructExpr::getConstructionKind:
      return toClientReflType<enum clang::CXXConstructExpr::ConstructionKind>(C);
    case reflenums::clang__CXXConstructExpr::getConstructionKind:
      return toClientReflType<enum clang::CXXConstructExpr::ConstructionKind>(C);
    case reflenums::clang__CXXConstructExpr::getConstructionKind:
      return toClientReflType<enum clang::CXXConstructExpr::ConstructionKind>(C);
    case reflenums::clang__CXXConstructExpr::arguments:
      return toClientReflType<class llvm::iterator_range<struct clang::Stmt::ConstExprIterator>>(C);
    case reflenums::clang__CXXConstructExpr::arguments:
      return toClientReflType<class llvm::iterator_range<struct clang::Stmt::ConstExprIterator>>(C);
    case reflenums::clang__CXXConstructExpr::arguments:
      return toClientReflType<class llvm::iterator_range<struct clang::Stmt::ConstExprIterator>>(C);
    case reflenums::clang__CXXConstructExpr::arguments:
      return toClientReflType<class llvm::iterator_range<struct clang::Stmt::ConstExprIterator>>(C);
    case reflenums::clang__CXXConstructExpr::arguments:
      return toClientReflType<class llvm::iterator_range<struct clang::Stmt::ConstExprIterator>>(C);
    case reflenums::clang__CXXConstructExpr::arguments:
      return toClientReflType<class llvm::iterator_range<struct clang::Stmt::ConstExprIterator>>(C);
    case reflenums::clang__CXXConstructExpr::getArgs:
      return toClientReflType<const class clang::Expr *const *>(C);
    case reflenums::clang__CXXConstructExpr::getNumArgs:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__CXXConstructExpr::getNumArgs:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__CXXConstructExpr::getArg:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__CXXConstructExpr::getArg:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__CXXConstructExpr::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXConstructExpr::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXConstructExpr::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXConstructExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXConstructExpr::getParenOrBraceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__CXXConstructExpr::getParenOrBraceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__CXXConstructExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXConstructExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXConstructExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXConstructExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXConstructExpr::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__CXXInheritedCtorInitExpr:
  switch (static_cast<reflenums::clang__CXXInheritedCtorInitExpr::memnames>(MemNum)) {
    case reflenums::clang__CXXInheritedCtorInitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXInheritedCtorInitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXInheritedCtorInitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXInheritedCtorInitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXInheritedCtorInitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXInheritedCtorInitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXInheritedCtorInitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXInheritedCtorInitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXInheritedCtorInitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXInheritedCtorInitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXInheritedCtorInitExpr::getConstructor:
      return toClientReflType<class clang::CXXConstructorDecl *>(C);
    case reflenums::clang__CXXInheritedCtorInitExpr::constructsVBase:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXInheritedCtorInitExpr::getConstructionKind:
      return toClientReflType<enum clang::CXXConstructExpr::ConstructionKind>(C);
    case reflenums::clang__CXXInheritedCtorInitExpr::inheritedFromVBase:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXInheritedCtorInitExpr::getLocation:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXInheritedCtorInitExpr::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXInheritedCtorInitExpr::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXInheritedCtorInitExpr::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXInheritedCtorInitExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXInheritedCtorInitExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXInheritedCtorInitExpr::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__CXXFunctionalCastExpr:
  switch (static_cast<reflenums::clang__CXXFunctionalCastExpr::memnames>(MemNum)) {
    case reflenums::clang__CXXFunctionalCastExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXFunctionalCastExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXFunctionalCastExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXFunctionalCastExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXFunctionalCastExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXFunctionalCastExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXFunctionalCastExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXFunctionalCastExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXFunctionalCastExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXFunctionalCastExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXFunctionalCastExpr::CreateEmpty:
      return toClientReflType<class clang::CXXFunctionalCastExpr *>(C);
    case reflenums::clang__CXXFunctionalCastExpr::getLParenLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXFunctionalCastExpr::getLParenLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXFunctionalCastExpr::getRParenLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXFunctionalCastExpr::getRParenLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXFunctionalCastExpr::isListInitialization:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXFunctionalCastExpr::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXFunctionalCastExpr::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXFunctionalCastExpr::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXFunctionalCastExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXFunctionalCastExpr::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__CXXTemporaryObjectExpr:
  switch (static_cast<reflenums::clang__CXXTemporaryObjectExpr::memnames>(MemNum)) {
    case reflenums::clang__CXXTemporaryObjectExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXTemporaryObjectExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXTemporaryObjectExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXTemporaryObjectExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXTemporaryObjectExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXTemporaryObjectExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXTemporaryObjectExpr::getTypeSourceInfo:
      return toClientReflType<class clang::TypeSourceInfo *>(C);
    case reflenums::clang__CXXTemporaryObjectExpr::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXTemporaryObjectExpr::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXTemporaryObjectExpr::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXTemporaryObjectExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXTemporaryObjectExpr::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__LambdaExpr:
  switch (static_cast<reflenums::clang__LambdaExpr::memnames>(MemNum)) {
    case reflenums::clang__LambdaExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__LambdaExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__LambdaExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__LambdaExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__LambdaExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__LambdaExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__LambdaExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__LambdaExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__LambdaExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__LambdaExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__LambdaExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__LambdaExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__LambdaExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__LambdaExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__LambdaExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__LambdaExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__LambdaExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__LambdaExpr::CreateDeserialized:
      return toClientReflType<class clang::LambdaExpr *>(C);
    case reflenums::clang__LambdaExpr::getCaptureDefault:
      return toClientReflType<enum clang::LambdaCaptureDefault>(C);
    case reflenums::clang__LambdaExpr::getCaptureDefaultLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__LambdaExpr::isInitCapture:
      return toClientReflType<bool>(C);
    case reflenums::clang__LambdaExpr::isInitCapture:
      return toClientReflType<bool>(C);
    case reflenums::clang__LambdaExpr::isInitCapture:
      return toClientReflType<bool>(C);
    case reflenums::clang__LambdaExpr::captures:
      return toClientReflType<class llvm::iterator_range<const class clang::LambdaCapture *>>(C);
    case reflenums::clang__LambdaExpr::captures:
      return toClientReflType<class llvm::iterator_range<const class clang::LambdaCapture *>>(C);
    case reflenums::clang__LambdaExpr::captures:
      return toClientReflType<class llvm::iterator_range<const class clang::LambdaCapture *>>(C);
    case reflenums::clang__LambdaExpr::capture_size:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__LambdaExpr::explicit_captures:
      return toClientReflType<class llvm::iterator_range<const class clang::LambdaCapture *>>(C);
    case reflenums::clang__LambdaExpr::explicit_captures:
      return toClientReflType<class llvm::iterator_range<const class clang::LambdaCapture *>>(C);
    case reflenums::clang__LambdaExpr::explicit_captures:
      return toClientReflType<class llvm::iterator_range<const class clang::LambdaCapture *>>(C);
    case reflenums::clang__LambdaExpr::implicit_captures:
      return toClientReflType<class llvm::iterator_range<const class clang::LambdaCapture *>>(C);
    case reflenums::clang__LambdaExpr::implicit_captures:
      return toClientReflType<class llvm::iterator_range<const class clang::LambdaCapture *>>(C);
    case reflenums::clang__LambdaExpr::implicit_captures:
      return toClientReflType<class llvm::iterator_range<const class clang::LambdaCapture *>>(C);
    case reflenums::clang__LambdaExpr::implicit_captures:
      return toClientReflType<class llvm::iterator_range<const class clang::LambdaCapture *>>(C);
    case reflenums::clang__LambdaExpr::implicit_captures:
      return toClientReflType<class llvm::iterator_range<const class clang::LambdaCapture *>>(C);
    case reflenums::clang__LambdaExpr::implicit_captures:
      return toClientReflType<class llvm::iterator_range<const class clang::LambdaCapture *>>(C);
    case reflenums::clang__LambdaExpr::capture_inits:
      return toClientReflType<class llvm::iterator_range<class clang::Expr *const *>>(C);
    case reflenums::clang__LambdaExpr::capture_inits:
      return toClientReflType<class llvm::iterator_range<class clang::Expr *const *>>(C);
    case reflenums::clang__LambdaExpr::capture_inits:
      return toClientReflType<class llvm::iterator_range<class clang::Expr *const *>>(C);
    case reflenums::clang__LambdaExpr::capture_inits:
      return toClientReflType<class llvm::iterator_range<class clang::Expr *const *>>(C);
    case reflenums::clang__LambdaExpr::capture_inits:
      return toClientReflType<class llvm::iterator_range<class clang::Expr *const *>>(C);
    case reflenums::clang__LambdaExpr::getIntroducerRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__LambdaExpr::getLambdaClass:
      return toClientReflType<class clang::CXXRecordDecl *>(C);
    case reflenums::clang__LambdaExpr::getCallOperator:
      return toClientReflType<class clang::CXXMethodDecl *>(C);
    case reflenums::clang__LambdaExpr::getTemplateParameterList:
      return toClientReflType<class clang::TemplateParameterList *>(C);
    case reflenums::clang__LambdaExpr::isGenericLambda:
      return toClientReflType<bool>(C);
    case reflenums::clang__LambdaExpr::getBody:
      return toClientReflType<class clang::CompoundStmt *>(C);
    case reflenums::clang__LambdaExpr::isMutable:
      return toClientReflType<bool>(C);
    case reflenums::clang__LambdaExpr::hasExplicitParameters:
      return toClientReflType<bool>(C);
    case reflenums::clang__LambdaExpr::hasExplicitResultType:
      return toClientReflType<bool>(C);
    case reflenums::clang__LambdaExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__LambdaExpr::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__LambdaExpr::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__LambdaExpr::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__LambdaExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__LambdaExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__CXXScalarValueInitExpr:
  switch (static_cast<reflenums::clang__CXXScalarValueInitExpr::memnames>(MemNum)) {
    case reflenums::clang__CXXScalarValueInitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXScalarValueInitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXScalarValueInitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXScalarValueInitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXScalarValueInitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXScalarValueInitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXScalarValueInitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXScalarValueInitExpr::getTypeSourceInfo:
      return toClientReflType<class clang::TypeSourceInfo *>(C);
    case reflenums::clang__CXXScalarValueInitExpr::getRParenLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXScalarValueInitExpr::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXScalarValueInitExpr::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXScalarValueInitExpr::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXScalarValueInitExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXScalarValueInitExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXScalarValueInitExpr::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__CXXNewExpr:
  switch (static_cast<reflenums::clang__CXXNewExpr::memnames>(MemNum)) {
    case reflenums::clang__CXXNewExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXNewExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXNewExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXNewExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXNewExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXNewExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXNewExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXNewExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXNewExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXNewExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXNewExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXNewExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXNewExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXNewExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXNewExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXNewExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXNewExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXNewExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXNewExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXNewExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXNewExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXNewExpr::getAllocatedType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__CXXNewExpr::getAllocatedTypeSourceInfo:
      return toClientReflType<class clang::TypeSourceInfo *>(C);
    case reflenums::clang__CXXNewExpr::shouldNullCheckAllocation:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXNewExpr::getOperatorNew:
      return toClientReflType<class clang::FunctionDecl *>(C);
    case reflenums::clang__CXXNewExpr::getOperatorNew:
      return toClientReflType<class clang::FunctionDecl *>(C);
    case reflenums::clang__CXXNewExpr::getOperatorDelete:
      return toClientReflType<class clang::FunctionDecl *>(C);
    case reflenums::clang__CXXNewExpr::getOperatorDelete:
      return toClientReflType<class clang::FunctionDecl *>(C);
    case reflenums::clang__CXXNewExpr::isArray:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXNewExpr::isArray:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXNewExpr::getArraySize:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__CXXNewExpr::getNumPlacementArgs:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__CXXNewExpr::getNumPlacementArgs:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__CXXNewExpr::getNumPlacementArgs:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__CXXNewExpr::getPlacementArg:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__CXXNewExpr::isParenTypeId:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXNewExpr::getTypeIdParens:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__CXXNewExpr::isGlobalNew:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXNewExpr::hasInitializer:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXNewExpr::getInitializationStyle:
      return toClientReflType<enum clang::CXXNewExpr::InitializationStyle>(C);
    case reflenums::clang__CXXNewExpr::getInitializationStyle:
      return toClientReflType<enum clang::CXXNewExpr::InitializationStyle>(C);
    case reflenums::clang__CXXNewExpr::getInitializer:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__CXXNewExpr::getConstructExpr:
      return toClientReflType<const class clang::CXXConstructExpr *>(C);
    case reflenums::clang__CXXNewExpr::passAlignment:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXNewExpr::doesUsualArrayDeleteWantSize:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXNewExpr::doesUsualArrayDeleteWantSize:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXNewExpr::doesUsualArrayDeleteWantSize:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXNewExpr::doesUsualArrayDeleteWantSize:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXNewExpr::placement_arguments:
      return toClientReflType<class llvm::iterator_range<struct clang::Stmt::ConstExprIterator>>(C);
    case reflenums::clang__CXXNewExpr::placement_arguments:
      return toClientReflType<class llvm::iterator_range<struct clang::Stmt::ConstExprIterator>>(C);
    case reflenums::clang__CXXNewExpr::placement_arguments:
      return toClientReflType<class llvm::iterator_range<struct clang::Stmt::ConstExprIterator>>(C);
    case reflenums::clang__CXXNewExpr::placement_arguments:
      return toClientReflType<class llvm::iterator_range<struct clang::Stmt::ConstExprIterator>>(C);
    case reflenums::clang__CXXNewExpr::placement_arguments:
      return toClientReflType<class llvm::iterator_range<struct clang::Stmt::ConstExprIterator>>(C);
    case reflenums::clang__CXXNewExpr::placement_arguments:
      return toClientReflType<class llvm::iterator_range<struct clang::Stmt::ConstExprIterator>>(C);
    case reflenums::clang__CXXNewExpr::placement_arguments:
      return toClientReflType<class llvm::iterator_range<struct clang::Stmt::ConstExprIterator>>(C);
    case reflenums::clang__CXXNewExpr::placement_arguments:
      return toClientReflType<class llvm::iterator_range<struct clang::Stmt::ConstExprIterator>>(C);
    case reflenums::clang__CXXNewExpr::placement_arguments:
      return toClientReflType<class llvm::iterator_range<struct clang::Stmt::ConstExprIterator>>(C);
    case reflenums::clang__CXXNewExpr::placement_arguments:
      return toClientReflType<class llvm::iterator_range<struct clang::Stmt::ConstExprIterator>>(C);
    case reflenums::clang__CXXNewExpr::getStartLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXNewExpr::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXNewExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXNewExpr::getDirectInitRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__CXXNewExpr::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__CXXNewExpr::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXNewExpr::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXNewExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXNewExpr::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__CXXDeleteExpr:
  switch (static_cast<reflenums::clang__CXXDeleteExpr::memnames>(MemNum)) {
    case reflenums::clang__CXXDeleteExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXDeleteExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXDeleteExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXDeleteExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXDeleteExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXDeleteExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXDeleteExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXDeleteExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXDeleteExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXDeleteExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXDeleteExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXDeleteExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXDeleteExpr::isGlobalDelete:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXDeleteExpr::isArrayForm:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXDeleteExpr::isArrayFormAsWritten:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXDeleteExpr::doesUsualArrayDeleteWantSize:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXDeleteExpr::getOperatorDelete:
      return toClientReflType<class clang::FunctionDecl *>(C);
    case reflenums::clang__CXXDeleteExpr::getOperatorDelete:
      return toClientReflType<class clang::FunctionDecl *>(C);
    case reflenums::clang__CXXDeleteExpr::getArgument:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__CXXDeleteExpr::getDestroyedType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__CXXDeleteExpr::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXDeleteExpr::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXDeleteExpr::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXDeleteExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXDeleteExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXDeleteExpr::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__CXXPseudoDestructorExpr:
  switch (static_cast<reflenums::clang__CXXPseudoDestructorExpr::memnames>(MemNum)) {
    case reflenums::clang__CXXPseudoDestructorExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXPseudoDestructorExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXPseudoDestructorExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXPseudoDestructorExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXPseudoDestructorExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXPseudoDestructorExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXPseudoDestructorExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXPseudoDestructorExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXPseudoDestructorExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXPseudoDestructorExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXPseudoDestructorExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXPseudoDestructorExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXPseudoDestructorExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXPseudoDestructorExpr::getBase:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__CXXPseudoDestructorExpr::hasQualifier:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXPseudoDestructorExpr::getQualifierLoc:
      return toClientReflType<class clang::NestedNameSpecifierLoc>(C);
    case reflenums::clang__CXXPseudoDestructorExpr::getQualifier:
      return toClientReflType<class clang::NestedNameSpecifier *>(C);
    case reflenums::clang__CXXPseudoDestructorExpr::isArrow:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXPseudoDestructorExpr::getOperatorLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXPseudoDestructorExpr::getScopeTypeInfo:
      return toClientReflType<class clang::TypeSourceInfo *>(C);
    case reflenums::clang__CXXPseudoDestructorExpr::getColonColonLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXPseudoDestructorExpr::getTildeLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXPseudoDestructorExpr::getDestroyedTypeInfo:
      return toClientReflType<class clang::TypeSourceInfo *>(C);
    case reflenums::clang__CXXPseudoDestructorExpr::getDestroyedTypeIdentifier:
      return toClientReflType<class clang::IdentifierInfo *>(C);
    case reflenums::clang__CXXPseudoDestructorExpr::getDestroyedType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__CXXPseudoDestructorExpr::getDestroyedTypeLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXPseudoDestructorExpr::getDestroyedTypeLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXPseudoDestructorExpr::getDestroyedTypeLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXPseudoDestructorExpr::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXPseudoDestructorExpr::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXPseudoDestructorExpr::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXPseudoDestructorExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXPseudoDestructorExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXPseudoDestructorExpr::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__TypeTraitExpr:
  switch (static_cast<reflenums::clang__TypeTraitExpr::memnames>(MemNum)) {
    case reflenums::clang__TypeTraitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__TypeTraitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__TypeTraitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__TypeTraitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__TypeTraitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__TypeTraitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__TypeTraitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__TypeTraitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__TypeTraitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__TypeTraitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__TypeTraitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__TypeTraitExpr::CreateDeserialized:
      return toClientReflType<class clang::TypeTraitExpr *>(C);
    case reflenums::clang__TypeTraitExpr::getTrait:
      return toClientReflType<enum clang::TypeTrait>(C);
    case reflenums::clang__TypeTraitExpr::getValue:
      return toClientReflType<bool>(C);
    case reflenums::clang__TypeTraitExpr::getNumArgs:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__TypeTraitExpr::getArg:
      return toClientReflType<class clang::TypeSourceInfo *>(C);
    case reflenums::clang__TypeTraitExpr::getArgs:
      return toClientReflType<class llvm::ArrayRef<class clang::TypeSourceInfo *>>(C);
    case reflenums::clang__TypeTraitExpr::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__TypeTraitExpr::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__TypeTraitExpr::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__TypeTraitExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__TypeTraitExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__TypeTraitExpr::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__ArrayTypeTraitExpr:
  switch (static_cast<reflenums::clang__ArrayTypeTraitExpr::memnames>(MemNum)) {
    case reflenums::clang__ArrayTypeTraitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ArrayTypeTraitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ArrayTypeTraitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ArrayTypeTraitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ArrayTypeTraitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ArrayTypeTraitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ArrayTypeTraitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ArrayTypeTraitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ArrayTypeTraitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ArrayTypeTraitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ArrayTypeTraitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ArrayTypeTraitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ArrayTypeTraitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ArrayTypeTraitExpr::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ArrayTypeTraitExpr::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ArrayTypeTraitExpr::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ArrayTypeTraitExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ArrayTypeTraitExpr::getTrait:
      return toClientReflType<enum clang::ArrayTypeTrait>(C);
    case reflenums::clang__ArrayTypeTraitExpr::getQueriedType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ArrayTypeTraitExpr::getQueriedTypeSourceInfo:
      return toClientReflType<class clang::TypeSourceInfo *>(C);
    case reflenums::clang__ArrayTypeTraitExpr::getValue:
      return toClientReflType<unsigned long long>(C);
    case reflenums::clang__ArrayTypeTraitExpr::getDimensionExpression:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__ArrayTypeTraitExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ArrayTypeTraitExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ArrayTypeTraitExpr::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__ExpressionTraitExpr:
  switch (static_cast<reflenums::clang__ExpressionTraitExpr::memnames>(MemNum)) {
    case reflenums::clang__ExpressionTraitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ExpressionTraitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ExpressionTraitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ExpressionTraitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ExpressionTraitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ExpressionTraitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ExpressionTraitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ExpressionTraitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ExpressionTraitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ExpressionTraitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ExpressionTraitExpr::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ExpressionTraitExpr::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ExpressionTraitExpr::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ExpressionTraitExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ExpressionTraitExpr::getTrait:
      return toClientReflType<enum clang::ExpressionTrait>(C);
    case reflenums::clang__ExpressionTraitExpr::getQueriedExpression:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__ExpressionTraitExpr::getValue:
      return toClientReflType<bool>(C);
    case reflenums::clang__ExpressionTraitExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ExpressionTraitExpr::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__OverloadExpr:
  switch (static_cast<reflenums::clang__OverloadExpr::memnames>(MemNum)) {
    case reflenums::clang__OverloadExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__OverloadExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__OverloadExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__OverloadExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__OverloadExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__OverloadExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__OverloadExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__OverloadExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__OverloadExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__OverloadExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__OverloadExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__OverloadExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__OverloadExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__OverloadExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__OverloadExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__OverloadExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__OverloadExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__OverloadExpr::find:
      return toClientReflType<struct clang::OverloadExpr::FindResult>(C);
    case reflenums::clang__OverloadExpr::getNamingClass:
      return toClientReflType<class clang::CXXRecordDecl *>(C);
    case reflenums::clang__OverloadExpr::getNamingClass:
      return toClientReflType<class clang::CXXRecordDecl *>(C);
    case reflenums::clang__OverloadExpr::getNamingClass:
      return toClientReflType<class clang::CXXRecordDecl *>(C);
    case reflenums::clang__OverloadExpr::getNamingClass:
      return toClientReflType<class clang::CXXRecordDecl *>(C);
    case reflenums::clang__OverloadExpr::decls:
      return toClientReflType<class llvm::iterator_range<class clang::UnresolvedSetIterator>>(C);
    case reflenums::clang__OverloadExpr::getNumDecls:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__OverloadExpr::getNameInfo:
      return toClientReflType<const struct clang::DeclarationNameInfo &>(C);
    case reflenums::clang__OverloadExpr::getName:
      return toClientReflType<class clang::DeclarationName>(C);
    case reflenums::clang__OverloadExpr::getNameLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__OverloadExpr::getQualifier:
      return toClientReflType<class clang::NestedNameSpecifier *>(C);
    case reflenums::clang__OverloadExpr::getQualifierLoc:
      return toClientReflType<class clang::NestedNameSpecifierLoc>(C);
    case reflenums::clang__OverloadExpr::getTemplateKeywordLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__OverloadExpr::getLAngleLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__OverloadExpr::getRAngleLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__OverloadExpr::hasTemplateKeyword:
      return toClientReflType<bool>(C);
    case reflenums::clang__OverloadExpr::hasExplicitTemplateArgs:
      return toClientReflType<bool>(C);
    case reflenums::clang__OverloadExpr::getTemplateArgs:
      return toClientReflType<const class clang::TemplateArgumentLoc *>(C);
    case reflenums::clang__OverloadExpr::getNumTemplateArgs:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__OverloadExpr::template_arguments:
      return toClientReflType<class llvm::ArrayRef<class clang::TemplateArgumentLoc>>(C);
    case reflenums::clang__OverloadExpr::copyTemplateArgumentsInto:
      return toClientReflType<void>(C);
    case reflenums::clang__OverloadExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__OverloadExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__OverloadExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__OverloadExpr::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__OverloadExpr__FindResult:
  switch (static_cast<reflenums::clang__OverloadExpr__FindResult::memnames>(MemNum)) {
    case reflenums::clang__OverloadExpr__FindResult:::
      return toClientReflType<>(C);
    case reflenums::clang__OverloadExpr__FindResult::Expression:
      return toClientReflType<class clang::OverloadExpr *>(C);
    case reflenums::clang__OverloadExpr__FindResult::IsAddressOfOperand:
      return toClientReflType<bool>(C);
    case reflenums::clang__OverloadExpr__FindResult::HasFormOfMemberPointer:
      return toClientReflType<bool>(C);
    case reflenums::clang__OverloadExpr__FindResult::HasFormOfMemberPointer:
      return toClientReflType<bool>(C);
    case reflenums::clang__OverloadExpr__FindResult::HasFormOfMemberPointer:
      return toClientReflType<bool>(C);
    case reflenums::clang__OverloadExpr__FindResult::HasFormOfMemberPointer:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__UnresolvedLookupExpr:
  switch (static_cast<reflenums::clang__UnresolvedLookupExpr::memnames>(MemNum)) {
    case reflenums::clang__UnresolvedLookupExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedLookupExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedLookupExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedLookupExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedLookupExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedLookupExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedLookupExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedLookupExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedLookupExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedLookupExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedLookupExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedLookupExpr::Create:
      return toClientReflType<class clang::UnresolvedLookupExpr *>(C);
    case reflenums::clang__UnresolvedLookupExpr::Create1:
      return toClientReflType<class clang::UnresolvedLookupExpr *>(C);
    case reflenums::clang__UnresolvedLookupExpr::CreateEmpty:
      return toClientReflType<class clang::UnresolvedLookupExpr *>(C);
    case reflenums::clang__UnresolvedLookupExpr::requiresADL:
      return toClientReflType<bool>(C);
    case reflenums::clang__UnresolvedLookupExpr::isOverloaded:
      return toClientReflType<bool>(C);
    case reflenums::clang__UnresolvedLookupExpr::getNamingClass:
      return toClientReflType<class clang::CXXRecordDecl *>(C);
    case reflenums::clang__UnresolvedLookupExpr::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__UnresolvedLookupExpr::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__UnresolvedLookupExpr::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__UnresolvedLookupExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__UnresolvedLookupExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__UnresolvedLookupExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__UnresolvedLookupExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__UnresolvedLookupExpr::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__DependentScopeDeclRefExpr:
  switch (static_cast<reflenums::clang__DependentScopeDeclRefExpr::memnames>(MemNum)) {
    case reflenums::clang__DependentScopeDeclRefExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__DependentScopeDeclRefExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__DependentScopeDeclRefExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__DependentScopeDeclRefExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__DependentScopeDeclRefExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__DependentScopeDeclRefExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__DependentScopeDeclRefExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__DependentScopeDeclRefExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__DependentScopeDeclRefExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__DependentScopeDeclRefExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__DependentScopeDeclRefExpr::Create:
      return toClientReflType<class clang::DependentScopeDeclRefExpr *>(C);
    case reflenums::clang__DependentScopeDeclRefExpr::CreateEmpty:
      return toClientReflType<class clang::DependentScopeDeclRefExpr *>(C);
    case reflenums::clang__DependentScopeDeclRefExpr::getNameInfo:
      return toClientReflType<const struct clang::DeclarationNameInfo &>(C);
    case reflenums::clang__DependentScopeDeclRefExpr::getDeclName:
      return toClientReflType<class clang::DeclarationName>(C);
    case reflenums::clang__DependentScopeDeclRefExpr::getLocation:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__DependentScopeDeclRefExpr::getQualifierLoc:
      return toClientReflType<class clang::NestedNameSpecifierLoc>(C);
    case reflenums::clang__DependentScopeDeclRefExpr::getQualifier:
      return toClientReflType<class clang::NestedNameSpecifier *>(C);
    case reflenums::clang__DependentScopeDeclRefExpr::getTemplateKeywordLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__DependentScopeDeclRefExpr::getLAngleLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__DependentScopeDeclRefExpr::getRAngleLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__DependentScopeDeclRefExpr::hasTemplateKeyword:
      return toClientReflType<bool>(C);
    case reflenums::clang__DependentScopeDeclRefExpr::hasExplicitTemplateArgs:
      return toClientReflType<bool>(C);
    case reflenums::clang__DependentScopeDeclRefExpr::copyTemplateArgumentsInto:
      return toClientReflType<void>(C);
    case reflenums::clang__DependentScopeDeclRefExpr::getTemplateArgs:
      return toClientReflType<const class clang::TemplateArgumentLoc *>(C);
    case reflenums::clang__DependentScopeDeclRefExpr::getNumTemplateArgs:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__DependentScopeDeclRefExpr::template_arguments:
      return toClientReflType<class llvm::ArrayRef<class clang::TemplateArgumentLoc>>(C);
    case reflenums::clang__DependentScopeDeclRefExpr::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__DependentScopeDeclRefExpr::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__DependentScopeDeclRefExpr::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__DependentScopeDeclRefExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__DependentScopeDeclRefExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__DependentScopeDeclRefExpr::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__ExprWithCleanups:
  switch (static_cast<reflenums::clang__ExprWithCleanups::memnames>(MemNum)) {
    case reflenums::clang__ExprWithCleanups:::
      return toClientReflType<>(C);
    case reflenums::clang__ExprWithCleanups:::
      return toClientReflType<>(C);
    case reflenums::clang__ExprWithCleanups:::
      return toClientReflType<>(C);
    case reflenums::clang__ExprWithCleanups:::
      return toClientReflType<>(C);
    case reflenums::clang__ExprWithCleanups:::
      return toClientReflType<>(C);
    case reflenums::clang__ExprWithCleanups:::
      return toClientReflType<>(C);
    case reflenums::clang__ExprWithCleanups:::
      return toClientReflType<>(C);
    case reflenums::clang__ExprWithCleanups:::
      return toClientReflType<>(C);
    case reflenums::clang__ExprWithCleanups:::
      return toClientReflType<>(C);
    case reflenums::clang__ExprWithCleanups:::
      return toClientReflType<>(C);
    case reflenums::clang__ExprWithCleanups::Create:
      return toClientReflType<class clang::ExprWithCleanups *>(C);
    case reflenums::clang__ExprWithCleanups::Create:
      return toClientReflType<class clang::ExprWithCleanups *>(C);
    case reflenums::clang__ExprWithCleanups::getObjects:
      return toClientReflType<class llvm::ArrayRef<class clang::BlockDecl *>>(C);
    case reflenums::clang__ExprWithCleanups::getNumObjects:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ExprWithCleanups::getObject:
      return toClientReflType<class clang::BlockDecl *>(C);
    case reflenums::clang__ExprWithCleanups::getObject:
      return toClientReflType<class clang::BlockDecl *>(C);
    case reflenums::clang__ExprWithCleanups::getSubExpr:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__ExprWithCleanups::cleanupsHaveSideEffects:
      return toClientReflType<bool>(C);
    case reflenums::clang__ExprWithCleanups::cleanupsHaveSideEffects:
      return toClientReflType<bool>(C);
    case reflenums::clang__ExprWithCleanups::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ExprWithCleanups::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ExprWithCleanups::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ExprWithCleanups::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ExprWithCleanups::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ExprWithCleanups::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__CXXUnresolvedConstructExpr:
  switch (static_cast<reflenums::clang__CXXUnresolvedConstructExpr::memnames>(MemNum)) {
    case reflenums::clang__CXXUnresolvedConstructExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXUnresolvedConstructExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXUnresolvedConstructExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXUnresolvedConstructExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXUnresolvedConstructExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXUnresolvedConstructExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXUnresolvedConstructExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXUnresolvedConstructExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXUnresolvedConstructExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXUnresolvedConstructExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXUnresolvedConstructExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXUnresolvedConstructExpr::CreateEmpty:
      return toClientReflType<class clang::CXXUnresolvedConstructExpr *>(C);
    case reflenums::clang__CXXUnresolvedConstructExpr::getTypeAsWritten:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__CXXUnresolvedConstructExpr::getTypeSourceInfo:
      return toClientReflType<class clang::TypeSourceInfo *>(C);
    case reflenums::clang__CXXUnresolvedConstructExpr::getLParenLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXUnresolvedConstructExpr::getLParenLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXUnresolvedConstructExpr::getRParenLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXUnresolvedConstructExpr::getRParenLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXUnresolvedConstructExpr::isListInitialization:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXUnresolvedConstructExpr::arg_size:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__CXXUnresolvedConstructExpr::arg_size:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__CXXUnresolvedConstructExpr::arg_size:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__CXXUnresolvedConstructExpr::arg_size:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__CXXUnresolvedConstructExpr::arg_size:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__CXXUnresolvedConstructExpr::arg_size:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__CXXUnresolvedConstructExpr::arg_size:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__CXXUnresolvedConstructExpr::arg_size:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__CXXUnresolvedConstructExpr::getArg:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__CXXUnresolvedConstructExpr::getArg:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__CXXUnresolvedConstructExpr::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXUnresolvedConstructExpr::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXUnresolvedConstructExpr::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXUnresolvedConstructExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXUnresolvedConstructExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXUnresolvedConstructExpr::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__CXXDependentScopeMemberExpr:
  switch (static_cast<reflenums::clang__CXXDependentScopeMemberExpr::memnames>(MemNum)) {
    case reflenums::clang__CXXDependentScopeMemberExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXDependentScopeMemberExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXDependentScopeMemberExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXDependentScopeMemberExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXDependentScopeMemberExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXDependentScopeMemberExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXDependentScopeMemberExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXDependentScopeMemberExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXDependentScopeMemberExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXDependentScopeMemberExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXDependentScopeMemberExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXDependentScopeMemberExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXDependentScopeMemberExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXDependentScopeMemberExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXDependentScopeMemberExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXDependentScopeMemberExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXDependentScopeMemberExpr::Create:
      return toClientReflType<class clang::CXXDependentScopeMemberExpr *>(C);
    case reflenums::clang__CXXDependentScopeMemberExpr::CreateEmpty:
      return toClientReflType<class clang::CXXDependentScopeMemberExpr *>(C);
    case reflenums::clang__CXXDependentScopeMemberExpr::isImplicitAccess:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXDependentScopeMemberExpr::getBase:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__CXXDependentScopeMemberExpr::getBaseType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__CXXDependentScopeMemberExpr::isArrow:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXDependentScopeMemberExpr::getOperatorLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXDependentScopeMemberExpr::getQualifier:
      return toClientReflType<class clang::NestedNameSpecifier *>(C);
    case reflenums::clang__CXXDependentScopeMemberExpr::getQualifierLoc:
      return toClientReflType<class clang::NestedNameSpecifierLoc>(C);
    case reflenums::clang__CXXDependentScopeMemberExpr::getFirstQualifierFoundInScope:
      return toClientReflType<class clang::NamedDecl *>(C);
    case reflenums::clang__CXXDependentScopeMemberExpr::getMemberNameInfo:
      return toClientReflType<const struct clang::DeclarationNameInfo &>(C);
    case reflenums::clang__CXXDependentScopeMemberExpr::getMember:
      return toClientReflType<class clang::DeclarationName>(C);
    case reflenums::clang__CXXDependentScopeMemberExpr::getMemberLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXDependentScopeMemberExpr::getTemplateKeywordLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXDependentScopeMemberExpr::getLAngleLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXDependentScopeMemberExpr::getRAngleLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXDependentScopeMemberExpr::hasTemplateKeyword:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXDependentScopeMemberExpr::hasExplicitTemplateArgs:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXDependentScopeMemberExpr::copyTemplateArgumentsInto:
      return toClientReflType<void>(C);
    case reflenums::clang__CXXDependentScopeMemberExpr::getTemplateArgs:
      return toClientReflType<const class clang::TemplateArgumentLoc *>(C);
    case reflenums::clang__CXXDependentScopeMemberExpr::getNumTemplateArgs:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__CXXDependentScopeMemberExpr::template_arguments:
      return toClientReflType<class llvm::ArrayRef<class clang::TemplateArgumentLoc>>(C);
    case reflenums::clang__CXXDependentScopeMemberExpr::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXDependentScopeMemberExpr::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXDependentScopeMemberExpr::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXDependentScopeMemberExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXDependentScopeMemberExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXDependentScopeMemberExpr::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__UnresolvedMemberExpr:
  switch (static_cast<reflenums::clang__UnresolvedMemberExpr::memnames>(MemNum)) {
    case reflenums::clang__UnresolvedMemberExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedMemberExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedMemberExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedMemberExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedMemberExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedMemberExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedMemberExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedMemberExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedMemberExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedMemberExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedMemberExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedMemberExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedMemberExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__UnresolvedMemberExpr::Create:
      return toClientReflType<class clang::UnresolvedMemberExpr *>(C);
    case reflenums::clang__UnresolvedMemberExpr::CreateEmpty:
      return toClientReflType<class clang::UnresolvedMemberExpr *>(C);
    case reflenums::clang__UnresolvedMemberExpr::isImplicitAccess:
      return toClientReflType<bool>(C);
    case reflenums::clang__UnresolvedMemberExpr::isImplicitAccess:
      return toClientReflType<bool>(C);
    case reflenums::clang__UnresolvedMemberExpr::getBase:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__UnresolvedMemberExpr::getBaseType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__UnresolvedMemberExpr::hasUnresolvedUsing:
      return toClientReflType<bool>(C);
    case reflenums::clang__UnresolvedMemberExpr::isArrow:
      return toClientReflType<bool>(C);
    case reflenums::clang__UnresolvedMemberExpr::getOperatorLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__UnresolvedMemberExpr::getNamingClass:
      return toClientReflType<class clang::CXXRecordDecl *>(C);
    case reflenums::clang__UnresolvedMemberExpr::getMemberNameInfo:
      return toClientReflType<const struct clang::DeclarationNameInfo &>(C);
    case reflenums::clang__UnresolvedMemberExpr::getMemberName:
      return toClientReflType<class clang::DeclarationName>(C);
    case reflenums::clang__UnresolvedMemberExpr::getMemberLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__UnresolvedMemberExpr::getExprLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__UnresolvedMemberExpr::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__UnresolvedMemberExpr::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__UnresolvedMemberExpr::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__UnresolvedMemberExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__UnresolvedMemberExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__UnresolvedMemberExpr::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__CXXNoexceptExpr:
  switch (static_cast<reflenums::clang__CXXNoexceptExpr::memnames>(MemNum)) {
    case reflenums::clang__CXXNoexceptExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXNoexceptExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXNoexceptExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXNoexceptExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXNoexceptExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXNoexceptExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXNoexceptExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXNoexceptExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXNoexceptExpr::getOperand:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__CXXNoexceptExpr::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXNoexceptExpr::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXNoexceptExpr::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXNoexceptExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXNoexceptExpr::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__CXXNoexceptExpr::getValue:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXNoexceptExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXNoexceptExpr::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__PackExpansionExpr:
  switch (static_cast<reflenums::clang__PackExpansionExpr::memnames>(MemNum)) {
    case reflenums::clang__PackExpansionExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__PackExpansionExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__PackExpansionExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__PackExpansionExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__PackExpansionExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__PackExpansionExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__PackExpansionExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__PackExpansionExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__PackExpansionExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__PackExpansionExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__PackExpansionExpr::getPattern:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__PackExpansionExpr::getEllipsisLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__PackExpansionExpr::getEllipsisLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__PackExpansionExpr::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__PackExpansionExpr::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__PackExpansionExpr::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__PackExpansionExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__PackExpansionExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__PackExpansionExpr::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__SizeOfPackExpr:
  switch (static_cast<reflenums::clang__SizeOfPackExpr::memnames>(MemNum)) {
    case reflenums::clang__SizeOfPackExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__SizeOfPackExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__SizeOfPackExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__SizeOfPackExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__SizeOfPackExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__SizeOfPackExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__SizeOfPackExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__SizeOfPackExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__SizeOfPackExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__SizeOfPackExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__SizeOfPackExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__SizeOfPackExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__SizeOfPackExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__SizeOfPackExpr::CreateDeserialized:
      return toClientReflType<class clang::SizeOfPackExpr *>(C);
    case reflenums::clang__SizeOfPackExpr::getOperatorLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SizeOfPackExpr::getPackLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SizeOfPackExpr::getRParenLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SizeOfPackExpr::getPack:
      return toClientReflType<class clang::NamedDecl *>(C);
    case reflenums::clang__SizeOfPackExpr::getPackLength:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__SizeOfPackExpr::isPartiallySubstituted:
      return toClientReflType<bool>(C);
    case reflenums::clang__SizeOfPackExpr::getPartialArguments:
      return toClientReflType<class llvm::ArrayRef<class clang::TemplateArgument>>(C);
    case reflenums::clang__SizeOfPackExpr::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SizeOfPackExpr::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SizeOfPackExpr::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SizeOfPackExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SizeOfPackExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__SizeOfPackExpr::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__SubstNonTypeTemplateParmExpr:
  switch (static_cast<reflenums::clang__SubstNonTypeTemplateParmExpr::memnames>(MemNum)) {
    case reflenums::clang__SubstNonTypeTemplateParmExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__SubstNonTypeTemplateParmExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__SubstNonTypeTemplateParmExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__SubstNonTypeTemplateParmExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__SubstNonTypeTemplateParmExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__SubstNonTypeTemplateParmExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__SubstNonTypeTemplateParmExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__SubstNonTypeTemplateParmExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__SubstNonTypeTemplateParmExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__SubstNonTypeTemplateParmExpr::getNameLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SubstNonTypeTemplateParmExpr::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SubstNonTypeTemplateParmExpr::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SubstNonTypeTemplateParmExpr::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SubstNonTypeTemplateParmExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SubstNonTypeTemplateParmExpr::getReplacement:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__SubstNonTypeTemplateParmExpr::getParameter:
      return toClientReflType<class clang::NonTypeTemplateParmDecl *>(C);
    case reflenums::clang__SubstNonTypeTemplateParmExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__SubstNonTypeTemplateParmExpr::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__SubstNonTypeTemplateParmPackExpr:
  switch (static_cast<reflenums::clang__SubstNonTypeTemplateParmPackExpr::memnames>(MemNum)) {
    case reflenums::clang__SubstNonTypeTemplateParmPackExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__SubstNonTypeTemplateParmPackExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__SubstNonTypeTemplateParmPackExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__SubstNonTypeTemplateParmPackExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__SubstNonTypeTemplateParmPackExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__SubstNonTypeTemplateParmPackExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__SubstNonTypeTemplateParmPackExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__SubstNonTypeTemplateParmPackExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__SubstNonTypeTemplateParmPackExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__SubstNonTypeTemplateParmPackExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__SubstNonTypeTemplateParmPackExpr::getParameterPack:
      return toClientReflType<class clang::NonTypeTemplateParmDecl *>(C);
    case reflenums::clang__SubstNonTypeTemplateParmPackExpr::getParameterPackLocation:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SubstNonTypeTemplateParmPackExpr::getArgumentPack:
      return toClientReflType<class clang::TemplateArgument>(C);
    case reflenums::clang__SubstNonTypeTemplateParmPackExpr::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SubstNonTypeTemplateParmPackExpr::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SubstNonTypeTemplateParmPackExpr::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SubstNonTypeTemplateParmPackExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__SubstNonTypeTemplateParmPackExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__SubstNonTypeTemplateParmPackExpr::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__FunctionParmPackExpr:
  switch (static_cast<reflenums::clang__FunctionParmPackExpr::memnames>(MemNum)) {
    case reflenums::clang__FunctionParmPackExpr::_this_:
      if (IsPtr)
        return toClientReflType<clang::FunctionParmPackExpr *>(C);
      return toClientReflType<clang::FunctionParmPackExpr>(C);
    case reflenums::clang__FunctionParmPackExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionParmPackExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionParmPackExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionParmPackExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionParmPackExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionParmPackExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionParmPackExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionParmPackExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionParmPackExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionParmPackExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__FunctionParmPackExpr::CreateEmpty:
      return toClientReflType<class clang::FunctionParmPackExpr *>(C);
    case reflenums::clang__FunctionParmPackExpr::getParameterPack:
      return toClientReflType<class clang::ParmVarDecl *>(C);
    case reflenums::clang__FunctionParmPackExpr::getParameterPackLocation:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__FunctionParmPackExpr::getParameterPackLocation:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__FunctionParmPackExpr::getParameterPackLocation:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__FunctionParmPackExpr::getParameterPackLocation:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__FunctionParmPackExpr::getNumExpansions:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__FunctionParmPackExpr::getExpansion:
      return toClientReflType<class clang::ParmVarDecl *>(C);
    case reflenums::clang__FunctionParmPackExpr::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__FunctionParmPackExpr::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__FunctionParmPackExpr::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__FunctionParmPackExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__FunctionParmPackExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__FunctionParmPackExpr::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__MaterializeTemporaryExpr:
  switch (static_cast<reflenums::clang__MaterializeTemporaryExpr::memnames>(MemNum)) {
    case reflenums::clang__MaterializeTemporaryExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__MaterializeTemporaryExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__MaterializeTemporaryExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__MaterializeTemporaryExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__MaterializeTemporaryExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__MaterializeTemporaryExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__MaterializeTemporaryExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__MaterializeTemporaryExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__MaterializeTemporaryExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__MaterializeTemporaryExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__MaterializeTemporaryExpr::getTemporary:
      return toClientReflType<class clang::Stmt *>(C);
    case reflenums::clang__MaterializeTemporaryExpr::GetTemporaryExpr:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__MaterializeTemporaryExpr::getStorageDuration:
      return toClientReflType<enum clang::StorageDuration>(C);
    case reflenums::clang__MaterializeTemporaryExpr::getExtendingDecl:
      return toClientReflType<const class clang::ValueDecl *>(C);
    case reflenums::clang__MaterializeTemporaryExpr::getExtendingDecl:
      return toClientReflType<const class clang::ValueDecl *>(C);
    case reflenums::clang__MaterializeTemporaryExpr::getManglingNumber:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__MaterializeTemporaryExpr::isBoundToLvalueReference:
      return toClientReflType<bool>(C);
    case reflenums::clang__MaterializeTemporaryExpr::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__MaterializeTemporaryExpr::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__MaterializeTemporaryExpr::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__MaterializeTemporaryExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__MaterializeTemporaryExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__MaterializeTemporaryExpr::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__CXXFoldExpr:
  switch (static_cast<reflenums::clang__CXXFoldExpr::memnames>(MemNum)) {
    case reflenums::clang__CXXFoldExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXFoldExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXFoldExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXFoldExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXFoldExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXFoldExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXFoldExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXFoldExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXFoldExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXFoldExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXFoldExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXFoldExpr::getLHS:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__CXXFoldExpr::getRHS:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__CXXFoldExpr::isRightFold:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXFoldExpr::isLeftFold:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXFoldExpr::getPattern:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__CXXFoldExpr::getInit:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__CXXFoldExpr::getEllipsisLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXFoldExpr::getOperator:
      return toClientReflType<enum clang::BinaryOperatorKind>(C);
    case reflenums::clang__CXXFoldExpr::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXFoldExpr::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXFoldExpr::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXFoldExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXFoldExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXFoldExpr::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__CoroutineSuspendExpr:
  switch (static_cast<reflenums::clang__CoroutineSuspendExpr::memnames>(MemNum)) {
    case reflenums::clang__CoroutineSuspendExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CoroutineSuspendExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CoroutineSuspendExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CoroutineSuspendExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CoroutineSuspendExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CoroutineSuspendExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CoroutineSuspendExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CoroutineSuspendExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CoroutineSuspendExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CoroutineSuspendExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CoroutineSuspendExpr::getKeywordLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CoroutineSuspendExpr::getCommonExpr:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__CoroutineSuspendExpr::getOpaqueValue:
      return toClientReflType<class clang::OpaqueValueExpr *>(C);
    case reflenums::clang__CoroutineSuspendExpr::getReadyExpr:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__CoroutineSuspendExpr::getSuspendExpr:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__CoroutineSuspendExpr::getResumeExpr:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__CoroutineSuspendExpr::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CoroutineSuspendExpr::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CoroutineSuspendExpr::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CoroutineSuspendExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CoroutineSuspendExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CoroutineSuspendExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__CoroutineSuspendExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__CoroutineSuspendExpr::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__CoawaitExpr:
  switch (static_cast<reflenums::clang__CoawaitExpr::memnames>(MemNum)) {
    case reflenums::clang__CoawaitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CoawaitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CoawaitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CoawaitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CoawaitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CoawaitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CoawaitExpr::getOperand:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__CoawaitExpr::isImplicit:
      return toClientReflType<bool>(C);
    case reflenums::clang__CoawaitExpr::isImplicit:
      return toClientReflType<bool>(C);
    case reflenums::clang__CoawaitExpr::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__DependentCoawaitExpr:
  switch (static_cast<reflenums::clang__DependentCoawaitExpr::memnames>(MemNum)) {
    case reflenums::clang__DependentCoawaitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__DependentCoawaitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__DependentCoawaitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__DependentCoawaitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__DependentCoawaitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__DependentCoawaitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__DependentCoawaitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__DependentCoawaitExpr::getOperand:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__DependentCoawaitExpr::getOperatorCoawaitLookup:
      return toClientReflType<class clang::UnresolvedLookupExpr *>(C);
    case reflenums::clang__DependentCoawaitExpr::getKeywordLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__DependentCoawaitExpr::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__DependentCoawaitExpr::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__DependentCoawaitExpr::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__DependentCoawaitExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__DependentCoawaitExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__DependentCoawaitExpr::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__CoyieldExpr:
  switch (static_cast<reflenums::clang__CoyieldExpr::memnames>(MemNum)) {
    case reflenums::clang__CoyieldExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CoyieldExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CoyieldExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CoyieldExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CoyieldExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CoyieldExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CoyieldExpr::getOperand:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__CoyieldExpr::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__ReflectionExpr:
  switch (static_cast<reflenums::clang__ReflectionExpr::memnames>(MemNum)) {
    case reflenums::clang__ReflectionExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ReflectionExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ReflectionExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ReflectionExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ReflectionExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ReflectionExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ReflectionExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ReflectionExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ReflectionExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ReflectionExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ReflectionExpr::isReflexpr:
      return toClientReflType<bool>(C);
    case reflenums::clang__ReflectionExpr::hasTypeOperand:
      return toClientReflType<bool>(C);
    case reflenums::clang__ReflectionExpr::hasExpressionOperand:
      return toClientReflType<bool>(C);
    case reflenums::clang__ReflectionExpr::getTypeOperand:
      return toClientReflType<class clang::TypeSourceInfo *>(C);
    case reflenums::clang__ReflectionExpr::getExpressionOperand:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__ReflectionExpr::getExpressionOperand:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__ReflectionExpr::getOperatorLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ReflectionExpr::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ReflectionExpr::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ReflectionExpr::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__CompilerMessageExpr:
  switch (static_cast<reflenums::clang__CompilerMessageExpr::memnames>(MemNum)) {
    case reflenums::clang__CompilerMessageExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CompilerMessageExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CompilerMessageExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CompilerMessageExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CompilerMessageExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CompilerMessageExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CompilerMessageExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CompilerMessageExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CompilerMessageExpr::Create:
      return toClientReflType<class clang::CompilerMessageExpr *>(C);
    case reflenums::clang__CompilerMessageExpr::CreateEmpty:
      return toClientReflType<class clang::CompilerMessageExpr *>(C);
    case reflenums::clang__CompilerMessageExpr::CreateEmpty:
      return toClientReflType<class clang::CompilerMessageExpr *>(C);
    case reflenums::clang__CompilerMessageExpr::getMessage:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__CompilerMessageExpr::getMessage:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__CompilerMessageExpr::getKWLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CompilerMessageExpr::getKWLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CompilerMessageExpr::getRParenLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CompilerMessageExpr::getRParenLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CompilerMessageExpr::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CompilerMessageExpr::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CompilerMessageExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__CompilerMessageExpr::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__CompilerDiagnosticExpr:
  switch (static_cast<reflenums::clang__CompilerDiagnosticExpr::memnames>(MemNum)) {
    case reflenums::clang__CompilerDiagnosticExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CompilerDiagnosticExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CompilerDiagnosticExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CompilerDiagnosticExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CompilerDiagnosticExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CompilerDiagnosticExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CompilerDiagnosticExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CompilerDiagnosticExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CompilerDiagnosticExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CompilerDiagnosticExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CompilerDiagnosticExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CompilerDiagnosticExpr::CreateEmpty:
      return toClientReflType<class clang::CompilerDiagnosticExpr *>(C);
    case reflenums::clang__CompilerDiagnosticExpr::getKWLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CompilerDiagnosticExpr::getKWLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CompilerDiagnosticExpr::getRParenLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CompilerDiagnosticExpr::getRParenLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CompilerDiagnosticExpr::arg_size:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__CompilerDiagnosticExpr::arg_size:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__CompilerDiagnosticExpr::arg_size:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__CompilerDiagnosticExpr::arg_size:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__CompilerDiagnosticExpr::arg_size:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__CompilerDiagnosticExpr::arg_size:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__CompilerDiagnosticExpr::arg_size:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__CompilerDiagnosticExpr::arg_size:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__CompilerDiagnosticExpr::getArgs:
      return toClientReflType<class llvm::ArrayRef<const class clang::Expr *>>(C);
    case reflenums::clang__CompilerDiagnosticExpr::getArgs:
      return toClientReflType<class llvm::ArrayRef<const class clang::Expr *>>(C);
    case reflenums::clang__CompilerDiagnosticExpr::getArg:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__CompilerDiagnosticExpr::getArg:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__CompilerDiagnosticExpr::isError:
      return toClientReflType<bool>(C);
    case reflenums::clang__CompilerDiagnosticExpr::isError:
      return toClientReflType<bool>(C);
    case reflenums::clang__CompilerDiagnosticExpr::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CompilerDiagnosticExpr::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CompilerDiagnosticExpr::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CompilerDiagnosticExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CompilerDiagnosticExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__CompilerDiagnosticExpr::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__CXXMetaparseExpr:
  switch (static_cast<reflenums::clang__CXXMetaparseExpr::memnames>(MemNum)) {
    case reflenums::clang__CXXMetaparseExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXMetaparseExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXMetaparseExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXMetaparseExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXMetaparseExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXMetaparseExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXMetaparseExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXMetaparseExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXMetaparseExpr::getExprSrcCode:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__CXXMetaparseExpr::getExprSrcCode:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__CXXMetaparseExpr::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXMetaparseExpr::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXMetaparseExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXMetaparseExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXMetaparseExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXMetaparseExpr::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__ReflectionTraitExpr:
  switch (static_cast<reflenums::clang__ReflectionTraitExpr::memnames>(MemNum)) {
    case reflenums::clang__ReflectionTraitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ReflectionTraitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ReflectionTraitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ReflectionTraitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ReflectionTraitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ReflectionTraitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ReflectionTraitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ReflectionTraitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ReflectionTraitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ReflectionTraitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ReflectionTraitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ReflectionTraitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ReflectionTraitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ReflectionTraitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ReflectionTraitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ReflectionTraitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ReflectionTraitExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ReflectionTraitExpr::getTraitKind:
      return toClientReflType<enum clang::ReflectionTraitKind>(C);
    case reflenums::clang__ReflectionTraitExpr::getNumArgs:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ReflectionTraitExpr::getArg:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__ReflectionTraitExpr::getArgs:
      return toClientReflType<class clang::Expr **>(C);
    case reflenums::clang__ReflectionTraitExpr::getKWLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ReflectionTraitExpr::getRParenLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ReflectionTraitExpr::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ReflectionTraitExpr::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ReflectionTraitExpr::getASTContext_p:
      return toClientReflType<class clang::ASTContext *>(C);
    case reflenums::clang__ReflectionTraitExpr::getObjKind:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ReflectionTraitExpr::callbacksAreSet:
      return toClientReflType<bool>(C);
    case reflenums::clang__ReflectionTraitExpr::readyToConvertToStringLiteral:
      return toClientReflType<bool>(C);
    case reflenums::clang__ReflectionTraitExpr::getMemNum:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ReflectionTraitExpr::isPtr:
      return toClientReflType<bool>(C);
    case reflenums::clang__ReflectionTraitExpr::isPtr:
      return toClientReflType<bool>(C);
    case reflenums::clang__ReflectionTraitExpr::isPtr:
      return toClientReflType<bool>(C);
    case reflenums::clang__ReflectionTraitExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ReflectionTraitExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ReflectionTraitExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ReflectionTraitExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ReflectionTraitExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ReflectionTraitExpr::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__ReflectNewExpr:
  switch (static_cast<reflenums::clang__ReflectNewExpr::memnames>(MemNum)) {
    case reflenums::clang__ReflectNewExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ReflectNewExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ReflectNewExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ReflectNewExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ReflectNewExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ReflectNewExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ReflectNewExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ReflectNewExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ReflectNewExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ReflectNewExpr::getNumArgs:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ReflectNewExpr::getArg:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__ReflectNewExpr::getArgs:
      return toClientReflType<class clang::Expr **>(C);
    case reflenums::clang__ReflectNewExpr::getObjKind:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ReflectNewExpr::getTraitLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ReflectNewExpr::getRParenLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ReflectNewExpr::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ReflectNewExpr::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ReflectNewExpr::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__ReflectDeleteExpr:
  switch (static_cast<reflenums::clang__ReflectDeleteExpr::memnames>(MemNum)) {
    case reflenums::clang__ReflectDeleteExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ReflectDeleteExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ReflectDeleteExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ReflectDeleteExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ReflectDeleteExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ReflectDeleteExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ReflectDeleteExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ReflectDeleteExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ReflectDeleteExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ReflectDeleteExpr::getNumArgs:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ReflectDeleteExpr::getArg:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__ReflectDeleteExpr::getArgs:
      return toClientReflType<class clang::Expr **>(C);
    case reflenums::clang__ReflectDeleteExpr::getObjKind:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ReflectDeleteExpr::getTraitLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ReflectDeleteExpr::getRParenLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ReflectDeleteExpr::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ReflectDeleteExpr::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ReflectDeleteExpr::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__CXXConstantExpr:
  switch (static_cast<reflenums::clang__CXXConstantExpr::memnames>(MemNum)) {
    case reflenums::clang__CXXConstantExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXConstantExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXConstantExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXConstantExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXConstantExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXConstantExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXConstantExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXConstantExpr::getExpression:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__CXXConstantExpr::getValue:
      return toClientReflType<const class clang::APValue &>(C);
    case reflenums::clang__CXXConstantExpr::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXConstantExpr::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXConstantExpr::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXConstantExpr::children:
      return toClientReflType<class llvm::iterator_range<struct clang::ConstStmtIterator>>(C);
    case reflenums::clang__CXXConstantExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXConstantExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXConstantExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXConstantExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXConstantExpr::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__CXXDependentIdExpr:
  switch (static_cast<reflenums::clang__CXXDependentIdExpr::memnames>(MemNum)) {
    case reflenums::clang__CXXDependentIdExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXDependentIdExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXDependentIdExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXDependentIdExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXDependentIdExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXDependentIdExpr::getNameInfo:
      return toClientReflType<struct clang::DeclarationNameInfo>(C);
    case reflenums::clang__CXXDependentIdExpr::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXDependentIdExpr::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXDependentIdExpr::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__CXXDependentIdExpr::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__CXXDependentIdExpr::children:
      return toClientReflType<class llvm::iterator_range<struct clang::ConstStmtIterator>>(C);
    case reflenums::clang__CXXDependentIdExpr::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__CXXConcatenateExpr:
  switch (static_cast<reflenums::clang__CXXConcatenateExpr::memnames>(MemNum)) {
    case reflenums::clang__CXXConcatenateExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXConcatenateExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXConcatenateExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXConcatenateExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXConcatenateExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXConcatenateExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXConcatenateExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXConcatenateExpr::getNumOperands:
      return toClientReflType<unsigned long>(C);
    case reflenums::clang__CXXConcatenateExpr::getOperand:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__CXXConcatenateExpr::getOperand:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__CXXConcatenateExpr::getOperand:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__CXXConcatenateExpr::getOperands:
      return toClientReflType<const class clang::Expr *const *>(C);
    case reflenums::clang__CXXConcatenateExpr::getOperands:
      return toClientReflType<const class clang::Expr *const *>(C);
    case reflenums::clang__CXXConcatenateExpr::children:
      return toClientReflType<class llvm::iterator_range<struct clang::ConstStmtIterator>>(C);
    case reflenums::clang__CXXConcatenateExpr::getIntroLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXConcatenateExpr::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXConcatenateExpr::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXConcatenateExpr::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__ObjCStringLiteral:
  switch (static_cast<reflenums::clang__ObjCStringLiteral::memnames>(MemNum)) {
    case reflenums::clang__ObjCStringLiteral:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCStringLiteral:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCStringLiteral:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCStringLiteral:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCStringLiteral:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCStringLiteral:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCStringLiteral:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCStringLiteral::getString:
      return toClientReflType<const class clang::StringLiteral *>(C);
    case reflenums::clang__ObjCStringLiteral::getString:
      return toClientReflType<const class clang::StringLiteral *>(C);
    case reflenums::clang__ObjCStringLiteral::getAtLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCStringLiteral::getAtLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCStringLiteral::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCStringLiteral::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCStringLiteral::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCStringLiteral::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCStringLiteral::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCStringLiteral::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__ObjCBoolLiteralExpr:
  switch (static_cast<reflenums::clang__ObjCBoolLiteralExpr::memnames>(MemNum)) {
    case reflenums::clang__ObjCBoolLiteralExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCBoolLiteralExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCBoolLiteralExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCBoolLiteralExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCBoolLiteralExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCBoolLiteralExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCBoolLiteralExpr::getValue:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCBoolLiteralExpr::getValue:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCBoolLiteralExpr::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCBoolLiteralExpr::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCBoolLiteralExpr::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCBoolLiteralExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCBoolLiteralExpr::getLocation:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCBoolLiteralExpr::getLocation:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCBoolLiteralExpr::getLocation:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCBoolLiteralExpr::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__ObjCBoxedExpr:
  switch (static_cast<reflenums::clang__ObjCBoxedExpr::memnames>(MemNum)) {
    case reflenums::clang__ObjCBoxedExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCBoxedExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCBoxedExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCBoxedExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCBoxedExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCBoxedExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCBoxedExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCBoxedExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCBoxedExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCBoxedExpr::getSubExpr:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__ObjCBoxedExpr::getBoxingMethod:
      return toClientReflType<class clang::ObjCMethodDecl *>(C);
    case reflenums::clang__ObjCBoxedExpr::getAtLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCBoxedExpr::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCBoxedExpr::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCBoxedExpr::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCBoxedExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCBoxedExpr::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__ObjCBoxedExpr::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__ObjCBoxedExpr::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__ObjCBoxedExpr::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__ObjCBoxedExpr::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__ObjCBoxedExpr::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__ObjCArrayLiteral:
  switch (static_cast<reflenums::clang__ObjCArrayLiteral::memnames>(MemNum)) {
    case reflenums::clang__ObjCArrayLiteral:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCArrayLiteral:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCArrayLiteral:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCArrayLiteral:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCArrayLiteral:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCArrayLiteral:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCArrayLiteral:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCArrayLiteral:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCArrayLiteral:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCArrayLiteral:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCArrayLiteral::CreateEmpty:
      return toClientReflType<class clang::ObjCArrayLiteral *>(C);
    case reflenums::clang__ObjCArrayLiteral::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCArrayLiteral::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCArrayLiteral::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCArrayLiteral::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCArrayLiteral::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__ObjCArrayLiteral::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__ObjCArrayLiteral::getElements:
      return toClientReflType<const class clang::Expr *const *>(C);
    case reflenums::clang__ObjCArrayLiteral::getNumElements:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ObjCArrayLiteral::getNumElements:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ObjCArrayLiteral::getElement:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__ObjCArrayLiteral::getArrayWithObjectsMethod:
      return toClientReflType<class clang::ObjCMethodDecl *>(C);
    case reflenums::clang__ObjCArrayLiteral::getArrayWithObjectsMethod:
      return toClientReflType<class clang::ObjCMethodDecl *>(C);
    case reflenums::clang__ObjCArrayLiteral::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__ObjCDictionaryElement:
  switch (static_cast<reflenums::clang__ObjCDictionaryElement::memnames>(MemNum)) {
    case reflenums::clang__ObjCDictionaryElement:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCDictionaryElement::Key:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__ObjCDictionaryElement::Value:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__ObjCDictionaryElement::EllipsisLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCDictionaryElement::EllipsisLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCDictionaryElement::isPackExpansion:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCDictionaryElement::isPackExpansion:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCDictionaryElement::isPackExpansion:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCDictionaryElement::isPackExpansion:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCDictionaryElement::isPackExpansion:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__ObjCDictionaryLiteral:
  switch (static_cast<reflenums::clang__ObjCDictionaryLiteral::memnames>(MemNum)) {
    case reflenums::clang__ObjCDictionaryLiteral:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCDictionaryLiteral:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCDictionaryLiteral:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCDictionaryLiteral:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCDictionaryLiteral:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCDictionaryLiteral:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCDictionaryLiteral:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCDictionaryLiteral:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCDictionaryLiteral:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCDictionaryLiteral:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCDictionaryLiteral:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCDictionaryLiteral:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCDictionaryLiteral:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCDictionaryLiteral:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCDictionaryLiteral:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCDictionaryLiteral::CreateEmpty:
      return toClientReflType<class clang::ObjCDictionaryLiteral *>(C);
    case reflenums::clang__ObjCDictionaryLiteral::getNumElements:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ObjCDictionaryLiteral::getKeyValueElement:
      return toClientReflType<struct clang::ObjCDictionaryElement>(C);
    case reflenums::clang__ObjCDictionaryLiteral::getDictWithObjectsMethod:
      return toClientReflType<class clang::ObjCMethodDecl *>(C);
    case reflenums::clang__ObjCDictionaryLiteral::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCDictionaryLiteral::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCDictionaryLiteral::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCDictionaryLiteral::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCDictionaryLiteral::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__ObjCDictionaryLiteral::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__ObjCDictionaryLiteral::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__ObjCEncodeExpr:
  switch (static_cast<reflenums::clang__ObjCEncodeExpr::memnames>(MemNum)) {
    case reflenums::clang__ObjCEncodeExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCEncodeExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCEncodeExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCEncodeExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCEncodeExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCEncodeExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCEncodeExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCEncodeExpr::getAtLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCEncodeExpr::getAtLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCEncodeExpr::getRParenLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCEncodeExpr::getRParenLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCEncodeExpr::getEncodedType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ObjCEncodeExpr::getEncodedTypeSourceInfo:
      return toClientReflType<class clang::TypeSourceInfo *>(C);
    case reflenums::clang__ObjCEncodeExpr::getEncodedTypeSourceInfo:
      return toClientReflType<class clang::TypeSourceInfo *>(C);
    case reflenums::clang__ObjCEncodeExpr::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCEncodeExpr::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCEncodeExpr::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCEncodeExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCEncodeExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCEncodeExpr::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__ObjCSelectorExpr:
  switch (static_cast<reflenums::clang__ObjCSelectorExpr::memnames>(MemNum)) {
    case reflenums::clang__ObjCSelectorExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCSelectorExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCSelectorExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCSelectorExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCSelectorExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCSelectorExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCSelectorExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCSelectorExpr::getSelector:
      return toClientReflType<class clang::Selector>(C);
    case reflenums::clang__ObjCSelectorExpr::getSelector:
      return toClientReflType<class clang::Selector>(C);
    case reflenums::clang__ObjCSelectorExpr::getAtLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCSelectorExpr::getRParenLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCSelectorExpr::getRParenLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCSelectorExpr::getRParenLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCSelectorExpr::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCSelectorExpr::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCSelectorExpr::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCSelectorExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCSelectorExpr::getNumArgs:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ObjCSelectorExpr::getNumArgs:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ObjCSelectorExpr::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__ObjCProtocolExpr:
  switch (static_cast<reflenums::clang__ObjCProtocolExpr::memnames>(MemNum)) {
    case reflenums::clang__ObjCProtocolExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCProtocolExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCProtocolExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCProtocolExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCProtocolExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCProtocolExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCProtocolExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCProtocolExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCProtocolExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCProtocolExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCProtocolExpr::getProtocol:
      return toClientReflType<class clang::ObjCProtocolDecl *>(C);
    case reflenums::clang__ObjCProtocolExpr::getProtocol:
      return toClientReflType<class clang::ObjCProtocolDecl *>(C);
    case reflenums::clang__ObjCProtocolExpr::getProtocolIdLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCProtocolExpr::getAtLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCProtocolExpr::getRParenLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCProtocolExpr::getRParenLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCProtocolExpr::getRParenLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCProtocolExpr::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCProtocolExpr::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCProtocolExpr::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCProtocolExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCProtocolExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCProtocolExpr::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__ObjCIvarRefExpr:
  switch (static_cast<reflenums::clang__ObjCIvarRefExpr::memnames>(MemNum)) {
    case reflenums::clang__ObjCIvarRefExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCIvarRefExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCIvarRefExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCIvarRefExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCIvarRefExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCIvarRefExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCIvarRefExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCIvarRefExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCIvarRefExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCIvarRefExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCIvarRefExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCIvarRefExpr::getDecl:
      return toClientReflType<const class clang::ObjCIvarDecl *>(C);
    case reflenums::clang__ObjCIvarRefExpr::getDecl:
      return toClientReflType<const class clang::ObjCIvarDecl *>(C);
    case reflenums::clang__ObjCIvarRefExpr::getBase:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__ObjCIvarRefExpr::getBase:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__ObjCIvarRefExpr::getBase:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__ObjCIvarRefExpr::isArrow:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCIvarRefExpr::isFreeIvar:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCIvarRefExpr::isFreeIvar:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCIvarRefExpr::isFreeIvar:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCIvarRefExpr::getLocation:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCIvarRefExpr::getLocation:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCIvarRefExpr::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCIvarRefExpr::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCIvarRefExpr::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCIvarRefExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCIvarRefExpr::getOpLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCIvarRefExpr::getOpLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCIvarRefExpr::getOpLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCIvarRefExpr::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__ObjCPropertyRefExpr:
  switch (static_cast<reflenums::clang__ObjCPropertyRefExpr::memnames>(MemNum)) {
    case reflenums::clang__ObjCPropertyRefExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCPropertyRefExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCPropertyRefExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCPropertyRefExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCPropertyRefExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCPropertyRefExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCPropertyRefExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCPropertyRefExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCPropertyRefExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCPropertyRefExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCPropertyRefExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCPropertyRefExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCPropertyRefExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCPropertyRefExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCPropertyRefExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCPropertyRefExpr::isImplicitProperty:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCPropertyRefExpr::isExplicitProperty:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCPropertyRefExpr::getExplicitProperty:
      return toClientReflType<class clang::ObjCPropertyDecl *>(C);
    case reflenums::clang__ObjCPropertyRefExpr::getImplicitPropertyGetter:
      return toClientReflType<class clang::ObjCMethodDecl *>(C);
    case reflenums::clang__ObjCPropertyRefExpr::getImplicitPropertySetter:
      return toClientReflType<class clang::ObjCMethodDecl *>(C);
    case reflenums::clang__ObjCPropertyRefExpr::getGetterSelector:
      return toClientReflType<class clang::Selector>(C);
    case reflenums::clang__ObjCPropertyRefExpr::getSetterSelector:
      return toClientReflType<class clang::Selector>(C);
    case reflenums::clang__ObjCPropertyRefExpr::isMessagingGetter:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCPropertyRefExpr::isMessagingSetter:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCPropertyRefExpr::isMessagingSetter:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCPropertyRefExpr::isMessagingSetter:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCPropertyRefExpr::getBase:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__ObjCPropertyRefExpr::getBase:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__ObjCPropertyRefExpr::getLocation:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCPropertyRefExpr::getReceiverLocation:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCPropertyRefExpr::getSuperReceiverType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ObjCPropertyRefExpr::getClassReceiver:
      return toClientReflType<class clang::ObjCInterfaceDecl *>(C);
    case reflenums::clang__ObjCPropertyRefExpr::isObjectReceiver:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCPropertyRefExpr::isSuperReceiver:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCPropertyRefExpr::isClassReceiver:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCPropertyRefExpr::getReceiverType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ObjCPropertyRefExpr::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCPropertyRefExpr::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCPropertyRefExpr::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCPropertyRefExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCPropertyRefExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCPropertyRefExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCPropertyRefExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCPropertyRefExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCPropertyRefExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCPropertyRefExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCPropertyRefExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCPropertyRefExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCPropertyRefExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCPropertyRefExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCPropertyRefExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCPropertyRefExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCPropertyRefExpr::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__ObjCSubscriptRefExpr:
  switch (static_cast<reflenums::clang__ObjCSubscriptRefExpr::memnames>(MemNum)) {
    case reflenums::clang__ObjCSubscriptRefExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCSubscriptRefExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCSubscriptRefExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCSubscriptRefExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCSubscriptRefExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCSubscriptRefExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCSubscriptRefExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCSubscriptRefExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCSubscriptRefExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCSubscriptRefExpr::getRBracket:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCSubscriptRefExpr::getRBracket:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCSubscriptRefExpr::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCSubscriptRefExpr::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCSubscriptRefExpr::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCSubscriptRefExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCSubscriptRefExpr::getBaseExpr:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__ObjCSubscriptRefExpr::getBaseExpr:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__ObjCSubscriptRefExpr::getKeyExpr:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__ObjCSubscriptRefExpr::getKeyExpr:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__ObjCSubscriptRefExpr::getAtIndexMethodDecl:
      return toClientReflType<class clang::ObjCMethodDecl *>(C);
    case reflenums::clang__ObjCSubscriptRefExpr::setAtIndexMethodDecl:
      return toClientReflType<class clang::ObjCMethodDecl *>(C);
    case reflenums::clang__ObjCSubscriptRefExpr::isArraySubscriptRefExpr:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCSubscriptRefExpr::isArraySubscriptRefExpr:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCSubscriptRefExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCSubscriptRefExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCSubscriptRefExpr::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__ObjCMessageExpr:
  switch (static_cast<reflenums::clang__ObjCMessageExpr::memnames>(MemNum)) {
    case reflenums::clang__ObjCMessageExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCMessageExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCMessageExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCMessageExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCMessageExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCMessageExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCMessageExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCMessageExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCMessageExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCMessageExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCMessageExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCMessageExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCMessageExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCMessageExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCMessageExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCMessageExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCMessageExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCMessageExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCMessageExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCMessageExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCMessageExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCMessageExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCMessageExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCMessageExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCMessageExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCMessageExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCMessageExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCMessageExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCMessageExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCMessageExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCMessageExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCMessageExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCMessageExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCMessageExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCMessageExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCMessageExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCMessageExpr::CreateEmpty:
      return toClientReflType<class clang::ObjCMessageExpr *>(C);
    case reflenums::clang__ObjCMessageExpr::isImplicit:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCMessageExpr::getReceiverKind:
      return toClientReflType<enum clang::ObjCMessageExpr::ReceiverKind>(C);
    case reflenums::clang__ObjCMessageExpr::getReceiverRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__ObjCMessageExpr::isInstanceMessage:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCMessageExpr::isClassMessage:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCMessageExpr::isClassMessage:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCMessageExpr::getInstanceReceiver:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__ObjCMessageExpr::getInstanceReceiver:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__ObjCMessageExpr::getClassReceiver:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ObjCMessageExpr::getClassReceiverTypeInfo:
      return toClientReflType<class clang::TypeSourceInfo *>(C);
    case reflenums::clang__ObjCMessageExpr::getClassReceiverTypeInfo:
      return toClientReflType<class clang::TypeSourceInfo *>(C);
    case reflenums::clang__ObjCMessageExpr::getSuperLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCMessageExpr::getReceiverType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ObjCMessageExpr::getReceiverInterface:
      return toClientReflType<class clang::ObjCInterfaceDecl *>(C);
    case reflenums::clang__ObjCMessageExpr::getSuperType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ObjCMessageExpr::getSuperType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__ObjCMessageExpr::getSelector:
      return toClientReflType<class clang::Selector>(C);
    case reflenums::clang__ObjCMessageExpr::getSelector:
      return toClientReflType<class clang::Selector>(C);
    case reflenums::clang__ObjCMessageExpr::getMethodDecl:
      return toClientReflType<const class clang::ObjCMethodDecl *>(C);
    case reflenums::clang__ObjCMessageExpr::getMethodDecl:
      return toClientReflType<const class clang::ObjCMethodDecl *>(C);
    case reflenums::clang__ObjCMessageExpr::getMethodDecl:
      return toClientReflType<const class clang::ObjCMethodDecl *>(C);
    case reflenums::clang__ObjCMessageExpr::getMethodFamily:
      return toClientReflType<enum clang::ObjCMethodFamily>(C);
    case reflenums::clang__ObjCMessageExpr::getNumArgs:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ObjCMessageExpr::getNumArgs:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ObjCMessageExpr::getArgs:
      return toClientReflType<const class clang::Expr *const *>(C);
    case reflenums::clang__ObjCMessageExpr::getArgs:
      return toClientReflType<const class clang::Expr *const *>(C);
    case reflenums::clang__ObjCMessageExpr::getArg:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__ObjCMessageExpr::getArg:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__ObjCMessageExpr::isDelegateInitCall:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCMessageExpr::isDelegateInitCall:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCMessageExpr::getLeftLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCMessageExpr::getRightLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCMessageExpr::getSelectorStartLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCMessageExpr::getSelectorLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCMessageExpr::getSelectorLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCMessageExpr::getNumSelectorLocs:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ObjCMessageExpr::getNumSelectorLocs:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ObjCMessageExpr::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCMessageExpr::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCMessageExpr::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCMessageExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCMessageExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCMessageExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCMessageExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCMessageExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCMessageExpr::arguments:
      return toClientReflType<class llvm::iterator_range<struct clang::Stmt::ConstExprIterator>>(C);
    case reflenums::clang__ObjCMessageExpr::arguments:
      return toClientReflType<class llvm::iterator_range<struct clang::Stmt::ConstExprIterator>>(C);
    case reflenums::clang__ObjCMessageExpr::arguments:
      return toClientReflType<class llvm::iterator_range<struct clang::Stmt::ConstExprIterator>>(C);
    case reflenums::clang__ObjCMessageExpr::arguments:
      return toClientReflType<class llvm::iterator_range<struct clang::Stmt::ConstExprIterator>>(C);
    case reflenums::clang__ObjCMessageExpr::arguments:
      return toClientReflType<class llvm::iterator_range<struct clang::Stmt::ConstExprIterator>>(C);
    case reflenums::clang__ObjCMessageExpr::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__ObjCIsaExpr:
  switch (static_cast<reflenums::clang__ObjCIsaExpr::memnames>(MemNum)) {
    case reflenums::clang__ObjCIsaExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCIsaExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCIsaExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCIsaExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCIsaExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCIsaExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCIsaExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCIsaExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCIsaExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCIsaExpr::getBase:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__ObjCIsaExpr::isArrow:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCIsaExpr::isArrow:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCIsaExpr::getIsaMemberLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCIsaExpr::getIsaMemberLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCIsaExpr::getOpLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCIsaExpr::getOpLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCIsaExpr::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCIsaExpr::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCIsaExpr::getBaseLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCIsaExpr::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCIsaExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCIsaExpr::getExprLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCIsaExpr::getExprLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCIsaExpr::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__ObjCIndirectCopyRestoreExpr:
  switch (static_cast<reflenums::clang__ObjCIndirectCopyRestoreExpr::memnames>(MemNum)) {
    case reflenums::clang__ObjCIndirectCopyRestoreExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCIndirectCopyRestoreExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCIndirectCopyRestoreExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCIndirectCopyRestoreExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCIndirectCopyRestoreExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCIndirectCopyRestoreExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCIndirectCopyRestoreExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCIndirectCopyRestoreExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCIndirectCopyRestoreExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCIndirectCopyRestoreExpr::getSubExpr:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__ObjCIndirectCopyRestoreExpr::shouldCopy:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCIndirectCopyRestoreExpr::shouldCopy:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCIndirectCopyRestoreExpr::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCIndirectCopyRestoreExpr::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCIndirectCopyRestoreExpr::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCIndirectCopyRestoreExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCIndirectCopyRestoreExpr::getExprLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCIndirectCopyRestoreExpr::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__ObjCBridgedCastExpr:
  switch (static_cast<reflenums::clang__ObjCBridgedCastExpr::memnames>(MemNum)) {
    case reflenums::clang__ObjCBridgedCastExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCBridgedCastExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCBridgedCastExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCBridgedCastExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCBridgedCastExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCBridgedCastExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCBridgedCastExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCBridgedCastExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCBridgedCastExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCBridgedCastExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCBridgedCastExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCBridgedCastExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCBridgedCastExpr::getLParenLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCBridgedCastExpr::getBridgeKind:
      return toClientReflType<enum clang::ObjCBridgeCastKind>(C);
    case reflenums::clang__ObjCBridgedCastExpr::getBridgeKindName:
      return toClientReflType<const char *>(C);
    case reflenums::clang__ObjCBridgedCastExpr::getBridgeKeywordLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCBridgedCastExpr::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCBridgedCastExpr::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCBridgedCastExpr::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCBridgedCastExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCBridgedCastExpr::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__ObjCAvailabilityCheckExpr:
  switch (static_cast<reflenums::clang__ObjCAvailabilityCheckExpr::memnames>(MemNum)) {
    case reflenums::clang__ObjCAvailabilityCheckExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCAvailabilityCheckExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCAvailabilityCheckExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCAvailabilityCheckExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCAvailabilityCheckExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCAvailabilityCheckExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCAvailabilityCheckExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCAvailabilityCheckExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCAvailabilityCheckExpr::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCAvailabilityCheckExpr::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCAvailabilityCheckExpr::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCAvailabilityCheckExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCAvailabilityCheckExpr::getSourceRange:
      return toClientReflType<class clang::SourceRange>(C);
    case reflenums::clang__ObjCAvailabilityCheckExpr::hasVersion:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCAvailabilityCheckExpr::hasVersion:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCAvailabilityCheckExpr::hasVersion:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCAvailabilityCheckExpr::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__OMPArraySectionExpr:
  switch (static_cast<reflenums::clang__OMPArraySectionExpr::memnames>(MemNum)) {
    case reflenums::clang__OMPArraySectionExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPArraySectionExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPArraySectionExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPArraySectionExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPArraySectionExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPArraySectionExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPArraySectionExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPArraySectionExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPArraySectionExpr:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPArraySectionExpr::getBase:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__OMPArraySectionExpr::getBase:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__OMPArraySectionExpr::getBaseOriginalType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__OMPArraySectionExpr::getBaseOriginalType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__OMPArraySectionExpr::getLowerBound:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__OMPArraySectionExpr::getLowerBound:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__OMPArraySectionExpr::getLowerBound:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__OMPArraySectionExpr::getLength:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__OMPArraySectionExpr::getLength:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__OMPArraySectionExpr::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__OMPArraySectionExpr::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__OMPArraySectionExpr::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__OMPArraySectionExpr::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__OMPArraySectionExpr::getColonLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__OMPArraySectionExpr::getColonLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__OMPArraySectionExpr::getRBracketLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__OMPArraySectionExpr::getRBracketLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__OMPArraySectionExpr::getExprLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__OMPArraySectionExpr::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__OMPArraySectionExpr::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__CXXCatchStmt:
  switch (static_cast<reflenums::clang__CXXCatchStmt::memnames>(MemNum)) {
    case reflenums::clang__CXXCatchStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXCatchStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXCatchStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXCatchStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXCatchStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXCatchStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXCatchStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXCatchStmt::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXCatchStmt::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXCatchStmt::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXCatchStmt::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXCatchStmt::getCatchLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXCatchStmt::getExceptionDecl:
      return toClientReflType<class clang::VarDecl *>(C);
    case reflenums::clang__CXXCatchStmt::getCaughtType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__CXXCatchStmt::getHandlerBlock:
      return toClientReflType<class clang::Stmt *>(C);
    case reflenums::clang__CXXCatchStmt::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXCatchStmt::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXCatchStmt::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__CXXTryStmt:
  switch (static_cast<reflenums::clang__CXXTryStmt::memnames>(MemNum)) {
    case reflenums::clang__CXXTryStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXTryStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXTryStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXTryStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXTryStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXTryStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXTryStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXTryStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXTryStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXTryStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXTryStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXTryStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXTryStmt::Create:
      return toClientReflType<class clang::CXXTryStmt *>(C);
    case reflenums::clang__CXXTryStmt::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXTryStmt::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXTryStmt::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXTryStmt::getTryLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXTryStmt::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXTryStmt::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXTryStmt::getTryBlock:
      return toClientReflType<const class clang::CompoundStmt *>(C);
    case reflenums::clang__CXXTryStmt::getNumHandlers:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__CXXTryStmt::getNumHandlers:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__CXXTryStmt::getHandler:
      return toClientReflType<const class clang::CXXCatchStmt *>(C);
    case reflenums::clang__CXXTryStmt::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXTryStmt::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__CXXForRangeStmt:
  switch (static_cast<reflenums::clang__CXXForRangeStmt::memnames>(MemNum)) {
    case reflenums::clang__CXXForRangeStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXForRangeStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXForRangeStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXForRangeStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXForRangeStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXForRangeStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXForRangeStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXForRangeStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXForRangeStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXForRangeStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXForRangeStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXForRangeStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXForRangeStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXForRangeStmt::getLoopVariable:
      return toClientReflType<const class clang::VarDecl *>(C);
    case reflenums::clang__CXXForRangeStmt::getRangeInit:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__CXXForRangeStmt::getRangeInit:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__CXXForRangeStmt::getRangeInit:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__CXXForRangeStmt::getRangeInit:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__CXXForRangeStmt::getRangeInit:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__CXXForRangeStmt::getRangeInit:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__CXXForRangeStmt::getRangeInit:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__CXXForRangeStmt::getRangeInit:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__CXXForRangeStmt::getRangeStmt:
      return toClientReflType<const class clang::DeclStmt *>(C);
    case reflenums::clang__CXXForRangeStmt::getBeginStmt:
      return toClientReflType<const class clang::DeclStmt *>(C);
    case reflenums::clang__CXXForRangeStmt::getEndStmt:
      return toClientReflType<const class clang::DeclStmt *>(C);
    case reflenums::clang__CXXForRangeStmt::getCond:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__CXXForRangeStmt::getInc:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__CXXForRangeStmt::getLoopVarStmt:
      return toClientReflType<const class clang::DeclStmt *>(C);
    case reflenums::clang__CXXForRangeStmt::getBody:
      return toClientReflType<const class clang::Stmt *>(C);
    case reflenums::clang__CXXForRangeStmt::getBody:
      return toClientReflType<const class clang::Stmt *>(C);
    case reflenums::clang__CXXForRangeStmt::getBody:
      return toClientReflType<const class clang::Stmt *>(C);
    case reflenums::clang__CXXForRangeStmt::getBody:
      return toClientReflType<const class clang::Stmt *>(C);
    case reflenums::clang__CXXForRangeStmt::getBody:
      return toClientReflType<const class clang::Stmt *>(C);
    case reflenums::clang__CXXForRangeStmt::getBody:
      return toClientReflType<const class clang::Stmt *>(C);
    case reflenums::clang__CXXForRangeStmt::getBody:
      return toClientReflType<const class clang::Stmt *>(C);
    case reflenums::clang__CXXForRangeStmt::getBody:
      return toClientReflType<const class clang::Stmt *>(C);
    case reflenums::clang__CXXForRangeStmt::getBody:
      return toClientReflType<const class clang::Stmt *>(C);
    case reflenums::clang__CXXForRangeStmt::getForLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXForRangeStmt::getCoawaitLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXForRangeStmt::getColonLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXForRangeStmt::getRParenLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXForRangeStmt::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXForRangeStmt::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXForRangeStmt::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXForRangeStmt::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXForRangeStmt::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXForRangeStmt::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__CXXExpansionStmt:
  switch (static_cast<reflenums::clang__CXXExpansionStmt::memnames>(MemNum)) {
    case reflenums::clang__CXXExpansionStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXExpansionStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXExpansionStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXExpansionStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXExpansionStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXExpansionStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXExpansionStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXExpansionStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXExpansionStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXExpansionStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXExpansionStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXExpansionStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXExpansionStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXExpansionStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXExpansionStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXExpansionStmt::getRangeVarStmt:
      return toClientReflType<class clang::Stmt *>(C);
    case reflenums::clang__CXXExpansionStmt::getRangeVarStmt:
      return toClientReflType<class clang::Stmt *>(C);
    case reflenums::clang__CXXExpansionStmt::getRangeVariable:
      return toClientReflType<const class clang::VarDecl *>(C);
    case reflenums::clang__CXXExpansionStmt::getLoopVarStmt:
      return toClientReflType<class clang::DeclStmt *>(C);
    case reflenums::clang__CXXExpansionStmt::getLoopVarStmt:
      return toClientReflType<class clang::DeclStmt *>(C);
    case reflenums::clang__CXXExpansionStmt::getLoopVariable:
      return toClientReflType<const class clang::VarDecl *>(C);
    case reflenums::clang__CXXExpansionStmt::getBody:
      return toClientReflType<const class clang::Stmt *>(C);
    case reflenums::clang__CXXExpansionStmt::getBody:
      return toClientReflType<const class clang::Stmt *>(C);
    case reflenums::clang__CXXExpansionStmt::getBody:
      return toClientReflType<const class clang::Stmt *>(C);
    case reflenums::clang__CXXExpansionStmt::getBody:
      return toClientReflType<const class clang::Stmt *>(C);
    case reflenums::clang__CXXExpansionStmt::getSize:
      return toClientReflType<unsigned long>(C);
    case reflenums::clang__CXXExpansionStmt::getSize:
      return toClientReflType<unsigned long>(C);
    case reflenums::clang__CXXExpansionStmt::getInstantiatedStatements:
      return toClientReflType<class llvm::ArrayRef<class clang::Stmt *>>(C);
    case reflenums::clang__CXXExpansionStmt::getInstantiatedStatements:
      return toClientReflType<class llvm::ArrayRef<class clang::Stmt *>>(C);
    case reflenums::clang__CXXExpansionStmt::getInstantiatedStatements:
      return toClientReflType<class llvm::ArrayRef<class clang::Stmt *>>(C);
    case reflenums::clang__CXXExpansionStmt::getForLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXExpansionStmt::getEllipsisLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXExpansionStmt::getColonLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXExpansionStmt::getRParenLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXExpansionStmt::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXExpansionStmt::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXExpansionStmt::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXExpansionStmt::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXExpansionStmt::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXExpansionStmt::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXExpansionStmt::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXExpansionStmt::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXExpansionStmt::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__CXXTupleExpansionStmt:
  switch (static_cast<reflenums::clang__CXXTupleExpansionStmt::memnames>(MemNum)) {
    case reflenums::clang__CXXTupleExpansionStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXTupleExpansionStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXTupleExpansionStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXTupleExpansionStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXTupleExpansionStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXTupleExpansionStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXTupleExpansionStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXTupleExpansionStmt::getRangeVarStmt:
      return toClientReflType<class clang::DeclStmt *>(C);
    case reflenums::clang__CXXTupleExpansionStmt::getRangeVarStmt:
      return toClientReflType<class clang::DeclStmt *>(C);
    case reflenums::clang__CXXTupleExpansionStmt::getRangeInit:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__CXXTupleExpansionStmt::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__CXXPackExpansionStmt:
  switch (static_cast<reflenums::clang__CXXPackExpansionStmt::memnames>(MemNum)) {
    case reflenums::clang__CXXPackExpansionStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXPackExpansionStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXPackExpansionStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXPackExpansionStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXPackExpansionStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXPackExpansionStmt::getUnexpandedPack:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__CXXPackExpansionStmt::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__MSDependentExistsStmt:
  switch (static_cast<reflenums::clang__MSDependentExistsStmt::memnames>(MemNum)) {
    case reflenums::clang__MSDependentExistsStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__MSDependentExistsStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__MSDependentExistsStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__MSDependentExistsStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__MSDependentExistsStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__MSDependentExistsStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__MSDependentExistsStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__MSDependentExistsStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__MSDependentExistsStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__MSDependentExistsStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__MSDependentExistsStmt::getKeywordLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__MSDependentExistsStmt::isIfExists:
      return toClientReflType<bool>(C);
    case reflenums::clang__MSDependentExistsStmt::isIfNotExists:
      return toClientReflType<bool>(C);
    case reflenums::clang__MSDependentExistsStmt::getQualifierLoc:
      return toClientReflType<class clang::NestedNameSpecifierLoc>(C);
    case reflenums::clang__MSDependentExistsStmt::getNameInfo:
      return toClientReflType<struct clang::DeclarationNameInfo>(C);
    case reflenums::clang__MSDependentExistsStmt::getSubStmt:
      return toClientReflType<class clang::CompoundStmt *>(C);
    case reflenums::clang__MSDependentExistsStmt::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__MSDependentExistsStmt::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__MSDependentExistsStmt::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__MSDependentExistsStmt::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__MSDependentExistsStmt::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__MSDependentExistsStmt::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__CoroutineBodyStmt:
  switch (static_cast<reflenums::clang__CoroutineBodyStmt::memnames>(MemNum)) {
    case reflenums::clang__CoroutineBodyStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CoroutineBodyStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CoroutineBodyStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CoroutineBodyStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CoroutineBodyStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CoroutineBodyStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CoroutineBodyStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CoroutineBodyStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CoroutineBodyStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CoroutineBodyStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CoroutineBodyStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CoroutineBodyStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CoroutineBodyStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CoroutineBodyStmt::Create:
      return toClientReflType<class clang::CoroutineBodyStmt *>(C);
    case reflenums::clang__CoroutineBodyStmt::Create1:
      return toClientReflType<class clang::CoroutineBodyStmt *>(C);
    case reflenums::clang__CoroutineBodyStmt::hasDependentPromiseType:
      return toClientReflType<bool>(C);
    case reflenums::clang__CoroutineBodyStmt::getBody:
      return toClientReflType<class clang::Stmt *>(C);
    case reflenums::clang__CoroutineBodyStmt::getPromiseDeclStmt:
      return toClientReflType<class clang::Stmt *>(C);
    case reflenums::clang__CoroutineBodyStmt::getPromiseDecl:
      return toClientReflType<class clang::VarDecl *>(C);
    case reflenums::clang__CoroutineBodyStmt::getInitSuspendStmt:
      return toClientReflType<class clang::Stmt *>(C);
    case reflenums::clang__CoroutineBodyStmt::getFinalSuspendStmt:
      return toClientReflType<class clang::Stmt *>(C);
    case reflenums::clang__CoroutineBodyStmt::getExceptionHandler:
      return toClientReflType<class clang::Stmt *>(C);
    case reflenums::clang__CoroutineBodyStmt::getFallthroughHandler:
      return toClientReflType<class clang::Stmt *>(C);
    case reflenums::clang__CoroutineBodyStmt::getAllocate:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__CoroutineBodyStmt::getDeallocate:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__CoroutineBodyStmt::getReturnValueInit:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__CoroutineBodyStmt::getResultDecl:
      return toClientReflType<class clang::Stmt *>(C);
    case reflenums::clang__CoroutineBodyStmt::getReturnStmt:
      return toClientReflType<class clang::Stmt *>(C);
    case reflenums::clang__CoroutineBodyStmt::getReturnStmtOnAllocFailure:
      return toClientReflType<class clang::Stmt *>(C);
    case reflenums::clang__CoroutineBodyStmt::getParamMoves:
      return toClientReflType<class llvm::ArrayRef<const class clang::Stmt *>>(C);
    case reflenums::clang__CoroutineBodyStmt::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CoroutineBodyStmt::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CoroutineBodyStmt::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CoroutineBodyStmt::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CoroutineBodyStmt::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CoroutineBodyStmt::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__CoroutineBodyStmt__CtorArgs:
  switch (static_cast<reflenums::clang__CoroutineBodyStmt__CtorArgs::memnames>(MemNum)) {
    case reflenums::clang__CoroutineBodyStmt__CtorArgs:::
      return toClientReflType<>(C);
    case reflenums::clang__CoroutineBodyStmt__CtorArgs::Body:
      return toClientReflType<class clang::Stmt *>(C);
    case reflenums::clang__CoroutineBodyStmt__CtorArgs::Promise:
      return toClientReflType<class clang::Stmt *>(C);
    case reflenums::clang__CoroutineBodyStmt__CtorArgs::InitialSuspend:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__CoroutineBodyStmt__CtorArgs::FinalSuspend:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__CoroutineBodyStmt__CtorArgs::OnException:
      return toClientReflType<class clang::Stmt *>(C);
    case reflenums::clang__CoroutineBodyStmt__CtorArgs::OnFallthrough:
      return toClientReflType<class clang::Stmt *>(C);
    case reflenums::clang__CoroutineBodyStmt__CtorArgs::Allocate:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__CoroutineBodyStmt__CtorArgs::Deallocate:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__CoroutineBodyStmt__CtorArgs::ReturnValue:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__CoroutineBodyStmt__CtorArgs::ResultDecl:
      return toClientReflType<class clang::Stmt *>(C);
    case reflenums::clang__CoroutineBodyStmt__CtorArgs::ReturnStmt:
      return toClientReflType<class clang::Stmt *>(C);
    case reflenums::clang__CoroutineBodyStmt__CtorArgs::ReturnStmtOnAllocFailure:
      return toClientReflType<class clang::Stmt *>(C);
    case reflenums::clang__CoroutineBodyStmt__CtorArgs::ReturnStmtOnAllocFailure:
      return toClientReflType<class clang::Stmt *>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__CoreturnStmt:
  switch (static_cast<reflenums::clang__CoreturnStmt::memnames>(MemNum)) {
    case reflenums::clang__CoreturnStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CoreturnStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CoreturnStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CoreturnStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CoreturnStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CoreturnStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CoreturnStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CoreturnStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CoreturnStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CoreturnStmt::getKeywordLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CoreturnStmt::getOperand:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__CoreturnStmt::getPromiseCall:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__CoreturnStmt::isImplicit:
      return toClientReflType<bool>(C);
    case reflenums::clang__CoreturnStmt::isImplicit:
      return toClientReflType<bool>(C);
    case reflenums::clang__CoreturnStmt::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CoreturnStmt::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CoreturnStmt::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CoreturnStmt::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CoreturnStmt::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CoreturnStmt::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__CoreturnStmt::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__CoreturnStmt::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__CoreturnStmt::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__CXXQueueMetaparseStmt:
  switch (static_cast<reflenums::clang__CXXQueueMetaparseStmt::memnames>(MemNum)) {
    case reflenums::clang__CXXQueueMetaparseStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXQueueMetaparseStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXQueueMetaparseStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXQueueMetaparseStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXQueueMetaparseStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXQueueMetaparseStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__CXXQueueMetaparseStmt::getNewSrcCode:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__CXXQueueMetaparseStmt::getIntroLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXQueueMetaparseStmt::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXQueueMetaparseStmt::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__CXXQueueMetaparseStmt::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXQueueMetaparseStmt::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXQueueMetaparseStmt::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__CXXQueueMetaparseStmt::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__ObjCForCollectionStmt:
  switch (static_cast<reflenums::clang__ObjCForCollectionStmt::memnames>(MemNum)) {
    case reflenums::clang__ObjCForCollectionStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCForCollectionStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCForCollectionStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCForCollectionStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCForCollectionStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCForCollectionStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCForCollectionStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCForCollectionStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCForCollectionStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCForCollectionStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCForCollectionStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCForCollectionStmt::getElement:
      return toClientReflType<const class clang::Stmt *>(C);
    case reflenums::clang__ObjCForCollectionStmt::getCollection:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__ObjCForCollectionStmt::getBody:
      return toClientReflType<const class clang::Stmt *>(C);
    case reflenums::clang__ObjCForCollectionStmt::getBody:
      return toClientReflType<const class clang::Stmt *>(C);
    case reflenums::clang__ObjCForCollectionStmt::getBody:
      return toClientReflType<const class clang::Stmt *>(C);
    case reflenums::clang__ObjCForCollectionStmt::getBody:
      return toClientReflType<const class clang::Stmt *>(C);
    case reflenums::clang__ObjCForCollectionStmt::getForLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCForCollectionStmt::getForLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCForCollectionStmt::getRParenLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCForCollectionStmt::getRParenLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCForCollectionStmt::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCForCollectionStmt::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCForCollectionStmt::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCForCollectionStmt::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCForCollectionStmt::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCForCollectionStmt::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__ObjCAtCatchStmt:
  switch (static_cast<reflenums::clang__ObjCAtCatchStmt::memnames>(MemNum)) {
    case reflenums::clang__ObjCAtCatchStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCAtCatchStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCAtCatchStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCAtCatchStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCAtCatchStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCAtCatchStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCAtCatchStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCAtCatchStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCAtCatchStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCAtCatchStmt::getCatchBody:
      return toClientReflType<const class clang::Stmt *>(C);
    case reflenums::clang__ObjCAtCatchStmt::getCatchBody:
      return toClientReflType<const class clang::Stmt *>(C);
    case reflenums::clang__ObjCAtCatchStmt::getCatchBody:
      return toClientReflType<const class clang::Stmt *>(C);
    case reflenums::clang__ObjCAtCatchStmt::getCatchParamDecl:
      return toClientReflType<const class clang::VarDecl *>(C);
    case reflenums::clang__ObjCAtCatchStmt::getCatchParamDecl:
      return toClientReflType<const class clang::VarDecl *>(C);
    case reflenums::clang__ObjCAtCatchStmt::getCatchParamDecl:
      return toClientReflType<const class clang::VarDecl *>(C);
    case reflenums::clang__ObjCAtCatchStmt::getAtCatchLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCAtCatchStmt::getAtCatchLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCAtCatchStmt::getRParenLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCAtCatchStmt::getRParenLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCAtCatchStmt::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCAtCatchStmt::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCAtCatchStmt::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCAtCatchStmt::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCAtCatchStmt::hasEllipsis:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCAtCatchStmt::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCAtCatchStmt::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__ObjCAtFinallyStmt:
  switch (static_cast<reflenums::clang__ObjCAtFinallyStmt::memnames>(MemNum)) {
    case reflenums::clang__ObjCAtFinallyStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCAtFinallyStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCAtFinallyStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCAtFinallyStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCAtFinallyStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCAtFinallyStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCAtFinallyStmt::getFinallyBody:
      return toClientReflType<const class clang::Stmt *>(C);
    case reflenums::clang__ObjCAtFinallyStmt::getFinallyBody:
      return toClientReflType<const class clang::Stmt *>(C);
    case reflenums::clang__ObjCAtFinallyStmt::getFinallyBody:
      return toClientReflType<const class clang::Stmt *>(C);
    case reflenums::clang__ObjCAtFinallyStmt::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCAtFinallyStmt::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCAtFinallyStmt::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCAtFinallyStmt::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCAtFinallyStmt::getAtFinallyLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCAtFinallyStmt::getAtFinallyLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCAtFinallyStmt::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCAtFinallyStmt::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__ObjCAtTryStmt:
  switch (static_cast<reflenums::clang__ObjCAtTryStmt::memnames>(MemNum)) {
    case reflenums::clang__ObjCAtTryStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCAtTryStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCAtTryStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCAtTryStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCAtTryStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCAtTryStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCAtTryStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCAtTryStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCAtTryStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCAtTryStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCAtTryStmt::Create:
      return toClientReflType<class clang::ObjCAtTryStmt *>(C);
    case reflenums::clang__ObjCAtTryStmt::CreateEmpty:
      return toClientReflType<class clang::ObjCAtTryStmt *>(C);
    case reflenums::clang__ObjCAtTryStmt::getAtTryLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCAtTryStmt::getAtTryLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCAtTryStmt::getTryBody:
      return toClientReflType<const class clang::Stmt *>(C);
    case reflenums::clang__ObjCAtTryStmt::getTryBody:
      return toClientReflType<const class clang::Stmt *>(C);
    case reflenums::clang__ObjCAtTryStmt::getTryBody:
      return toClientReflType<const class clang::Stmt *>(C);
    case reflenums::clang__ObjCAtTryStmt::getNumCatchStmts:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__ObjCAtTryStmt::getCatchStmt:
      return toClientReflType<const class clang::ObjCAtCatchStmt *>(C);
    case reflenums::clang__ObjCAtTryStmt::getCatchStmt:
      return toClientReflType<const class clang::ObjCAtCatchStmt *>(C);
    case reflenums::clang__ObjCAtTryStmt::getCatchStmt:
      return toClientReflType<const class clang::ObjCAtCatchStmt *>(C);
    case reflenums::clang__ObjCAtTryStmt::getFinallyStmt:
      return toClientReflType<const class clang::ObjCAtFinallyStmt *>(C);
    case reflenums::clang__ObjCAtTryStmt::getFinallyStmt:
      return toClientReflType<const class clang::ObjCAtFinallyStmt *>(C);
    case reflenums::clang__ObjCAtTryStmt::getFinallyStmt:
      return toClientReflType<const class clang::ObjCAtFinallyStmt *>(C);
    case reflenums::clang__ObjCAtTryStmt::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCAtTryStmt::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCAtTryStmt::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCAtTryStmt::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCAtTryStmt::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCAtTryStmt::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__ObjCAtSynchronizedStmt:
  switch (static_cast<reflenums::clang__ObjCAtSynchronizedStmt::memnames>(MemNum)) {
    case reflenums::clang__ObjCAtSynchronizedStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCAtSynchronizedStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCAtSynchronizedStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCAtSynchronizedStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCAtSynchronizedStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCAtSynchronizedStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCAtSynchronizedStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCAtSynchronizedStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCAtSynchronizedStmt::getAtSynchronizedLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCAtSynchronizedStmt::getAtSynchronizedLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCAtSynchronizedStmt::getSynchBody:
      return toClientReflType<const class clang::CompoundStmt *>(C);
    case reflenums::clang__ObjCAtSynchronizedStmt::getSynchBody:
      return toClientReflType<const class clang::CompoundStmt *>(C);
    case reflenums::clang__ObjCAtSynchronizedStmt::getSynchBody:
      return toClientReflType<const class clang::CompoundStmt *>(C);
    case reflenums::clang__ObjCAtSynchronizedStmt::getSynchExpr:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__ObjCAtSynchronizedStmt::getSynchExpr:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__ObjCAtSynchronizedStmt::getSynchExpr:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__ObjCAtSynchronizedStmt::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCAtSynchronizedStmt::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCAtSynchronizedStmt::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCAtSynchronizedStmt::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCAtSynchronizedStmt::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCAtSynchronizedStmt::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__ObjCAtThrowStmt:
  switch (static_cast<reflenums::clang__ObjCAtThrowStmt::memnames>(MemNum)) {
    case reflenums::clang__ObjCAtThrowStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCAtThrowStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCAtThrowStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCAtThrowStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCAtThrowStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCAtThrowStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCAtThrowStmt::getThrowExpr:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__ObjCAtThrowStmt::getThrowExpr:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__ObjCAtThrowStmt::getThrowExpr:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__ObjCAtThrowStmt::getThrowLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCAtThrowStmt::getThrowLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCAtThrowStmt::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCAtThrowStmt::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCAtThrowStmt::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCAtThrowStmt::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCAtThrowStmt::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCAtThrowStmt::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__ObjCAutoreleasePoolStmt:
  switch (static_cast<reflenums::clang__ObjCAutoreleasePoolStmt::memnames>(MemNum)) {
    case reflenums::clang__ObjCAutoreleasePoolStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCAutoreleasePoolStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCAutoreleasePoolStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCAutoreleasePoolStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCAutoreleasePoolStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCAutoreleasePoolStmt:::
      return toClientReflType<>(C);
    case reflenums::clang__ObjCAutoreleasePoolStmt::getSubStmt:
      return toClientReflType<const class clang::Stmt *>(C);
    case reflenums::clang__ObjCAutoreleasePoolStmt::getSubStmt:
      return toClientReflType<const class clang::Stmt *>(C);
    case reflenums::clang__ObjCAutoreleasePoolStmt::getSubStmt:
      return toClientReflType<const class clang::Stmt *>(C);
    case reflenums::clang__ObjCAutoreleasePoolStmt::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCAutoreleasePoolStmt::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCAutoreleasePoolStmt::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCAutoreleasePoolStmt::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCAutoreleasePoolStmt::getAtLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCAutoreleasePoolStmt::getAtLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__ObjCAutoreleasePoolStmt::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__ObjCAutoreleasePoolStmt::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__OMPClause:
  switch (static_cast<reflenums::clang__OMPClause::memnames>(MemNum)) {
    case reflenums::clang__OMPClause:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPClause:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPClause:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPClause:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPClause:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPClause:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPClause:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPClause::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__OMPClause::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__OMPClause::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__OMPClause::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__OMPClause::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__OMPClause::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__OMPClause::getClauseKind:
      return toClientReflType<enum clang::OpenMPClauseKind>(C);
    case reflenums::clang__OMPClause::isImplicit:
      return toClientReflType<bool>(C);
    case reflenums::clang__OMPClause::isImplicit:
      return toClientReflType<bool>(C);
    case reflenums::clang__OMPClause::isImplicit:
      return toClientReflType<bool>(C);
    case reflenums::clang__OMPClause::isImplicit:
      return toClientReflType<bool>(C);
    case reflenums::clang__OMPClause::isImplicit:
      return toClientReflType<bool>(C);
    case reflenums::clang__OMPClause::isImplicit:
      return toClientReflType<bool>(C);
    case reflenums::clang__OMPClause::children:
      return toClientReflType<class llvm::iterator_range<struct clang::ConstStmtIterator>>(C);
    case reflenums::clang__OMPClause::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__OMPClause::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__OMPClause::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__OMPClause::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__OMPExecutableDirective:
  switch (static_cast<reflenums::clang__OMPExecutableDirective::memnames>(MemNum)) {
    case reflenums::clang__OMPExecutableDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPExecutableDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPExecutableDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPExecutableDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPExecutableDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPExecutableDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPExecutableDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPExecutableDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPExecutableDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPExecutableDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPExecutableDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPExecutableDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPExecutableDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPExecutableDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPExecutableDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPExecutableDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPExecutableDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPExecutableDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPExecutableDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPExecutableDirective::getLocStart:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__OMPExecutableDirective::getBeginLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__OMPExecutableDirective::getLocEnd:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__OMPExecutableDirective::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__OMPExecutableDirective::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__OMPExecutableDirective::getEndLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__OMPExecutableDirective::getNumClauses:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__OMPExecutableDirective::getClause:
      return toClientReflType<class clang::OMPClause *>(C);
    case reflenums::clang__OMPExecutableDirective::hasAssociatedStmt:
      return toClientReflType<bool>(C);
    case reflenums::clang__OMPExecutableDirective::getAssociatedStmt:
      return toClientReflType<const class clang::Stmt *>(C);
    case reflenums::clang__OMPExecutableDirective::getAssociatedStmt:
      return toClientReflType<const class clang::Stmt *>(C);
    case reflenums::clang__OMPExecutableDirective::getCapturedStmt:
      return toClientReflType<const class clang::CapturedStmt *>(C);
    case reflenums::clang__OMPExecutableDirective::getCapturedStmt:
      return toClientReflType<const class clang::CapturedStmt *>(C);
    case reflenums::clang__OMPExecutableDirective::getInnermostCapturedStmt:
      return toClientReflType<const class clang::CapturedStmt *>(C);
    case reflenums::clang__OMPExecutableDirective::getDirectiveKind:
      return toClientReflType<enum clang::OpenMPDirectiveKind>(C);
    case reflenums::clang__OMPExecutableDirective::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__OMPExecutableDirective::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__OMPExecutableDirective::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__OMPExecutableDirective::clauses:
      return toClientReflType<class llvm::ArrayRef<class clang::OMPClause *>>(C);
    case reflenums::clang__OMPExecutableDirective::clauses:
      return toClientReflType<class llvm::ArrayRef<class clang::OMPClause *>>(C);
    case reflenums::clang__OMPExecutableDirective::clauses:
      return toClientReflType<class llvm::ArrayRef<class clang::OMPClause *>>(C);
    case reflenums::clang__OMPExecutableDirective::clauses:
      return toClientReflType<class llvm::ArrayRef<class clang::OMPClause *>>(C);
    case reflenums::clang__OMPExecutableDirective::clauses:
      return toClientReflType<class llvm::ArrayRef<class clang::OMPClause *>>(C);
    case reflenums::clang__OMPExecutableDirective::clauses:
      return toClientReflType<class llvm::ArrayRef<class clang::OMPClause *>>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__OMPParallelDirective:
  switch (static_cast<reflenums::clang__OMPParallelDirective::memnames>(MemNum)) {
    case reflenums::clang__OMPParallelDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPParallelDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPParallelDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPParallelDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPParallelDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPParallelDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPParallelDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPParallelDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPParallelDirective::CreateEmpty:
      return toClientReflType<class clang::OMPParallelDirective *>(C);
    case reflenums::clang__OMPParallelDirective::hasCancel:
      return toClientReflType<bool>(C);
    case reflenums::clang__OMPParallelDirective::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__OMPParallelDirective::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__OMPLoopDirective:
  switch (static_cast<reflenums::clang__OMPLoopDirective::memnames>(MemNum)) {
    case reflenums::clang__OMPLoopDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPLoopDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPLoopDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPLoopDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPLoopDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPLoopDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPLoopDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPLoopDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPLoopDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPLoopDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPLoopDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPLoopDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPLoopDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPLoopDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPLoopDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPLoopDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPLoopDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPLoopDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPLoopDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPLoopDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPLoopDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPLoopDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPLoopDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPLoopDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPLoopDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPLoopDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPLoopDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPLoopDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPLoopDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPLoopDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPLoopDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPLoopDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPLoopDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPLoopDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPLoopDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPLoopDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPLoopDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPLoopDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPLoopDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPLoopDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPLoopDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPLoopDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPLoopDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPLoopDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPLoopDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPLoopDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPLoopDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPLoopDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPLoopDirective::getCollapsedNumber:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__OMPLoopDirective::getIterationVariable:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__OMPLoopDirective::getLastIteration:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__OMPLoopDirective::getCalcLastIteration:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__OMPLoopDirective::getPreCond:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__OMPLoopDirective::getCond:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__OMPLoopDirective::getInit:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__OMPLoopDirective::getInc:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__OMPLoopDirective::getPreInits:
      return toClientReflType<const class clang::Stmt *>(C);
    case reflenums::clang__OMPLoopDirective::getPreInits:
      return toClientReflType<const class clang::Stmt *>(C);
    case reflenums::clang__OMPLoopDirective::getIsLastIterVariable:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__OMPLoopDirective::getLowerBoundVariable:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__OMPLoopDirective::getUpperBoundVariable:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__OMPLoopDirective::getStrideVariable:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__OMPLoopDirective::getEnsureUpperBound:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__OMPLoopDirective::getNextLowerBound:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__OMPLoopDirective::getNextUpperBound:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__OMPLoopDirective::getNumIterations:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__OMPLoopDirective::getPrevLowerBoundVariable:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__OMPLoopDirective::getPrevUpperBoundVariable:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__OMPLoopDirective::getDistInc:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__OMPLoopDirective::getPrevEnsureUpperBound:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__OMPLoopDirective::getCombinedLowerBoundVariable:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__OMPLoopDirective::getCombinedUpperBoundVariable:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__OMPLoopDirective::getCombinedEnsureUpperBound:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__OMPLoopDirective::getCombinedInit:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__OMPLoopDirective::getCombinedCond:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__OMPLoopDirective::getCombinedNextLowerBound:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__OMPLoopDirective::getCombinedNextUpperBound:
      return toClientReflType<class clang::Expr *>(C);
    case reflenums::clang__OMPLoopDirective::getBody:
      return toClientReflType<const class clang::Stmt *>(C);
    case reflenums::clang__OMPLoopDirective::getBody:
      return toClientReflType<const class clang::Stmt *>(C);
    case reflenums::clang__OMPLoopDirective::counters:
      return toClientReflType<class llvm::ArrayRef<class clang::Expr *>>(C);
    case reflenums::clang__OMPLoopDirective::counters:
      return toClientReflType<class llvm::ArrayRef<class clang::Expr *>>(C);
    case reflenums::clang__OMPLoopDirective::private_counters:
      return toClientReflType<class llvm::ArrayRef<class clang::Expr *>>(C);
    case reflenums::clang__OMPLoopDirective::private_counters:
      return toClientReflType<class llvm::ArrayRef<class clang::Expr *>>(C);
    case reflenums::clang__OMPLoopDirective::inits:
      return toClientReflType<class llvm::ArrayRef<class clang::Expr *>>(C);
    case reflenums::clang__OMPLoopDirective::inits:
      return toClientReflType<class llvm::ArrayRef<class clang::Expr *>>(C);
    case reflenums::clang__OMPLoopDirective::updates:
      return toClientReflType<class llvm::ArrayRef<class clang::Expr *>>(C);
    case reflenums::clang__OMPLoopDirective::updates:
      return toClientReflType<class llvm::ArrayRef<class clang::Expr *>>(C);
    case reflenums::clang__OMPLoopDirective::finals:
      return toClientReflType<class llvm::ArrayRef<class clang::Expr *>>(C);
    case reflenums::clang__OMPLoopDirective::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__OMPLoopDirective::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__OMPLoopDirective::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__OMPLoopDirective::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__OMPLoopDirective::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__OMPSimdDirective:
  switch (static_cast<reflenums::clang__OMPSimdDirective::memnames>(MemNum)) {
    case reflenums::clang__OMPSimdDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPSimdDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPSimdDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPSimdDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPSimdDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPSimdDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPSimdDirective::CreateEmpty:
      return toClientReflType<class clang::OMPSimdDirective *>(C);
    case reflenums::clang__OMPSimdDirective::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__OMPSimdDirective::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__OMPForDirective:
  switch (static_cast<reflenums::clang__OMPForDirective::memnames>(MemNum)) {
    case reflenums::clang__OMPForDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPForDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPForDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPForDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPForDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPForDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPForDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPForDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPForDirective::CreateEmpty:
      return toClientReflType<class clang::OMPForDirective *>(C);
    case reflenums::clang__OMPForDirective::hasCancel:
      return toClientReflType<bool>(C);
    case reflenums::clang__OMPForDirective::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__OMPForDirective::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__OMPForSimdDirective:
  switch (static_cast<reflenums::clang__OMPForSimdDirective::memnames>(MemNum)) {
    case reflenums::clang__OMPForSimdDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPForSimdDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPForSimdDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPForSimdDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPForSimdDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPForSimdDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPForSimdDirective::CreateEmpty:
      return toClientReflType<class clang::OMPForSimdDirective *>(C);
    case reflenums::clang__OMPForSimdDirective::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__OMPForSimdDirective::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__OMPSectionsDirective:
  switch (static_cast<reflenums::clang__OMPSectionsDirective::memnames>(MemNum)) {
    case reflenums::clang__OMPSectionsDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPSectionsDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPSectionsDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPSectionsDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPSectionsDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPSectionsDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPSectionsDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPSectionsDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPSectionsDirective::CreateEmpty:
      return toClientReflType<class clang::OMPSectionsDirective *>(C);
    case reflenums::clang__OMPSectionsDirective::hasCancel:
      return toClientReflType<bool>(C);
    case reflenums::clang__OMPSectionsDirective::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__OMPSectionsDirective::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__OMPSectionDirective:
  switch (static_cast<reflenums::clang__OMPSectionDirective::memnames>(MemNum)) {
    case reflenums::clang__OMPSectionDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPSectionDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPSectionDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPSectionDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPSectionDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPSectionDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPSectionDirective::Create:
      return toClientReflType<class clang::OMPSectionDirective *>(C);
    case reflenums::clang__OMPSectionDirective::CreateEmpty:
      return toClientReflType<class clang::OMPSectionDirective *>(C);
    case reflenums::clang__OMPSectionDirective::CreateEmpty:
      return toClientReflType<class clang::OMPSectionDirective *>(C);
    case reflenums::clang__OMPSectionDirective::hasCancel:
      return toClientReflType<bool>(C);
    case reflenums::clang__OMPSectionDirective::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__OMPSectionDirective::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__OMPSingleDirective:
  switch (static_cast<reflenums::clang__OMPSingleDirective::memnames>(MemNum)) {
    case reflenums::clang__OMPSingleDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPSingleDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPSingleDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPSingleDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPSingleDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPSingleDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPSingleDirective::CreateEmpty:
      return toClientReflType<class clang::OMPSingleDirective *>(C);
    case reflenums::clang__OMPSingleDirective::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__OMPSingleDirective::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__OMPMasterDirective:
  switch (static_cast<reflenums::clang__OMPMasterDirective::memnames>(MemNum)) {
    case reflenums::clang__OMPMasterDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPMasterDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPMasterDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPMasterDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPMasterDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPMasterDirective::Create:
      return toClientReflType<class clang::OMPMasterDirective *>(C);
    case reflenums::clang__OMPMasterDirective::CreateEmpty:
      return toClientReflType<class clang::OMPMasterDirective *>(C);
    case reflenums::clang__OMPMasterDirective::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__OMPMasterDirective::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__OMPCriticalDirective:
  switch (static_cast<reflenums::clang__OMPCriticalDirective::memnames>(MemNum)) {
    case reflenums::clang__OMPCriticalDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPCriticalDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPCriticalDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPCriticalDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPCriticalDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPCriticalDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPCriticalDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPCriticalDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPCriticalDirective::CreateEmpty:
      return toClientReflType<class clang::OMPCriticalDirective *>(C);
    case reflenums::clang__OMPCriticalDirective::getDirectiveName:
      return toClientReflType<struct clang::DeclarationNameInfo>(C);
    case reflenums::clang__OMPCriticalDirective::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__OMPCriticalDirective::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__OMPParallelForDirective:
  switch (static_cast<reflenums::clang__OMPParallelForDirective::memnames>(MemNum)) {
    case reflenums::clang__OMPParallelForDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPParallelForDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPParallelForDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPParallelForDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPParallelForDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPParallelForDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPParallelForDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPParallelForDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPParallelForDirective::CreateEmpty:
      return toClientReflType<class clang::OMPParallelForDirective *>(C);
    case reflenums::clang__OMPParallelForDirective::hasCancel:
      return toClientReflType<bool>(C);
    case reflenums::clang__OMPParallelForDirective::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__OMPParallelForDirective::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__OMPParallelForSimdDirective:
  switch (static_cast<reflenums::clang__OMPParallelForSimdDirective::memnames>(MemNum)) {
    case reflenums::clang__OMPParallelForSimdDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPParallelForSimdDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPParallelForSimdDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPParallelForSimdDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPParallelForSimdDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPParallelForSimdDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPParallelForSimdDirective::CreateEmpty:
      return toClientReflType<class clang::OMPParallelForSimdDirective *>(C);
    case reflenums::clang__OMPParallelForSimdDirective::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__OMPParallelForSimdDirective::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__OMPParallelSectionsDirective:
  switch (static_cast<reflenums::clang__OMPParallelSectionsDirective::memnames>(MemNum)) {
    case reflenums::clang__OMPParallelSectionsDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPParallelSectionsDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPParallelSectionsDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPParallelSectionsDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPParallelSectionsDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPParallelSectionsDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPParallelSectionsDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPParallelSectionsDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPParallelSectionsDirective::CreateEmpty:
      return toClientReflType<class clang::OMPParallelSectionsDirective *>(C);
    case reflenums::clang__OMPParallelSectionsDirective::hasCancel:
      return toClientReflType<bool>(C);
    case reflenums::clang__OMPParallelSectionsDirective::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__OMPParallelSectionsDirective::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__OMPTaskDirective:
  switch (static_cast<reflenums::clang__OMPTaskDirective::memnames>(MemNum)) {
    case reflenums::clang__OMPTaskDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTaskDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTaskDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTaskDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTaskDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTaskDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTaskDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTaskDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTaskDirective::CreateEmpty:
      return toClientReflType<class clang::OMPTaskDirective *>(C);
    case reflenums::clang__OMPTaskDirective::hasCancel:
      return toClientReflType<bool>(C);
    case reflenums::clang__OMPTaskDirective::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__OMPTaskDirective::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__OMPTaskyieldDirective:
  switch (static_cast<reflenums::clang__OMPTaskyieldDirective::memnames>(MemNum)) {
    case reflenums::clang__OMPTaskyieldDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTaskyieldDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTaskyieldDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTaskyieldDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTaskyieldDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTaskyieldDirective::Create:
      return toClientReflType<class clang::OMPTaskyieldDirective *>(C);
    case reflenums::clang__OMPTaskyieldDirective::CreateEmpty:
      return toClientReflType<class clang::OMPTaskyieldDirective *>(C);
    case reflenums::clang__OMPTaskyieldDirective::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__OMPTaskyieldDirective::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__OMPBarrierDirective:
  switch (static_cast<reflenums::clang__OMPBarrierDirective::memnames>(MemNum)) {
    case reflenums::clang__OMPBarrierDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPBarrierDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPBarrierDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPBarrierDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPBarrierDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPBarrierDirective::Create:
      return toClientReflType<class clang::OMPBarrierDirective *>(C);
    case reflenums::clang__OMPBarrierDirective::CreateEmpty:
      return toClientReflType<class clang::OMPBarrierDirective *>(C);
    case reflenums::clang__OMPBarrierDirective::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__OMPBarrierDirective::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__OMPTaskwaitDirective:
  switch (static_cast<reflenums::clang__OMPTaskwaitDirective::memnames>(MemNum)) {
    case reflenums::clang__OMPTaskwaitDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTaskwaitDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTaskwaitDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTaskwaitDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTaskwaitDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTaskwaitDirective::Create:
      return toClientReflType<class clang::OMPTaskwaitDirective *>(C);
    case reflenums::clang__OMPTaskwaitDirective::CreateEmpty:
      return toClientReflType<class clang::OMPTaskwaitDirective *>(C);
    case reflenums::clang__OMPTaskwaitDirective::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__OMPTaskwaitDirective::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__OMPTaskgroupDirective:
  switch (static_cast<reflenums::clang__OMPTaskgroupDirective::memnames>(MemNum)) {
    case reflenums::clang__OMPTaskgroupDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTaskgroupDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTaskgroupDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTaskgroupDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTaskgroupDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTaskgroupDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTaskgroupDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTaskgroupDirective::CreateEmpty:
      return toClientReflType<class clang::OMPTaskgroupDirective *>(C);
    case reflenums::clang__OMPTaskgroupDirective::getReductionRef:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__OMPTaskgroupDirective::getReductionRef:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__OMPTaskgroupDirective::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__OMPTaskgroupDirective::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__OMPFlushDirective:
  switch (static_cast<reflenums::clang__OMPFlushDirective::memnames>(MemNum)) {
    case reflenums::clang__OMPFlushDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPFlushDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPFlushDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPFlushDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPFlushDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPFlushDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPFlushDirective::CreateEmpty:
      return toClientReflType<class clang::OMPFlushDirective *>(C);
    case reflenums::clang__OMPFlushDirective::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__OMPFlushDirective::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__OMPOrderedDirective:
  switch (static_cast<reflenums::clang__OMPOrderedDirective::memnames>(MemNum)) {
    case reflenums::clang__OMPOrderedDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPOrderedDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPOrderedDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPOrderedDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPOrderedDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPOrderedDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPOrderedDirective::CreateEmpty:
      return toClientReflType<class clang::OMPOrderedDirective *>(C);
    case reflenums::clang__OMPOrderedDirective::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__OMPOrderedDirective::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__OMPAtomicDirective:
  switch (static_cast<reflenums::clang__OMPAtomicDirective::memnames>(MemNum)) {
    case reflenums::clang__OMPAtomicDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPAtomicDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPAtomicDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPAtomicDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPAtomicDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPAtomicDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPAtomicDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPAtomicDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPAtomicDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPAtomicDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPAtomicDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPAtomicDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPAtomicDirective::CreateEmpty:
      return toClientReflType<class clang::OMPAtomicDirective *>(C);
    case reflenums::clang__OMPAtomicDirective::CreateEmpty:
      return toClientReflType<class clang::OMPAtomicDirective *>(C);
    case reflenums::clang__OMPAtomicDirective::getX:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__OMPAtomicDirective::getX:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__OMPAtomicDirective::getUpdateExpr:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__OMPAtomicDirective::isXLHSInRHSPart:
      return toClientReflType<bool>(C);
    case reflenums::clang__OMPAtomicDirective::isPostfixUpdate:
      return toClientReflType<bool>(C);
    case reflenums::clang__OMPAtomicDirective::isPostfixUpdate:
      return toClientReflType<bool>(C);
    case reflenums::clang__OMPAtomicDirective::getV:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__OMPAtomicDirective::getV:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__OMPAtomicDirective::getExpr:
      return toClientReflType<const class clang::Expr *>(C);
    case reflenums::clang__OMPAtomicDirective::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__OMPAtomicDirective::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__OMPTargetDirective:
  switch (static_cast<reflenums::clang__OMPTargetDirective::memnames>(MemNum)) {
    case reflenums::clang__OMPTargetDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTargetDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTargetDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTargetDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTargetDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTargetDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTargetDirective::CreateEmpty:
      return toClientReflType<class clang::OMPTargetDirective *>(C);
    case reflenums::clang__OMPTargetDirective::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__OMPTargetDirective::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__OMPTargetDataDirective:
  switch (static_cast<reflenums::clang__OMPTargetDataDirective::memnames>(MemNum)) {
    case reflenums::clang__OMPTargetDataDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTargetDataDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTargetDataDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTargetDataDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTargetDataDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTargetDataDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTargetDataDirective::CreateEmpty:
      return toClientReflType<class clang::OMPTargetDataDirective *>(C);
    case reflenums::clang__OMPTargetDataDirective::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__OMPTargetDataDirective::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__OMPTargetEnterDataDirective:
  switch (static_cast<reflenums::clang__OMPTargetEnterDataDirective::memnames>(MemNum)) {
    case reflenums::clang__OMPTargetEnterDataDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTargetEnterDataDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTargetEnterDataDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTargetEnterDataDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTargetEnterDataDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTargetEnterDataDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTargetEnterDataDirective::CreateEmpty:
      return toClientReflType<class clang::OMPTargetEnterDataDirective *>(C);
    case reflenums::clang__OMPTargetEnterDataDirective::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__OMPTargetEnterDataDirective::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__OMPTargetExitDataDirective:
  switch (static_cast<reflenums::clang__OMPTargetExitDataDirective::memnames>(MemNum)) {
    case reflenums::clang__OMPTargetExitDataDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTargetExitDataDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTargetExitDataDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTargetExitDataDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTargetExitDataDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTargetExitDataDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTargetExitDataDirective::CreateEmpty:
      return toClientReflType<class clang::OMPTargetExitDataDirective *>(C);
    case reflenums::clang__OMPTargetExitDataDirective::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__OMPTargetExitDataDirective::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__OMPTargetParallelDirective:
  switch (static_cast<reflenums::clang__OMPTargetParallelDirective::memnames>(MemNum)) {
    case reflenums::clang__OMPTargetParallelDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTargetParallelDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTargetParallelDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTargetParallelDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTargetParallelDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTargetParallelDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTargetParallelDirective::CreateEmpty:
      return toClientReflType<class clang::OMPTargetParallelDirective *>(C);
    case reflenums::clang__OMPTargetParallelDirective::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__OMPTargetParallelDirective::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__OMPTargetParallelForDirective:
  switch (static_cast<reflenums::clang__OMPTargetParallelForDirective::memnames>(MemNum)) {
    case reflenums::clang__OMPTargetParallelForDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTargetParallelForDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTargetParallelForDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTargetParallelForDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTargetParallelForDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTargetParallelForDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTargetParallelForDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTargetParallelForDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTargetParallelForDirective::CreateEmpty:
      return toClientReflType<class clang::OMPTargetParallelForDirective *>(C);
    case reflenums::clang__OMPTargetParallelForDirective::hasCancel:
      return toClientReflType<bool>(C);
    case reflenums::clang__OMPTargetParallelForDirective::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__OMPTargetParallelForDirective::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__OMPTeamsDirective:
  switch (static_cast<reflenums::clang__OMPTeamsDirective::memnames>(MemNum)) {
    case reflenums::clang__OMPTeamsDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTeamsDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTeamsDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTeamsDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTeamsDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTeamsDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTeamsDirective::CreateEmpty:
      return toClientReflType<class clang::OMPTeamsDirective *>(C);
    case reflenums::clang__OMPTeamsDirective::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__OMPTeamsDirective::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__OMPCancellationPointDirective:
  switch (static_cast<reflenums::clang__OMPCancellationPointDirective::memnames>(MemNum)) {
    case reflenums::clang__OMPCancellationPointDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPCancellationPointDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPCancellationPointDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPCancellationPointDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPCancellationPointDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPCancellationPointDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPCancellationPointDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPCancellationPointDirective::Create:
      return toClientReflType<class clang::OMPCancellationPointDirective *>(C);
    case reflenums::clang__OMPCancellationPointDirective::CreateEmpty:
      return toClientReflType<class clang::OMPCancellationPointDirective *>(C);
    case reflenums::clang__OMPCancellationPointDirective::getCancelRegion:
      return toClientReflType<enum clang::OpenMPDirectiveKind>(C);
    case reflenums::clang__OMPCancellationPointDirective::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__OMPCancellationPointDirective::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__OMPCancelDirective:
  switch (static_cast<reflenums::clang__OMPCancelDirective::memnames>(MemNum)) {
    case reflenums::clang__OMPCancelDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPCancelDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPCancelDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPCancelDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPCancelDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPCancelDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPCancelDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPCancelDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPCancelDirective::CreateEmpty:
      return toClientReflType<class clang::OMPCancelDirective *>(C);
    case reflenums::clang__OMPCancelDirective::getCancelRegion:
      return toClientReflType<enum clang::OpenMPDirectiveKind>(C);
    case reflenums::clang__OMPCancelDirective::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__OMPCancelDirective::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__OMPTaskLoopDirective:
  switch (static_cast<reflenums::clang__OMPTaskLoopDirective::memnames>(MemNum)) {
    case reflenums::clang__OMPTaskLoopDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTaskLoopDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTaskLoopDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTaskLoopDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTaskLoopDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTaskLoopDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTaskLoopDirective::CreateEmpty:
      return toClientReflType<class clang::OMPTaskLoopDirective *>(C);
    case reflenums::clang__OMPTaskLoopDirective::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__OMPTaskLoopDirective::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__OMPTaskLoopSimdDirective:
  switch (static_cast<reflenums::clang__OMPTaskLoopSimdDirective::memnames>(MemNum)) {
    case reflenums::clang__OMPTaskLoopSimdDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTaskLoopSimdDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTaskLoopSimdDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTaskLoopSimdDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTaskLoopSimdDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTaskLoopSimdDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTaskLoopSimdDirective::CreateEmpty:
      return toClientReflType<class clang::OMPTaskLoopSimdDirective *>(C);
    case reflenums::clang__OMPTaskLoopSimdDirective::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__OMPTaskLoopSimdDirective::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__OMPDistributeDirective:
  switch (static_cast<reflenums::clang__OMPDistributeDirective::memnames>(MemNum)) {
    case reflenums::clang__OMPDistributeDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPDistributeDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPDistributeDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPDistributeDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPDistributeDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPDistributeDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPDistributeDirective::CreateEmpty:
      return toClientReflType<class clang::OMPDistributeDirective *>(C);
    case reflenums::clang__OMPDistributeDirective::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__OMPDistributeDirective::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__OMPTargetUpdateDirective:
  switch (static_cast<reflenums::clang__OMPTargetUpdateDirective::memnames>(MemNum)) {
    case reflenums::clang__OMPTargetUpdateDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTargetUpdateDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTargetUpdateDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTargetUpdateDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTargetUpdateDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTargetUpdateDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTargetUpdateDirective::CreateEmpty:
      return toClientReflType<class clang::OMPTargetUpdateDirective *>(C);
    case reflenums::clang__OMPTargetUpdateDirective::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__OMPTargetUpdateDirective::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__OMPDistributeParallelForDirective:
  switch (static_cast<reflenums::clang__OMPDistributeParallelForDirective::memnames>(MemNum)) {
    case reflenums::clang__OMPDistributeParallelForDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPDistributeParallelForDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPDistributeParallelForDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPDistributeParallelForDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPDistributeParallelForDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPDistributeParallelForDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPDistributeParallelForDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPDistributeParallelForDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPDistributeParallelForDirective::CreateEmpty:
      return toClientReflType<class clang::OMPDistributeParallelForDirective *>(C);
    case reflenums::clang__OMPDistributeParallelForDirective::hasCancel:
      return toClientReflType<bool>(C);
    case reflenums::clang__OMPDistributeParallelForDirective::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__OMPDistributeParallelForDirective::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__OMPDistributeParallelForSimdDirective:
  switch (static_cast<reflenums::clang__OMPDistributeParallelForSimdDirective::memnames>(MemNum)) {
    case reflenums::clang__OMPDistributeParallelForSimdDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPDistributeParallelForSimdDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPDistributeParallelForSimdDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPDistributeParallelForSimdDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPDistributeParallelForSimdDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPDistributeParallelForSimdDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPDistributeParallelForSimdDirective::CreateEmpty:
      return toClientReflType<class clang::OMPDistributeParallelForSimdDirective *>(C);
    case reflenums::clang__OMPDistributeParallelForSimdDirective::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__OMPDistributeParallelForSimdDirective::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__OMPDistributeSimdDirective:
  switch (static_cast<reflenums::clang__OMPDistributeSimdDirective::memnames>(MemNum)) {
    case reflenums::clang__OMPDistributeSimdDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPDistributeSimdDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPDistributeSimdDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPDistributeSimdDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPDistributeSimdDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPDistributeSimdDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPDistributeSimdDirective::CreateEmpty:
      return toClientReflType<class clang::OMPDistributeSimdDirective *>(C);
    case reflenums::clang__OMPDistributeSimdDirective::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__OMPDistributeSimdDirective::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__OMPTargetParallelForSimdDirective:
  switch (static_cast<reflenums::clang__OMPTargetParallelForSimdDirective::memnames>(MemNum)) {
    case reflenums::clang__OMPTargetParallelForSimdDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTargetParallelForSimdDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTargetParallelForSimdDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTargetParallelForSimdDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTargetParallelForSimdDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTargetParallelForSimdDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTargetParallelForSimdDirective::CreateEmpty:
      return toClientReflType<class clang::OMPTargetParallelForSimdDirective *>(C);
    case reflenums::clang__OMPTargetParallelForSimdDirective::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__OMPTargetParallelForSimdDirective::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__OMPTargetSimdDirective:
  switch (static_cast<reflenums::clang__OMPTargetSimdDirective::memnames>(MemNum)) {
    case reflenums::clang__OMPTargetSimdDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTargetSimdDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTargetSimdDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTargetSimdDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTargetSimdDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTargetSimdDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTargetSimdDirective::CreateEmpty:
      return toClientReflType<class clang::OMPTargetSimdDirective *>(C);
    case reflenums::clang__OMPTargetSimdDirective::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__OMPTargetSimdDirective::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__OMPTeamsDistributeDirective:
  switch (static_cast<reflenums::clang__OMPTeamsDistributeDirective::memnames>(MemNum)) {
    case reflenums::clang__OMPTeamsDistributeDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTeamsDistributeDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTeamsDistributeDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTeamsDistributeDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTeamsDistributeDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTeamsDistributeDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTeamsDistributeDirective::CreateEmpty:
      return toClientReflType<class clang::OMPTeamsDistributeDirective *>(C);
    case reflenums::clang__OMPTeamsDistributeDirective::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__OMPTeamsDistributeDirective::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__OMPTeamsDistributeSimdDirective:
  switch (static_cast<reflenums::clang__OMPTeamsDistributeSimdDirective::memnames>(MemNum)) {
    case reflenums::clang__OMPTeamsDistributeSimdDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTeamsDistributeSimdDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTeamsDistributeSimdDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTeamsDistributeSimdDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTeamsDistributeSimdDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTeamsDistributeSimdDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTeamsDistributeSimdDirective::CreateEmpty:
      return toClientReflType<class clang::OMPTeamsDistributeSimdDirective *>(C);
    case reflenums::clang__OMPTeamsDistributeSimdDirective::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__OMPTeamsDistributeSimdDirective::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__OMPTeamsDistributeParallelForSimdDirective:
  switch (static_cast<reflenums::clang__OMPTeamsDistributeParallelForSimdDirective::memnames>(MemNum)) {
    case reflenums::clang__OMPTeamsDistributeParallelForSimdDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTeamsDistributeParallelForSimdDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTeamsDistributeParallelForSimdDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTeamsDistributeParallelForSimdDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTeamsDistributeParallelForSimdDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTeamsDistributeParallelForSimdDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTeamsDistributeParallelForSimdDirective::CreateEmpty:
      return toClientReflType<class clang::OMPTeamsDistributeParallelForSimdDirective *>(C);
    case reflenums::clang__OMPTeamsDistributeParallelForSimdDirective::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__OMPTeamsDistributeParallelForSimdDirective::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__OMPTeamsDistributeParallelForDirective:
  switch (static_cast<reflenums::clang__OMPTeamsDistributeParallelForDirective::memnames>(MemNum)) {
    case reflenums::clang__OMPTeamsDistributeParallelForDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTeamsDistributeParallelForDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTeamsDistributeParallelForDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTeamsDistributeParallelForDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTeamsDistributeParallelForDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTeamsDistributeParallelForDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTeamsDistributeParallelForDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTeamsDistributeParallelForDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTeamsDistributeParallelForDirective::CreateEmpty:
      return toClientReflType<class clang::OMPTeamsDistributeParallelForDirective *>(C);
    case reflenums::clang__OMPTeamsDistributeParallelForDirective::hasCancel:
      return toClientReflType<bool>(C);
    case reflenums::clang__OMPTeamsDistributeParallelForDirective::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__OMPTeamsDistributeParallelForDirective::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__OMPTargetTeamsDirective:
  switch (static_cast<reflenums::clang__OMPTargetTeamsDirective::memnames>(MemNum)) {
    case reflenums::clang__OMPTargetTeamsDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTargetTeamsDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTargetTeamsDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTargetTeamsDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTargetTeamsDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTargetTeamsDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTargetTeamsDirective::CreateEmpty:
      return toClientReflType<class clang::OMPTargetTeamsDirective *>(C);
    case reflenums::clang__OMPTargetTeamsDirective::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__OMPTargetTeamsDirective::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__OMPTargetTeamsDistributeDirective:
  switch (static_cast<reflenums::clang__OMPTargetTeamsDistributeDirective::memnames>(MemNum)) {
    case reflenums::clang__OMPTargetTeamsDistributeDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTargetTeamsDistributeDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTargetTeamsDistributeDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTargetTeamsDistributeDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTargetTeamsDistributeDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTargetTeamsDistributeDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTargetTeamsDistributeDirective::CreateEmpty:
      return toClientReflType<class clang::OMPTargetTeamsDistributeDirective *>(C);
    case reflenums::clang__OMPTargetTeamsDistributeDirective::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__OMPTargetTeamsDistributeDirective::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__OMPTargetTeamsDistributeParallelForDirective:
  switch (static_cast<reflenums::clang__OMPTargetTeamsDistributeParallelForDirective::memnames>(MemNum)) {
    case reflenums::clang__OMPTargetTeamsDistributeParallelForDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTargetTeamsDistributeParallelForDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTargetTeamsDistributeParallelForDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTargetTeamsDistributeParallelForDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTargetTeamsDistributeParallelForDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTargetTeamsDistributeParallelForDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTargetTeamsDistributeParallelForDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTargetTeamsDistributeParallelForDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTargetTeamsDistributeParallelForDirective::CreateEmpty:
      return toClientReflType<class clang::OMPTargetTeamsDistributeParallelForDirective *>(C);
    case reflenums::clang__OMPTargetTeamsDistributeParallelForDirective::hasCancel:
      return toClientReflType<bool>(C);
    case reflenums::clang__OMPTargetTeamsDistributeParallelForDirective::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__OMPTargetTeamsDistributeParallelForDirective::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__OMPTargetTeamsDistributeParallelForSimdDirective:
  switch (static_cast<reflenums::clang__OMPTargetTeamsDistributeParallelForSimdDirective::memnames>(MemNum)) {
    case reflenums::clang__OMPTargetTeamsDistributeParallelForSimdDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTargetTeamsDistributeParallelForSimdDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTargetTeamsDistributeParallelForSimdDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTargetTeamsDistributeParallelForSimdDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTargetTeamsDistributeParallelForSimdDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTargetTeamsDistributeParallelForSimdDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTargetTeamsDistributeParallelForSimdDirective::CreateEmpty:
      return toClientReflType<class clang::OMPTargetTeamsDistributeParallelForSimdDirective *>(C);
    case reflenums::clang__OMPTargetTeamsDistributeParallelForSimdDirective::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__OMPTargetTeamsDistributeParallelForSimdDirective::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__OMPTargetTeamsDistributeSimdDirective:
  switch (static_cast<reflenums::clang__OMPTargetTeamsDistributeSimdDirective::memnames>(MemNum)) {
    case reflenums::clang__OMPTargetTeamsDistributeSimdDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTargetTeamsDistributeSimdDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTargetTeamsDistributeSimdDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTargetTeamsDistributeSimdDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTargetTeamsDistributeSimdDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTargetTeamsDistributeSimdDirective:::
      return toClientReflType<>(C);
    case reflenums::clang__OMPTargetTeamsDistributeSimdDirective::CreateEmpty:
      return toClientReflType<class clang::OMPTargetTeamsDistributeSimdDirective *>(C);
    case reflenums::clang__OMPTargetTeamsDistributeSimdDirective::classof:
      return toClientReflType<bool>(C);
    case reflenums::clang__OMPTargetTeamsDistributeSimdDirective::classof:
      return toClientReflType<bool>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__StoredDeclsMap:
  switch (static_cast<reflenums::clang__StoredDeclsMap::memnames>(MemNum)) {
    case reflenums::clang__StoredDeclsMap:::
      return toClientReflType<>(C);
    case reflenums::clang__StoredDeclsMap:::
      return toClientReflType<>(C);
    case reflenums::clang__StoredDeclsMap:::
      return toClientReflType<>(C);
    case reflenums::clang__StoredDeclsMap:::
      return toClientReflType<>(C);
    case reflenums::clang__StoredDeclsMap:::
      return toClientReflType<>(C);
    case reflenums::clang__StoredDeclsMap:::
      return toClientReflType<>(C);
    case reflenums::clang__StoredDeclsMap:::
      return toClientReflType<>(C);
    case reflenums::clang__StoredDeclsMap:::
      return toClientReflType<>(C);
    case reflenums::clang__StoredDeclsMap:::
      return toClientReflType<>(C);
    case reflenums::clang__StoredDeclsMap:::
      return toClientReflType<>(C);
    case reflenums::clang__StoredDeclsMap:::
      return toClientReflType<>(C);
    case reflenums::clang__StoredDeclsMap:::
      return toClientReflType<>(C);
    case reflenums::clang__StoredDeclsMap:::
      return toClientReflType<>(C);
    case reflenums::clang__StoredDeclsMap::empty:
      return toClientReflType<bool>(C);
    case reflenums::clang__StoredDeclsMap::size:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__StoredDeclsMap::size:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__StoredDeclsMap::size:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__StoredDeclsMap::count:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__StoredDeclsMap::count:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__StoredDeclsMap::count:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__StoredDeclsMap::count:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__StoredDeclsMap::count:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__StoredDeclsMap::count:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__StoredDeclsMap::count:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__StoredDeclsMap::count:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__StoredDeclsMap::count:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__StoredDeclsMap::count:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__StoredDeclsMap::count:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__StoredDeclsMap::count:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__StoredDeclsMap::count:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__StoredDeclsMap::count:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__StoredDeclsMap::count:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__StoredDeclsMap::count:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__StoredDeclsMap::count:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__StoredDeclsMap::count:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__StoredDeclsMap::isPointerIntoBucketsArray:
      return toClientReflType<bool>(C);
    case reflenums::clang__StoredDeclsMap::getPointerIntoBucketsArray:
      return toClientReflType<const void *>(C);
    case reflenums::clang__StoredDeclsMap::getPointerIntoBucketsArray:
      return toClientReflType<const void *>(C);
    case reflenums::clang__StoredDeclsMap::getPointerIntoBucketsArray:
      return toClientReflType<const void *>(C);
    case reflenums::clang__StoredDeclsMap::getPointerIntoBucketsArray:
      return toClientReflType<const void *>(C);
    case reflenums::clang__StoredDeclsMap::getPointerIntoBucketsArray:
      return toClientReflType<const void *>(C);
    case reflenums::clang__StoredDeclsMap::getPointerIntoBucketsArray:
      return toClientReflType<const void *>(C);
    case reflenums::clang__StoredDeclsMap::getPointerIntoBucketsArray:
      return toClientReflType<const void *>(C);
    case reflenums::clang__StoredDeclsMap::getPointerIntoBucketsArray:
      return toClientReflType<const void *>(C);
    case reflenums::clang__StoredDeclsMap::getPointerIntoBucketsArray:
      return toClientReflType<const void *>(C);
    case reflenums::clang__StoredDeclsMap::getPointerIntoBucketsArray:
      return toClientReflType<const void *>(C);
    case reflenums::clang__StoredDeclsMap::getPointerIntoBucketsArray:
      return toClientReflType<const void *>(C);
    case reflenums::clang__StoredDeclsMap::getPointerIntoBucketsArray:
      return toClientReflType<const void *>(C);
    case reflenums::clang__StoredDeclsMap::getPointerIntoBucketsArray:
      return toClientReflType<const void *>(C);
    case reflenums::clang__StoredDeclsMap::getPointerIntoBucketsArray:
      return toClientReflType<const void *>(C);
    case reflenums::clang__StoredDeclsMap::getPointerIntoBucketsArray:
      return toClientReflType<const void *>(C);
    case reflenums::clang__StoredDeclsMap::getPointerIntoBucketsArray:
      return toClientReflType<const void *>(C);
    case reflenums::clang__StoredDeclsMap::getPointerIntoBucketsArray:
      return toClientReflType<const void *>(C);
    case reflenums::clang__StoredDeclsMap::getPointerIntoBucketsArray:
      return toClientReflType<const void *>(C);
    case reflenums::clang__StoredDeclsMap::getPointerIntoBucketsArray:
      return toClientReflType<const void *>(C);
    case reflenums::clang__StoredDeclsMap::getPointerIntoBucketsArray:
      return toClientReflType<const void *>(C);
    case reflenums::clang__StoredDeclsMap::getPointerIntoBucketsArray:
      return toClientReflType<const void *>(C);
    case reflenums::clang__StoredDeclsMap::getPointerIntoBucketsArray:
      return toClientReflType<const void *>(C);
    case reflenums::clang__StoredDeclsMap::getPointerIntoBucketsArray:
      return toClientReflType<const void *>(C);
    case reflenums::clang__StoredDeclsMap::getPointerIntoBucketsArray:
      return toClientReflType<const void *>(C);
    case reflenums::clang__StoredDeclsMap::getPointerIntoBucketsArray:
      return toClientReflType<const void *>(C);
    case reflenums::clang__StoredDeclsMap::getPointerIntoBucketsArray:
      return toClientReflType<const void *>(C);
    case reflenums::clang__StoredDeclsMap::getPointerIntoBucketsArray:
      return toClientReflType<const void *>(C);
    case reflenums::clang__StoredDeclsMap::getPointerIntoBucketsArray:
      return toClientReflType<const void *>(C);
    case reflenums::clang__StoredDeclsMap::getPointerIntoBucketsArray:
      return toClientReflType<const void *>(C);
    case reflenums::clang__StoredDeclsMap::getPointerIntoBucketsArray:
      return toClientReflType<const void *>(C);
    case reflenums::clang__StoredDeclsMap::getPointerIntoBucketsArray:
      return toClientReflType<const void *>(C);
    case reflenums::clang__StoredDeclsMap::getPointerIntoBucketsArray:
      return toClientReflType<const void *>(C);
    case reflenums::clang__StoredDeclsMap::getPointerIntoBucketsArray:
      return toClientReflType<const void *>(C);
    case reflenums::clang__StoredDeclsMap::getPointerIntoBucketsArray:
      return toClientReflType<const void *>(C);
    case reflenums::clang__StoredDeclsMap::getPointerIntoBucketsArray:
      return toClientReflType<const void *>(C);
    case reflenums::clang__StoredDeclsMap::getPointerIntoBucketsArray:
      return toClientReflType<const void *>(C);
    case reflenums::clang__StoredDeclsMap::getMemorySize:
      return toClientReflType<unsigned long>(C);
    case reflenums::clang__StoredDeclsMap::getMemorySize:
      return toClientReflType<unsigned long>(C);
    case reflenums::clang__StoredDeclsMap::getMemorySize:
      return toClientReflType<unsigned long>(C);
    case reflenums::clang__StoredDeclsMap::getMemorySize:
      return toClientReflType<unsigned long>(C);
    case reflenums::clang__StoredDeclsMap::getMemorySize:
      return toClientReflType<unsigned long>(C);
    case reflenums::clang__StoredDeclsMap:::
      return toClientReflType<>(C);
    case reflenums::clang__StoredDeclsMap:::
      return toClientReflType<>(C);
    case reflenums::clang__StoredDeclsMap:::
      return toClientReflType<>(C);
    case reflenums::clang__StoredDeclsMap:::
      return toClientReflType<>(C);
    case reflenums::clang__StoredDeclsMap:::
      return toClientReflType<>(C);
    case reflenums::clang__StoredDeclsMap:::
      return toClientReflType<>(C);
    case reflenums::clang__StoredDeclsMap:::
      return toClientReflType<>(C);
    case reflenums::clang__StoredDeclsMap:::
      return toClientReflType<>(C);
    case reflenums::clang__StoredDeclsMap:::
      return toClientReflType<>(C);
    case reflenums::clang__StoredDeclsMap:::
      return toClientReflType<>(C);
    case reflenums::clang__StoredDeclsMap:::
      return toClientReflType<>(C);
    case reflenums::clang__StoredDeclsMap:::
      return toClientReflType<>(C);
    case reflenums::clang__StoredDeclsMap:::
      return toClientReflType<>(C);
    case reflenums::clang__StoredDeclsMap:::
      return toClientReflType<>(C);
    case reflenums::clang__StoredDeclsMap:::
      return toClientReflType<>(C);
    case reflenums::clang__StoredDeclsMap:::
      return toClientReflType<>(C);
    case reflenums::clang__StoredDeclsMap:::
      return toClientReflType<>(C);
    case reflenums::clang__StoredDeclsMap:::
      return toClientReflType<>(C);
    case reflenums::clang__StoredDeclsMap:::
      return toClientReflType<>(C);
    case reflenums::clang__StoredDeclsMap:::
      return toClientReflType<>(C);
    case reflenums::clang__StoredDeclsMap:::
      return toClientReflType<>(C);
    case reflenums::clang__StoredDeclsMap:::
      return toClientReflType<>(C);
    case reflenums::clang__StoredDeclsMap:::
      return toClientReflType<>(C);
    case reflenums::clang__StoredDeclsMap:::
      return toClientReflType<>(C);
    case reflenums::clang__StoredDeclsMap:::
      return toClientReflType<>(C);
    case reflenums::clang__StoredDeclsMap:::
      return toClientReflType<>(C);
    case reflenums::clang__StoredDeclsMap:::
      return toClientReflType<>(C);
    case reflenums::clang__StoredDeclsMap:::
      return toClientReflType<>(C);
    case reflenums::clang__StoredDeclsMap:::
      return toClientReflType<>(C);
    case reflenums::clang__StoredDeclsMap:::
      return toClientReflType<>(C);
    case reflenums::clang__StoredDeclsMap:::
      return toClientReflType<>(C);
    case reflenums::clang__StoredDeclsMap:::
      return toClientReflType<>(C);
    case reflenums::clang__StoredDeclsMap:::
      return toClientReflType<>(C);
    case reflenums::clang__StoredDeclsMap:::
      return toClientReflType<>(C);
    case reflenums::clang__StoredDeclsMap:::
      return toClientReflType<>(C);
    case reflenums::clang__StoredDeclsMap:::
      return toClientReflType<>(C);
    case reflenums::clang__StoredDeclsMap:::
      return toClientReflType<>(C);
    case reflenums::clang__StoredDeclsMap:::
      return toClientReflType<>(C);
    case reflenums::clang__StoredDeclsMap::DestroyAll:
      return toClientReflType<void>(C);
    case reflenums::clang__StoredDeclsMap::DestroyAll:
      return toClientReflType<void>(C);
    case reflenums::clang__StoredDeclsMap::DestroyAll:
      return toClientReflType<void>(C);
    case reflenums::clang__StoredDeclsMap::DestroyAll:
      return toClientReflType<void>(C);
    case reflenums::clang__StoredDeclsMap::DestroyAll:
      return toClientReflType<void>(C);
    case reflenums::clang__StoredDeclsMap::DestroyAll:
      return toClientReflType<void>(C);
    case reflenums::clang__StoredDeclsMap::DestroyAll:
      return toClientReflType<void>(C);
    case reflenums::clang__StoredDeclsMap::DestroyAll:
      return toClientReflType<void>(C);
    case reflenums::clang__StoredDeclsMap::DestroyAll:
      return toClientReflType<void>(C);
    case reflenums::clang__StoredDeclsMap::DestroyAll:
      return toClientReflType<void>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_clang__DependentDiagnostic:
  switch (static_cast<reflenums::clang__DependentDiagnostic::memnames>(MemNum)) {
    case reflenums::clang__DependentDiagnostic:::
      return toClientReflType<>(C);
    case reflenums::clang__DependentDiagnostic:::
      return toClientReflType<>(C);
    case reflenums::clang__DependentDiagnostic:::
      return toClientReflType<>(C);
    case reflenums::clang__DependentDiagnostic::Create:
      return toClientReflType<class clang::DependentDiagnostic *>(C);
    case reflenums::clang__DependentDiagnostic::getKind:
      return toClientReflType<unsigned int>(C);
    case reflenums::clang__DependentDiagnostic::isAccessToMember:
      return toClientReflType<bool>(C);
    case reflenums::clang__DependentDiagnostic::getAccess:
      return toClientReflType<enum clang::AccessSpecifier>(C);
    case reflenums::clang__DependentDiagnostic::getAccessLoc:
      return toClientReflType<class clang::SourceLocation>(C);
    case reflenums::clang__DependentDiagnostic::getAccessTarget:
      return toClientReflType<class clang::NamedDecl *>(C);
    case reflenums::clang__DependentDiagnostic::getAccessNamingClass:
      return toClientReflType<class clang::NamedDecl *>(C);
    case reflenums::clang__DependentDiagnostic::getAccessBaseObjectType:
      return toClientReflType<class clang::QualType>(C);
    case reflenums::clang__DependentDiagnostic::getDiagnostic:
      return toClientReflType<const class clang::PartialDiagnostic &>(C);
    case reflenums::clang__DependentDiagnostic::getDiagnostic:
      return toClientReflType<const class clang::PartialDiagnostic &>(C);
    case reflenums::clang__DependentDiagnostic::getDiagnostic:
      return toClientReflType<const class clang::PartialDiagnostic &>(C);
    case reflenums::clang__DependentDiagnostic::getDiagnostic:
      return toClientReflType<const class clang::PartialDiagnostic &>(C);
    case reflenums::clang__DependentDiagnostic::getDiagnostic:
      return toClientReflType<const class clang::PartialDiagnostic &>(C);
    case reflenums::clang__DependentDiagnostic::getDiagnostic:
      return toClientReflType<const class clang::PartialDiagnostic &>(C);
    case reflenums::clang__DependentDiagnostic::getDiagnostic:
      return toClientReflType<const class clang::PartialDiagnostic &>(C);
    case reflenums::clang__DependentDiagnostic::getDiagnostic:
      return toClientReflType<const class clang::PartialDiagnostic &>(C);
    case reflenums::clang__DependentDiagnostic::getDiagnostic:
      return toClientReflType<const class clang::PartialDiagnostic &>(C);
    case reflenums::clang__DependentDiagnostic::getDiagnostic:
      return toClientReflType<const class clang::PartialDiagnostic &>(C);
    case reflenums::clang__DependentDiagnostic::getDiagnostic:
      return toClientReflType<const class clang::PartialDiagnostic &>(C);
    case reflenums::clang__DependentDiagnostic::getDiagnostic:
      return toClientReflType<const class clang::PartialDiagnostic &>(C);
    case reflenums::clang__DependentDiagnostic::getDiagnostic:
      return toClientReflType<const class clang::PartialDiagnostic &>(C);
    case reflenums::clang__DependentDiagnostic::getDiagnostic:
      return toClientReflType<const class clang::PartialDiagnostic &>(C);
    case reflenums::clang__DependentDiagnostic::getDiagnostic:
      return toClientReflType<const class clang::PartialDiagnostic &>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_reflcontainers__VectorStr:
  switch (static_cast<reflenums::reflcontainers__VectorStr::memnames>(MemNum)) {
    case reflenums::reflcontainers__VectorStr::_this_:
      if (IsPtr)
        return toClientReflType<reflcontainers::VectorStr *>(C);
      return toClientReflType<reflcontainers::VectorStr>(C);
    case reflenums::reflcontainers__VectorStr:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__VectorStr:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__VectorStr:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__VectorStr:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__VectorStr:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__VectorStr:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__VectorStr:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__VectorStr:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__VectorStr::clone:
      return toClientReflType<long>(C);
    case reflenums::reflcontainers__VectorStr::clone:
      return toClientReflType<long>(C);
    case reflenums::reflcontainers__VectorStr::clone:
      return toClientReflType<long>(C);
    case reflenums::reflcontainers__VectorStr::clone:
      return toClientReflType<long>(C);
    case reflenums::reflcontainers__VectorStr::clone:
      return toClientReflType<long>(C);
    case reflenums::reflcontainers__VectorStr::clone:
      return toClientReflType<long>(C);
    case reflenums::reflcontainers__VectorStr::size:
      return toClientReflType<unsigned long>(C);
    case reflenums::reflcontainers__VectorStr::empty:
      return toClientReflType<bool>(C);
    case reflenums::reflcontainers__VectorStr::clear:
      return toClientReflType<void>(C);
    case reflenums::reflcontainers__VectorStr::resize:
      return toClientReflType<void>(C);
    case reflenums::reflcontainers__VectorStr::capacity:
      return toClientReflType<unsigned long>(C);
    case reflenums::reflcontainers__VectorStr::reserve:
      return toClientReflType<void>(C);
    case reflenums::reflcontainers__VectorStr::shrink_to_fit:
      return toClientReflType<void>(C);
    case reflenums::reflcontainers__VectorStr::push_back:
      return toClientReflType<void>(C);
    case reflenums::reflcontainers__VectorStr::pop_back:
      return toClientReflType<void>(C);
    case reflenums::reflcontainers__VectorStr::dealloc:
      return toClientReflType<void>(C);
    case reflenums::reflcontainers__VectorStr::at:
      return toClientReflType<const char *>(C);
    case reflenums::reflcontainers__VectorStr::assign:
      return toClientReflType<void>(C);
    case reflenums::reflcontainers__VectorStr::front:
      return toClientReflType<const char *>(C);
    case reflenums::reflcontainers__VectorStr::back:
      return toClientReflType<const char *>(C);
    case reflenums::reflcontainers__VectorStr::back:
      return toClientReflType<const char *>(C);
    case reflenums::reflcontainers__VectorStr::back:
      return toClientReflType<const char *>(C);
    case reflenums::reflcontainers__VectorStr:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__VectorStr:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__VectorStr:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__VectorStr:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__VectorStr:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__VectorStr:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__VectorStr:::
      return toClientReflType<>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_reflcontainers__VectorInt:
  switch (static_cast<reflenums::reflcontainers__VectorInt::memnames>(MemNum)) {
    case reflenums::reflcontainers__VectorInt::_this_:
      if (IsPtr)
        return toClientReflType<reflcontainers::VectorInt *>(C);
      return toClientReflType<reflcontainers::VectorInt>(C);
    case reflenums::reflcontainers__VectorInt:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__VectorInt:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__VectorInt:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__VectorInt:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__VectorInt:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__VectorInt:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__VectorInt:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__VectorInt:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__VectorInt::clone:
      return toClientReflType<long>(C);
    case reflenums::reflcontainers__VectorInt::clone:
      return toClientReflType<long>(C);
    case reflenums::reflcontainers__VectorInt::clone:
      return toClientReflType<long>(C);
    case reflenums::reflcontainers__VectorInt::clone:
      return toClientReflType<long>(C);
    case reflenums::reflcontainers__VectorInt::clone:
      return toClientReflType<long>(C);
    case reflenums::reflcontainers__VectorInt::clone:
      return toClientReflType<long>(C);
    case reflenums::reflcontainers__VectorInt::size:
      return toClientReflType<unsigned long>(C);
    case reflenums::reflcontainers__VectorInt::empty:
      return toClientReflType<bool>(C);
    case reflenums::reflcontainers__VectorInt::clear:
      return toClientReflType<void>(C);
    case reflenums::reflcontainers__VectorInt::resize:
      return toClientReflType<void>(C);
    case reflenums::reflcontainers__VectorInt::capacity:
      return toClientReflType<unsigned long>(C);
    case reflenums::reflcontainers__VectorInt::reserve:
      return toClientReflType<void>(C);
    case reflenums::reflcontainers__VectorInt::shrink_to_fit:
      return toClientReflType<void>(C);
    case reflenums::reflcontainers__VectorInt::push_back:
      return toClientReflType<void>(C);
    case reflenums::reflcontainers__VectorInt::pop_back:
      return toClientReflType<void>(C);
    case reflenums::reflcontainers__VectorInt::dealloc:
      return toClientReflType<void>(C);
    case reflenums::reflcontainers__VectorInt::at:
      return toClientReflType<long>(C);
    case reflenums::reflcontainers__VectorInt::assign:
      return toClientReflType<void>(C);
    case reflenums::reflcontainers__VectorInt::front:
      return toClientReflType<long>(C);
    case reflenums::reflcontainers__VectorInt::back:
      return toClientReflType<long>(C);
    case reflenums::reflcontainers__VectorInt::back:
      return toClientReflType<long>(C);
    case reflenums::reflcontainers__VectorInt::back:
      return toClientReflType<long>(C);
    case reflenums::reflcontainers__VectorInt:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__VectorInt:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__VectorInt:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__VectorInt:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__VectorInt:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__VectorInt:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__VectorInt:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__VectorInt:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__VectorInt::assign1:
      return toClientReflType<void>(C);
    case reflenums::reflcontainers__VectorInt::push_back1:
      return toClientReflType<void>(C);
    case reflenums::reflcontainers__VectorInt::push_back1:
      return toClientReflType<void>(C);
    case reflenums::reflcontainers__VectorInt::push_back1:
      return toClientReflType<void>(C);
    case reflenums::reflcontainers__VectorInt::push_back1:
      return toClientReflType<void>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_reflcontainers__SetInt:
  switch (static_cast<reflenums::reflcontainers__SetInt::memnames>(MemNum)) {
    case reflenums::reflcontainers__SetInt::_this_:
      if (IsPtr)
        return toClientReflType<reflcontainers::SetInt *>(C);
      return toClientReflType<reflcontainers::SetInt>(C);
    case reflenums::reflcontainers__SetInt:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__SetInt:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__SetInt:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__SetInt:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__SetInt:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__SetInt:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__SetInt:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__SetInt:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__SetInt::clone:
      return toClientReflType<long>(C);
    case reflenums::reflcontainers__SetInt::clone:
      return toClientReflType<long>(C);
    case reflenums::reflcontainers__SetInt::clone:
      return toClientReflType<long>(C);
    case reflenums::reflcontainers__SetInt::clone:
      return toClientReflType<long>(C);
    case reflenums::reflcontainers__SetInt::clone:
      return toClientReflType<long>(C);
    case reflenums::reflcontainers__SetInt::clone:
      return toClientReflType<long>(C);
    case reflenums::reflcontainers__SetInt::size:
      return toClientReflType<unsigned long>(C);
    case reflenums::reflcontainers__SetInt::empty:
      return toClientReflType<bool>(C);
    case reflenums::reflcontainers__SetInt::clear:
      return toClientReflType<void>(C);
    case reflenums::reflcontainers__SetInt::contains:
      return toClientReflType<bool>(C);
    case reflenums::reflcontainers__SetInt::insert:
      return toClientReflType<bool>(C);
    case reflenums::reflcontainers__SetInt::erase:
      return toClientReflType<void>(C);
    case reflenums::reflcontainers__SetInt::at_ith:
      return toClientReflType<long>(C);
    case reflenums::reflcontainers__SetInt::dealloc:
      return toClientReflType<void>(C);
    case reflenums::reflcontainers__SetInt::dealloc:
      return toClientReflType<void>(C);
    case reflenums::reflcontainers__SetInt::dealloc:
      return toClientReflType<void>(C);
    case reflenums::reflcontainers__SetInt:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__SetInt:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__SetInt:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__SetInt:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__SetInt:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__SetInt:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__SetInt:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__SetInt:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__SetInt:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__SetInt:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__SetInt::contains1:
      return toClientReflType<bool>(C);
    case reflenums::reflcontainers__SetInt::insert1:
      return toClientReflType<bool>(C);
    case reflenums::reflcontainers__SetInt::erase1:
      return toClientReflType<void>(C);
    case reflenums::reflcontainers__SetInt::erase1:
      return toClientReflType<void>(C);
    case reflenums::reflcontainers__SetInt::erase1:
      return toClientReflType<void>(C);
    case reflenums::reflcontainers__SetInt::erase1:
      return toClientReflType<void>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_reflcontainers__SetStr:
  switch (static_cast<reflenums::reflcontainers__SetStr::memnames>(MemNum)) {
    case reflenums::reflcontainers__SetStr::_this_:
      if (IsPtr)
        return toClientReflType<reflcontainers::SetStr *>(C);
      return toClientReflType<reflcontainers::SetStr>(C);
    case reflenums::reflcontainers__SetStr:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__SetStr:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__SetStr:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__SetStr:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__SetStr:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__SetStr:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__SetStr:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__SetStr:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__SetStr::clone:
      return toClientReflType<long>(C);
    case reflenums::reflcontainers__SetStr::clone:
      return toClientReflType<long>(C);
    case reflenums::reflcontainers__SetStr::clone:
      return toClientReflType<long>(C);
    case reflenums::reflcontainers__SetStr::clone:
      return toClientReflType<long>(C);
    case reflenums::reflcontainers__SetStr::clone:
      return toClientReflType<long>(C);
    case reflenums::reflcontainers__SetStr::clone:
      return toClientReflType<long>(C);
    case reflenums::reflcontainers__SetStr::size:
      return toClientReflType<unsigned long>(C);
    case reflenums::reflcontainers__SetStr::empty:
      return toClientReflType<bool>(C);
    case reflenums::reflcontainers__SetStr::clear:
      return toClientReflType<void>(C);
    case reflenums::reflcontainers__SetStr::contains:
      return toClientReflType<bool>(C);
    case reflenums::reflcontainers__SetStr::insert:
      return toClientReflType<bool>(C);
    case reflenums::reflcontainers__SetStr::erase:
      return toClientReflType<void>(C);
    case reflenums::reflcontainers__SetStr::at_ith:
      return toClientReflType<const char *>(C);
    case reflenums::reflcontainers__SetStr::dealloc:
      return toClientReflType<void>(C);
    case reflenums::reflcontainers__SetStr::dealloc:
      return toClientReflType<void>(C);
    case reflenums::reflcontainers__SetStr::dealloc:
      return toClientReflType<void>(C);
    case reflenums::reflcontainers__SetStr:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__SetStr:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__SetStr:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__SetStr:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__SetStr:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__SetStr:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__SetStr:::
      return toClientReflType<>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_reflcontainers__IntIntPair:
  switch (static_cast<reflenums::reflcontainers__IntIntPair::memnames>(MemNum)) {
    case reflenums::reflcontainers__IntIntPair:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__IntIntPair::first:
      return toClientReflType<long>(C);
    case reflenums::reflcontainers__IntIntPair::second:
      return toClientReflType<long>(C);
    case reflenums::reflcontainers__IntIntPair::second:
      return toClientReflType<long>(C);
    case reflenums::reflcontainers__IntIntPair::second:
      return toClientReflType<long>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_reflcontainers__IntStrPair:
  switch (static_cast<reflenums::reflcontainers__IntStrPair::memnames>(MemNum)) {
    case reflenums::reflcontainers__IntStrPair:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__IntStrPair::first:
      return toClientReflType<long>(C);
    case reflenums::reflcontainers__IntStrPair::second:
      return toClientReflType<const char *>(C);
    case reflenums::reflcontainers__IntStrPair::second:
      return toClientReflType<const char *>(C);
    case reflenums::reflcontainers__IntStrPair::second:
      return toClientReflType<const char *>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_reflcontainers__StrIntPair:
  switch (static_cast<reflenums::reflcontainers__StrIntPair::memnames>(MemNum)) {
    case reflenums::reflcontainers__StrIntPair:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__StrIntPair::first:
      return toClientReflType<const char *>(C);
    case reflenums::reflcontainers__StrIntPair::second:
      return toClientReflType<long>(C);
    case reflenums::reflcontainers__StrIntPair::second:
      return toClientReflType<long>(C);
    case reflenums::reflcontainers__StrIntPair::second:
      return toClientReflType<long>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_reflcontainers__StrStrPair:
  switch (static_cast<reflenums::reflcontainers__StrStrPair::memnames>(MemNum)) {
    case reflenums::reflcontainers__StrStrPair:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__StrStrPair::first:
      return toClientReflType<const char *>(C);
    case reflenums::reflcontainers__StrStrPair::second:
      return toClientReflType<const char *>(C);
    case reflenums::reflcontainers__StrStrPair::second:
      return toClientReflType<const char *>(C);
    case reflenums::reflcontainers__StrStrPair::second:
      return toClientReflType<const char *>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_reflcontainers__MapIntStr:
  switch (static_cast<reflenums::reflcontainers__MapIntStr::memnames>(MemNum)) {
    case reflenums::reflcontainers__MapIntStr::_this_:
      if (IsPtr)
        return toClientReflType<reflcontainers::MapIntStr *>(C);
      return toClientReflType<reflcontainers::MapIntStr>(C);
    case reflenums::reflcontainers__MapIntStr:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapIntStr:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapIntStr:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapIntStr:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapIntStr:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapIntStr:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapIntStr:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapIntStr:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapIntStr:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapIntStr:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapIntStr:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapIntStr:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapIntStr:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapIntStr:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapIntStr:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapIntStr::clone:
      return toClientReflType<long>(C);
    case reflenums::reflcontainers__MapIntStr::clone:
      return toClientReflType<long>(C);
    case reflenums::reflcontainers__MapIntStr::clone:
      return toClientReflType<long>(C);
    case reflenums::reflcontainers__MapIntStr::clone:
      return toClientReflType<long>(C);
    case reflenums::reflcontainers__MapIntStr::size:
      return toClientReflType<unsigned long>(C);
    case reflenums::reflcontainers__MapIntStr::empty:
      return toClientReflType<bool>(C);
    case reflenums::reflcontainers__MapIntStr::clear:
      return toClientReflType<void>(C);
    case reflenums::reflcontainers__MapIntStr::at_ith:
      return toClientReflType<struct reflcontainers::IntStrPair>(C);
    case reflenums::reflcontainers__MapIntStr::at_ith_key:
      return toClientReflType<long>(C);
    case reflenums::reflcontainers__MapIntStr::at_ith_val:
      return toClientReflType<const char *>(C);
    case reflenums::reflcontainers__MapIntStr::dealloc:
      return toClientReflType<void>(C);
    case reflenums::reflcontainers__MapIntStr::contains:
      return toClientReflType<bool>(C);
    case reflenums::reflcontainers__MapIntStr::at:
      return toClientReflType<const char *>(C);
    case reflenums::reflcontainers__MapIntStr::assign:
      return toClientReflType<void>(C);
    case reflenums::reflcontainers__MapIntStr::erase:
      return toClientReflType<void>(C);
    case reflenums::reflcontainers__MapIntStr::erase:
      return toClientReflType<void>(C);
    case reflenums::reflcontainers__MapIntStr::erase:
      return toClientReflType<void>(C);
    case reflenums::reflcontainers__MapIntStr:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapIntStr:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapIntStr:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapIntStr:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapIntStr:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapIntStr:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapIntStr:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapIntStr:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapIntStr:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapIntStr:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapIntStr:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapIntStr:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapIntStr:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapIntStr:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapIntStr:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapIntStr::erase1:
      return toClientReflType<void>(C);
    case reflenums::reflcontainers__MapIntStr::contains1:
      return toClientReflType<bool>(C);
    case reflenums::reflcontainers__MapIntStr::at1:
      return toClientReflType<const char *>(C);
    case reflenums::reflcontainers__MapIntStr::assign1:
      return toClientReflType<void>(C);
    case reflenums::reflcontainers__MapIntStr::assign1:
      return toClientReflType<void>(C);
    case reflenums::reflcontainers__MapIntStr::assign1:
      return toClientReflType<void>(C);
    case reflenums::reflcontainers__MapIntStr::assign1:
      return toClientReflType<void>(C);
    case reflenums::reflcontainers__MapIntStr::assign1:
      return toClientReflType<void>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_reflcontainers__MapStrInt:
  switch (static_cast<reflenums::reflcontainers__MapStrInt::memnames>(MemNum)) {
    case reflenums::reflcontainers__MapStrInt::_this_:
      if (IsPtr)
        return toClientReflType<reflcontainers::MapStrInt *>(C);
      return toClientReflType<reflcontainers::MapStrInt>(C);
    case reflenums::reflcontainers__MapStrInt:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapStrInt:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapStrInt:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapStrInt:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapStrInt:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapStrInt:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapStrInt:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapStrInt:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapStrInt:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapStrInt:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapStrInt:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapStrInt:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapStrInt:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapStrInt:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapStrInt:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapStrInt::clone:
      return toClientReflType<long>(C);
    case reflenums::reflcontainers__MapStrInt::clone:
      return toClientReflType<long>(C);
    case reflenums::reflcontainers__MapStrInt::clone:
      return toClientReflType<long>(C);
    case reflenums::reflcontainers__MapStrInt::clone:
      return toClientReflType<long>(C);
    case reflenums::reflcontainers__MapStrInt::size:
      return toClientReflType<unsigned long>(C);
    case reflenums::reflcontainers__MapStrInt::empty:
      return toClientReflType<bool>(C);
    case reflenums::reflcontainers__MapStrInt::clear:
      return toClientReflType<void>(C);
    case reflenums::reflcontainers__MapStrInt::at_ith:
      return toClientReflType<struct reflcontainers::StrIntPair>(C);
    case reflenums::reflcontainers__MapStrInt::at_ith_key:
      return toClientReflType<const char *>(C);
    case reflenums::reflcontainers__MapStrInt::at_ith_val:
      return toClientReflType<long>(C);
    case reflenums::reflcontainers__MapStrInt::dealloc:
      return toClientReflType<void>(C);
    case reflenums::reflcontainers__MapStrInt::contains:
      return toClientReflType<bool>(C);
    case reflenums::reflcontainers__MapStrInt::at:
      return toClientReflType<long>(C);
    case reflenums::reflcontainers__MapStrInt::assign:
      return toClientReflType<void>(C);
    case reflenums::reflcontainers__MapStrInt::erase:
      return toClientReflType<void>(C);
    case reflenums::reflcontainers__MapStrInt::erase:
      return toClientReflType<void>(C);
    case reflenums::reflcontainers__MapStrInt::erase:
      return toClientReflType<void>(C);
    case reflenums::reflcontainers__MapStrInt:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapStrInt:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapStrInt:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapStrInt:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapStrInt:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapStrInt:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapStrInt:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapStrInt:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapStrInt:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapStrInt::assign1:
      return toClientReflType<void>(C);
    case reflenums::reflcontainers__MapStrInt::assign1:
      return toClientReflType<void>(C);
    case reflenums::reflcontainers__MapStrInt::assign1:
      return toClientReflType<void>(C);
    case reflenums::reflcontainers__MapStrInt::assign1:
      return toClientReflType<void>(C);
    case reflenums::reflcontainers__MapStrInt::assign1:
      return toClientReflType<void>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_reflcontainers__MapStrStr:
  switch (static_cast<reflenums::reflcontainers__MapStrStr::memnames>(MemNum)) {
    case reflenums::reflcontainers__MapStrStr::_this_:
      if (IsPtr)
        return toClientReflType<reflcontainers::MapStrStr *>(C);
      return toClientReflType<reflcontainers::MapStrStr>(C);
    case reflenums::reflcontainers__MapStrStr:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapStrStr:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapStrStr:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapStrStr:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapStrStr:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapStrStr:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapStrStr:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapStrStr:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapStrStr:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapStrStr:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapStrStr:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapStrStr:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapStrStr:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapStrStr:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapStrStr:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapStrStr::clone:
      return toClientReflType<long>(C);
    case reflenums::reflcontainers__MapStrStr::clone:
      return toClientReflType<long>(C);
    case reflenums::reflcontainers__MapStrStr::clone:
      return toClientReflType<long>(C);
    case reflenums::reflcontainers__MapStrStr::clone:
      return toClientReflType<long>(C);
    case reflenums::reflcontainers__MapStrStr::size:
      return toClientReflType<unsigned long>(C);
    case reflenums::reflcontainers__MapStrStr::empty:
      return toClientReflType<bool>(C);
    case reflenums::reflcontainers__MapStrStr::clear:
      return toClientReflType<void>(C);
    case reflenums::reflcontainers__MapStrStr::at_ith:
      return toClientReflType<struct reflcontainers::StrStrPair>(C);
    case reflenums::reflcontainers__MapStrStr::at_ith_key:
      return toClientReflType<const char *>(C);
    case reflenums::reflcontainers__MapStrStr::at_ith_val:
      return toClientReflType<const char *>(C);
    case reflenums::reflcontainers__MapStrStr::dealloc:
      return toClientReflType<void>(C);
    case reflenums::reflcontainers__MapStrStr::contains:
      return toClientReflType<bool>(C);
    case reflenums::reflcontainers__MapStrStr::at:
      return toClientReflType<const char *>(C);
    case reflenums::reflcontainers__MapStrStr::assign:
      return toClientReflType<void>(C);
    case reflenums::reflcontainers__MapStrStr::erase:
      return toClientReflType<void>(C);
    case reflenums::reflcontainers__MapStrStr::erase:
      return toClientReflType<void>(C);
    case reflenums::reflcontainers__MapStrStr::erase:
      return toClientReflType<void>(C);
    case reflenums::reflcontainers__MapStrStr:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapStrStr:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapStrStr:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapStrStr:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapStrStr:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapStrStr:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapStrStr:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapStrStr:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapStrStr:::
      return toClientReflType<>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
case reflenums::RK_reflcontainers__MapIntInt:
  switch (static_cast<reflenums::reflcontainers__MapIntInt::memnames>(MemNum)) {
    case reflenums::reflcontainers__MapIntInt::_this_:
      if (IsPtr)
        return toClientReflType<reflcontainers::MapIntInt *>(C);
      return toClientReflType<reflcontainers::MapIntInt>(C);
    case reflenums::reflcontainers__MapIntInt:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapIntInt:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapIntInt:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapIntInt:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapIntInt:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapIntInt:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapIntInt:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapIntInt:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapIntInt:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapIntInt:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapIntInt:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapIntInt:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapIntInt:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapIntInt:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapIntInt:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapIntInt::clone:
      return toClientReflType<long>(C);
    case reflenums::reflcontainers__MapIntInt::clone:
      return toClientReflType<long>(C);
    case reflenums::reflcontainers__MapIntInt::clone:
      return toClientReflType<long>(C);
    case reflenums::reflcontainers__MapIntInt::clone:
      return toClientReflType<long>(C);
    case reflenums::reflcontainers__MapIntInt::size:
      return toClientReflType<unsigned long>(C);
    case reflenums::reflcontainers__MapIntInt::empty:
      return toClientReflType<bool>(C);
    case reflenums::reflcontainers__MapIntInt::clear:
      return toClientReflType<void>(C);
    case reflenums::reflcontainers__MapIntInt::at_ith:
      return toClientReflType<struct reflcontainers::IntIntPair>(C);
    case reflenums::reflcontainers__MapIntInt::at_ith_key:
      return toClientReflType<long>(C);
    case reflenums::reflcontainers__MapIntInt::at_ith_val:
      return toClientReflType<long>(C);
    case reflenums::reflcontainers__MapIntInt::dealloc:
      return toClientReflType<void>(C);
    case reflenums::reflcontainers__MapIntInt::contains:
      return toClientReflType<bool>(C);
    case reflenums::reflcontainers__MapIntInt::at:
      return toClientReflType<long>(C);
    case reflenums::reflcontainers__MapIntInt::assign:
      return toClientReflType<void>(C);
    case reflenums::reflcontainers__MapIntInt::erase:
      return toClientReflType<void>(C);
    case reflenums::reflcontainers__MapIntInt::erase:
      return toClientReflType<void>(C);
    case reflenums::reflcontainers__MapIntInt::erase:
      return toClientReflType<void>(C);
    case reflenums::reflcontainers__MapIntInt:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapIntInt:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapIntInt:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapIntInt:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapIntInt:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapIntInt:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapIntInt:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapIntInt:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapIntInt:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapIntInt:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapIntInt:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapIntInt:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapIntInt:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapIntInt:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapIntInt:::
      return toClientReflType<>(C);
    case reflenums::reflcontainers__MapIntInt::erase1:
      return toClientReflType<void>(C);
    case reflenums::reflcontainers__MapIntInt::contains1:
      return toClientReflType<bool>(C);
    case reflenums::reflcontainers__MapIntInt::at1:
      return toClientReflType<long>(C);
    case reflenums::reflcontainers__MapIntInt::assign1:
      return toClientReflType<void>(C);
    case reflenums::reflcontainers__MapIntInt::assign2:
      return toClientReflType<void>(C);
    case reflenums::reflcontainers__MapIntInt::assign3:
      return toClientReflType<void>(C);
    case reflenums::reflcontainers__MapIntInt::assign3:
      return toClientReflType<void>(C);
    case reflenums::reflcontainers__MapIntInt::assign3:
      return toClientReflType<void>(C);
    case reflenums::reflcontainers__MapIntInt::assign3:
      return toClientReflType<void>(C);
    case reflenums::reflcontainers__MapIntInt::assign3:
      return toClientReflType<void>(C);
    default:
      llvm_unreachable("Unhandled mem");
  }
